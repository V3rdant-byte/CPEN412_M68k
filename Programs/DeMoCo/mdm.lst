680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Jan 2024      Time: 22:37:31          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\MDM.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2C76      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\MD.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DM.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  674          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  58FE      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @md_1.L
00000AB4  624E      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @md_2.L
00000ADC  6252      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @md_3.L
00000AFA  6268      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @md_4.L
00000B06  626A      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0803  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0803 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  58BC      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0803 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  5702      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0803 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  58FE      
00000D14  49F9 0803 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @md_5.L
00000D1E  626C      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @md_6.L
00000D32  6284      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  3860      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @md_7.L
00000D72  62A8      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @md_8.L
00000DAA  62D0      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @md_9.L
00000DF2  62F8      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @md_10.L
00000E48  6320      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @md_11.L
00000EAC  6348      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  58FE      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  57F0      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @md_12.L
00000EF4  6370      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @md_5.L
00000EFE  626C      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @md_13.L
00000F20  63AA      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @md_14.L
00000F42  63B2      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @md_15.L
00000F58  63B8      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @md_1.L
00000FB2  624E      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  58FE      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @md_16.L
00000FDE  63BC      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @md_5.L
00000FE8  626C      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @md_17.L
00000FFC  63D0      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @md_18.L
00001010  63E6      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @md_19.L
00001030  63FA      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  58FE      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0803 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @md_20.L
00001078  642A      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  58D2      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  5724      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  57F0      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @md_21.L
000011A0  645A      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @md_22.L
000011AE  6480      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0803 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  58FE      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @md_23.L
000011E6  64A2      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @md_24.L
000011F0  64BE      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @md_25.L
000011FA  6504      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @md_26.L
0000121C  6516      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  585C      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @md_27.L
000012BA  6528      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @md_28.L
000012DE  655C      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  58FE      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0803 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  58BC      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  57F0      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  58FE      
0000136E  49F9 0803 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0803 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0803 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0803 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @md_29.L
000013B2  6582      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  5888      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0803 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @md_14.L
0000140E  63B2      
00001410  4879 0803 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  5888      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0803 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  58BC      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @md_30.L
00001448  658A      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  58BC      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @md_15.L
0000146E  63B8      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  58BC      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0803 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @md_31.L
000014C2  658C      
000014C4  4879 0803 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  5888      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @md_32.L
000014E8  658E      
000014EA  4879 0803 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  5888      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0803 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  58BC      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @md_33.L
00001526  6592      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  5702      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0803 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0803 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @md_34.L
00001558  6594      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0803 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0803 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @md_35.L
00001570  65B0      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0803 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0803 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @md_36.L
00001588  65CA      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0803 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0803 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @md_37.L
000015A0  65E4      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0803 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0803 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @md_38.L
000015B8  65FE      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0803 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0803 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @md_39.L
000015D0  6618      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0803 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0803 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @md_40.L
000015E8  6632      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0803 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0803 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0803 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @md_41.L
00001616  664C      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0803 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @md_42.L
00001628  6666      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0803 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @md_43.L
00001638  6684      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @md_44.L
0000164C  66A6      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @md_45.L
00001656  66B8      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0803 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @md_46.L
0000179A  66BE      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0803 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0803 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  3860      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0803 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @md_47.L
000017CC  66CE      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @md_48.L
000017D8  66D2      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @md_1.L
000017E2  624E      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0803 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @md_49.L
00001824  66E0      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  58FE      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @md_50.L
00001842  66EC      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @md_51.L
0000184C  670C      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @md_52.L
0000185A  6728      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @md_53.L
00001864  6754      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  58FE      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  585C      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  585C      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @md_54.L
000018DC  6774      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @md_55.L
000018F0  67A0      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0803 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0803 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0803 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0803 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0803 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0803 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0803 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0803 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @md_56.L
0000198A  67AA      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @md_57.L
0000199E  67D8      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0803 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0803 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0803 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0803 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0803 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0803 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0803 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0803 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  585C      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @md_58.L
00001A4E  67E2      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0803 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @md_59.L
00001A66  67F0      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  585C      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @md_60.L
00001AA4  6808      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0803 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @md_59.L
00001ABC  67F0      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @md_61.L
00001ADC  6818      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0803 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @md_62.L
00001B04  6820      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0803 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @md_63.L
00001B1E  6828      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  58FE      
00001B3A  47F9 0803 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0803 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @md_64.L
00001B74  6864      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @md_65.L
00001B7E  688A      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @md_66.L
00001B8A  68AE      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0803 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0803 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  3860      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @md_67.L
00001BFC  68C4      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0803 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @md_68.L
00001C0E  68D4      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @md_1.L
00001C1E  624E      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  58FE      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0803 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @md_69.L
00001C68  68DC      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @md_70.L
00001C72  68EE      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @md_71.L
00001C7E  6902      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0803 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0803 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @md_67.L
00001CBA  68C4      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @md_1.L
00001CCA  624E      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  58FE      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @md_72.L
00001CEC  6918      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @md_73.L
00001D20  6936      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0803 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0803 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0803 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0803 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0803 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0803 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @md_74.L
00001D92  6952      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @md_75.L
00001D9E  6970      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  58FE      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @md_76.L
00001DC2  698E      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @md_73.L
00001DF6  6936      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0803 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0803 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0803 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @md_77.L
00001E36  69AC      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @md_78.L
00001E42  69CA      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0803 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0803 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0803 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0803 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0803 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0803 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0803 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0803 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0803 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0803 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0803 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0803 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  58FE      
00001F94  47F9 0803 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @md_79.L
00001FC0  69EA      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @md_80.L
00001FCE  6A06      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @md_81.L
00001FF4  6A1E      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @md_82.L
0000200A  6A54      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0803 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @md_83.L
00002036  6A9C      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0803 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  3860      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0803 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @md_84.L
00002082  6AD4      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0803 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @md_1.L
000020A2  624E      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  58FE      
000020CA  47F9 0803 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @md_85.L
000020F6  6B0C      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @md_86.L
00002104  6B28      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0803 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @md_87.L
0000213A  6B40      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @md_88.L
00002162  6B76      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0803 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @md_1.L
0000217A  624E      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0803 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  58FE      
000021A6  49F9 0803 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @md_89.L
000021B2  6B9C      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @md_90.L
000021BC  6BB0      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @md_91.L
000021C6  6BC6      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0803 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0803 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0803 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0803 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0803 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @md_52.L
0000223A  6728      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @md_92.L
00002244  6BE0      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @md_93.L
0000225C  6C08      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  58FE      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @md_94.L
00002272  6C22      
00002274  4EB9 0000 3598          jsr       _printf
00002278  58FE      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  58D2      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @md_95.L
000022B4  6C42      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  58FE      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  58D2      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  58D2      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @md_96.L
00002330  6C64      
00002332  4EB9 0000 3699          jsr       _printf
00002336  58FE      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  58D2      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  58D2      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  58FE      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @md_97.L,A0
000023CA  6C86      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @md_98.L
000023D8  6CCA      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @md_99.L
000023E8  6CE8      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @md_100.L
000023F2  6D2C      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @md_101.L
000023FC  6D64      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @md_102.L
00002406  6D9E      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @md_103.L
00002410  6DC6      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @md_104.L
0000241A  6DF8      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @md_105.L
00002424  6E24      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0803 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @md_106.L
00002434  6E4E      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @md_107.L
0000243E  6E88      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @md_108.L
00002448  6EC0      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @md_109.L
00002452  6EEE      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @md_110.L
0000245C  6F28      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @md_111.L
00002466  6F54      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @md_112.L
00002470  6F86      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @md_113.L
0000247A  6FA6      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @md_114.L
00002484  6FCE      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @md_115.L
0000248E  7004      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  58FE      
000024AA  47F9 0803 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0803 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0803 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @md_116.L
000024C4  703C      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  58D2      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @md_117.L
00002524  7040      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @md_118.L
0000252E  7058      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0803 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  58D2      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0803 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @md_119.L
00002618  7086      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @md_120.L
00002638  70B0      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @md_51.L
00002642  670C      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0803 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @md_121.L
00002656  70C6      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @md_122.L
00002660  70FA      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @md_123.L
00002696  711E      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @md_124.L
000026A0  7134      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @md_125.L
000026AA  714E      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @md_126.L
000026D4  7178      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @md_124.L
000026DE  7134      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @md_117.L
000026E8  7040      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @md_118.L
000026F2  7058      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @md_127.L
0000271C  718E      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  58FE      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @md_128.L
0000272E  71AA      
00002730  4EB9 0000 4184          jsr       _printf
00002734  58FE      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @md_129.L
00002748  71B0      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  58FE      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @md_130.L
0000275A  71C8      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  58FE      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @md_131.L
000027AC  71EC      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @md_132.L
000027CA  722C      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @md_133.L
000027D8  7242      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @md_134.L
000027E6  724E      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @md_135.L
000027F4  725E      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @md_136.L
00002802  7272      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @md_137.L
00002810  7282      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @md_138.L
0000281E  7294      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @md_139.L
0000282C  72A6      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @md_140.L
0000283A  72BA      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @md_141.L
00002848  72CC      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4354          pea       @md_142.L
0000285C  72DA      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  58FE      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @md_143.L
00002874  72F6      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  58FE      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getch
00002882  5820      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  4E56 FFF4 4388          link      A6,#-12
000028A6  48E7 3F3C 4389          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000028AA  45F9 0000 4390          lea       _printf.L,A2
000028AE  58FE      
000028B0  4BF8 0BA6 4391          lea       _FlushKeyboard.L,A5
                    4392   ; register unsigned int i ;
                    4393   ; unsigned int start = 0 ;
000028B4  387C 0000 4394          move.w    #0,A4
                    4395   ; unsigned int end = 0 ;
000028B8  367C 0000 4396          move.w    #0,A3
                    4397   ; char input_char;
                    4398   ; unsigned long int data;
                    4399   ; unsigned char *byteptr;
                    4400   ; unsigned short int *wordptr;
                    4401   ; unsigned int *longptr;
                    4402   ; unsigned int counter = 2000;
000028BC  263C 0000 4403          move.l    #2000,D3
000028C0  07D0      
                    4404   ; unsigned char bytedata;
                    4405   ; unsigned short int worddata;
                    4406   ; unsigned char *mem_byteptr;
                    4407   ; // TODO
                    4408   ; // test data pattern
                    4409   ; // for (mem_byteptr = 0x08020000; mem_byteptr < 0x08030000; mem_byteptr++) // populating every two addresses for test purposes
                    4410   ; // {
                    4411   ; //     *mem_byteptr = 0; // set every byte in memory to zero
                    4412   ; // }
                    4413   ; // printf("Cleared memory\n");
                    4414   ; FlushKeyboard();
000028C2  4E95      4415          jsr       (A5)
                    4416   ; do{
                    4417   MemoryTest_1:
                    4418   ; printf("\r\nstart Address from 0x08020000 to 0x08030000): ");
000028C4  4879 0000 4419          pea       @md_144.L
000028C8  7314      
000028CA  4E92      4420          jsr       (A2)
000028CC  584F      4421          addq.w    #4,A7
                    4422   ; start = Get8HexDigits(0);
000028CE  42A7      4423          clr.l     -(A7)
000028D0  4EB8 0CA4 4424          jsr       _Get8HexDigits
000028D4  584F      4425          addq.w    #4,A7
000028D6  2840      4426          move.l    D0,A4
000028D8  200C      4427          move.l    A4,D0
000028DA  0C80 0802 4428          cmp.l     #134348800,D0
000028DE  0000      
000028E0  65E2      4429          blo       MemoryTest_1
000028E2  200C      4430          move.l    A4,D0
000028E4  0C80 0803 4431          cmp.l     #134414336,D0
000028E8  0000      
000028EA  62D8      4432          bhi       MemoryTest_1
                    4433   ; } while (0x08020000 > start || 0x08030000 < start);
                    4434   ; do{
                    4435   MemoryTest_3:
                    4436   ; printf("\r\nend Address from 0x08020000 to 0x08030000): ");
000028EC  4879 0000 4437          pea       @md_145.L
000028F0  7346      
000028F2  4E92      4438          jsr       (A2)
000028F4  584F      4439          addq.w    #4,A7
                    4440   ; end = Get8HexDigits(0);
000028F6  42A7      4441          clr.l     -(A7)
000028F8  4EB8 0CA4 4442          jsr       _Get8HexDigits
000028FC  584F      4443          addq.w    #4,A7
000028FE  2640      4444          move.l    D0,A3
00002900  200C      4445          move.l    A4,D0
00002902  B08B      4446          cmp.l     A3,D0
00002904  62E6      4447          bhi       MemoryTest_3
00002906  200B      4448          move.l    A3,D0
00002908  0C80 0803 4449          cmp.l     #134414336,D0
0000290C  0000      
0000290E  62DC      4450          bhi       MemoryTest_3
                    4451   ; } while (start > end || end > 0x08030000);
                    4452   ; while(1){
                    4453   MemoryTest_5:
                    4454   ; input_char = ' ';
00002910  7820      4455          moveq     #32,D4
                    4456   ; FlushKeyboard();
00002912  4E95      4457          jsr       (A5)
                    4458   ; printf("\r\nChoose data pattern: \r\n1: 55\r\n2: AA\r\n3: FF\r\n4: 00");
00002914  4879 0000 4459          pea       @md_146.L
00002918  7376      
0000291A  4E92      4460          jsr       (A2)
0000291C  584F      4461          addq.w    #4,A7
                    4462   ; printf("\r\n#");
0000291E  4879 0000 4463          pea       @md_116.L
00002922  703C      
00002924  4E92      4464          jsr       (A2)
00002926  584F      4465          addq.w    #4,A7
                    4466   ; input_char = (char) _getch();
00002928  4EB8 0B68 4467          jsr       __getch
0000292C  1800      4468          move.b    D0,D4
                    4469   ; if(input_char == (char)('1')){
0000292E  0C04 0031 4470          cmp.b     #49,D4
00002932  6604      4471          bne.s     MemoryTest_8
                    4472   ; data = 0x55;
00002934  7455      4473          moveq     #85,D2
                    4474   ; break;
00002936  6028      4475          bra.s     MemoryTest_7
                    4476   MemoryTest_8:
                    4477   ; }
                    4478   ; else if(input_char == (char)('2')){
00002938  0C04 0032 4479          cmp.b     #50,D4
0000293C  6608      4480          bne.s     MemoryTest_10
                    4481   ; data = 0xAA;
0000293E  243C 0000 4482          move.l    #170,D2
00002942  00AA      
                    4483   ; break;
00002944  601A      4484          bra.s     MemoryTest_7
                    4485   MemoryTest_10:
                    4486   ; }
                    4487   ; else if(input_char == (char)('3')){
00002946  0C04 0033 4488          cmp.b     #51,D4
0000294A  6608      4489          bne.s     MemoryTest_12
                    4490   ; data = 0xFF;
0000294C  243C 0000 4491          move.l    #255,D2
00002950  00FF      
                    4492   ; break;
00002952  600C      4493          bra.s     MemoryTest_7
                    4494   MemoryTest_12:
                    4495   ; }
                    4496   ; else if(input_char == (char)('4')){
00002954  0C04 0034 4497          cmp.b     #52,D4
00002958  6604      4498          bne.s     MemoryTest_14
                    4499   ; data = 0x00;
0000295A  4282      4500          clr.l     D2
                    4501   ; break;
0000295C  6002      4502          bra.s     MemoryTest_7
                    4503   MemoryTest_14:
0000295E  60B0      4504          bra       MemoryTest_5
                    4505   MemoryTest_7:
                    4506   ; }
                    4507   ; }
                    4508   ; printf("\r\ndata: %x", data);
00002960  2F02      4509          move.l    D2,-(A7)
00002962  4879 0000 4510          pea       @md_147.L
00002966  73AA      
00002968  4E92      4511          jsr       (A2)
0000296A  504F      4512          addq.w    #8,A7
                    4513   ; // test data size selection
                    4514   ; while(1)    {
                    4515   MemoryTest_16:
                    4516   ; input_char = ' ';
0000296C  7820      4517          moveq     #32,D4
                    4518   ; FlushKeyboard();
0000296E  4E95      4519          jsr       (A5)
                    4520   ; printf("\r\nEnter 'B', for bytes, 'W' for words, or 'L' for long words: ");
00002970  4879 0000 4521          pea       @md_148.L
00002974  73B6      
00002976  4E92      4522          jsr       (A2)
00002978  584F      4523          addq.w    #4,A7
                    4524   ; printf("\r\n#");
0000297A  4879 0000 4525          pea       @md_116.L
0000297E  703C      
00002980  4E92      4526          jsr       (A2)
00002982  584F      4527          addq.w    #4,A7
                    4528   ; input_char = (char) _getch();
00002984  4EB8 0B68 4529          jsr       __getch
00002988  1800      4530          move.b    D0,D4
                    4531   ; if(input_char == 'B'){
0000298A  0C04 0042 4532          cmp.b     #66,D4
0000298E  660E      4533          bne.s     MemoryTest_19
                    4534   ; printf("\r\nBytes");
00002990  4879 0000 4535          pea       @md_149.L
00002994  73F6      
00002996  4E92      4536          jsr       (A2)
00002998  584F      4537          addq.w    #4,A7
                    4538   ; break;
0000299A  6000 004E 4539          bra       MemoryTest_18
                    4540   MemoryTest_19:
                    4541   ; }
                    4542   ; else if(input_char == 'W'){
0000299E  0C04 0057 4543          cmp.b     #87,D4
000029A2  6614      4544          bne.s     MemoryTest_21
                    4545   ; printf("\r\nWords");
000029A4  4879 0000 4546          pea       @md_150.L
000029A8  73FE      
000029AA  4E92      4547          jsr       (A2)
000029AC  584F      4548          addq.w    #4,A7
                    4549   ; data = data | data << 8;
000029AE  2002      4550          move.l    D2,D0
000029B0  E188      4551          lsl.l     #8,D0
000029B2  8480      4552          or.l      D0,D2
                    4553   ; break;
000029B4  6000 0034 4554          bra       MemoryTest_18
                    4555   MemoryTest_21:
                    4556   ; }
                    4557   ; else if(input_char == 'L'){
000029B8  0C04 004C 4558          cmp.b     #76,D4
000029BC  6600 002A 4559          bne       MemoryTest_23
                    4560   ; printf("\r\nLong Words");
000029C0  4879 0000 4561          pea       @md_151.L
000029C4  7406      
000029C6  4E92      4562          jsr       (A2)
000029C8  584F      4563          addq.w    #4,A7
                    4564   ; data = data | data << 8 | data << 16 | data << 24;
000029CA  2002      4565          move.l    D2,D0
000029CC  2202      4566          move.l    D2,D1
000029CE  E189      4567          lsl.l     #8,D1
000029D0  8081      4568          or.l      D1,D0
000029D2  2202      4569          move.l    D2,D1
000029D4  E189      4570          lsl.l     #8,D1
000029D6  E189      4571          lsl.l     #8,D1
000029D8  8081      4572          or.l      D1,D0
000029DA  2202      4573          move.l    D2,D1
000029DC  E189      4574          lsl.l     #8,D1
000029DE  E189      4575          lsl.l     #8,D1
000029E0  E189      4576          lsl.l     #8,D1
000029E2  8081      4577          or.l      D1,D0
000029E4  2400      4578          move.l    D0,D2
                    4579   ; break;
000029E6  6002      4580          bra.s     MemoryTest_18
                    4581   MemoryTest_23:
000029E8  6082      4582          bra       MemoryTest_16
                    4583   MemoryTest_18:
                    4584   ; }
                    4585   ; }
                    4586   ; // start writing
                    4587   ; if(input_char == 'B'){
000029EA  0C04 0042 4588          cmp.b     #66,D4
000029EE  6600 0054 4589          bne       MemoryTest_25
                    4590   ; byteptr = start;
000029F2  2E0C      4591          move.l    A4,D7
                    4592   ; while(1){
                    4593   MemoryTest_27:
                    4594   ; if (byteptr > end){
000029F4  BE8B      4595          cmp.l     A3,D7
000029F6  630E      4596          bls.s     MemoryTest_30
                    4597   ; printf("\r\nByte Write Finished. Read starts.");
000029F8  4879 0000 4598          pea       @md_152.L
000029FC  7414      
000029FE  4E92      4599          jsr       (A2)
00002A00  584F      4600          addq.w    #4,A7
                    4601   ; break;
00002A02  6000 003C 4602          bra       MemoryTest_29
                    4603   MemoryTest_30:
                    4604   ; }
                    4605   ; *byteptr = data;
00002A06  2047      4606          move.l    D7,A0
00002A08  1082      4607          move.b    D2,(A0)
                    4608   ; counter++;
00002A0A  5283      4609          addq.l    #1,D3
                    4610   ; if (counter == 2001){
00002A0C  0C83 0000 4611          cmp.l     #2001,D3
00002A10  07D1      
00002A12  6628      4612          bne.s     MemoryTest_32
                    4613   ; printf("\r\nbytedata: %x", data);
00002A14  2F02      4614          move.l    D2,-(A7)
00002A16  4879 0000 4615          pea       @md_153.L
00002A1A  7438      
00002A1C  4E92      4616          jsr       (A2)
00002A1E  504F      4617          addq.w    #8,A7
                    4618   ; printf("\r\nWrite: %x to addr %x", *byteptr, byteptr);
00002A20  2F07      4619          move.l    D7,-(A7)
00002A22  2047      4620          move.l    D7,A0
00002A24  1210      4621          move.b    (A0),D1
00002A26  C2BC 0000 4622          and.l     #255,D1
00002A2A  00FF      
00002A2C  2F01      4623          move.l    D1,-(A7)
00002A2E  4879 0000 4624          pea       @md_154.L
00002A32  7448      
00002A34  4E92      4625          jsr       (A2)
00002A36  DEFC 000C 4626          add.w     #12,A7
                    4627   ; counter = 0;
00002A3A  4283      4628          clr.l     D3
                    4629   MemoryTest_32:
                    4630   ; }
                    4631   ; byteptr++;
00002A3C  5287      4632          addq.l    #1,D7
00002A3E  60B4      4633          bra       MemoryTest_27
                    4634   MemoryTest_29:
00002A40  6000 00AA 4635          bra       MemoryTest_47
                    4636   MemoryTest_25:
                    4637   ; }
                    4638   ; }
                    4639   ; else if(input_char == 'W'){
00002A44  0C04 0057 4640          cmp.b     #87,D4
00002A48  6600 0054 4641          bne       MemoryTest_34
                    4642   ; wordptr = start;
00002A4C  2C0C      4643          move.l    A4,D6
                    4644   ; while(1){
                    4645   MemoryTest_36:
                    4646   ; if (wordptr > end){
00002A4E  BC8B      4647          cmp.l     A3,D6
00002A50  630E      4648          bls.s     MemoryTest_39
                    4649   ; printf("\r\nWord Write Finished. Read starts.");
00002A52  4879 0000 4650          pea       @md_155.L
00002A56  7460      
00002A58  4E92      4651          jsr       (A2)
00002A5A  584F      4652          addq.w    #4,A7
                    4653   ; break;
00002A5C  6000 003C 4654          bra       MemoryTest_38
                    4655   MemoryTest_39:
                    4656   ; }
                    4657   ; *wordptr = data;
00002A60  2046      4658          move.l    D6,A0
00002A62  3082      4659          move.w    D2,(A0)
                    4660   ; counter++;
00002A64  5283      4661          addq.l    #1,D3
                    4662   ; if (counter == 2001){
00002A66  0C83 0000 4663          cmp.l     #2001,D3
00002A6A  07D1      
00002A6C  6628      4664          bne.s     MemoryTest_41
                    4665   ; printf("\r\nworddata: %x", data);
00002A6E  2F02      4666          move.l    D2,-(A7)
00002A70  4879 0000 4667          pea       @md_156.L
00002A74  7484      
00002A76  4E92      4668          jsr       (A2)
00002A78  504F      4669          addq.w    #8,A7
                    4670   ; printf("\r\nWrite: %x to addr %x", *wordptr, wordptr);
00002A7A  2F06      4671          move.l    D6,-(A7)
00002A7C  2046      4672          move.l    D6,A0
00002A7E  3210      4673          move.w    (A0),D1
00002A80  C2BC 0000 4674          and.l     #65535,D1
00002A84  FFFF      
00002A86  2F01      4675          move.l    D1,-(A7)
00002A88  4879 0000 4676          pea       @md_154.L
00002A8C  7448      
00002A8E  4E92      4677          jsr       (A2)
00002A90  DEFC 000C 4678          add.w     #12,A7
                    4679   ; counter = 0;
00002A94  4283      4680          clr.l     D3
                    4681   MemoryTest_41:
                    4682   ; }
                    4683   ; wordptr++;
00002A96  5486      4684          addq.l    #2,D6
00002A98  60B4      4685          bra       MemoryTest_36
                    4686   MemoryTest_38:
00002A9A  6000 0050 4687          bra       MemoryTest_47
                    4688   MemoryTest_34:
                    4689   ; }
                    4690   ; }
                    4691   ; else if(input_char == 'L'){
00002A9E  0C04 004C 4692          cmp.b     #76,D4
00002AA2  6600 0048 4693          bne       MemoryTest_47
                    4694   ; longptr = start;
00002AA6  2A0C      4695          move.l    A4,D5
                    4696   ; while(1){
                    4697   MemoryTest_45:
                    4698   ; if (longptr > end){
00002AA8  BA8B      4699          cmp.l     A3,D5
00002AAA  630E      4700          bls.s     MemoryTest_48
                    4701   ; printf("\r\nLong Word Write Finished. Read starts.");
00002AAC  4879 0000 4702          pea       @md_157.L
00002AB0  7494      
00002AB2  4E92      4703          jsr       (A2)
00002AB4  584F      4704          addq.w    #4,A7
                    4705   ; break;
00002AB6  6000 0034 4706          bra       MemoryTest_47
                    4707   MemoryTest_48:
                    4708   ; }
                    4709   ; *longptr = data;
00002ABA  2045      4710          move.l    D5,A0
00002ABC  2082      4711          move.l    D2,(A0)
                    4712   ; counter++;
00002ABE  5283      4713          addq.l    #1,D3
                    4714   ; if (counter == 2001){
00002AC0  0C83 0000 4715          cmp.l     #2001,D3
00002AC4  07D1      
00002AC6  6620      4716          bne.s     MemoryTest_50
                    4717   ; printf("\r\nlongdata: %x", data);
00002AC8  2F02      4718          move.l    D2,-(A7)
00002ACA  4879 0000 4719          pea       @md_158.L
00002ACE  74BE      
00002AD0  4E92      4720          jsr       (A2)
00002AD2  504F      4721          addq.w    #8,A7
                    4722   ; printf("\r\nWrite: %x to addr %x", *longptr, longptr);
00002AD4  2F05      4723          move.l    D5,-(A7)
00002AD6  2045      4724          move.l    D5,A0
00002AD8  2F10      4725          move.l    (A0),-(A7)
00002ADA  4879 0000 4726          pea       @md_154.L
00002ADE  7448      
00002AE0  4E92      4727          jsr       (A2)
00002AE2  DEFC 000C 4728          add.w     #12,A7
                    4729   ; counter = 0;
00002AE6  4283      4730          clr.l     D3
                    4731   MemoryTest_50:
                    4732   ; }
                    4733   ; longptr++;
00002AE8  5885      4734          addq.l    #4,D5
00002AEA  60BC      4735          bra       MemoryTest_45
                    4736   MemoryTest_47:
                    4737   ; }
                    4738   ; }
                    4739   ; // start reading
                    4740   ; counter = 2000;
00002AEC  263C 0000 4741          move.l    #2000,D3
00002AF0  07D0      
                    4742   ; if(input_char == 'B'){
00002AF2  0C04 0042 4743          cmp.b     #66,D4
00002AF6  6600 0082 4744          bne       MemoryTest_52
                    4745   ; while(1){
                    4746   MemoryTest_54:
                    4747   ; if (byteptr > end){
00002AFA  BE8B      4748          cmp.l     A3,D7
00002AFC  6318      4749          bls.s     MemoryTest_57
                    4750   ; printf("\r\nByte Read complete.");
00002AFE  4879 0000 4751          pea       @md_159.L
00002B02  74CE      
00002B04  4E92      4752          jsr       (A2)
00002B06  584F      4753          addq.w    #4,A7
                    4754   ; printf("\r\nPASS.");
00002B08  4879 0000 4755          pea       @md_160.L
00002B0C  74E4      
00002B0E  4E92      4756          jsr       (A2)
00002B10  584F      4757          addq.w    #4,A7
                    4758   ; break;
00002B12  6000 0062 4759          bra       MemoryTest_56
                    4760   MemoryTest_57:
                    4761   ; }
                    4762   ; if (*byteptr != data){
00002B16  2047      4763          move.l    D7,A0
00002B18  1010      4764          move.b    (A0),D0
00002B1A  C0BC 0000 4765          and.l     #255,D0
00002B1E  00FF      
00002B20  B082      4766          cmp.l     D2,D0
00002B22  6728      4767          beq.s     MemoryTest_59
                    4768   ; printf("\r\nERROR: Address %x data is %x but should be %x", byteptr, *byteptr, data);
00002B24  2F02      4769          move.l    D2,-(A7)
00002B26  2047      4770          move.l    D7,A0
00002B28  1210      4771          move.b    (A0),D1
00002B2A  C2BC 0000 4772          and.l     #255,D1
00002B2E  00FF      
00002B30  2F01      4773          move.l    D1,-(A7)
00002B32  2F07      4774          move.l    D7,-(A7)
00002B34  4879 0000 4775          pea       @md_161.L
00002B38  74EC      
00002B3A  4E92      4776          jsr       (A2)
00002B3C  DEFC 0010 4777          add.w     #16,A7
                    4778   ; printf("\r\nFAIL.");
00002B40  4879 0000 4779          pea       @md_162.L
00002B44  751C      
00002B46  4E92      4780          jsr       (A2)
00002B48  584F      4781          addq.w    #4,A7
                    4782   ; break;
00002B4A  602A      4783          bra.s     MemoryTest_56
                    4784   MemoryTest_59:
                    4785   ; }
                    4786   ; counter++;
00002B4C  5283      4787          addq.l    #1,D3
                    4788   ; if (counter == 2001){
00002B4E  0C83 0000 4789          cmp.l     #2001,D3
00002B52  07D1      
00002B54  661C      4790          bne.s     MemoryTest_61
                    4791   ; printf("\r\nRead: Address %x data is %x", byteptr, *byteptr);
00002B56  2047      4792          move.l    D7,A0
00002B58  1210      4793          move.b    (A0),D1
00002B5A  C2BC 0000 4794          and.l     #255,D1
00002B5E  00FF      
00002B60  2F01      4795          move.l    D1,-(A7)
00002B62  2F07      4796          move.l    D7,-(A7)
00002B64  4879 0000 4797          pea       @md_163.L
00002B68  7524      
00002B6A  4E92      4798          jsr       (A2)
00002B6C  DEFC 000C 4799          add.w     #12,A7
                    4800   ; counter = 0;
00002B70  4283      4801          clr.l     D3
                    4802   MemoryTest_61:
                    4803   ; }
                    4804   ; byteptr++;
00002B72  5287      4805          addq.l    #1,D7
00002B74  6084      4806          bra       MemoryTest_54
                    4807   MemoryTest_56:
00002B76  6000 00F6 4808          bra       MemoryTest_78
                    4809   MemoryTest_52:
                    4810   ; }
                    4811   ; }
                    4812   ; else if(input_char == 'W'){
00002B7A  0C04 0057 4813          cmp.b     #87,D4
00002B7E  6600 0082 4814          bne       MemoryTest_63
                    4815   ; while(1){
                    4816   MemoryTest_65:
                    4817   ; if (wordptr > end){
00002B82  BC8B      4818          cmp.l     A3,D6
00002B84  6318      4819          bls.s     MemoryTest_68
                    4820   ; printf("\r\nWord Read complete.");
00002B86  4879 0000 4821          pea       @md_164.L
00002B8A  7542      
00002B8C  4E92      4822          jsr       (A2)
00002B8E  584F      4823          addq.w    #4,A7
                    4824   ; printf("\r\nPASS.");
00002B90  4879 0000 4825          pea       @md_160.L
00002B94  74E4      
00002B96  4E92      4826          jsr       (A2)
00002B98  584F      4827          addq.w    #4,A7
                    4828   ; break;
00002B9A  6000 0062 4829          bra       MemoryTest_67
                    4830   MemoryTest_68:
                    4831   ; }
                    4832   ; if (*wordptr != data){
00002B9E  2046      4833          move.l    D6,A0
00002BA0  3010      4834          move.w    (A0),D0
00002BA2  C0BC 0000 4835          and.l     #65535,D0
00002BA6  FFFF      
00002BA8  B082      4836          cmp.l     D2,D0
00002BAA  6728      4837          beq.s     MemoryTest_70
                    4838   ; printf("\r\nERROR: Address %x data is %x but should be %x", wordptr, *wordptr, data);
00002BAC  2F02      4839          move.l    D2,-(A7)
00002BAE  2046      4840          move.l    D6,A0
00002BB0  3210      4841          move.w    (A0),D1
00002BB2  C2BC 0000 4842          and.l     #65535,D1
00002BB6  FFFF      
00002BB8  2F01      4843          move.l    D1,-(A7)
00002BBA  2F06      4844          move.l    D6,-(A7)
00002BBC  4879 0000 4845          pea       @md_161.L
00002BC0  74EC      
00002BC2  4E92      4846          jsr       (A2)
00002BC4  DEFC 0010 4847          add.w     #16,A7
                    4848   ; printf("\r\nFAIL.");
00002BC8  4879 0000 4849          pea       @md_162.L
00002BCC  751C      
00002BCE  4E92      4850          jsr       (A2)
00002BD0  584F      4851          addq.w    #4,A7
                    4852   ; break;
00002BD2  602A      4853          bra.s     MemoryTest_67
                    4854   MemoryTest_70:
                    4855   ; }
                    4856   ; counter++;
00002BD4  5283      4857          addq.l    #1,D3
                    4858   ; if (counter == 2001){
00002BD6  0C83 0000 4859          cmp.l     #2001,D3
00002BDA  07D1      
00002BDC  661C      4860          bne.s     MemoryTest_72
                    4861   ; printf("\r\nRead: Address %x data is %x", wordptr, *wordptr);
00002BDE  2046      4862          move.l    D6,A0
00002BE0  3210      4863          move.w    (A0),D1
00002BE2  C2BC 0000 4864          and.l     #65535,D1
00002BE6  FFFF      
00002BE8  2F01      4865          move.l    D1,-(A7)
00002BEA  2F06      4866          move.l    D6,-(A7)
00002BEC  4879 0000 4867          pea       @md_163.L
00002BF0  7524      
00002BF2  4E92      4868          jsr       (A2)
00002BF4  DEFC 000C 4869          add.w     #12,A7
                    4870   ; counter = 0;
00002BF8  4283      4871          clr.l     D3
                    4872   MemoryTest_72:
                    4873   ; }
                    4874   ; wordptr++;
00002BFA  5486      4875          addq.l    #2,D6
00002BFC  6084      4876          bra       MemoryTest_65
                    4877   MemoryTest_67:
00002BFE  6000 006E 4878          bra       MemoryTest_78
                    4879   MemoryTest_63:
                    4880   ; }
                    4881   ; }
                    4882   ; else if(input_char == 'L'){
00002C02  0C04 004C 4883          cmp.b     #76,D4
00002C06  6600 0066 4884          bne       MemoryTest_78
                    4885   ; while(1){
                    4886   MemoryTest_76:
                    4887   ; if (longptr > end){
00002C0A  BA8B      4888          cmp.l     A3,D5
00002C0C  6318      4889          bls.s     MemoryTest_79
                    4890   ; printf("\r\nLong Word Read complete.");
00002C0E  4879 0000 4891          pea       @md_165.L
00002C12  7558      
00002C14  4E92      4892          jsr       (A2)
00002C16  584F      4893          addq.w    #4,A7
                    4894   ; printf("\r\nPASS.");
00002C18  4879 0000 4895          pea       @md_160.L
00002C1C  74E4      
00002C1E  4E92      4896          jsr       (A2)
00002C20  584F      4897          addq.w    #4,A7
                    4898   ; break;
00002C22  6000 004A 4899          bra       MemoryTest_78
                    4900   MemoryTest_79:
                    4901   ; }
                    4902   ; if (*longptr != data){
00002C26  2045      4903          move.l    D5,A0
00002C28  B490      4904          cmp.l     (A0),D2
00002C2A  6720      4905          beq.s     MemoryTest_81
                    4906   ; printf("\r\nERROR: Address %x data is %x but should be %x", longptr, *longptr, data);
00002C2C  2F02      4907          move.l    D2,-(A7)
00002C2E  2045      4908          move.l    D5,A0
00002C30  2F10      4909          move.l    (A0),-(A7)
00002C32  2F05      4910          move.l    D5,-(A7)
00002C34  4879 0000 4911          pea       @md_161.L
00002C38  74EC      
00002C3A  4E92      4912          jsr       (A2)
00002C3C  DEFC 0010 4913          add.w     #16,A7
                    4914   ; printf("\r\nFAIL.");
00002C40  4879 0000 4915          pea       @md_162.L
00002C44  751C      
00002C46  4E92      4916          jsr       (A2)
00002C48  584F      4917          addq.w    #4,A7
                    4918   ; break;
00002C4A  6022      4919          bra.s     MemoryTest_78
                    4920   MemoryTest_81:
                    4921   ; }
                    4922   ; counter++;
00002C4C  5283      4923          addq.l    #1,D3
                    4924   ; if (counter == 2001){
00002C4E  0C83 0000 4925          cmp.l     #2001,D3
00002C52  07D1      
00002C54  6614      4926          bne.s     MemoryTest_83
                    4927   ; printf("\r\nRead: Address %x data is %x", longptr, *longptr);
00002C56  2045      4928          move.l    D5,A0
00002C58  2F10      4929          move.l    (A0),-(A7)
00002C5A  2F05      4930          move.l    D5,-(A7)
00002C5C  4879 0000 4931          pea       @md_163.L
00002C60  7524      
00002C62  4E92      4932          jsr       (A2)
00002C64  DEFC 000C 4933          add.w     #12,A7
                    4934   ; counter = 0;
00002C68  4283      4935          clr.l     D3
                    4936   MemoryTest_83:
                    4937   ; }
                    4938   ; longptr++;
00002C6A  5885      4939          addq.l    #4,D5
00002C6C  609C      4940          bra       MemoryTest_76
                    4941   MemoryTest_78:
00002C6E  4CDF 3CFC 4942          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002C72  4E5E      4943          unlk      A6
00002C74  4E75      4944          rts
                    4945   ; }
                    4946   ; }
                    4947   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4948   ; }
                    4949   ; void main(void)
                    4950   ; {
                    4951   _main:
00002C76  4E56 FFF4 4952          link      A6,#-12
00002C7A  48E7 3030 4953          movem.l   D2/D3/A2/A3,-(A7)
00002C7E  45F8 0A30 4954          lea       _InstallExceptionHandler.L,A2
00002C82  47F9 0000 4955          lea       _printf.L,A3
00002C86  58FE      
                    4956   ; char c ;
                    4957   ; int i, j ;
                    4958   ; char *BugMessage = "DE1-68k Bug V1.77";
00002C88  41F9 0000 4959          lea       @md_166.L,A0
00002C8C  7574      
00002C8E  2608      4960          move.l    A0,D3
                    4961   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002C90  41F9 0000 4962          lea       @md_167.L,A0
00002C94  7586      
00002C96  2D48 FFFC 4963          move.l    A0,-4(A6)
                    4964   ; KillAllBreakPoints() ;
00002C9A  4EB8 1EEE 4965          jsr       _KillAllBreakPoints
                    4966   ; i = x = y = z = PortA_Count = 0;
00002C9E  42B9 0803 4967          clr.l     _PortA_Count.L
00002CA2  00D4      
00002CA4  42B9 0803 4968          clr.l     _z.L
00002CA8  00D0      
00002CAA  42B9 0803 4969          clr.l     _y.L
00002CAE  00CC      
00002CB0  42B9 0803 4970          clr.l     _x.L
00002CB4  00C8      
00002CB6  4282      4971          clr.l     D2
                    4972   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002CB8  42B9 0803 4973          clr.l     _GoFlag.L
00002CBC  00DC      
00002CBE  42B9 0803 4974          clr.l     _Trace.L
00002CC2  00D8      
                    4975   ; Echo = 1 ;
00002CC4  23FC 0000 4976          move.l    #1,_Echo.L
00002CC8  0001 0803 
00002CCC  00E0      
                    4977   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002CCE  42B9 0803 4978          clr.l     _d7.L
00002CD2  0100      
00002CD4  42B9 0803 4979          clr.l     _d6.L
00002CD8  00FC      
00002CDA  42B9 0803 4980          clr.l     _d5.L
00002CDE  00F8      
00002CE0  42B9 0803 4981          clr.l     _d4.L
00002CE4  00F4      
00002CE6  42B9 0803 4982          clr.l     _d3.L
00002CEA  00F0      
00002CEC  42B9 0803 4983          clr.l     _d2.L
00002CF0  00EC      
00002CF2  42B9 0803 4984          clr.l     _d1.L
00002CF6  00E8      
00002CF8  42B9 0803 4985          clr.l     _d0.L
00002CFC  00E4      
                    4986   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002CFE  42B9 0803 4987          clr.l     _a6.L
00002D02  011C      
00002D04  42B9 0803 4988          clr.l     _a5.L
00002D08  0118      
00002D0A  42B9 0803 4989          clr.l     _a4.L
00002D0E  0114      
00002D10  42B9 0803 4990          clr.l     _a3.L
00002D14  0110      
00002D16  42B9 0803 4991          clr.l     _a2.L
00002D1A  010C      
00002D1C  42B9 0803 4992          clr.l     _a1.L
00002D20  0108      
00002D22  42B9 0803 4993          clr.l     _a0.L
00002D26  0104      
                    4994   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002D28  23FC 0800 4995          move.l    #134217728,_PC.L
00002D2C  0000 0803 
00002D30  0120      
00002D32  23FC 0804 4996          move.l    #134479872,_SSP.L
00002D36  0000 0803 
00002D3A  0124      
00002D3C  23FC 0804 4997          move.l    #134479872,_USP.L
00002D40  0000 0803 
00002D44  0128      
                    4998   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002D46  33FC 2000 4999          move.w    #8192,_SR.L
00002D4A  0803 012C 
                    5000   ; // Initialise Breakpoint variables
                    5001   ; for(i = 0; i < 8; i++)  {
00002D4E  4282      5002          clr.l     D2
                    5003   main_1:
00002D50  0C82 0000 5004          cmp.l     #8,D2
00002D54  0008      
00002D56  6C00 004C 5005          bge       main_3
                    5006   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002D5A  2002      5007          move.l    D2,D0
00002D5C  E588      5008          lsl.l     #2,D0
00002D5E  41F9 0803 5009          lea       _BreakPointAddress.L,A0
00002D62  012E      
00002D64  42B0 0800 5010          clr.l     0(A0,D0.L)
                    5011   ; WatchPointAddress[i] = 0 ;
00002D68  2002      5012          move.l    D2,D0
00002D6A  E588      5013          lsl.l     #2,D0
00002D6C  41F9 0803 5014          lea       _WatchPointAddress.L,A0
00002D70  0182      
00002D72  42B0 0800 5015          clr.l     0(A0,D0.L)
                    5016   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002D76  2002      5017          move.l    D2,D0
00002D78  E388      5018          lsl.l     #1,D0
00002D7A  41F9 0803 5019          lea       _BreakPointInstruction.L,A0
00002D7E  014E      
00002D80  4270 0800 5020          clr.w     0(A0,D0.L)
                    5021   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002D84  2002      5022          move.l    D2,D0
00002D86  E588      5023          lsl.l     #2,D0
00002D88  41F9 0803 5024          lea       _BreakPointSetOrCleared.L,A0
00002D8C  015E      
00002D8E  42B0 0800 5025          clr.l     0(A0,D0.L)
                    5026   ; WatchPointSetOrCleared[i] = 0;
00002D92  2002      5027          move.l    D2,D0
00002D94  E588      5028          lsl.l     #2,D0
00002D96  41F9 0803 5029          lea       _WatchPointSetOrCleared.L,A0
00002D9A  01A2      
00002D9C  42B0 0800 5030          clr.l     0(A0,D0.L)
00002DA0  5282      5031          addq.l    #1,D2
00002DA2  60AC      5032          bra       main_1
                    5033   main_3:
                    5034   ; }
                    5035   ; Init_RS232() ;     // initialise the RS232 port
00002DA4  4EB8 0B12 5036          jsr       _Init_RS232
                    5037   ; Init_LCD() ;
00002DA8  4EB8 095E 5038          jsr       _Init_LCD
                    5039   ; for( i = 32; i < 48; i++)
00002DAC  7420      5040          moveq     #32,D2
                    5041   main_4:
00002DAE  0C82 0000 5042          cmp.l     #48,D2
00002DB2  0030      
00002DB4  6C0E      5043          bge.s     main_6
                    5044   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002DB6  2F02      5045          move.l    D2,-(A7)
00002DB8  4878 27C6 5046          pea       _UnhandledTrap.L
00002DBC  4E92      5047          jsr       (A2)
00002DBE  504F      5048          addq.w    #8,A7
00002DC0  5282      5049          addq.l    #1,D2
00002DC2  60EA      5050          bra       main_4
                    5051   main_6:
                    5052   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002DC4  4878 002F 5053          pea       47
00002DC8  4878 24A0 5054          pea       _menu.L
00002DCC  4E92      5055          jsr       (A2)
00002DCE  504F      5056          addq.w    #8,A7
                    5057   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002DD0  4878 0019 5058          pea       25
00002DD4  4878 276C 5059          pea       _UnhandledIRQ1.L
00002DD8  4E92      5060          jsr       (A2)
00002DDA  504F      5061          addq.w    #8,A7
                    5062   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002DDC  4878 001A 5063          pea       26
00002DE0  4878 2778 5064          pea       _UnhandledIRQ2.L
00002DE4  4E92      5065          jsr       (A2)
00002DE6  504F      5066          addq.w    #8,A7
                    5067   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002DE8  4878 001B 5068          pea       27
00002DEC  4878 2784 5069          pea       _UnhandledIRQ3.L
00002DF0  4E92      5070          jsr       (A2)
00002DF2  504F      5071          addq.w    #8,A7
                    5072   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002DF4  4878 001C 5073          pea       28
00002DF8  4878 2790 5074          pea       _UnhandledIRQ4.L
00002DFC  4E92      5075          jsr       (A2)
00002DFE  504F      5076          addq.w    #8,A7
                    5077   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002E00  4878 001D 5078          pea       29
00002E04  4878 279C 5079          pea       _UnhandledIRQ5.L
00002E08  4E92      5080          jsr       (A2)
00002E0A  504F      5081          addq.w    #8,A7
                    5082   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002E0C  4878 001E 5083          pea       30
00002E10  4878 27A8 5084          pea       _UnhandledIRQ6.L
00002E14  4E92      5085          jsr       (A2)
00002E16  504F      5086          addq.w    #8,A7
                    5087   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002E18  4878 001F 5088          pea       31
00002E1C  4878 27BA 5089          pea       _UnhandledIRQ7.L
00002E20  4E92      5090          jsr       (A2)
00002E22  504F      5091          addq.w    #8,A7
                    5092   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002E24  4878 002E 5093          pea       46
00002E28  4878 2192 5094          pea       _HandleBreakPoint.L
00002E2C  4E92      5095          jsr       (A2)
00002E2E  504F      5096          addq.w    #8,A7
                    5097   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002E30  4878 001D 5098          pea       29
00002E34  4878 1836 5099          pea       _DumpRegistersandPause.L
00002E38  4E92      5100          jsr       (A2)
00002E3A  504F      5101          addq.w    #8,A7
                    5102   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002E3C  4878 0002 5103          pea       2
00002E40  4878 27D4 5104          pea       _BusError.L
00002E44  4E92      5105          jsr       (A2)
00002E46  504F      5106          addq.w    #8,A7
                    5107   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002E48  4878 0003 5108          pea       3
00002E4C  4878 27E2 5109          pea       _AddressError.L
00002E50  4E92      5110          jsr       (A2)
00002E52  504F      5111          addq.w    #8,A7
                    5112   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002E54  4878 0004 5113          pea       4
00002E58  4878 27F0 5114          pea       _IllegalInstruction.L
00002E5C  4E92      5115          jsr       (A2)
00002E5E  504F      5116          addq.w    #8,A7
                    5117   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002E60  4878 0005 5118          pea       5
00002E64  4878 27FE 5119          pea       _Dividebyzero.L
00002E68  4E92      5120          jsr       (A2)
00002E6A  504F      5121          addq.w    #8,A7
                    5122   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002E6C  4878 0006 5123          pea       6
00002E70  4878 280C 5124          pea       _Check.L
00002E74  4E92      5125          jsr       (A2)
00002E76  504F      5126          addq.w    #8,A7
                    5127   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002E78  4878 0007 5128          pea       7
00002E7C  4878 281A 5129          pea       _Trapv.L
00002E80  4E92      5130          jsr       (A2)
00002E82  504F      5131          addq.w    #8,A7
                    5132   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002E84  4878 0008 5133          pea       8
00002E88  4878 2828 5134          pea       _PrivError.L
00002E8C  4E92      5135          jsr       (A2)
00002E8E  504F      5136          addq.w    #8,A7
                    5137   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002E90  4878 000F 5138          pea       15
00002E94  4878 2836 5139          pea       _UnitIRQ.L
00002E98  4E92      5140          jsr       (A2)
00002E9A  504F      5141          addq.w    #8,A7
                    5142   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002E9C  4878 0018 5143          pea       24
00002EA0  4878 280C 5144          pea       _Check.L
00002EA4  4E92      5145          jsr       (A2)
00002EA6  504F      5146          addq.w    #8,A7
                    5147   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002EA8  4EB8 0BA6 5148          jsr       _FlushKeyboard
                    5149   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002EAC  4239 0040 5150          clr.b     4194314
00002EB0  000A      
                    5151   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5152   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5153   main_7:
00002EB2  1039 0040 5154          move.b    4194306,D0
00002EB6  0002      
00002EB8  C03C 0002 5155          and.b     #2,D0
00002EBC  0C00 0002 5156          cmp.b     #2,D0
00002EC0  662A      5157          bne.s     main_9
                    5158   ; LoadFromFlashChip();
00002EC2  4EB8 12DA 5159          jsr       _LoadFromFlashChip
                    5160   ; printf("\r\nRunning.....") ;
00002EC6  4879 0000 5161          pea       @md_168.L
00002ECA  75A4      
00002ECC  4E93      5162          jsr       (A3)
00002ECE  584F      5163          addq.w    #4,A7
                    5164   ; Oline1("Running.....") ;
00002ED0  4879 0000 5165          pea       @md_169.L
00002ED4  75B4      
00002ED6  4EB8 0A02 5166          jsr       _Oline1
00002EDA  584F      5167          addq.w    #4,A7
                    5168   ; GoFlag = 1;
00002EDC  23FC 0000 5169          move.l    #1,_GoFlag.L
00002EE0  0001 0803 
00002EE4  00DC      
                    5170   ; go() ;
00002EE6  4EB8 08B8 5171          jsr       _go
00002EEA  60C6      5172          bra       main_7
                    5173   main_9:
                    5174   ; }
                    5175   ; // otherwise start the debug monitor
                    5176   ; Oline0(BugMessage) ;
00002EEC  2F03      5177          move.l    D3,-(A7)
00002EEE  4EB8 09D4 5178          jsr       _Oline0
00002EF2  584F      5179          addq.w    #4,A7
                    5180   ; Oline1("By: PJ Davies") ;
00002EF4  4879 0000 5181          pea       @md_170.L
00002EF8  75C2      
00002EFA  4EB8 0A02 5182          jsr       _Oline1
00002EFE  584F      5183          addq.w    #4,A7
                    5184   ; printf("\r\n%s", BugMessage) ;
00002F00  2F03      5185          move.l    D3,-(A7)
00002F02  4879 0000 5186          pea       @md_171.L
00002F06  75D0      
00002F08  4E93      5187          jsr       (A3)
00002F0A  504F      5188          addq.w    #8,A7
                    5189   ; printf("\r\n%s", CopyrightMessage) ;
00002F0C  2F2E FFFC 5190          move.l    -4(A6),-(A7)
00002F10  4879 0000 5191          pea       @md_171.L
00002F14  75D0      
00002F16  4E93      5192          jsr       (A3)
00002F18  504F      5193          addq.w    #8,A7
                    5194   ; menu();
00002F1A  4EB8 24A0 5195          jsr       _menu
00002F1E  4CDF 0C0C 5196          movem.l   (A7)+,D2/D3/A2/A3
00002F22  4E5E      5197          unlk      A6
00002F24  4E75      5198          rts
                    5199   ; }
                    5200   ; void FormatInstruction(void)    // for disassembly
                    5201   ; {
                    5202   _FormatInstruction:
00002F26  4E56 FEC0 5203          link      A6,#-320
00002F2A  48E7 3C20 5204          movem.l   D2/D3/D4/D5/A2,-(A7)
00002F2E  45EE FEC0 5205          lea       -320(A6),A2
                    5206   ; short i, ilen = 0 ;
00002F32  4245      5207          clr.w     D5
                    5208   ; char *iptr = Instruction ;
00002F34  41F9 0803 5209          lea       _Instruction.L,A0
00002F38  04E2      
00002F3A  2608      5210          move.l    A0,D3
                    5211   ; char *Formatted[80], *fptr ;
                    5212   ; fptr = Formatted ;
00002F3C  280A      5213          move.l    A2,D4
                    5214   ; for(i = 0; i < (short)(80); i ++)
00002F3E  4242      5215          clr.w     D2
                    5216   FormatInstruction_1:
00002F40  0C42 0050 5217          cmp.w     #80,D2
00002F44  6C0E      5218          bge.s     FormatInstruction_3
                    5219   ; Formatted[i] = (char)(0);          // set formatted string to null
00002F46  48C2      5220          ext.l     D2
00002F48  2002      5221          move.l    D2,D0
00002F4A  E588      5222          lsl.l     #2,D0
00002F4C  42B2 0800 5223          clr.l     0(A2,D0.L)
00002F50  5242      5224          addq.w    #1,D2
00002F52  60EC      5225          bra       FormatInstruction_1
                    5226   FormatInstruction_3:
                    5227   ; while((*iptr != ' '))   {   // while ot a space char
                    5228   FormatInstruction_4:
00002F54  2043      5229          move.l    D3,A0
00002F56  1010      5230          move.b    (A0),D0
00002F58  0C00 0020 5231          cmp.b     #32,D0
00002F5C  6718      5232          beq.s     FormatInstruction_6
                    5233   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002F5E  2043      5234          move.l    D3,A0
00002F60  5283      5235          addq.l    #1,D3
00002F62  2244      5236          move.l    D4,A1
00002F64  5284      5237          addq.l    #1,D4
00002F66  1290      5238          move.b    (A0),(A1)
                    5239   ; ilen ++ ;               // count length of string as we go
00002F68  5245      5240          addq.w    #1,D5
                    5241   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002F6A  2043      5242          move.l    D3,A0
00002F6C  1010      5243          move.b    (A0),D0
00002F6E  6604      5244          bne.s     FormatInstruction_7
                    5245   ; return ;
00002F70  6000 003E 5246          bra       FormatInstruction_9
                    5247   FormatInstruction_7:
00002F74  60DE      5248          bra       FormatInstruction_4
                    5249   FormatInstruction_6:
                    5250   ; }
                    5251   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5252   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002F76  4242      5253          clr.w     D2
                    5254   FormatInstruction_10:
00002F78  7008      5255          moveq     #8,D0
00002F7A  4880      5256          ext.w     D0
00002F7C  9045      5257          sub.w     D5,D0
00002F7E  B440      5258          cmp.w     D0,D2
00002F80  6C0C      5259          bge.s     FormatInstruction_12
                    5260   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002F82  2044      5261          move.l    D4,A0
00002F84  5284      5262          addq.l    #1,D4
00002F86  10BC 0020 5263          move.b    #32,(A0)
00002F8A  5242      5264          addq.w    #1,D2
00002F8C  60EA      5265          bra       FormatInstruction_10
                    5266   FormatInstruction_12:
                    5267   ; // now skip over any spaces in original unformatted string before copying the rest
                    5268   ; while((*iptr == ' '))
                    5269   FormatInstruction_13:
00002F8E  2043      5270          move.l    D3,A0
00002F90  1010      5271          move.b    (A0),D0
00002F92  0C00 0020 5272          cmp.b     #32,D0
00002F96  6604      5273          bne.s     FormatInstruction_15
                    5274   ; iptr++ ;
00002F98  5283      5275          addq.l    #1,D3
00002F9A  60F2      5276          bra       FormatInstruction_13
                    5277   FormatInstruction_15:
                    5278   ; strcat(fptr,iptr) ;
00002F9C  2F03      5279          move.l    D3,-(A7)
00002F9E  2F04      5280          move.l    D4,-(A7)
00002FA0  4EB9 0000 5281          jsr       _strcat
00002FA4  58BC      
00002FA6  504F      5282          addq.w    #8,A7
                    5283   ; strcpyInstruction(Formatted) ;
00002FA8  2F0A      5284          move.l    A2,-(A7)
00002FAA  4EB8 0CE6 5285          jsr       _strcpyInstruction
00002FAE  584F      5286          addq.w    #4,A7
                    5287   FormatInstruction_9:
00002FB0  4CDF 043C 5288          movem.l   (A7)+,D2/D3/D4/D5/A2
00002FB4  4E5E      5289          unlk      A6
00002FB6  4E75      5290          rts
                    5291   ; }
                    5292   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5293   ; {
                    5294   _Decode2BitOperandSize:
00002FB8  4E56 0000 5295          link      A6,#0
00002FBC  48E7 3020 5296          movem.l   D2/D3/A2,-(A7)
00002FC0  362E 000A 5297          move.w    10(A6),D3
00002FC4  C6BC 0000 5298          and.l     #65535,D3
00002FC8  FFFF      
00002FCA  45F8 0CCC 5299          lea       _strcatInstruction.L,A2
                    5300   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5301   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002FCE  3003      5302          move.w    D3,D0
00002FD0  C07C 00C0 5303          and.w     #192,D0
00002FD4  EC48      5304          lsr.w     #6,D0
00002FD6  3600      5305          move.w    D0,D3
                    5306   ; if(OpCode == (unsigned short int)(0))   {
00002FD8  4A43      5307          tst.w     D3
00002FDA  660E      5308          bne.s     Decode2BitOperandSize_1
                    5309   ; strcatInstruction(".B ") ;
00002FDC  4879 0000 5310          pea       @md_172.L
00002FE0  75D6      
00002FE2  4E92      5311          jsr       (A2)
00002FE4  584F      5312          addq.w    #4,A7
                    5313   ; DataSize = 1 ;
00002FE6  7401      5314          moveq     #1,D2
00002FE8  6020      5315          bra.s     Decode2BitOperandSize_4
                    5316   Decode2BitOperandSize_1:
                    5317   ; }
                    5318   ; else if(OpCode == (unsigned short int)(1)) {
00002FEA  0C43 0001 5319          cmp.w     #1,D3
00002FEE  660E      5320          bne.s     Decode2BitOperandSize_3
                    5321   ; strcatInstruction(".W ") ;
00002FF0  4879 0000 5322          pea       @md_173.L
00002FF4  75DA      
00002FF6  4E92      5323          jsr       (A2)
00002FF8  584F      5324          addq.w    #4,A7
                    5325   ; DataSize = 1 ;
00002FFA  7401      5326          moveq     #1,D2
00002FFC  600C      5327          bra.s     Decode2BitOperandSize_4
                    5328   Decode2BitOperandSize_3:
                    5329   ; }
                    5330   ; else {
                    5331   ; strcatInstruction(".L ") ;
00002FFE  4879 0000 5332          pea       @md_174.L
00003002  75DE      
00003004  4E92      5333          jsr       (A2)
00003006  584F      5334          addq.w    #4,A7
                    5335   ; DataSize = 2 ;
00003008  7402      5336          moveq     #2,D2
                    5337   Decode2BitOperandSize_4:
                    5338   ; }
                    5339   ; return DataSize;
0000300A  3002      5340          move.w    D2,D0
0000300C  4CDF 040C 5341          movem.l   (A7)+,D2/D3/A2
00003010  4E5E      5342          unlk      A6
00003012  4E75      5343          rts
                    5344   ; }
                    5345   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5346   ; {
                    5347   _Decode3BitDataRegister:
00003014  4E56 FFFC 5348          link      A6,#-4
00003018  2F0A      5349          move.l    A2,-(A7)
0000301A  45EE FFFC 5350          lea       -4(A6),A2
                    5351   ; unsigned char RegNumber[3] ;
                    5352   ; RegNumber[0] = 'D' ;
0000301E  14BC 0044 5353          move.b    #68,(A2)
                    5354   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003022  7030      5355          moveq     #48,D0
00003024  322E 000A 5356          move.w    10(A6),D1
00003028  C27C 0E00 5357          and.w     #3584,D1
0000302C  E049      5358          lsr.w     #8,D1
0000302E  E249      5359          lsr.w     #1,D1
00003030  D001      5360          add.b     D1,D0
00003032  1540 0001 5361          move.b    D0,1(A2)
                    5362   ; RegNumber[2] = 0 ;
00003036  422A 0002 5363          clr.b     2(A2)
                    5364   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
0000303A  2F0A      5365          move.l    A2,-(A7)
0000303C  4EB8 0CCC 5366          jsr       _strcatInstruction
00003040  584F      5367          addq.w    #4,A7
00003042  245F      5368          move.l    (A7)+,A2
00003044  4E5E      5369          unlk      A6
00003046  4E75      5370          rts
                    5371   ; }
                    5372   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5373   ; {
                    5374   _Decode3BitAddressRegister:
00003048  4E56 FFFC 5375          link      A6,#-4
0000304C  2F0A      5376          move.l    A2,-(A7)
0000304E  45EE FFFC 5377          lea       -4(A6),A2
                    5378   ; unsigned char RegNumber[3];
                    5379   ; RegNumber[0] = 'A' ;
00003052  14BC 0041 5380          move.b    #65,(A2)
                    5381   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003056  7030      5382          moveq     #48,D0
00003058  322E 000A 5383          move.w    10(A6),D1
0000305C  D001      5384          add.b     D1,D0
0000305E  1540 0001 5385          move.b    D0,1(A2)
                    5386   ; RegNumber[2] = 0 ;
00003062  422A 0002 5387          clr.b     2(A2)
                    5388   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00003066  2F0A      5389          move.l    A2,-(A7)
00003068  4EB8 0CCC 5390          jsr       _strcatInstruction
0000306C  584F      5391          addq.w    #4,A7
0000306E  245F      5392          move.l    (A7)+,A2
00003070  4E5E      5393          unlk      A6
00003072  4E75      5394          rts
                    5395   ; }
                    5396   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5397   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5398   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5399   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5400   ; {
                    5401   _DecodeBWLDataAfterOpCodeForMove:
00003074  4E56 0000 5402          link      A6,#0
00003078  48E7 3030 5403          movem.l   D2/D3/A2/A3,-(A7)
0000307C  242E 0008 5404          move.l    8(A6),D2
00003080  45F9 0803 5405          lea       _TempString.L,A2
00003084  0546      
00003086  47F9 0000 5406          lea       _sprintf.L,A3
0000308A  5888      
                    5407   ; unsigned char OperandSize ;
                    5408   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
0000308C  2042      5409          move.l    D2,A0
0000308E  3010      5410          move.w    (A0),D0
00003090  E048      5411          lsr.w     #8,D0
00003092  E848      5412          lsr.w     #4,D0
00003094  C07C 0003 5413          and.w     #3,D0
00003098  1600      5414          move.b    D0,D3
                    5415   ; InstructionSize += 1;
0000309A  52B9 0803 5416          addq.l    #1,_InstructionSize.L
0000309E  017E      
                    5417   ; if(OperandSize == (char)(1))                // #byte value
000030A0  0C03 0001 5418          cmp.b     #1,D3
000030A4  6620      5419          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5420   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000030A6  2042      5421          move.l    D2,A0
000030A8  3228 0002 5422          move.w    2(A0),D1
000030AC  C2BC 0000 5423          and.l     #65535,D1
000030B0  FFFF      
000030B2  2F01      5424          move.l    D1,-(A7)
000030B4  4879 0000 5425          pea       @md_175.L
000030B8  75E2      
000030BA  2F0A      5426          move.l    A2,-(A7)
000030BC  4E93      5427          jsr       (A3)
000030BE  DEFC 000C 5428          add.w     #12,A7
000030C2  6000 0068 5429          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5430   DecodeBWLDataAfterOpCodeForMove_1:
                    5431   ; else if(OperandSize == (char)(3))          // #word value
000030C6  0C03 0003 5432          cmp.b     #3,D3
000030CA  6620      5433          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5434   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000030CC  2042      5435          move.l    D2,A0
000030CE  3228 0002 5436          move.w    2(A0),D1
000030D2  C2BC 0000 5437          and.l     #65535,D1
000030D6  FFFF      
000030D8  2F01      5438          move.l    D1,-(A7)
000030DA  4879 0000 5439          pea       @md_175.L
000030DE  75E2      
000030E0  2F0A      5440          move.l    A2,-(A7)
000030E2  4E93      5441          jsr       (A3)
000030E4  DEFC 000C 5442          add.w     #12,A7
000030E8  6000 0042 5443          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5444   DecodeBWLDataAfterOpCodeForMove_3:
                    5445   ; else if(OperandSize == (char)(2)) {                                       // long value
000030EC  0C03 0002 5446          cmp.b     #2,D3
000030F0  6600 003A 5447          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5448   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
000030F4  2042      5449          move.l    D2,A0
000030F6  3228 0002 5450          move.w    2(A0),D1
000030FA  C2BC 0000 5451          and.l     #65535,D1
000030FE  FFFF      
00003100  E189      5452          lsl.l     #8,D1
00003102  E189      5453          lsl.l     #8,D1
00003104  2042      5454          move.l    D2,A0
00003106  2F00      5455          move.l    D0,-(A7)
00003108  3028 0004 5456          move.w    4(A0),D0
0000310C  C0BC 0000 5457          and.l     #65535,D0
00003110  FFFF      
00003112  8280      5458          or.l      D0,D1
00003114  201F      5459          move.l    (A7)+,D0
00003116  2F01      5460          move.l    D1,-(A7)
00003118  4879 0000 5461          pea       @md_175.L
0000311C  75E2      
0000311E  2F0A      5462          move.l    A2,-(A7)
00003120  4E93      5463          jsr       (A3)
00003122  DEFC 000C 5464          add.w     #12,A7
                    5465   ; InstructionSize += 1;
00003126  52B9 0803 5466          addq.l    #1,_InstructionSize.L
0000312A  017E      
                    5467   DecodeBWLDataAfterOpCodeForMove_5:
                    5468   ; }
                    5469   ; strcatInstruction(TempString) ;
0000312C  2F0A      5470          move.l    A2,-(A7)
0000312E  4EB8 0CCC 5471          jsr       _strcatInstruction
00003132  584F      5472          addq.w    #4,A7
00003134  4CDF 0C0C 5473          movem.l   (A7)+,D2/D3/A2/A3
00003138  4E5E      5474          unlk      A6
0000313A  4E75      5475          rts
                    5476   ; }
                    5477   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5478   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5479   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5480   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5481   ; {
                    5482   _DecodeBWLDataAfterOpCode:
0000313C  4E56 0000 5483          link      A6,#0
00003140  48E7 3038 5484          movem.l   D2/D3/A2/A3/A4,-(A7)
00003144  262E 0008 5485          move.l    8(A6),D3
00003148  45F9 0803 5486          lea       _TempString.L,A2
0000314C  0546      
0000314E  47F9 0000 5487          lea       _sprintf.L,A3
00003152  5888      
00003154  49F9 0803 5488          lea       _InstructionSize.L,A4
00003158  017E      
                    5489   ; unsigned char OperandSize ;
                    5490   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
0000315A  2043      5491          move.l    D3,A0
0000315C  3010      5492          move.w    (A0),D0
0000315E  C07C 01C0 5493          and.w     #448,D0
00003162  EC48      5494          lsr.w     #6,D0
00003164  1400      5495          move.b    D0,D2
                    5496   ; InstructionSize += 1;
00003166  5294      5497          addq.l    #1,(A4)
                    5498   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00003168  4A02      5499          tst.b     D2
0000316A  6706      5500          beq.s     DecodeBWLDataAfterOpCode_3
0000316C  0C02 0004 5501          cmp.b     #4,D2
00003170  6620      5502          bne.s     DecodeBWLDataAfterOpCode_1
                    5503   DecodeBWLDataAfterOpCode_3:
                    5504   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003172  2043      5505          move.l    D3,A0
00003174  3228 0002 5506          move.w    2(A0),D1
00003178  C2BC 0000 5507          and.l     #65535,D1
0000317C  FFFF      
0000317E  2F01      5508          move.l    D1,-(A7)
00003180  4879 0000 5509          pea       @md_175.L
00003184  75E2      
00003186  2F0A      5510          move.l    A2,-(A7)
00003188  4E93      5511          jsr       (A3)
0000318A  DEFC 000C 5512          add.w     #12,A7
0000318E  6000 007C 5513          bra       DecodeBWLDataAfterOpCode_7
                    5514   DecodeBWLDataAfterOpCode_1:
                    5515   ; // #word value 7 is used by divs.w instruction (not divu)
                    5516   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5517   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5518   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00003192  0C02 0001 5519          cmp.b     #1,D2
00003196  670C      5520          beq.s     DecodeBWLDataAfterOpCode_6
00003198  0C02 0005 5521          cmp.b     #5,D2
0000319C  6706      5522          beq.s     DecodeBWLDataAfterOpCode_6
0000319E  0C02 0003 5523          cmp.b     #3,D2
000031A2  6620      5524          bne.s     DecodeBWLDataAfterOpCode_4
                    5525   DecodeBWLDataAfterOpCode_6:
                    5526   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000031A4  2043      5527          move.l    D3,A0
000031A6  3228 0002 5528          move.w    2(A0),D1
000031AA  C2BC 0000 5529          and.l     #65535,D1
000031AE  FFFF      
000031B0  2F01      5530          move.l    D1,-(A7)
000031B2  4879 0000 5531          pea       @md_175.L
000031B6  75E2      
000031B8  2F0A      5532          move.l    A2,-(A7)
000031BA  4E93      5533          jsr       (A3)
000031BC  DEFC 000C 5534          add.w     #12,A7
000031C0  6000 004A 5535          bra       DecodeBWLDataAfterOpCode_7
                    5536   DecodeBWLDataAfterOpCode_4:
                    5537   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
000031C4  0C02 0002 5538          cmp.b     #2,D2
000031C8  670E      5539          beq.s     DecodeBWLDataAfterOpCode_9
000031CA  0C02 0006 5540          cmp.b     #6,D2
000031CE  6708      5541          beq.s     DecodeBWLDataAfterOpCode_9
000031D0  0C02 0007 5542          cmp.b     #7,D2
000031D4  6600 0036 5543          bne       DecodeBWLDataAfterOpCode_7
                    5544   DecodeBWLDataAfterOpCode_9:
                    5545   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
000031D8  2043      5546          move.l    D3,A0
000031DA  3228 0002 5547          move.w    2(A0),D1
000031DE  C2BC 0000 5548          and.l     #65535,D1
000031E2  FFFF      
000031E4  E189      5549          lsl.l     #8,D1
000031E6  E189      5550          lsl.l     #8,D1
000031E8  2043      5551          move.l    D3,A0
000031EA  2F00      5552          move.l    D0,-(A7)
000031EC  3028 0004 5553          move.w    4(A0),D0
000031F0  C0BC 0000 5554          and.l     #65535,D0
000031F4  FFFF      
000031F6  8280      5555          or.l      D0,D1
000031F8  201F      5556          move.l    (A7)+,D0
000031FA  2F01      5557          move.l    D1,-(A7)
000031FC  4879 0000 5558          pea       @md_175.L
00003200  75E2      
00003202  2F0A      5559          move.l    A2,-(A7)
00003204  4E93      5560          jsr       (A3)
00003206  DEFC 000C 5561          add.w     #12,A7
                    5562   ; InstructionSize += 1;
0000320A  5294      5563          addq.l    #1,(A4)
                    5564   DecodeBWLDataAfterOpCode_7:
                    5565   ; }
                    5566   ; // special case for divs - bugger!!!
                    5567   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
0000320C  2043      5568          move.l    D3,A0
0000320E  3010      5569          move.w    (A0),D0
00003210  C07C F1C0 5570          and.w     #61888,D0
00003214  0C40 81C0 5571          cmp.w     #33216,D0
00003218  6622      5572          bne.s     DecodeBWLDataAfterOpCode_10
                    5573   ; {
                    5574   ; InstructionSize = 2 ;
0000321A  28BC 0000 5575          move.l    #2,(A4)
0000321E  0002      
                    5576   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003220  2043      5577          move.l    D3,A0
00003222  3228 0002 5578          move.w    2(A0),D1
00003226  C2BC 0000 5579          and.l     #65535,D1
0000322A  FFFF      
0000322C  2F01      5580          move.l    D1,-(A7)
0000322E  4879 0000 5581          pea       @md_175.L
00003232  75E2      
00003234  2F0A      5582          move.l    A2,-(A7)
00003236  4E93      5583          jsr       (A3)
00003238  DEFC 000C 5584          add.w     #12,A7
                    5585   DecodeBWLDataAfterOpCode_10:
                    5586   ; }
                    5587   ; strcatInstruction(TempString) ;
0000323C  2F0A      5588          move.l    A2,-(A7)
0000323E  4EB8 0CCC 5589          jsr       _strcatInstruction
00003242  584F      5590          addq.w    #4,A7
00003244  4CDF 1C0C 5591          movem.l   (A7)+,D2/D3/A2/A3/A4
00003248  4E5E      5592          unlk      A6
0000324A  4E75      5593          rts
                    5594   ; }
                    5595   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5596   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5597   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5598   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5599   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5600   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5601   ; {
                    5602   _Decode6BitEA:
0000324C  4E56 FFF4 5603          link      A6,#-12
00003250  48E7 3F3C 5604          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003254  45F8 0CCC 5605          lea       _strcatInstruction.L,A2
00003258  47F9 0803 5606          lea       _TempString.L,A3
0000325C  0546      
0000325E  282E 0008 5607          move.l    8(A6),D4
00003262  49F9 0000 5608          lea       _sprintf.L,A4
00003266  5888      
00003268  4BF9 0803 5609          lea       _InstructionSize.L,A5
0000326C  017E      
0000326E  3C2E 0012 5610          move.w    18(A6),D6
00003272  CCBC 0000 5611          and.l     #65535,D6
00003276  FFFF      
                    5612   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5613   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5614   ; unsigned char RegNumber[3];
                    5615   ; signed char offset ;
                    5616   ; unsigned short int Xn, XnSize ;
                    5617   ; if(EAChoice == 0)   {   // if EA in bits 5-0
00003278  202E 000C 5618          move.l    12(A6),D0
0000327C  6620      5619          bne.s     Decode6BitEA_1
                    5620   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
0000327E  2044      5621          move.l    D4,A0
00003280  3010      5622          move.w    (A0),D0
00003282  E648      5623          lsr.w     #3,D0
00003284  C07C 00FF 5624          and.w     #255,D0
00003288  C07C 0007 5625          and.w     #7,D0
0000328C  1A00      5626          move.b    D0,D5
                    5627   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
0000328E  2044      5628          move.l    D4,A0
00003290  3010      5629          move.w    (A0),D0
00003292  C07C 00FF 5630          and.w     #255,D0
00003296  C07C 0007 5631          and.w     #7,D0
0000329A  1600      5632          move.b    D0,D3
0000329C  6022      5633          bra.s     Decode6BitEA_2
                    5634   Decode6BitEA_1:
                    5635   ; }
                    5636   ; else    {               // else EA in bits 11-6
                    5637   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
0000329E  2044      5638          move.l    D4,A0
000032A0  3010      5639          move.w    (A0),D0
000032A2  EC48      5640          lsr.w     #6,D0
000032A4  C07C 00FF 5641          and.w     #255,D0
000032A8  C07C 0007 5642          and.w     #7,D0
000032AC  1A00      5643          move.b    D0,D5
                    5644   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
000032AE  2044      5645          move.l    D4,A0
000032B0  3010      5646          move.w    (A0),D0
000032B2  E048      5647          lsr.w     #8,D0
000032B4  E248      5648          lsr.w     #1,D0
000032B6  C07C 00FF 5649          and.w     #255,D0
000032BA  C07C 0007 5650          and.w     #7,D0
000032BE  1600      5651          move.b    D0,D3
                    5652   Decode6BitEA_2:
                    5653   ; }
                    5654   ; if(EAChoice == 0)    {
000032C0  202E 000C 5655          move.l    12(A6),D0
000032C4  6600 0034 5656          bne       Decode6BitEA_3
                    5657   ; ExWord1 = OpCode[1+DataSize] ;
000032C8  2044      5658          move.l    D4,A0
000032CA  7001      5659          moveq     #1,D0
000032CC  4880      5660          ext.w     D0
000032CE  48C0      5661          ext.l     D0
000032D0  CCBC 0000 5662          and.l     #65535,D6
000032D4  FFFF      
000032D6  D086      5663          add.l     D6,D0
000032D8  E388      5664          lsl.l     #1,D0
000032DA  3430 0800 5665          move.w    0(A0,D0.L),D2
                    5666   ; ExWord2 = OpCode[2+DataSize] ;
000032DE  2044      5667          move.l    D4,A0
000032E0  7002      5668          moveq     #2,D0
000032E2  4880      5669          ext.w     D0
000032E4  48C0      5670          ext.l     D0
000032E6  CCBC 0000 5671          and.l     #65535,D6
000032EA  FFFF      
000032EC  D086      5672          add.l     D6,D0
000032EE  E388      5673          lsl.l     #1,D0
000032F0  3D70 0800 5674          move.w    0(A0,D0.L),-8(A6)
000032F4  FFF8      
000032F6  6000 007E 5675          bra       Decode6BitEA_7
                    5676   Decode6BitEA_3:
                    5677   ; }
                    5678   ; else if(EAChoice == 1)   {
000032FA  202E 000C 5679          move.l    12(A6),D0
000032FE  0C80 0000 5680          cmp.l     #1,D0
00003302  0001      
00003304  6600 0034 5681          bne       Decode6BitEA_5
                    5682   ; ExWord1 = OpCode[3+DataSize] ;
00003308  2044      5683          move.l    D4,A0
0000330A  7003      5684          moveq     #3,D0
0000330C  4880      5685          ext.w     D0
0000330E  48C0      5686          ext.l     D0
00003310  CCBC 0000 5687          and.l     #65535,D6
00003314  FFFF      
00003316  D086      5688          add.l     D6,D0
00003318  E388      5689          lsl.l     #1,D0
0000331A  3430 0800 5690          move.w    0(A0,D0.L),D2
                    5691   ; ExWord2 = OpCode[4+DataSize] ;
0000331E  2044      5692          move.l    D4,A0
00003320  7004      5693          moveq     #4,D0
00003322  4880      5694          ext.w     D0
00003324  48C0      5695          ext.l     D0
00003326  CCBC 0000 5696          and.l     #65535,D6
0000332A  FFFF      
0000332C  D086      5697          add.l     D6,D0
0000332E  E388      5698          lsl.l     #1,D0
00003330  3D70 0800 5699          move.w    0(A0,D0.L),-8(A6)
00003334  FFF8      
00003336  6000 003E 5700          bra       Decode6BitEA_7
                    5701   Decode6BitEA_5:
                    5702   ; }
                    5703   ; else if(EAChoice == 2)   {  // for move instruction
0000333A  202E 000C 5704          move.l    12(A6),D0
0000333E  0C80 0000 5705          cmp.l     #2,D0
00003342  0002      
00003344  6600 0030 5706          bne       Decode6BitEA_7
                    5707   ; ExWord1 = OpCode[1+DataSize] ;
00003348  2044      5708          move.l    D4,A0
0000334A  7001      5709          moveq     #1,D0
0000334C  4880      5710          ext.w     D0
0000334E  48C0      5711          ext.l     D0
00003350  CCBC 0000 5712          and.l     #65535,D6
00003354  FFFF      
00003356  D086      5713          add.l     D6,D0
00003358  E388      5714          lsl.l     #1,D0
0000335A  3430 0800 5715          move.w    0(A0,D0.L),D2
                    5716   ; ExWord2 = OpCode[2+DataSize] ;
0000335E  2044      5717          move.l    D4,A0
00003360  7002      5718          moveq     #2,D0
00003362  4880      5719          ext.w     D0
00003364  48C0      5720          ext.l     D0
00003366  CCBC 0000 5721          and.l     #65535,D6
0000336A  FFFF      
0000336C  D086      5722          add.l     D6,D0
0000336E  E388      5723          lsl.l     #1,D0
00003370  3D70 0800 5724          move.w    0(A0,D0.L),-8(A6)
00003374  FFF8      
                    5725   Decode6BitEA_7:
                    5726   ; }
                    5727   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
00003376  4A05      5728          tst.b     D5
00003378  661E      5729          bne.s     Decode6BitEA_9
                    5730   ; RegNumber[0] = 'D' ;
0000337A  1D7C 0044 5731          move.b    #68,-6+0(A6)
0000337E  FFFA      
                    5732   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00003380  7030      5733          moveq     #48,D0
00003382  D003      5734          add.b     D3,D0
00003384  1D40 FFFB 5735          move.b    D0,-6+1(A6)
                    5736   ; RegNumber[2] = 0 ;
00003388  422E FFFC 5737          clr.b     -6+2(A6)
                    5738   ; strcatInstruction(RegNumber) ;
0000338C  486E FFFA 5739          pea       -6(A6)
00003390  4E92      5740          jsr       (A2)
00003392  584F      5741          addq.w    #4,A7
00003394  6000 02D6 5742          bra       Decode6BitEA_44
                    5743   Decode6BitEA_9:
                    5744   ; }
                    5745   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
00003398  0C05 0001 5746          cmp.b     #1,D5
0000339C  6616      5747          bne.s     Decode6BitEA_11
                    5748   ; Decode3BitAddressRegister(OperandRegister) ;
0000339E  C67C 00FF 5749          and.w     #255,D3
000033A2  C6BC 0000 5750          and.l     #65535,D3
000033A6  FFFF      
000033A8  2F03      5751          move.l    D3,-(A7)
000033AA  4EB8 3048 5752          jsr       _Decode3BitAddressRegister
000033AE  584F      5753          addq.w    #4,A7
000033B0  6000 02BA 5754          bra       Decode6BitEA_44
                    5755   Decode6BitEA_11:
                    5756   ; }
                    5757   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
000033B4  0C05 0002 5758          cmp.b     #2,D5
000033B8  662A      5759          bne.s     Decode6BitEA_13
                    5760   ; strcatInstruction("(") ;
000033BA  4879 0000 5761          pea       @md_176.L
000033BE  75E8      
000033C0  4E92      5762          jsr       (A2)
000033C2  584F      5763          addq.w    #4,A7
                    5764   ; Decode3BitAddressRegister(OperandRegister) ;
000033C4  C67C 00FF 5765          and.w     #255,D3
000033C8  C6BC 0000 5766          and.l     #65535,D3
000033CC  FFFF      
000033CE  2F03      5767          move.l    D3,-(A7)
000033D0  4EB8 3048 5768          jsr       _Decode3BitAddressRegister
000033D4  584F      5769          addq.w    #4,A7
                    5770   ; strcatInstruction(")") ;
000033D6  4879 0000 5771          pea       @md_177.L
000033DA  75EA      
000033DC  4E92      5772          jsr       (A2)
000033DE  584F      5773          addq.w    #4,A7
000033E0  6000 028A 5774          bra       Decode6BitEA_44
                    5775   Decode6BitEA_13:
                    5776   ; }
                    5777   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
000033E4  0C05 0003 5778          cmp.b     #3,D5
000033E8  662A      5779          bne.s     Decode6BitEA_15
                    5780   ; strcatInstruction("(") ;
000033EA  4879 0000 5781          pea       @md_176.L
000033EE  75E8      
000033F0  4E92      5782          jsr       (A2)
000033F2  584F      5783          addq.w    #4,A7
                    5784   ; Decode3BitAddressRegister(OperandRegister) ;
000033F4  C67C 00FF 5785          and.w     #255,D3
000033F8  C6BC 0000 5786          and.l     #65535,D3
000033FC  FFFF      
000033FE  2F03      5787          move.l    D3,-(A7)
00003400  4EB8 3048 5788          jsr       _Decode3BitAddressRegister
00003404  584F      5789          addq.w    #4,A7
                    5790   ; strcatInstruction(")+") ;
00003406  4879 0000 5791          pea       @md_178.L
0000340A  75EC      
0000340C  4E92      5792          jsr       (A2)
0000340E  584F      5793          addq.w    #4,A7
00003410  6000 025A 5794          bra       Decode6BitEA_44
                    5795   Decode6BitEA_15:
                    5796   ; }
                    5797   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003414  0C05 0004 5798          cmp.b     #4,D5
00003418  662A      5799          bne.s     Decode6BitEA_17
                    5800   ; strcatInstruction("-(") ;
0000341A  4879 0000 5801          pea       @md_179.L
0000341E  75F0      
00003420  4E92      5802          jsr       (A2)
00003422  584F      5803          addq.w    #4,A7
                    5804   ; Decode3BitAddressRegister(OperandRegister) ;
00003424  C67C 00FF 5805          and.w     #255,D3
00003428  C6BC 0000 5806          and.l     #65535,D3
0000342C  FFFF      
0000342E  2F03      5807          move.l    D3,-(A7)
00003430  4EB8 3048 5808          jsr       _Decode3BitAddressRegister
00003434  584F      5809          addq.w    #4,A7
                    5810   ; strcatInstruction(")") ;
00003436  4879 0000 5811          pea       @md_177.L
0000343A  75EA      
0000343C  4E92      5812          jsr       (A2)
0000343E  584F      5813          addq.w    #4,A7
00003440  6000 022A 5814          bra       Decode6BitEA_44
                    5815   Decode6BitEA_17:
                    5816   ; }
                    5817   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
00003444  0C05 0005 5818          cmp.b     #5,D5
00003448  6626      5819          bne.s     Decode6BitEA_19
                    5820   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
0000344A  C6BC 0000 5821          and.l     #255,D3
0000344E  00FF      
00003450  2F03      5822          move.l    D3,-(A7)
00003452  48C2      5823          ext.l     D2
00003454  2F02      5824          move.l    D2,-(A7)
00003456  4879 0000 5825          pea       @md_180.L
0000345A  75F4      
0000345C  2F0B      5826          move.l    A3,-(A7)
0000345E  4E94      5827          jsr       (A4)
00003460  DEFC 0010 5828          add.w     #16,A7
                    5829   ; strcatInstruction(TempString) ;
00003464  2F0B      5830          move.l    A3,-(A7)
00003466  4E92      5831          jsr       (A2)
00003468  584F      5832          addq.w    #4,A7
                    5833   ; InstructionSize += 1;
0000346A  5295      5834          addq.l    #1,(A5)
0000346C  6000 01FE 5835          bra       Decode6BitEA_44
                    5836   Decode6BitEA_19:
                    5837   ; }
                    5838   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
00003470  0C05 0006 5839          cmp.b     #6,D5
00003474  6600 00AA 5840          bne       Decode6BitEA_21
                    5841   ; offset = ExWord1 & (short int)(0x00FF);
00003478  3002      5842          move.w    D2,D0
0000347A  C07C 00FF 5843          and.w     #255,D0
0000347E  1D40 FFFD 5844          move.b    D0,-3(A6)
                    5845   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
00003482  C6BC 0000 5846          and.l     #255,D3
00003486  00FF      
00003488  2F03      5847          move.l    D3,-(A7)
0000348A  122E FFFD 5848          move.b    -3(A6),D1
0000348E  4881      5849          ext.w     D1
00003490  48C1      5850          ext.l     D1
00003492  2F01      5851          move.l    D1,-(A7)
00003494  4879 0000 5852          pea       @md_181.L
00003498  75FC      
0000349A  2F0B      5853          move.l    A3,-(A7)
0000349C  4E94      5854          jsr       (A4)
0000349E  DEFC 0010 5855          add.w     #16,A7
                    5856   ; strcatInstruction(TempString) ;
000034A2  2F0B      5857          move.l    A3,-(A7)
000034A4  4E92      5858          jsr       (A2)
000034A6  584F      5859          addq.w    #4,A7
                    5860   ; InstructionSize += 1;
000034A8  5295      5861          addq.l    #1,(A5)
                    5862   ; // decode the Xn bit
                    5863   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000034AA  3002      5864          move.w    D2,D0
000034AC  C07C 8000 5865          and.w     #32768,D0
000034B0  660C      5866          bne.s     Decode6BitEA_23
                    5867   ; strcatInstruction("D") ;
000034B2  4879 0000 5868          pea       @md_182.L
000034B6  7604      
000034B8  4E92      5869          jsr       (A2)
000034BA  584F      5870          addq.w    #4,A7
000034BC  600A      5871          bra.s     Decode6BitEA_24
                    5872   Decode6BitEA_23:
                    5873   ; else
                    5874   ; strcatInstruction("A") ;
000034BE  4879 0000 5875          pea       @md_183.L
000034C2  7606      
000034C4  4E92      5876          jsr       (A2)
000034C6  584F      5877          addq.w    #4,A7
                    5878   Decode6BitEA_24:
                    5879   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000034C8  3002      5880          move.w    D2,D0
000034CA  C07C 7000 5881          and.w     #28672,D0
000034CE  E048      5882          lsr.w     #8,D0
000034D0  E848      5883          lsr.w     #4,D0
000034D2  3D40 FFFE 5884          move.w    D0,-2(A6)
                    5885   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000034D6  322E FFFE 5886          move.w    -2(A6),D1
000034DA  C2BC 0000 5887          and.l     #65535,D1
000034DE  FFFF      
000034E0  2F01      5888          move.l    D1,-(A7)
000034E2  4879 0000 5889          pea       @md_184.L
000034E6  7608      
000034E8  2F0B      5890          move.l    A3,-(A7)
000034EA  4E94      5891          jsr       (A4)
000034EC  DEFC 000C 5892          add.w     #12,A7
                    5893   ; strcatInstruction(TempString) ;
000034F0  2F0B      5894          move.l    A3,-(A7)
000034F2  4E92      5895          jsr       (A2)
000034F4  584F      5896          addq.w    #4,A7
                    5897   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000034F6  3002      5898          move.w    D2,D0
000034F8  C07C 0800 5899          and.w     #2048,D0
000034FC  E048      5900          lsr.w     #8,D0
000034FE  E648      5901          lsr.w     #3,D0
00003500  3E00      5902          move.w    D0,D7
                    5903   ; if(XnSize == 0)
00003502  4A47      5904          tst.w     D7
00003504  660C      5905          bne.s     Decode6BitEA_25
                    5906   ; strcatInstruction(".W)") ;
00003506  4879 0000 5907          pea       @md_185.L
0000350A  760C      
0000350C  4E92      5908          jsr       (A2)
0000350E  584F      5909          addq.w    #4,A7
00003510  600A      5910          bra.s     Decode6BitEA_26
                    5911   Decode6BitEA_25:
                    5912   ; else
                    5913   ; strcatInstruction(".L)") ;
00003512  4879 0000 5914          pea       @md_186.L
00003516  7610      
00003518  4E92      5915          jsr       (A2)
0000351A  584F      5916          addq.w    #4,A7
                    5917   Decode6BitEA_26:
0000351C  6000 014E 5918          bra       Decode6BitEA_44
                    5919   Decode6BitEA_21:
                    5920   ; }
                    5921   ; else if(OperandMode == (unsigned char)(7)) {
00003520  0C05 0007 5922          cmp.b     #7,D5
00003524  6600 0146 5923          bne       Decode6BitEA_44
                    5924   ; if(OperandRegister == 0) {                               // EA = (xxx).W
00003528  4A03      5925          tst.b     D3
0000352A  661E      5926          bne.s     Decode6BitEA_29
                    5927   ; sprintf(TempString, "$%X", ExWord1) ;
0000352C  48C2      5928          ext.l     D2
0000352E  2F02      5929          move.l    D2,-(A7)
00003530  4879 0000 5930          pea       @md_187.L
00003534  7614      
00003536  2F0B      5931          move.l    A3,-(A7)
00003538  4E94      5932          jsr       (A4)
0000353A  DEFC 000C 5933          add.w     #12,A7
                    5934   ; strcatInstruction(TempString) ;
0000353E  2F0B      5935          move.l    A3,-(A7)
00003540  4E92      5936          jsr       (A2)
00003542  584F      5937          addq.w    #4,A7
                    5938   ; InstructionSize += 1;
00003544  5295      5939          addq.l    #1,(A5)
00003546  6000 0124 5940          bra       Decode6BitEA_44
                    5941   Decode6BitEA_29:
                    5942   ; }
                    5943   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
0000354A  0C03 0001 5944          cmp.b     #1,D3
0000354E  6600 0032 5945          bne       Decode6BitEA_31
                    5946   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
00003552  3202      5947          move.w    D2,D1
00003554  48C1      5948          ext.l     D1
00003556  E189      5949          lsl.l     #8,D1
00003558  E189      5950          lsl.l     #8,D1
0000355A  2F00      5951          move.l    D0,-(A7)
0000355C  302E FFF8 5952          move.w    -8(A6),D0
00003560  48C0      5953          ext.l     D0
00003562  8280      5954          or.l      D0,D1
00003564  201F      5955          move.l    (A7)+,D0
00003566  2F01      5956          move.l    D1,-(A7)
00003568  4879 0000 5957          pea       @md_187.L
0000356C  7614      
0000356E  2F0B      5958          move.l    A3,-(A7)
00003570  4E94      5959          jsr       (A4)
00003572  DEFC 000C 5960          add.w     #12,A7
                    5961   ; strcatInstruction(TempString) ;
00003576  2F0B      5962          move.l    A3,-(A7)
00003578  4E92      5963          jsr       (A2)
0000357A  584F      5964          addq.w    #4,A7
                    5965   ; InstructionSize += 2;
0000357C  5495      5966          addq.l    #2,(A5)
0000357E  6000 00EC 5967          bra       Decode6BitEA_44
                    5968   Decode6BitEA_31:
                    5969   ; }
                    5970   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003582  0C03 0004 5971          cmp.b     #4,D3
00003586  661C      5972          bne.s     Decode6BitEA_33
                    5973   ; if(IsItMoveInstruction == 0)        //not move instruction
00003588  302E 0016 5974          move.w    22(A6),D0
0000358C  660A      5975          bne.s     Decode6BitEA_35
                    5976   ; DecodeBWLDataAfterOpCode(OpCode);
0000358E  2F04      5977          move.l    D4,-(A7)
00003590  4EB8 313C 5978          jsr       _DecodeBWLDataAfterOpCode
00003594  584F      5979          addq.w    #4,A7
00003596  6008      5980          bra.s     Decode6BitEA_36
                    5981   Decode6BitEA_35:
                    5982   ; else
                    5983   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
00003598  2F04      5984          move.l    D4,-(A7)
0000359A  4EB8 3074 5985          jsr       _DecodeBWLDataAfterOpCodeForMove
0000359E  584F      5986          addq.w    #4,A7
                    5987   Decode6BitEA_36:
000035A0  6000 00CA 5988          bra       Decode6BitEA_44
                    5989   Decode6BitEA_33:
                    5990   ; }
                    5991   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
000035A4  0C03 0002 5992          cmp.b     #2,D3
000035A8  661E      5993          bne.s     Decode6BitEA_37
                    5994   ; sprintf(TempString, "%d(PC)", ExWord1) ;
000035AA  48C2      5995          ext.l     D2
000035AC  2F02      5996          move.l    D2,-(A7)
000035AE  4879 0000 5997          pea       @md_188.L
000035B2  7618      
000035B4  2F0B      5998          move.l    A3,-(A7)
000035B6  4E94      5999          jsr       (A4)
000035B8  DEFC 000C 6000          add.w     #12,A7
                    6001   ; strcatInstruction(TempString) ;
000035BC  2F0B      6002          move.l    A3,-(A7)
000035BE  4E92      6003          jsr       (A2)
000035C0  584F      6004          addq.w    #4,A7
                    6005   ; InstructionSize += 1;
000035C2  5295      6006          addq.l    #1,(A5)
000035C4  6000 00A6 6007          bra       Decode6BitEA_44
                    6008   Decode6BitEA_37:
                    6009   ; }
                    6010   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
000035C8  0C03 0003 6011          cmp.b     #3,D3
000035CC  6600 009E 6012          bne       Decode6BitEA_44
                    6013   ; offset = ExWord1 & (short int)(0x00FF);
000035D0  3002      6014          move.w    D2,D0
000035D2  C07C 00FF 6015          and.w     #255,D0
000035D6  1D40 FFFD 6016          move.b    D0,-3(A6)
                    6017   ; sprintf(TempString, "%d(PC,", offset ) ;
000035DA  122E FFFD 6018          move.b    -3(A6),D1
000035DE  4881      6019          ext.w     D1
000035E0  48C1      6020          ext.l     D1
000035E2  2F01      6021          move.l    D1,-(A7)
000035E4  4879 0000 6022          pea       @md_189.L
000035E8  7620      
000035EA  2F0B      6023          move.l    A3,-(A7)
000035EC  4E94      6024          jsr       (A4)
000035EE  DEFC 000C 6025          add.w     #12,A7
                    6026   ; strcatInstruction(TempString) ;
000035F2  2F0B      6027          move.l    A3,-(A7)
000035F4  4E92      6028          jsr       (A2)
000035F6  584F      6029          addq.w    #4,A7
                    6030   ; InstructionSize += 1;
000035F8  5295      6031          addq.l    #1,(A5)
                    6032   ; // decode the Xn bit
                    6033   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000035FA  3002      6034          move.w    D2,D0
000035FC  C07C 8000 6035          and.w     #32768,D0
00003600  660C      6036          bne.s     Decode6BitEA_41
                    6037   ; strcatInstruction("D") ;
00003602  4879 0000 6038          pea       @md_182.L
00003606  7604      
00003608  4E92      6039          jsr       (A2)
0000360A  584F      6040          addq.w    #4,A7
0000360C  600A      6041          bra.s     Decode6BitEA_42
                    6042   Decode6BitEA_41:
                    6043   ; else
                    6044   ; strcatInstruction("A") ;
0000360E  4879 0000 6045          pea       @md_183.L
00003612  7606      
00003614  4E92      6046          jsr       (A2)
00003616  584F      6047          addq.w    #4,A7
                    6048   Decode6BitEA_42:
                    6049   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
00003618  3002      6050          move.w    D2,D0
0000361A  C07C 7000 6051          and.w     #28672,D0
0000361E  E048      6052          lsr.w     #8,D0
00003620  E848      6053          lsr.w     #4,D0
00003622  3D40 FFFE 6054          move.w    D0,-2(A6)
                    6055   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003626  322E FFFE 6056          move.w    -2(A6),D1
0000362A  C2BC 0000 6057          and.l     #65535,D1
0000362E  FFFF      
00003630  2F01      6058          move.l    D1,-(A7)
00003632  4879 0000 6059          pea       @md_184.L
00003636  7608      
00003638  2F0B      6060          move.l    A3,-(A7)
0000363A  4E94      6061          jsr       (A4)
0000363C  DEFC 000C 6062          add.w     #12,A7
                    6063   ; strcatInstruction(TempString) ;
00003640  2F0B      6064          move.l    A3,-(A7)
00003642  4E92      6065          jsr       (A2)
00003644  584F      6066          addq.w    #4,A7
                    6067   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003646  3002      6068          move.w    D2,D0
00003648  C07C 0800 6069          and.w     #2048,D0
0000364C  E048      6070          lsr.w     #8,D0
0000364E  E648      6071          lsr.w     #3,D0
00003650  3E00      6072          move.w    D0,D7
                    6073   ; if(XnSize == 0)
00003652  4A47      6074          tst.w     D7
00003654  660C      6075          bne.s     Decode6BitEA_43
                    6076   ; strcatInstruction(".W)") ;
00003656  4879 0000 6077          pea       @md_185.L
0000365A  760C      
0000365C  4E92      6078          jsr       (A2)
0000365E  584F      6079          addq.w    #4,A7
00003660  600A      6080          bra.s     Decode6BitEA_44
                    6081   Decode6BitEA_43:
                    6082   ; else
                    6083   ; strcatInstruction(".L)") ;
00003662  4879 0000 6084          pea       @md_186.L
00003666  7610      
00003668  4E92      6085          jsr       (A2)
0000366A  584F      6086          addq.w    #4,A7
                    6087   Decode6BitEA_44:
0000366C  4CDF 3CFC 6088          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003670  4E5E      6089          unlk      A6
00003672  4E75      6090          rts
                    6091   ; }
                    6092   ; }
                    6093   ; }
                    6094   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    6095   ; {
                    6096   _Decode3BitOperandMode:
00003674  4E56 FFFC 6097          link      A6,#-4
00003678  2F02      6098          move.l    D2,-(A7)
0000367A  242E 0008 6099          move.l    8(A6),D2
                    6100   ; unsigned short int OperandMode;
                    6101   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
0000367E  2042      6102          move.l    D2,A0
00003680  3010      6103          move.w    (A0),D0
00003682  C07C 0100 6104          and.w     #256,D0
00003686  E048      6105          lsr.w     #8,D0
00003688  3D40 FFFE 6106          move.w    D0,-2(A6)
                    6107   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000368C  2042      6108          move.l    D2,A0
0000368E  3210      6109          move.w    (A0),D1
00003690  C2BC 0000 6110          and.l     #65535,D1
00003694  FFFF      
00003696  2F01      6111          move.l    D1,-(A7)
00003698  4EB8 2FB8 6112          jsr       _Decode2BitOperandSize
0000369C  584F      6113          addq.w    #4,A7
                    6114   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
0000369E  302E FFFE 6115          move.w    -2(A6),D0
000036A2  6600 0032 6116          bne       Decode3BitOperandMode_1
                    6117   ; Decode6BitEA(OpCode,0,0,0) ;
000036A6  42A7      6118          clr.l     -(A7)
000036A8  42A7      6119          clr.l     -(A7)
000036AA  42A7      6120          clr.l     -(A7)
000036AC  2F02      6121          move.l    D2,-(A7)
000036AE  4EB8 324C 6122          jsr       _Decode6BitEA
000036B2  DEFC 0010 6123          add.w     #16,A7
                    6124   ; strcatInstruction(",") ;
000036B6  4879 0000 6125          pea       @md_190.L
000036BA  7628      
000036BC  4EB8 0CCC 6126          jsr       _strcatInstruction
000036C0  584F      6127          addq.w    #4,A7
                    6128   ; Decode3BitDataRegister(*OpCode) ;
000036C2  2042      6129          move.l    D2,A0
000036C4  3210      6130          move.w    (A0),D1
000036C6  C2BC 0000 6131          and.l     #65535,D1
000036CA  FFFF      
000036CC  2F01      6132          move.l    D1,-(A7)
000036CE  4EB8 3014 6133          jsr       _Decode3BitDataRegister
000036D2  584F      6134          addq.w    #4,A7
000036D4  602E      6135          bra.s     Decode3BitOperandMode_2
                    6136   Decode3BitOperandMode_1:
                    6137   ; }
                    6138   ; else {                                                         // Destination is in EA
                    6139   ; Decode3BitDataRegister(*OpCode) ;
000036D6  2042      6140          move.l    D2,A0
000036D8  3210      6141          move.w    (A0),D1
000036DA  C2BC 0000 6142          and.l     #65535,D1
000036DE  FFFF      
000036E0  2F01      6143          move.l    D1,-(A7)
000036E2  4EB8 3014 6144          jsr       _Decode3BitDataRegister
000036E6  584F      6145          addq.w    #4,A7
                    6146   ; strcatInstruction(",") ;
000036E8  4879 0000 6147          pea       @md_190.L
000036EC  7628      
000036EE  4EB8 0CCC 6148          jsr       _strcatInstruction
000036F2  584F      6149          addq.w    #4,A7
                    6150   ; Decode6BitEA(OpCode,0,0,0) ;
000036F4  42A7      6151          clr.l     -(A7)
000036F6  42A7      6152          clr.l     -(A7)
000036F8  42A7      6153          clr.l     -(A7)
000036FA  2F02      6154          move.l    D2,-(A7)
000036FC  4EB8 324C 6155          jsr       _Decode6BitEA
00003700  DEFC 0010 6156          add.w     #16,A7
                    6157   Decode3BitOperandMode_2:
00003704  241F      6158          move.l    (A7)+,D2
00003706  4E5E      6159          unlk      A6
00003708  4E75      6160          rts
                    6161   ; }
                    6162   ; }
                    6163   ; void DecodeBranchCondition(unsigned short int Condition)
                    6164   ; {
                    6165   _DecodeBranchCondition:
0000370A  4E56 0000 6166          link      A6,#0
0000370E  48E7 2020 6167          movem.l   D2/A2,-(A7)
00003712  45F8 0CCC 6168          lea       _strcatInstruction.L,A2
00003716  342E 000A 6169          move.w    10(A6),D2
0000371A  C4BC 0000 6170          and.l     #65535,D2
0000371E  FFFF      
                    6171   ; if(Condition == (unsigned short int)(0x04))
00003720  0C42 0004 6172          cmp.w     #4,D2
00003724  660E      6173          bne.s     DecodeBranchCondition_1
                    6174   ; strcatInstruction("CC") ;
00003726  4879 0000 6175          pea       @md_191.L
0000372A  762A      
0000372C  4E92      6176          jsr       (A2)
0000372E  584F      6177          addq.w    #4,A7
00003730  6000 011C 6178          bra       DecodeBranchCondition_30
                    6179   DecodeBranchCondition_1:
                    6180   ; else if(Condition == (unsigned short int)(0x05))
00003734  0C42 0005 6181          cmp.w     #5,D2
00003738  660E      6182          bne.s     DecodeBranchCondition_3
                    6183   ; strcatInstruction("CS") ;
0000373A  4879 0000 6184          pea       @md_192.L
0000373E  762E      
00003740  4E92      6185          jsr       (A2)
00003742  584F      6186          addq.w    #4,A7
00003744  6000 0108 6187          bra       DecodeBranchCondition_30
                    6188   DecodeBranchCondition_3:
                    6189   ; else if(Condition == (unsigned short int)(0x07))
00003748  0C42 0007 6190          cmp.w     #7,D2
0000374C  660E      6191          bne.s     DecodeBranchCondition_5
                    6192   ; strcatInstruction("EQ") ;
0000374E  4879 0000 6193          pea       @md_193.L
00003752  7632      
00003754  4E92      6194          jsr       (A2)
00003756  584F      6195          addq.w    #4,A7
00003758  6000 00F4 6196          bra       DecodeBranchCondition_30
                    6197   DecodeBranchCondition_5:
                    6198   ; else if(Condition == (unsigned short int)(0x0C))
0000375C  0C42 000C 6199          cmp.w     #12,D2
00003760  660E      6200          bne.s     DecodeBranchCondition_7
                    6201   ; strcatInstruction("GE") ;
00003762  4879 0000 6202          pea       @md_194.L
00003766  7636      
00003768  4E92      6203          jsr       (A2)
0000376A  584F      6204          addq.w    #4,A7
0000376C  6000 00E0 6205          bra       DecodeBranchCondition_30
                    6206   DecodeBranchCondition_7:
                    6207   ; else if(Condition == (unsigned short int)(0x0E))
00003770  0C42 000E 6208          cmp.w     #14,D2
00003774  660E      6209          bne.s     DecodeBranchCondition_9
                    6210   ; strcatInstruction("GT") ;
00003776  4879 0000 6211          pea       @md_195.L
0000377A  763A      
0000377C  4E92      6212          jsr       (A2)
0000377E  584F      6213          addq.w    #4,A7
00003780  6000 00CC 6214          bra       DecodeBranchCondition_30
                    6215   DecodeBranchCondition_9:
                    6216   ; else if(Condition == (unsigned short int)(0x02))
00003784  0C42 0002 6217          cmp.w     #2,D2
00003788  660E      6218          bne.s     DecodeBranchCondition_11
                    6219   ; strcatInstruction("HI") ;
0000378A  4879 0000 6220          pea       @md_196.L
0000378E  763E      
00003790  4E92      6221          jsr       (A2)
00003792  584F      6222          addq.w    #4,A7
00003794  6000 00B8 6223          bra       DecodeBranchCondition_30
                    6224   DecodeBranchCondition_11:
                    6225   ; else if(Condition == (unsigned short int)(0x0F))
00003798  0C42 000F 6226          cmp.w     #15,D2
0000379C  660E      6227          bne.s     DecodeBranchCondition_13
                    6228   ; strcatInstruction("LE") ;
0000379E  4879 0000 6229          pea       @md_197.L
000037A2  7642      
000037A4  4E92      6230          jsr       (A2)
000037A6  584F      6231          addq.w    #4,A7
000037A8  6000 00A4 6232          bra       DecodeBranchCondition_30
                    6233   DecodeBranchCondition_13:
                    6234   ; else if(Condition == (unsigned short int)(0x03))
000037AC  0C42 0003 6235          cmp.w     #3,D2
000037B0  660E      6236          bne.s     DecodeBranchCondition_15
                    6237   ; strcatInstruction("LS") ;
000037B2  4879 0000 6238          pea       @md_198.L
000037B6  7646      
000037B8  4E92      6239          jsr       (A2)
000037BA  584F      6240          addq.w    #4,A7
000037BC  6000 0090 6241          bra       DecodeBranchCondition_30
                    6242   DecodeBranchCondition_15:
                    6243   ; else if(Condition == (unsigned short int)(0x0D))
000037C0  0C42 000D 6244          cmp.w     #13,D2
000037C4  660E      6245          bne.s     DecodeBranchCondition_17
                    6246   ; strcatInstruction("LT") ;
000037C6  4879 0000 6247          pea       @md_199.L
000037CA  764A      
000037CC  4E92      6248          jsr       (A2)
000037CE  584F      6249          addq.w    #4,A7
000037D0  6000 007C 6250          bra       DecodeBranchCondition_30
                    6251   DecodeBranchCondition_17:
                    6252   ; else if(Condition == (unsigned short int)(0x0B))
000037D4  0C42 000B 6253          cmp.w     #11,D2
000037D8  660E      6254          bne.s     DecodeBranchCondition_19
                    6255   ; strcatInstruction("MI") ;
000037DA  4879 0000 6256          pea       @md_200.L
000037DE  764E      
000037E0  4E92      6257          jsr       (A2)
000037E2  584F      6258          addq.w    #4,A7
000037E4  6000 0068 6259          bra       DecodeBranchCondition_30
                    6260   DecodeBranchCondition_19:
                    6261   ; else if(Condition == (unsigned short int)(0x06))
000037E8  0C42 0006 6262          cmp.w     #6,D2
000037EC  660E      6263          bne.s     DecodeBranchCondition_21
                    6264   ; strcatInstruction("NE") ;
000037EE  4879 0000 6265          pea       @md_201.L
000037F2  7652      
000037F4  4E92      6266          jsr       (A2)
000037F6  584F      6267          addq.w    #4,A7
000037F8  6000 0054 6268          bra       DecodeBranchCondition_30
                    6269   DecodeBranchCondition_21:
                    6270   ; else if(Condition == (unsigned short int)(0x0A))
000037FC  0C42 000A 6271          cmp.w     #10,D2
00003800  660E      6272          bne.s     DecodeBranchCondition_23
                    6273   ; strcatInstruction("PL") ;
00003802  4879 0000 6274          pea       @md_202.L
00003806  7656      
00003808  4E92      6275          jsr       (A2)
0000380A  584F      6276          addq.w    #4,A7
0000380C  6000 0040 6277          bra       DecodeBranchCondition_30
                    6278   DecodeBranchCondition_23:
                    6279   ; else if(Condition == (unsigned short int)(0x09))
00003810  0C42 0009 6280          cmp.w     #9,D2
00003814  660C      6281          bne.s     DecodeBranchCondition_25
                    6282   ; strcatInstruction("VS") ;
00003816  4879 0000 6283          pea       @md_203.L
0000381A  765A      
0000381C  4E92      6284          jsr       (A2)
0000381E  584F      6285          addq.w    #4,A7
00003820  602C      6286          bra.s     DecodeBranchCondition_30
                    6287   DecodeBranchCondition_25:
                    6288   ; else if(Condition == (unsigned short int)(0x08))
00003822  0C42 0008 6289          cmp.w     #8,D2
00003826  660C      6290          bne.s     DecodeBranchCondition_27
                    6291   ; strcatInstruction("VC") ;
00003828  4879 0000 6292          pea       @md_204.L
0000382C  765E      
0000382E  4E92      6293          jsr       (A2)
00003830  584F      6294          addq.w    #4,A7
00003832  601A      6295          bra.s     DecodeBranchCondition_30
                    6296   DecodeBranchCondition_27:
                    6297   ; else if(Condition == (unsigned short int)(0))
00003834  4A42      6298          tst.w     D2
00003836  660C      6299          bne.s     DecodeBranchCondition_29
                    6300   ; strcatInstruction("RA") ;
00003838  4879 0000 6301          pea       @md_205.L
0000383C  7662      
0000383E  4E92      6302          jsr       (A2)
00003840  584F      6303          addq.w    #4,A7
00003842  600A      6304          bra.s     DecodeBranchCondition_30
                    6305   DecodeBranchCondition_29:
                    6306   ; else
                    6307   ; strcatInstruction("SR");
00003844  4879 0000 6308          pea       @md_206.L
00003848  7666      
0000384A  4E92      6309          jsr       (A2)
0000384C  584F      6310          addq.w    #4,A7
                    6311   DecodeBranchCondition_30:
                    6312   ; strcatInstruction(" ") ;
0000384E  4879 0000 6313          pea       @md_30.L
00003852  658A      
00003854  4E92      6314          jsr       (A2)
00003856  584F      6315          addq.w    #4,A7
00003858  4CDF 0404 6316          movem.l   (A7)+,D2/A2
0000385C  4E5E      6317          unlk      A6
0000385E  4E75      6318          rts
                    6319   ; }
                    6320   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6321   ; {
                    6322   _DisassembleInstruction:
00003860  4E56 FFD8 6323          link      A6,#-40
00003864  48E7 3F3C 6324          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003868  242E 0008 6325          move.l    8(A6),D2
0000386C  45F9 0803 6326          lea       _InstructionSize.L,A2
00003870  017E      
00003872  47F8 0CE6 6327          lea       _strcpyInstruction.L,A3
00003876  49F9 0803 6328          lea       _TempString.L,A4
0000387A  0546      
0000387C  4BF9 0000 6329          lea       _sprintf.L,A5
00003880  5888      
                    6330   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003882  2042      6331          move.l    D2,A0
00003884  3010      6332          move.w    (A0),D0
00003886  E040      6333          asr.w     #8,D0
00003888  E840      6334          asr.w     #4,D0
0000388A  3D40 FFDA 6335          move.w    D0,-38(A6)
                    6336   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
0000388E  2042      6337          move.l    D2,A0
00003890  3010      6338          move.w    (A0),D0
00003892  C07C 0FFF 6339          and.w     #4095,D0
00003896  3D40 FFDC 6340          move.w    D0,-36(A6)
                    6341   ; unsigned short int SourceBits, DestBits, Size ;
                    6342   ; unsigned char *Mode, Condition;
                    6343   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6344   ; unsigned short int DataRegister, AddressRegister;
                    6345   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6346   ; signed short int Displacement16Bit;
                    6347   ; short int Mask, DoneSlash;
                    6348   ; int i;
                    6349   ; strcpyInstruction("Unknown") ;
0000389A  4879 0000 6350          pea       @md_207.L
0000389E  766A      
000038A0  4E93      6351          jsr       (A3)
000038A2  584F      6352          addq.w    #4,A7
                    6353   ; /////////////////////////////////////////////////////////////////////////////////
                    6354   ; // if instruction is ABCD
                    6355   ; /////////////////////////////////////////////////////////////////////////////////
                    6356   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
000038A4  2042      6357          move.l    D2,A0
000038A6  3010      6358          move.w    (A0),D0
000038A8  C07C F1F0 6359          and.w     #61936,D0
000038AC  0C40 C100 6360          cmp.w     #49408,D0
000038B0  6600 008C 6361          bne       DisassembleInstruction_4
                    6362   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000038B4  2042      6363          move.l    D2,A0
000038B6  3010      6364          move.w    (A0),D0
000038B8  E040      6365          asr.w     #8,D0
000038BA  E240      6366          asr.w     #1,D0
000038BC  C07C 0007 6367          and.w     #7,D0
000038C0  3D40 FFE0 6368          move.w    D0,-32(A6)
                    6369   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000038C4  2042      6370          move.l    D2,A0
000038C6  3010      6371          move.w    (A0),D0
000038C8  C07C 0007 6372          and.w     #7,D0
000038CC  3D40 FFDE 6373          move.w    D0,-34(A6)
                    6374   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000038D0  2042      6375          move.l    D2,A0
000038D2  3010      6376          move.w    (A0),D0
000038D4  E640      6377          asr.w     #3,D0
000038D6  48C0      6378          ext.l     D0
000038D8  C0BC 0000 6379          and.l     #1,D0
000038DC  0001      
000038DE  2D40 FFE4 6380          move.l    D0,-28(A6)
                    6381   ; if(Mode == 0)
000038E2  202E FFE4 6382          move.l    -28(A6),D0
000038E6  662C      6383          bne.s     DisassembleInstruction_3
                    6384   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
000038E8  322E FFE0 6385          move.w    -32(A6),D1
000038EC  C2BC 0000 6386          and.l     #65535,D1
000038F0  FFFF      
000038F2  2F01      6387          move.l    D1,-(A7)
000038F4  322E FFDE 6388          move.w    -34(A6),D1
000038F8  C2BC 0000 6389          and.l     #65535,D1
000038FC  FFFF      
000038FE  2F01      6390          move.l    D1,-(A7)
00003900  4879 0000 6391          pea       @md_208.L
00003904  7672      
00003906  4879 0803 6392          pea       _Instruction.L
0000390A  04E2      
0000390C  4E95      6393          jsr       (A5)
0000390E  DEFC 0010 6394          add.w     #16,A7
00003912  602A      6395          bra.s     DisassembleInstruction_4
                    6396   DisassembleInstruction_3:
                    6397   ; else
                    6398   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003914  322E FFE0 6399          move.w    -32(A6),D1
00003918  C2BC 0000 6400          and.l     #65535,D1
0000391C  FFFF      
0000391E  2F01      6401          move.l    D1,-(A7)
00003920  322E FFDE 6402          move.w    -34(A6),D1
00003924  C2BC 0000 6403          and.l     #65535,D1
00003928  FFFF      
0000392A  2F01      6404          move.l    D1,-(A7)
0000392C  4879 0000 6405          pea       @md_209.L
00003930  7680      
00003932  4879 0803 6406          pea       _Instruction.L
00003936  04E2      
00003938  4E95      6407          jsr       (A5)
0000393A  DEFC 0010 6408          add.w     #16,A7
                    6409   DisassembleInstruction_4:
                    6410   ; }
                    6411   ; /////////////////////////////////////////////////////////////////////////////////
                    6412   ; // if instruction is ADD or ADDA
                    6413   ; /////////////////////////////////////////////////////////////////////////////////
                    6414   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
0000393E  2042      6415          move.l    D2,A0
00003940  3010      6416          move.w    (A0),D0
00003942  C07C F000 6417          and.w     #61440,D0
00003946  0C40 D000 6418          cmp.w     #53248,D0
0000394A  6600 008C 6419          bne       DisassembleInstruction_8
                    6420   ; InstructionSize = 1;
0000394E  24BC 0000 6421          move.l    #1,(A2)
00003952  0001      
                    6422   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003954  2042      6423          move.l    D2,A0
00003956  3010      6424          move.w    (A0),D0
00003958  EC40      6425          asr.w     #6,D0
0000395A  C07C 0007 6426          and.w     #7,D0
0000395E  3600      6427          move.w    D0,D3
                    6428   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00003960  0C43 0003 6429          cmp.w     #3,D3
00003964  6708      6430          beq.s     DisassembleInstruction_9
00003966  0C43 0007 6431          cmp.w     #7,D3
0000396A  6600 005A 6432          bne       DisassembleInstruction_7
                    6433   DisassembleInstruction_9:
                    6434   ; {
                    6435   ; if(OpMode == (unsigned short int)(0x0003))
0000396E  0C43 0003 6436          cmp.w     #3,D3
00003972  660C      6437          bne.s     DisassembleInstruction_10
                    6438   ; strcpyInstruction("ADDA.W ") ;
00003974  4879 0000 6439          pea       @md_210.L
00003978  7694      
0000397A  4E93      6440          jsr       (A3)
0000397C  584F      6441          addq.w    #4,A7
0000397E  600A      6442          bra.s     DisassembleInstruction_11
                    6443   DisassembleInstruction_10:
                    6444   ; else
                    6445   ; strcpyInstruction("ADDA.L ") ;
00003980  4879 0000 6446          pea       @md_211.L
00003984  769C      
00003986  4E93      6447          jsr       (A3)
00003988  584F      6448          addq.w    #4,A7
                    6449   DisassembleInstruction_11:
                    6450   ; Decode6BitEA(OpCode,0,0,0)  ;
0000398A  42A7      6451          clr.l     -(A7)
0000398C  42A7      6452          clr.l     -(A7)
0000398E  42A7      6453          clr.l     -(A7)
00003990  2F02      6454          move.l    D2,-(A7)
00003992  4EB8 324C 6455          jsr       _Decode6BitEA
00003996  DEFC 0010 6456          add.w     #16,A7
                    6457   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000399A  2042      6458          move.l    D2,A0
0000399C  3210      6459          move.w    (A0),D1
0000399E  E041      6460          asr.w     #8,D1
000039A0  E241      6461          asr.w     #1,D1
000039A2  C27C 0007 6462          and.w     #7,D1
000039A6  C2BC 0000 6463          and.l     #65535,D1
000039AA  FFFF      
000039AC  2F01      6464          move.l    D1,-(A7)
000039AE  4879 0000 6465          pea       @md_212.L
000039B2  76A4      
000039B4  2F0C      6466          move.l    A4,-(A7)
000039B6  4E95      6467          jsr       (A5)
000039B8  DEFC 000C 6468          add.w     #12,A7
                    6469   ; strcatInstruction(TempString) ;
000039BC  2F0C      6470          move.l    A4,-(A7)
000039BE  4EB8 0CCC 6471          jsr       _strcatInstruction
000039C2  584F      6472          addq.w    #4,A7
000039C4  6012      6473          bra.s     DisassembleInstruction_8
                    6474   DisassembleInstruction_7:
                    6475   ; }
                    6476   ; else {
                    6477   ; strcpyInstruction("ADD") ;
000039C6  4879 0000 6478          pea       @md_213.L
000039CA  76AA      
000039CC  4E93      6479          jsr       (A3)
000039CE  584F      6480          addq.w    #4,A7
                    6481   ; Decode3BitOperandMode(OpCode) ;
000039D0  2F02      6482          move.l    D2,-(A7)
000039D2  4EB8 3674 6483          jsr       _Decode3BitOperandMode
000039D6  584F      6484          addq.w    #4,A7
                    6485   DisassembleInstruction_8:
                    6486   ; }
                    6487   ; }
                    6488   ; /////////////////////////////////////////////////////////////////////////////////
                    6489   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6490   ; /////////////////////////////////////////////////////////////////////////////////
                    6491   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
000039D8  2042      6492          move.l    D2,A0
000039DA  3010      6493          move.w    (A0),D0
000039DC  C07C FF00 6494          and.w     #65280,D0
000039E0  0C40 0600 6495          cmp.w     #1536,D0
000039E4  6604      6496          bne.s     DisassembleInstruction_14
000039E6  7001      6497          moveq     #1,D0
000039E8  6002      6498          bra.s     DisassembleInstruction_15
                    6499   DisassembleInstruction_14:
000039EA  4280      6500          clr.l     D0
                    6501   DisassembleInstruction_15:
000039EC  2042      6502          move.l    D2,A0
000039EE  3210      6503          move.w    (A0),D1
000039F0  C27C FF00 6504          and.w     #65280,D1
000039F4  0C41 0200 6505          cmp.w     #512,D1
000039F8  6604      6506          bne.s     DisassembleInstruction_16
000039FA  7201      6507          moveq     #1,D1
000039FC  6002      6508          bra.s     DisassembleInstruction_17
                    6509   DisassembleInstruction_16:
000039FE  4281      6510          clr.l     D1
                    6511   DisassembleInstruction_17:
00003A00  8041      6512          or.w      D1,D0
00003A02  2042      6513          move.l    D2,A0
00003A04  3210      6514          move.w    (A0),D1
00003A06  C27C FF00 6515          and.w     #65280,D1
00003A0A  0C41 0C00 6516          cmp.w     #3072,D1
00003A0E  6604      6517          bne.s     DisassembleInstruction_18
00003A10  7201      6518          moveq     #1,D1
00003A12  6002      6519          bra.s     DisassembleInstruction_19
                    6520   DisassembleInstruction_18:
00003A14  4281      6521          clr.l     D1
                    6522   DisassembleInstruction_19:
00003A16  8041      6523          or.w      D1,D0
00003A18  2042      6524          move.l    D2,A0
00003A1A  3210      6525          move.w    (A0),D1
00003A1C  C27C FF00 6526          and.w     #65280,D1
00003A20  0C41 0A00 6527          cmp.w     #2560,D1
00003A24  6604      6528          bne.s     DisassembleInstruction_20
00003A26  7201      6529          moveq     #1,D1
00003A28  6002      6530          bra.s     DisassembleInstruction_21
                    6531   DisassembleInstruction_20:
00003A2A  4281      6532          clr.l     D1
                    6533   DisassembleInstruction_21:
00003A2C  8041      6534          or.w      D1,D0
00003A2E  2042      6535          move.l    D2,A0
00003A30  3210      6536          move.w    (A0),D1
00003A32  C27C FF00 6537          and.w     #65280,D1
00003A36  6604      6538          bne.s     DisassembleInstruction_22
00003A38  7201      6539          moveq     #1,D1
00003A3A  6002      6540          bra.s     DisassembleInstruction_23
                    6541   DisassembleInstruction_22:
00003A3C  4281      6542          clr.l     D1
                    6543   DisassembleInstruction_23:
00003A3E  8041      6544          or.w      D1,D0
00003A40  2042      6545          move.l    D2,A0
00003A42  3210      6546          move.w    (A0),D1
00003A44  C27C FF00 6547          and.w     #65280,D1
00003A48  0C41 0400 6548          cmp.w     #1024,D1
00003A4C  6604      6549          bne.s     DisassembleInstruction_24
00003A4E  7201      6550          moveq     #1,D1
00003A50  6002      6551          bra.s     DisassembleInstruction_25
                    6552   DisassembleInstruction_24:
00003A52  4281      6553          clr.l     D1
                    6554   DisassembleInstruction_25:
00003A54  8041      6555          or.w      D1,D0
00003A56  6700 00E4 6556          beq       DisassembleInstruction_12
                    6557   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6558   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6559   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6560   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6561   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6562   ; {
                    6563   ; InstructionSize = 1;
00003A5A  24BC 0000 6564          move.l    #1,(A2)
00003A5E  0001      
                    6565   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003A60  2042      6566          move.l    D2,A0
00003A62  3010      6567          move.w    (A0),D0
00003A64  C07C FF00 6568          and.w     #65280,D0
00003A68  0C40 0600 6569          cmp.w     #1536,D0
00003A6C  660E      6570          bne.s     DisassembleInstruction_26
                    6571   ; strcpyInstruction("ADDI") ;
00003A6E  4879 0000 6572          pea       @md_214.L
00003A72  76AE      
00003A74  4E93      6573          jsr       (A3)
00003A76  584F      6574          addq.w    #4,A7
00003A78  6000 0084 6575          bra       DisassembleInstruction_36
                    6576   DisassembleInstruction_26:
                    6577   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003A7C  2042      6578          move.l    D2,A0
00003A7E  3010      6579          move.w    (A0),D0
00003A80  C07C FF00 6580          and.w     #65280,D0
00003A84  0C40 0200 6581          cmp.w     #512,D0
00003A88  660E      6582          bne.s     DisassembleInstruction_28
                    6583   ; strcpyInstruction("ANDI") ;
00003A8A  4879 0000 6584          pea       @md_215.L
00003A8E  76B4      
00003A90  4E93      6585          jsr       (A3)
00003A92  584F      6586          addq.w    #4,A7
00003A94  6000 0068 6587          bra       DisassembleInstruction_36
                    6588   DisassembleInstruction_28:
                    6589   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003A98  2042      6590          move.l    D2,A0
00003A9A  3010      6591          move.w    (A0),D0
00003A9C  C07C FF00 6592          and.w     #65280,D0
00003AA0  0C40 0C00 6593          cmp.w     #3072,D0
00003AA4  660E      6594          bne.s     DisassembleInstruction_30
                    6595   ; strcpyInstruction("CMPI") ;
00003AA6  4879 0000 6596          pea       @md_216.L
00003AAA  76BA      
00003AAC  4E93      6597          jsr       (A3)
00003AAE  584F      6598          addq.w    #4,A7
00003AB0  6000 004C 6599          bra       DisassembleInstruction_36
                    6600   DisassembleInstruction_30:
                    6601   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003AB4  2042      6602          move.l    D2,A0
00003AB6  3010      6603          move.w    (A0),D0
00003AB8  C07C FF00 6604          and.w     #65280,D0
00003ABC  0C40 0A00 6605          cmp.w     #2560,D0
00003AC0  660E      6606          bne.s     DisassembleInstruction_32
                    6607   ; strcpyInstruction("EORI") ;
00003AC2  4879 0000 6608          pea       @md_217.L
00003AC6  76C0      
00003AC8  4E93      6609          jsr       (A3)
00003ACA  584F      6610          addq.w    #4,A7
00003ACC  6000 0030 6611          bra       DisassembleInstruction_36
                    6612   DisassembleInstruction_32:
                    6613   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003AD0  2042      6614          move.l    D2,A0
00003AD2  3010      6615          move.w    (A0),D0
00003AD4  C07C FF00 6616          and.w     #65280,D0
00003AD8  660C      6617          bne.s     DisassembleInstruction_34
                    6618   ; strcpyInstruction("ORI") ;
00003ADA  4879 0000 6619          pea       @md_218.L
00003ADE  76C6      
00003AE0  4E93      6620          jsr       (A3)
00003AE2  584F      6621          addq.w    #4,A7
00003AE4  6018      6622          bra.s     DisassembleInstruction_36
                    6623   DisassembleInstruction_34:
                    6624   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003AE6  2042      6625          move.l    D2,A0
00003AE8  3010      6626          move.w    (A0),D0
00003AEA  C07C FF00 6627          and.w     #65280,D0
00003AEE  0C40 0400 6628          cmp.w     #1024,D0
00003AF2  660A      6629          bne.s     DisassembleInstruction_36
                    6630   ; strcpyInstruction("SUBI") ;
00003AF4  4879 0000 6631          pea       @md_219.L
00003AF8  76CA      
00003AFA  4E93      6632          jsr       (A3)
00003AFC  584F      6633          addq.w    #4,A7
                    6634   DisassembleInstruction_36:
                    6635   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003AFE  2042      6636          move.l    D2,A0
00003B00  3210      6637          move.w    (A0),D1
00003B02  C2BC 0000 6638          and.l     #65535,D1
00003B06  FFFF      
00003B08  2F01      6639          move.l    D1,-(A7)
00003B0A  4EB8 2FB8 6640          jsr       _Decode2BitOperandSize
00003B0E  584F      6641          addq.w    #4,A7
00003B10  3E00      6642          move.w    D0,D7
                    6643   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003B12  2F02      6644          move.l    D2,-(A7)
00003B14  4EB8 313C 6645          jsr       _DecodeBWLDataAfterOpCode
00003B18  584F      6646          addq.w    #4,A7
                    6647   ; strcatInstruction(",") ;
00003B1A  4879 0000 6648          pea       @md_190.L
00003B1E  7628      
00003B20  4EB8 0CCC 6649          jsr       _strcatInstruction
00003B24  584F      6650          addq.w    #4,A7
                    6651   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003B26  42A7      6652          clr.l     -(A7)
00003B28  CEBC 0000 6653          and.l     #65535,D7
00003B2C  FFFF      
00003B2E  2F07      6654          move.l    D7,-(A7)
00003B30  42A7      6655          clr.l     -(A7)
00003B32  2F02      6656          move.l    D2,-(A7)
00003B34  4EB8 324C 6657          jsr       _Decode6BitEA
00003B38  DEFC 0010 6658          add.w     #16,A7
                    6659   DisassembleInstruction_12:
                    6660   ; }
                    6661   ; /////////////////////////////////////////////////////////////////////////////////
                    6662   ; // if instruction is ADDI #data,SR
                    6663   ; /////////////////////////////////////////////////////////////////////////////////
                    6664   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003B3C  2042      6665          move.l    D2,A0
00003B3E  3010      6666          move.w    (A0),D0
00003B40  0C40 027C 6667          cmp.w     #636,D0
00003B44  6622      6668          bne.s     DisassembleInstruction_38
                    6669   ; InstructionSize = 2;
00003B46  24BC 0000 6670          move.l    #2,(A2)
00003B4A  0002      
                    6671   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003B4C  2042      6672          move.l    D2,A0
00003B4E  3228 0002 6673          move.w    2(A0),D1
00003B52  48C1      6674          ext.l     D1
00003B54  2F01      6675          move.l    D1,-(A7)
00003B56  4879 0000 6676          pea       @md_220.L
00003B5A  76D0      
00003B5C  4879 0803 6677          pea       _Instruction.L
00003B60  04E2      
00003B62  4E95      6678          jsr       (A5)
00003B64  DEFC 000C 6679          add.w     #12,A7
                    6680   DisassembleInstruction_38:
                    6681   ; }
                    6682   ; /////////////////////////////////////////////////////////////////////////////////
                    6683   ; // if instruction is ADDQ
                    6684   ; /////////////////////////////////////////////////////////////////////////////////
                    6685   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003B68  2042      6686          move.l    D2,A0
00003B6A  3010      6687          move.w    (A0),D0
00003B6C  C07C F100 6688          and.w     #61696,D0
00003B70  0C40 5000 6689          cmp.w     #20480,D0
00003B74  6600 005E 6690          bne       DisassembleInstruction_40
                    6691   ; InstructionSize = 1;
00003B78  24BC 0000 6692          move.l    #1,(A2)
00003B7C  0001      
                    6693   ; strcpyInstruction("ADDQ") ;
00003B7E  4879 0000 6694          pea       @md_221.L
00003B82  76DE      
00003B84  4E93      6695          jsr       (A3)
00003B86  584F      6696          addq.w    #4,A7
                    6697   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003B88  2042      6698          move.l    D2,A0
00003B8A  3210      6699          move.w    (A0),D1
00003B8C  C2BC 0000 6700          and.l     #65535,D1
00003B90  FFFF      
00003B92  2F01      6701          move.l    D1,-(A7)
00003B94  4EB8 2FB8 6702          jsr       _Decode2BitOperandSize
00003B98  584F      6703          addq.w    #4,A7
                    6704   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003B9A  2042      6705          move.l    D2,A0
00003B9C  3210      6706          move.w    (A0),D1
00003B9E  E041      6707          asr.w     #8,D1
00003BA0  E241      6708          asr.w     #1,D1
00003BA2  C27C 0007 6709          and.w     #7,D1
00003BA6  C2BC 0000 6710          and.l     #65535,D1
00003BAA  FFFF      
00003BAC  2F01      6711          move.l    D1,-(A7)
00003BAE  4879 0000 6712          pea       @md_222.L
00003BB2  76E4      
00003BB4  2F0C      6713          move.l    A4,-(A7)
00003BB6  4E95      6714          jsr       (A5)
00003BB8  DEFC 000C 6715          add.w     #12,A7
                    6716   ; strcatInstruction(TempString) ;
00003BBC  2F0C      6717          move.l    A4,-(A7)
00003BBE  4EB8 0CCC 6718          jsr       _strcatInstruction
00003BC2  584F      6719          addq.w    #4,A7
                    6720   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003BC4  42A7      6721          clr.l     -(A7)
00003BC6  42A7      6722          clr.l     -(A7)
00003BC8  42A7      6723          clr.l     -(A7)
00003BCA  2F02      6724          move.l    D2,-(A7)
00003BCC  4EB8 324C 6725          jsr       _Decode6BitEA
00003BD0  DEFC 0010 6726          add.w     #16,A7
                    6727   DisassembleInstruction_40:
                    6728   ; }
                    6729   ; /////////////////////////////////////////////////////////////////////////////////
                    6730   ; // if instruction is ADDX
                    6731   ; /////////////////////////////////////////////////////////////////////////////////
                    6732   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003BD4  2042      6733          move.l    D2,A0
00003BD6  3010      6734          move.w    (A0),D0
00003BD8  C07C F130 6735          and.w     #61744,D0
00003BDC  0C40 D100 6736          cmp.w     #53504,D0
00003BE0  6600 00A4 6737          bne       DisassembleInstruction_44
                    6738   ; InstructionSize = 1;
00003BE4  24BC 0000 6739          move.l    #1,(A2)
00003BE8  0001      
                    6740   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003BEA  2042      6741          move.l    D2,A0
00003BEC  3010      6742          move.w    (A0),D0
00003BEE  EC40      6743          asr.w     #6,D0
00003BF0  C07C 0003 6744          and.w     #3,D0
00003BF4  3600      6745          move.w    D0,D3
                    6746   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003BF6  0C43 0003 6747          cmp.w     #3,D3
00003BFA  6700 008A 6748          beq       DisassembleInstruction_44
                    6749   ; {
                    6750   ; strcpyInstruction("ADDX") ;
00003BFE  4879 0000 6751          pea       @md_223.L
00003C02  76EA      
00003C04  4E93      6752          jsr       (A3)
00003C06  584F      6753          addq.w    #4,A7
                    6754   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003C08  2042      6755          move.l    D2,A0
00003C0A  3210      6756          move.w    (A0),D1
00003C0C  C2BC 0000 6757          and.l     #65535,D1
00003C10  FFFF      
00003C12  2F01      6758          move.l    D1,-(A7)
00003C14  4EB8 2FB8 6759          jsr       _Decode2BitOperandSize
00003C18  584F      6760          addq.w    #4,A7
                    6761   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003C1A  2042      6762          move.l    D2,A0
00003C1C  3010      6763          move.w    (A0),D0
00003C1E  C07C 0008 6764          and.w     #8,D0
00003C22  6600 0030 6765          bne       DisassembleInstruction_46
                    6766   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003C26  2042      6767          move.l    D2,A0
00003C28  3210      6768          move.w    (A0),D1
00003C2A  E041      6769          asr.w     #8,D1
00003C2C  E241      6770          asr.w     #1,D1
00003C2E  C27C 0007 6771          and.w     #7,D1
00003C32  48C1      6772          ext.l     D1
00003C34  2F01      6773          move.l    D1,-(A7)
00003C36  2042      6774          move.l    D2,A0
00003C38  3210      6775          move.w    (A0),D1
00003C3A  C27C 0007 6776          and.w     #7,D1
00003C3E  48C1      6777          ext.l     D1
00003C40  2F01      6778          move.l    D1,-(A7)
00003C42  4879 0000 6779          pea       @md_224.L
00003C46  76F0      
00003C48  2F0C      6780          move.l    A4,-(A7)
00003C4A  4E95      6781          jsr       (A5)
00003C4C  DEFC 0010 6782          add.w     #16,A7
00003C50  6000 002C 6783          bra       DisassembleInstruction_47
                    6784   DisassembleInstruction_46:
                    6785   ; else        // -(ax),-(ay) mode used
                    6786   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003C54  2042      6787          move.l    D2,A0
00003C56  3210      6788          move.w    (A0),D1
00003C58  E041      6789          asr.w     #8,D1
00003C5A  E241      6790          asr.w     #1,D1
00003C5C  C27C 0007 6791          and.w     #7,D1
00003C60  48C1      6792          ext.l     D1
00003C62  2F01      6793          move.l    D1,-(A7)
00003C64  2042      6794          move.l    D2,A0
00003C66  3210      6795          move.w    (A0),D1
00003C68  C27C 0007 6796          and.w     #7,D1
00003C6C  48C1      6797          ext.l     D1
00003C6E  2F01      6798          move.l    D1,-(A7)
00003C70  4879 0000 6799          pea       @md_225.L
00003C74  76F8      
00003C76  2F0C      6800          move.l    A4,-(A7)
00003C78  4E95      6801          jsr       (A5)
00003C7A  DEFC 0010 6802          add.w     #16,A7
                    6803   DisassembleInstruction_47:
                    6804   ; strcatInstruction(TempString) ;
00003C7E  2F0C      6805          move.l    A4,-(A7)
00003C80  4EB8 0CCC 6806          jsr       _strcatInstruction
00003C84  584F      6807          addq.w    #4,A7
                    6808   DisassembleInstruction_44:
                    6809   ; }
                    6810   ; }
                    6811   ; /////////////////////////////////////////////////////////////////////////////////
                    6812   ; // if instruction is AND
                    6813   ; /////////////////////////////////////////////////////////////////////////////////
                    6814   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003C86  2042      6815          move.l    D2,A0
00003C88  3010      6816          move.w    (A0),D0
00003C8A  C07C F000 6817          and.w     #61440,D0
00003C8E  0C40 C000 6818          cmp.w     #49152,D0
00003C92  662A      6819          bne.s     DisassembleInstruction_50
                    6820   ; InstructionSize = 1;
00003C94  24BC 0000 6821          move.l    #1,(A2)
00003C98  0001      
                    6822   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6823   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003C9A  2042      6824          move.l    D2,A0
00003C9C  3010      6825          move.w    (A0),D0
00003C9E  E840      6826          asr.w     #4,D0
00003CA0  C07C 001F 6827          and.w     #31,D0
00003CA4  3600      6828          move.w    D0,D3
                    6829   ; if(OpMode != (unsigned short int)(0x0010))   {
00003CA6  0C43 0010 6830          cmp.w     #16,D3
00003CAA  6712      6831          beq.s     DisassembleInstruction_50
                    6832   ; strcpyInstruction("AND") ;
00003CAC  4879 0000 6833          pea       @md_226.L
00003CB0  7706      
00003CB2  4E93      6834          jsr       (A3)
00003CB4  584F      6835          addq.w    #4,A7
                    6836   ; Decode3BitOperandMode(OpCode) ;
00003CB6  2F02      6837          move.l    D2,-(A7)
00003CB8  4EB8 3674 6838          jsr       _Decode3BitOperandMode
00003CBC  584F      6839          addq.w    #4,A7
                    6840   DisassembleInstruction_50:
                    6841   ; }
                    6842   ; }
                    6843   ; /////////////////////////////////////////////////////////////////////////////////
                    6844   ; // if instruction is ANDI to CCR
                    6845   ; /////////////////////////////////////////////////////////////////////////////////
                    6846   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003CBE  2042      6847          move.l    D2,A0
00003CC0  3010      6848          move.w    (A0),D0
00003CC2  0C40 023C 6849          cmp.w     #572,D0
00003CC6  662A      6850          bne.s     DisassembleInstruction_52
                    6851   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003CC8  2042      6852          move.l    D2,A0
00003CCA  3228 0002 6853          move.w    2(A0),D1
00003CCE  C27C 00FF 6854          and.w     #255,D1
00003CD2  C2BC 0000 6855          and.l     #65535,D1
00003CD6  FFFF      
00003CD8  2F01      6856          move.l    D1,-(A7)
00003CDA  4879 0000 6857          pea       @md_227.L
00003CDE  770A      
00003CE0  4879 0803 6858          pea       _Instruction.L
00003CE4  04E2      
00003CE6  4E95      6859          jsr       (A5)
00003CE8  DEFC 000C 6860          add.w     #12,A7
                    6861   ; InstructionSize = 2;
00003CEC  24BC 0000 6862          move.l    #2,(A2)
00003CF0  0002      
                    6863   DisassembleInstruction_52:
                    6864   ; }
                    6865   ; /////////////////////////////////////////////////////////////////////////////////
                    6866   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6867   ; /////////////////////////////////////////////////////////////////////////////////
                    6868   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003CF2  2042      6869          move.l    D2,A0
00003CF4  3010      6870          move.w    (A0),D0
00003CF6  C07C F018 6871          and.w     #61464,D0
00003CFA  0C40 E000 6872          cmp.w     #57344,D0
00003CFE  6604      6873          bne.s     DisassembleInstruction_56
00003D00  7001      6874          moveq     #1,D0
00003D02  6002      6875          bra.s     DisassembleInstruction_57
                    6876   DisassembleInstruction_56:
00003D04  4280      6877          clr.l     D0
                    6878   DisassembleInstruction_57:
00003D06  2042      6879          move.l    D2,A0
00003D08  3210      6880          move.w    (A0),D1
00003D0A  C27C FEC0 6881          and.w     #65216,D1
00003D0E  0C41 E0C0 6882          cmp.w     #57536,D1
00003D12  6604      6883          bne.s     DisassembleInstruction_58
00003D14  7201      6884          moveq     #1,D1
00003D16  6002      6885          bra.s     DisassembleInstruction_59
                    6886   DisassembleInstruction_58:
00003D18  4281      6887          clr.l     D1
                    6888   DisassembleInstruction_59:
00003D1A  8041      6889          or.w      D1,D0
00003D1C  2042      6890          move.l    D2,A0
00003D1E  3210      6891          move.w    (A0),D1
00003D20  C27C F018 6892          and.w     #61464,D1
00003D24  0C41 E008 6893          cmp.w     #57352,D1
00003D28  6604      6894          bne.s     DisassembleInstruction_60
00003D2A  7201      6895          moveq     #1,D1
00003D2C  6002      6896          bra.s     DisassembleInstruction_61
                    6897   DisassembleInstruction_60:
00003D2E  4281      6898          clr.l     D1
                    6899   DisassembleInstruction_61:
00003D30  8041      6900          or.w      D1,D0
00003D32  2042      6901          move.l    D2,A0
00003D34  3210      6902          move.w    (A0),D1
00003D36  C27C FEC0 6903          and.w     #65216,D1
00003D3A  0C41 E2C0 6904          cmp.w     #58048,D1
00003D3E  6604      6905          bne.s     DisassembleInstruction_62
00003D40  7201      6906          moveq     #1,D1
00003D42  6002      6907          bra.s     DisassembleInstruction_63
                    6908   DisassembleInstruction_62:
00003D44  4281      6909          clr.l     D1
                    6910   DisassembleInstruction_63:
00003D46  8041      6911          or.w      D1,D0
00003D48  2042      6912          move.l    D2,A0
00003D4A  3210      6913          move.w    (A0),D1
00003D4C  C27C F018 6914          and.w     #61464,D1
00003D50  0C41 E018 6915          cmp.w     #57368,D1
00003D54  6604      6916          bne.s     DisassembleInstruction_64
00003D56  7201      6917          moveq     #1,D1
00003D58  6002      6918          bra.s     DisassembleInstruction_65
                    6919   DisassembleInstruction_64:
00003D5A  4281      6920          clr.l     D1
                    6921   DisassembleInstruction_65:
00003D5C  8041      6922          or.w      D1,D0
00003D5E  2042      6923          move.l    D2,A0
00003D60  3210      6924          move.w    (A0),D1
00003D62  C27C FEC0 6925          and.w     #65216,D1
00003D66  0C41 E6C0 6926          cmp.w     #59072,D1
00003D6A  6604      6927          bne.s     DisassembleInstruction_66
00003D6C  7201      6928          moveq     #1,D1
00003D6E  6002      6929          bra.s     DisassembleInstruction_67
                    6930   DisassembleInstruction_66:
00003D70  4281      6931          clr.l     D1
                    6932   DisassembleInstruction_67:
00003D72  8041      6933          or.w      D1,D0
00003D74  2042      6934          move.l    D2,A0
00003D76  3210      6935          move.w    (A0),D1
00003D78  C27C F018 6936          and.w     #61464,D1
00003D7C  0C41 E010 6937          cmp.w     #57360,D1
00003D80  6604      6938          bne.s     DisassembleInstruction_68
00003D82  7201      6939          moveq     #1,D1
00003D84  6002      6940          bra.s     DisassembleInstruction_69
                    6941   DisassembleInstruction_68:
00003D86  4281      6942          clr.l     D1
                    6943   DisassembleInstruction_69:
00003D88  8041      6944          or.w      D1,D0
00003D8A  2042      6945          move.l    D2,A0
00003D8C  3210      6946          move.w    (A0),D1
00003D8E  C27C FEC0 6947          and.w     #65216,D1
00003D92  0C41 E4C0 6948          cmp.w     #58560,D1
00003D96  6604      6949          bne.s     DisassembleInstruction_70
00003D98  7201      6950          moveq     #1,D1
00003D9A  6002      6951          bra.s     DisassembleInstruction_71
                    6952   DisassembleInstruction_70:
00003D9C  4281      6953          clr.l     D1
                    6954   DisassembleInstruction_71:
00003D9E  8041      6955          or.w      D1,D0
00003DA0  6700 0252 6956          beq       DisassembleInstruction_73
                    6957   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6958   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6959   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6960   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6961   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6962   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6963   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6964   ; {
                    6965   ; InstructionSize = 1;
00003DA4  24BC 0000 6966          move.l    #1,(A2)
00003DA8  0001      
                    6967   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6968   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003DAA  2042      6969          move.l    D2,A0
00003DAC  3010      6970          move.w    (A0),D0
00003DAE  C07C 00C0 6971          and.w     #192,D0
00003DB2  0C40 00C0 6972          cmp.w     #192,D0
00003DB6  6600 00EA 6973          bne       DisassembleInstruction_72
                    6974   ; {
                    6975   ; // test direction by testing bit 8
                    6976   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003DBA  2042      6977          move.l    D2,A0
00003DBC  3010      6978          move.w    (A0),D0
00003DBE  C07C FEC0 6979          and.w     #65216,D0
00003DC2  0C40 E0C0 6980          cmp.w     #57536,D0
00003DC6  6624      6981          bne.s     DisassembleInstruction_77
                    6982   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003DC8  2042      6983          move.l    D2,A0
00003DCA  3010      6984          move.w    (A0),D0
00003DCC  C07C 0100 6985          and.w     #256,D0
00003DD0  0C40 0100 6986          cmp.w     #256,D0
00003DD4  660C      6987          bne.s     DisassembleInstruction_76
                    6988   ; strcpyInstruction("ASL") ;
00003DD6  4879 0000 6989          pea       @md_228.L
00003DDA  771A      
00003DDC  4E93      6990          jsr       (A3)
00003DDE  584F      6991          addq.w    #4,A7
00003DE0  600A      6992          bra.s     DisassembleInstruction_77
                    6993   DisassembleInstruction_76:
                    6994   ; else
                    6995   ; strcpyInstruction("ASR") ;
00003DE2  4879 0000 6996          pea       @md_229.L
00003DE6  771E      
00003DE8  4E93      6997          jsr       (A3)
00003DEA  584F      6998          addq.w    #4,A7
                    6999   DisassembleInstruction_77:
                    7000   ; // test direction by testing bit 8
                    7001   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003DEC  2042      7002          move.l    D2,A0
00003DEE  3010      7003          move.w    (A0),D0
00003DF0  C07C FEC0 7004          and.w     #65216,D0
00003DF4  0C40 E2C0 7005          cmp.w     #58048,D0
00003DF8  6624      7006          bne.s     DisassembleInstruction_81
                    7007   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003DFA  2042      7008          move.l    D2,A0
00003DFC  3010      7009          move.w    (A0),D0
00003DFE  C07C 0100 7010          and.w     #256,D0
00003E02  0C40 0100 7011          cmp.w     #256,D0
00003E06  660C      7012          bne.s     DisassembleInstruction_80
                    7013   ; strcpyInstruction("LSL") ;
00003E08  4879 0000 7014          pea       @md_230.L
00003E0C  7722      
00003E0E  4E93      7015          jsr       (A3)
00003E10  584F      7016          addq.w    #4,A7
00003E12  600A      7017          bra.s     DisassembleInstruction_81
                    7018   DisassembleInstruction_80:
                    7019   ; else
                    7020   ; strcpyInstruction("LSR") ;
00003E14  4879 0000 7021          pea       @md_231.L
00003E18  7726      
00003E1A  4E93      7022          jsr       (A3)
00003E1C  584F      7023          addq.w    #4,A7
                    7024   DisassembleInstruction_81:
                    7025   ; // test direction by testing bit 8
                    7026   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003E1E  2042      7027          move.l    D2,A0
00003E20  3010      7028          move.w    (A0),D0
00003E22  C07C FEC0 7029          and.w     #65216,D0
00003E26  0C40 E6C0 7030          cmp.w     #59072,D0
00003E2A  6624      7031          bne.s     DisassembleInstruction_85
                    7032   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E2C  2042      7033          move.l    D2,A0
00003E2E  3010      7034          move.w    (A0),D0
00003E30  C07C 0100 7035          and.w     #256,D0
00003E34  0C40 0100 7036          cmp.w     #256,D0
00003E38  660C      7037          bne.s     DisassembleInstruction_84
                    7038   ; strcpyInstruction("ROL") ;
00003E3A  4879 0000 7039          pea       @md_232.L
00003E3E  772A      
00003E40  4E93      7040          jsr       (A3)
00003E42  584F      7041          addq.w    #4,A7
00003E44  600A      7042          bra.s     DisassembleInstruction_85
                    7043   DisassembleInstruction_84:
                    7044   ; else
                    7045   ; strcpyInstruction("ROR") ;
00003E46  4879 0000 7046          pea       @md_233.L
00003E4A  772E      
00003E4C  4E93      7047          jsr       (A3)
00003E4E  584F      7048          addq.w    #4,A7
                    7049   DisassembleInstruction_85:
                    7050   ; // test direction by testing bit 8
                    7051   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003E50  2042      7052          move.l    D2,A0
00003E52  3010      7053          move.w    (A0),D0
00003E54  C07C FEC0 7054          and.w     #65216,D0
00003E58  0C40 E4C0 7055          cmp.w     #58560,D0
00003E5C  6624      7056          bne.s     DisassembleInstruction_89
                    7057   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E5E  2042      7058          move.l    D2,A0
00003E60  3010      7059          move.w    (A0),D0
00003E62  C07C 0100 7060          and.w     #256,D0
00003E66  0C40 0100 7061          cmp.w     #256,D0
00003E6A  660C      7062          bne.s     DisassembleInstruction_88
                    7063   ; strcpyInstruction("ROXL") ;
00003E6C  4879 0000 7064          pea       @md_234.L
00003E70  7732      
00003E72  4E93      7065          jsr       (A3)
00003E74  584F      7066          addq.w    #4,A7
00003E76  600A      7067          bra.s     DisassembleInstruction_89
                    7068   DisassembleInstruction_88:
                    7069   ; else
                    7070   ; strcpyInstruction("ROXR") ;
00003E78  4879 0000 7071          pea       @md_235.L
00003E7C  7738      
00003E7E  4E93      7072          jsr       (A3)
00003E80  584F      7073          addq.w    #4,A7
                    7074   DisassembleInstruction_89:
                    7075   ; strcatInstruction("  ") ;
00003E82  4879 0000 7076          pea       @md_15.L
00003E86  63B8      
00003E88  4EB8 0CCC 7077          jsr       _strcatInstruction
00003E8C  584F      7078          addq.w    #4,A7
                    7079   ; Decode6BitEA(OpCode,0, 0,0) ;
00003E8E  42A7      7080          clr.l     -(A7)
00003E90  42A7      7081          clr.l     -(A7)
00003E92  42A7      7082          clr.l     -(A7)
00003E94  2F02      7083          move.l    D2,-(A7)
00003E96  4EB8 324C 7084          jsr       _Decode6BitEA
00003E9A  DEFC 0010 7085          add.w     #16,A7
00003E9E  6000 0154 7086          bra       DisassembleInstruction_73
                    7087   DisassembleInstruction_72:
                    7088   ; }
                    7089   ; // first version of above instructions, bit 5 is 0
                    7090   ; else
                    7091   ; {
                    7092   ; // test instruction and direction by testing bits 4,3
                    7093   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003EA2  2042      7094          move.l    D2,A0
00003EA4  3010      7095          move.w    (A0),D0
00003EA6  C07C 0018 7096          and.w     #24,D0
00003EAA  6624      7097          bne.s     DisassembleInstruction_93
                    7098   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003EAC  2042      7099          move.l    D2,A0
00003EAE  3010      7100          move.w    (A0),D0
00003EB0  C07C 0100 7101          and.w     #256,D0
00003EB4  0C40 0100 7102          cmp.w     #256,D0
00003EB8  660C      7103          bne.s     DisassembleInstruction_92
                    7104   ; strcpyInstruction("ASL") ;
00003EBA  4879 0000 7105          pea       @md_228.L
00003EBE  771A      
00003EC0  4E93      7106          jsr       (A3)
00003EC2  584F      7107          addq.w    #4,A7
00003EC4  600A      7108          bra.s     DisassembleInstruction_93
                    7109   DisassembleInstruction_92:
                    7110   ; else
                    7111   ; strcpyInstruction("ASR") ;
00003EC6  4879 0000 7112          pea       @md_229.L
00003ECA  771E      
00003ECC  4E93      7113          jsr       (A3)
00003ECE  584F      7114          addq.w    #4,A7
                    7115   DisassembleInstruction_93:
                    7116   ; // test instruction and direction by testing bits 4,3
                    7117   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003ED0  2042      7118          move.l    D2,A0
00003ED2  3010      7119          move.w    (A0),D0
00003ED4  C07C 0018 7120          and.w     #24,D0
00003ED8  0C40 0008 7121          cmp.w     #8,D0
00003EDC  6624      7122          bne.s     DisassembleInstruction_97
                    7123   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003EDE  2042      7124          move.l    D2,A0
00003EE0  3010      7125          move.w    (A0),D0
00003EE2  C07C 0100 7126          and.w     #256,D0
00003EE6  0C40 0100 7127          cmp.w     #256,D0
00003EEA  660C      7128          bne.s     DisassembleInstruction_96
                    7129   ; strcpyInstruction("LSL") ;
00003EEC  4879 0000 7130          pea       @md_230.L
00003EF0  7722      
00003EF2  4E93      7131          jsr       (A3)
00003EF4  584F      7132          addq.w    #4,A7
00003EF6  600A      7133          bra.s     DisassembleInstruction_97
                    7134   DisassembleInstruction_96:
                    7135   ; else
                    7136   ; strcpyInstruction("LSR") ;
00003EF8  4879 0000 7137          pea       @md_231.L
00003EFC  7726      
00003EFE  4E93      7138          jsr       (A3)
00003F00  584F      7139          addq.w    #4,A7
                    7140   DisassembleInstruction_97:
                    7141   ; // test instruction and direction by testing bits 4,3
                    7142   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003F02  2042      7143          move.l    D2,A0
00003F04  3010      7144          move.w    (A0),D0
00003F06  C07C 0018 7145          and.w     #24,D0
00003F0A  0C40 0018 7146          cmp.w     #24,D0
00003F0E  6624      7147          bne.s     DisassembleInstruction_101
                    7148   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F10  2042      7149          move.l    D2,A0
00003F12  3010      7150          move.w    (A0),D0
00003F14  C07C 0100 7151          and.w     #256,D0
00003F18  0C40 0100 7152          cmp.w     #256,D0
00003F1C  660C      7153          bne.s     DisassembleInstruction_100
                    7154   ; strcpyInstruction("ROL") ;
00003F1E  4879 0000 7155          pea       @md_232.L
00003F22  772A      
00003F24  4E93      7156          jsr       (A3)
00003F26  584F      7157          addq.w    #4,A7
00003F28  600A      7158          bra.s     DisassembleInstruction_101
                    7159   DisassembleInstruction_100:
                    7160   ; else
                    7161   ; strcpyInstruction("ROR") ;
00003F2A  4879 0000 7162          pea       @md_233.L
00003F2E  772E      
00003F30  4E93      7163          jsr       (A3)
00003F32  584F      7164          addq.w    #4,A7
                    7165   DisassembleInstruction_101:
                    7166   ; // test instruction and direction by testing bits 4,3
                    7167   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003F34  2042      7168          move.l    D2,A0
00003F36  3010      7169          move.w    (A0),D0
00003F38  C07C 0018 7170          and.w     #24,D0
00003F3C  0C40 0010 7171          cmp.w     #16,D0
00003F40  6624      7172          bne.s     DisassembleInstruction_105
                    7173   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F42  2042      7174          move.l    D2,A0
00003F44  3010      7175          move.w    (A0),D0
00003F46  C07C 0100 7176          and.w     #256,D0
00003F4A  0C40 0100 7177          cmp.w     #256,D0
00003F4E  660C      7178          bne.s     DisassembleInstruction_104
                    7179   ; strcpyInstruction("ROXL") ;
00003F50  4879 0000 7180          pea       @md_234.L
00003F54  7732      
00003F56  4E93      7181          jsr       (A3)
00003F58  584F      7182          addq.w    #4,A7
00003F5A  600A      7183          bra.s     DisassembleInstruction_105
                    7184   DisassembleInstruction_104:
                    7185   ; else
                    7186   ; strcpyInstruction("ROXR") ;
00003F5C  4879 0000 7187          pea       @md_235.L
00003F60  7738      
00003F62  4E93      7188          jsr       (A3)
00003F64  584F      7189          addq.w    #4,A7
                    7190   DisassembleInstruction_105:
                    7191   ; Decode2BitOperandSize(*OpCode) ;
00003F66  2042      7192          move.l    D2,A0
00003F68  3210      7193          move.w    (A0),D1
00003F6A  C2BC 0000 7194          and.l     #65535,D1
00003F6E  FFFF      
00003F70  2F01      7195          move.l    D1,-(A7)
00003F72  4EB8 2FB8 7196          jsr       _Decode2BitOperandSize
00003F76  584F      7197          addq.w    #4,A7
                    7198   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003F78  2042      7199          move.l    D2,A0
00003F7A  3010      7200          move.w    (A0),D0
00003F7C  C07C 0020 7201          and.w     #32,D0
00003F80  6600 0038 7202          bne       DisassembleInstruction_106
                    7203   ; sprintf(TempString,"#$%X,D%X",
00003F84  2042      7204          move.l    D2,A0
00003F86  3210      7205          move.w    (A0),D1
00003F88  C27C 0007 7206          and.w     #7,D1
00003F8C  C2BC 0000 7207          and.l     #65535,D1
00003F90  FFFF      
00003F92  2F01      7208          move.l    D1,-(A7)
00003F94  2042      7209          move.l    D2,A0
00003F96  3210      7210          move.w    (A0),D1
00003F98  E041      7211          asr.w     #8,D1
00003F9A  E241      7212          asr.w     #1,D1
00003F9C  C27C 0007 7213          and.w     #7,D1
00003FA0  C2BC 0000 7214          and.l     #65535,D1
00003FA4  FFFF      
00003FA6  2F01      7215          move.l    D1,-(A7)
00003FA8  4879 0000 7216          pea       @md_236.L
00003FAC  773E      
00003FAE  2F0C      7217          move.l    A4,-(A7)
00003FB0  4E95      7218          jsr       (A5)
00003FB2  DEFC 0010 7219          add.w     #16,A7
00003FB6  6000 0034 7220          bra       DisassembleInstruction_107
                    7221   DisassembleInstruction_106:
                    7222   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7223   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7224   ; }
                    7225   ; else {                                                                      // if shift is for example ASR D1,D2
                    7226   ; sprintf(TempString,"D%X,D%X",
00003FBA  2042      7227          move.l    D2,A0
00003FBC  3210      7228          move.w    (A0),D1
00003FBE  C27C 0007 7229          and.w     #7,D1
00003FC2  C2BC 0000 7230          and.l     #65535,D1
00003FC6  FFFF      
00003FC8  2F01      7231          move.l    D1,-(A7)
00003FCA  2042      7232          move.l    D2,A0
00003FCC  3210      7233          move.w    (A0),D1
00003FCE  E041      7234          asr.w     #8,D1
00003FD0  E241      7235          asr.w     #1,D1
00003FD2  C27C 0007 7236          and.w     #7,D1
00003FD6  C2BC 0000 7237          and.l     #65535,D1
00003FDA  FFFF      
00003FDC  2F01      7238          move.l    D1,-(A7)
00003FDE  4879 0000 7239          pea       @md_224.L
00003FE2  76F0      
00003FE4  2F0C      7240          move.l    A4,-(A7)
00003FE6  4E95      7241          jsr       (A5)
00003FE8  DEFC 0010 7242          add.w     #16,A7
                    7243   DisassembleInstruction_107:
                    7244   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7245   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7246   ; }
                    7247   ; strcatInstruction(TempString) ;
00003FEC  2F0C      7248          move.l    A4,-(A7)
00003FEE  4EB8 0CCC 7249          jsr       _strcatInstruction
00003FF2  584F      7250          addq.w    #4,A7
                    7251   DisassembleInstruction_73:
                    7252   ; }
                    7253   ; }
                    7254   ; /////////////////////////////////////////////////////////////////////////////////
                    7255   ; // if instruction is BCC and BSR and BRA
                    7256   ; /////////////////////////////////////////////////////////////////////////////////
                    7257   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003FF4  2042      7258          move.l    D2,A0
00003FF6  3010      7259          move.w    (A0),D0
00003FF8  C07C F000 7260          and.w     #61440,D0
00003FFC  0C40 6000 7261          cmp.w     #24576,D0
00004000  6600 00A0 7262          bne       DisassembleInstruction_108
                    7263   ; {
                    7264   ; InstructionSize = 1;
00004004  24BC 0000 7265          move.l    #1,(A2)
00004008  0001      
                    7266   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
0000400A  2042      7267          move.l    D2,A0
0000400C  3010      7268          move.w    (A0),D0
0000400E  E040      7269          asr.w     #8,D0
00004010  C07C 000F 7270          and.w     #15,D0
00004014  1D40 FFE9 7271          move.b    D0,-23(A6)
                    7272   ; strcpyInstruction("B") ;
00004018  4879 0000 7273          pea       @md_237.L
0000401C  7748      
0000401E  4E93      7274          jsr       (A3)
00004020  584F      7275          addq.w    #4,A7
                    7276   ; DecodeBranchCondition(Condition) ;
00004022  122E FFE9 7277          move.b    -23(A6),D1
00004026  C27C 00FF 7278          and.w     #255,D1
0000402A  C2BC 0000 7279          and.l     #65535,D1
0000402E  FFFF      
00004030  2F01      7280          move.l    D1,-(A7)
00004032  4EB8 370A 7281          jsr       _DecodeBranchCondition
00004036  584F      7282          addq.w    #4,A7
                    7283   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00004038  2042      7284          move.l    D2,A0
0000403A  3010      7285          move.w    (A0),D0
0000403C  C07C 00FF 7286          and.w     #255,D0
00004040  1D40 FFFB 7287          move.b    D0,-5(A6)
                    7288   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00004044  102E FFFB 7289          move.b    -5(A6),D0
00004048  4880      7290          ext.w     D0
0000404A  4A40      7291          tst.w     D0
0000404C  662A      7292          bne.s     DisassembleInstruction_110
                    7293   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
0000404E  2202      7294          move.l    D2,D1
00004050  2042      7295          move.l    D2,A0
00004052  2F00      7296          move.l    D0,-(A7)
00004054  3028 0002 7297          move.w    2(A0),D0
00004058  48C0      7298          ext.l     D0
0000405A  D280      7299          add.l     D0,D1
0000405C  201F      7300          move.l    (A7)+,D0
0000405E  5481      7301          addq.l    #2,D1
00004060  2F01      7302          move.l    D1,-(A7)
00004062  4879 0000 7303          pea       @md_187.L
00004066  7614      
00004068  2F0C      7304          move.l    A4,-(A7)
0000406A  4E95      7305          jsr       (A5)
0000406C  DEFC 000C 7306          add.w     #12,A7
                    7307   ; InstructionSize = 2 ;
00004070  24BC 0000 7308          move.l    #2,(A2)
00004074  0002      
00004076  6022      7309          bra.s     DisassembleInstruction_111
                    7310   DisassembleInstruction_110:
                    7311   ; }
                    7312   ; else
                    7313   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00004078  2202      7314          move.l    D2,D1
0000407A  2F00      7315          move.l    D0,-(A7)
0000407C  102E FFFB 7316          move.b    -5(A6),D0
00004080  4880      7317          ext.w     D0
00004082  48C0      7318          ext.l     D0
00004084  D280      7319          add.l     D0,D1
00004086  201F      7320          move.l    (A7)+,D0
00004088  5481      7321          addq.l    #2,D1
0000408A  2F01      7322          move.l    D1,-(A7)
0000408C  4879 0000 7323          pea       @md_187.L
00004090  7614      
00004092  2F0C      7324          move.l    A4,-(A7)
00004094  4E95      7325          jsr       (A5)
00004096  DEFC 000C 7326          add.w     #12,A7
                    7327   DisassembleInstruction_111:
                    7328   ; strcatInstruction(TempString) ;
0000409A  2F0C      7329          move.l    A4,-(A7)
0000409C  4EB8 0CCC 7330          jsr       _strcatInstruction
000040A0  584F      7331          addq.w    #4,A7
                    7332   DisassembleInstruction_108:
                    7333   ; }
                    7334   ; /////////////////////////////////////////////////////////////////////////////////
                    7335   ; // if instruction is BCHG dn,<EA>
                    7336   ; /////////////////////////////////////////////////////////////////////////////////
                    7337   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
000040A2  2042      7338          move.l    D2,A0
000040A4  3010      7339          move.w    (A0),D0
000040A6  C07C F1C0 7340          and.w     #61888,D0
000040AA  0C40 0140 7341          cmp.w     #320,D0
000040AE  6600 004C 7342          bne       DisassembleInstruction_112
                    7343   ; InstructionSize = 1;
000040B2  24BC 0000 7344          move.l    #1,(A2)
000040B6  0001      
                    7345   ; strcpyInstruction("BCHG ") ;
000040B8  4879 0000 7346          pea       @md_238.L
000040BC  774A      
000040BE  4E93      7347          jsr       (A3)
000040C0  584F      7348          addq.w    #4,A7
                    7349   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000040C2  2042      7350          move.l    D2,A0
000040C4  3210      7351          move.w    (A0),D1
000040C6  E041      7352          asr.w     #8,D1
000040C8  E241      7353          asr.w     #1,D1
000040CA  C27C 0007 7354          and.w     #7,D1
000040CE  C2BC 0000 7355          and.l     #65535,D1
000040D2  FFFF      
000040D4  2F01      7356          move.l    D1,-(A7)
000040D6  4879 0000 7357          pea       @md_239.L
000040DA  7750      
000040DC  2F0C      7358          move.l    A4,-(A7)
000040DE  4E95      7359          jsr       (A5)
000040E0  DEFC 000C 7360          add.w     #12,A7
                    7361   ; strcatInstruction(TempString) ;
000040E4  2F0C      7362          move.l    A4,-(A7)
000040E6  4EB8 0CCC 7363          jsr       _strcatInstruction
000040EA  584F      7364          addq.w    #4,A7
                    7365   ; Decode6BitEA(OpCode,0,0,0) ;
000040EC  42A7      7366          clr.l     -(A7)
000040EE  42A7      7367          clr.l     -(A7)
000040F0  42A7      7368          clr.l     -(A7)
000040F2  2F02      7369          move.l    D2,-(A7)
000040F4  4EB8 324C 7370          jsr       _Decode6BitEA
000040F8  DEFC 0010 7371          add.w     #16,A7
                    7372   DisassembleInstruction_112:
                    7373   ; }
                    7374   ; /////////////////////////////////////////////////////////////////////////////////
                    7375   ; // if instruction is BCHG #data,<EA>
                    7376   ; /////////////////////////////////////////////////////////////////////////////////
                    7377   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
000040FC  2042      7378          move.l    D2,A0
000040FE  3010      7379          move.w    (A0),D0
00004100  C07C FFC0 7380          and.w     #65472,D0
00004104  0C40 0840 7381          cmp.w     #2112,D0
00004108  6600 0044 7382          bne       DisassembleInstruction_114
                    7383   ; strcpyInstruction("BCHG ") ;
0000410C  4879 0000 7384          pea       @md_238.L
00004110  774A      
00004112  4E93      7385          jsr       (A3)
00004114  584F      7386          addq.w    #4,A7
                    7387   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004116  2042      7388          move.l    D2,A0
00004118  3228 0002 7389          move.w    2(A0),D1
0000411C  48C1      7390          ext.l     D1
0000411E  2F01      7391          move.l    D1,-(A7)
00004120  4879 0000 7392          pea       @md_240.L
00004124  7756      
00004126  2F0C      7393          move.l    A4,-(A7)
00004128  4E95      7394          jsr       (A5)
0000412A  DEFC 000C 7395          add.w     #12,A7
                    7396   ; InstructionSize = 2 ;
0000412E  24BC 0000 7397          move.l    #2,(A2)
00004132  0002      
                    7398   ; strcatInstruction(TempString) ;
00004134  2F0C      7399          move.l    A4,-(A7)
00004136  4EB8 0CCC 7400          jsr       _strcatInstruction
0000413A  584F      7401          addq.w    #4,A7
                    7402   ; Decode6BitEA(OpCode,0,1,0) ;
0000413C  42A7      7403          clr.l     -(A7)
0000413E  4878 0001 7404          pea       1
00004142  42A7      7405          clr.l     -(A7)
00004144  2F02      7406          move.l    D2,-(A7)
00004146  4EB8 324C 7407          jsr       _Decode6BitEA
0000414A  DEFC 0010 7408          add.w     #16,A7
                    7409   DisassembleInstruction_114:
                    7410   ; }
                    7411   ; /////////////////////////////////////////////////////////////////////////////////
                    7412   ; // if instruction is BCLR  dn,<EA>
                    7413   ; /////////////////////////////////////////////////////////////////////////////////
                    7414   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
0000414E  2042      7415          move.l    D2,A0
00004150  3010      7416          move.w    (A0),D0
00004152  C07C F1C0 7417          and.w     #61888,D0
00004156  0C40 0180 7418          cmp.w     #384,D0
0000415A  6600 004C 7419          bne       DisassembleInstruction_116
                    7420   ; InstructionSize = 1;
0000415E  24BC 0000 7421          move.l    #1,(A2)
00004162  0001      
                    7422   ; strcpyInstruction("BCLR ") ;
00004164  4879 0000 7423          pea       @md_241.L
00004168  775C      
0000416A  4E93      7424          jsr       (A3)
0000416C  584F      7425          addq.w    #4,A7
                    7426   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000416E  2042      7427          move.l    D2,A0
00004170  3210      7428          move.w    (A0),D1
00004172  E041      7429          asr.w     #8,D1
00004174  E241      7430          asr.w     #1,D1
00004176  C27C 0007 7431          and.w     #7,D1
0000417A  C2BC 0000 7432          and.l     #65535,D1
0000417E  FFFF      
00004180  2F01      7433          move.l    D1,-(A7)
00004182  4879 0000 7434          pea       @md_239.L
00004186  7750      
00004188  2F0C      7435          move.l    A4,-(A7)
0000418A  4E95      7436          jsr       (A5)
0000418C  DEFC 000C 7437          add.w     #12,A7
                    7438   ; strcatInstruction(TempString) ;
00004190  2F0C      7439          move.l    A4,-(A7)
00004192  4EB8 0CCC 7440          jsr       _strcatInstruction
00004196  584F      7441          addq.w    #4,A7
                    7442   ; Decode6BitEA(OpCode,0,0,0) ;
00004198  42A7      7443          clr.l     -(A7)
0000419A  42A7      7444          clr.l     -(A7)
0000419C  42A7      7445          clr.l     -(A7)
0000419E  2F02      7446          move.l    D2,-(A7)
000041A0  4EB8 324C 7447          jsr       _Decode6BitEA
000041A4  DEFC 0010 7448          add.w     #16,A7
                    7449   DisassembleInstruction_116:
                    7450   ; }
                    7451   ; /////////////////////////////////////////////////////////////////////////////////
                    7452   ; // if instruction is BCLR #data,<EA>
                    7453   ; /////////////////////////////////////////////////////////////////////////////////
                    7454   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
000041A8  2042      7455          move.l    D2,A0
000041AA  3010      7456          move.w    (A0),D0
000041AC  C07C FFC0 7457          and.w     #65472,D0
000041B0  0C40 0880 7458          cmp.w     #2176,D0
000041B4  6600 0044 7459          bne       DisassembleInstruction_118
                    7460   ; strcpyInstruction("BCLR ") ;
000041B8  4879 0000 7461          pea       @md_241.L
000041BC  775C      
000041BE  4E93      7462          jsr       (A3)
000041C0  584F      7463          addq.w    #4,A7
                    7464   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000041C2  2042      7465          move.l    D2,A0
000041C4  3228 0002 7466          move.w    2(A0),D1
000041C8  48C1      7467          ext.l     D1
000041CA  2F01      7468          move.l    D1,-(A7)
000041CC  4879 0000 7469          pea       @md_240.L
000041D0  7756      
000041D2  2F0C      7470          move.l    A4,-(A7)
000041D4  4E95      7471          jsr       (A5)
000041D6  DEFC 000C 7472          add.w     #12,A7
                    7473   ; InstructionSize = 2 ;
000041DA  24BC 0000 7474          move.l    #2,(A2)
000041DE  0002      
                    7475   ; strcatInstruction(TempString) ;
000041E0  2F0C      7476          move.l    A4,-(A7)
000041E2  4EB8 0CCC 7477          jsr       _strcatInstruction
000041E6  584F      7478          addq.w    #4,A7
                    7479   ; Decode6BitEA(OpCode,0,1,0) ;
000041E8  42A7      7480          clr.l     -(A7)
000041EA  4878 0001 7481          pea       1
000041EE  42A7      7482          clr.l     -(A7)
000041F0  2F02      7483          move.l    D2,-(A7)
000041F2  4EB8 324C 7484          jsr       _Decode6BitEA
000041F6  DEFC 0010 7485          add.w     #16,A7
                    7486   DisassembleInstruction_118:
                    7487   ; }
                    7488   ; /////////////////////////////////////////////////////////////////////////////////
                    7489   ; // if instruction is BSET dn,<EA>
                    7490   ; /////////////////////////////////////////////////////////////////////////////////
                    7491   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
000041FA  2042      7492          move.l    D2,A0
000041FC  3010      7493          move.w    (A0),D0
000041FE  C07C F1C0 7494          and.w     #61888,D0
00004202  0C40 01C0 7495          cmp.w     #448,D0
00004206  6600 004C 7496          bne       DisassembleInstruction_120
                    7497   ; InstructionSize = 1;
0000420A  24BC 0000 7498          move.l    #1,(A2)
0000420E  0001      
                    7499   ; strcpyInstruction("BSET ") ;
00004210  4879 0000 7500          pea       @md_242.L
00004214  7762      
00004216  4E93      7501          jsr       (A3)
00004218  584F      7502          addq.w    #4,A7
                    7503   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000421A  2042      7504          move.l    D2,A0
0000421C  3210      7505          move.w    (A0),D1
0000421E  E041      7506          asr.w     #8,D1
00004220  E241      7507          asr.w     #1,D1
00004222  C27C 0007 7508          and.w     #7,D1
00004226  C2BC 0000 7509          and.l     #65535,D1
0000422A  FFFF      
0000422C  2F01      7510          move.l    D1,-(A7)
0000422E  4879 0000 7511          pea       @md_239.L
00004232  7750      
00004234  2F0C      7512          move.l    A4,-(A7)
00004236  4E95      7513          jsr       (A5)
00004238  DEFC 000C 7514          add.w     #12,A7
                    7515   ; strcatInstruction(TempString) ;
0000423C  2F0C      7516          move.l    A4,-(A7)
0000423E  4EB8 0CCC 7517          jsr       _strcatInstruction
00004242  584F      7518          addq.w    #4,A7
                    7519   ; Decode6BitEA(OpCode,0,0,0) ;
00004244  42A7      7520          clr.l     -(A7)
00004246  42A7      7521          clr.l     -(A7)
00004248  42A7      7522          clr.l     -(A7)
0000424A  2F02      7523          move.l    D2,-(A7)
0000424C  4EB8 324C 7524          jsr       _Decode6BitEA
00004250  DEFC 0010 7525          add.w     #16,A7
                    7526   DisassembleInstruction_120:
                    7527   ; }
                    7528   ; /////////////////////////////////////////////////////////////////////////////////
                    7529   ; // if instruction is BSET #data,<EA>
                    7530   ; /////////////////////////////////////////////////////////////////////////////////
                    7531   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00004254  2042      7532          move.l    D2,A0
00004256  3010      7533          move.w    (A0),D0
00004258  C07C FFC0 7534          and.w     #65472,D0
0000425C  0C40 08C0 7535          cmp.w     #2240,D0
00004260  6600 0044 7536          bne       DisassembleInstruction_122
                    7537   ; strcpyInstruction("BSET ") ;
00004264  4879 0000 7538          pea       @md_242.L
00004268  7762      
0000426A  4E93      7539          jsr       (A3)
0000426C  584F      7540          addq.w    #4,A7
                    7541   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000426E  2042      7542          move.l    D2,A0
00004270  3228 0002 7543          move.w    2(A0),D1
00004274  48C1      7544          ext.l     D1
00004276  2F01      7545          move.l    D1,-(A7)
00004278  4879 0000 7546          pea       @md_240.L
0000427C  7756      
0000427E  2F0C      7547          move.l    A4,-(A7)
00004280  4E95      7548          jsr       (A5)
00004282  DEFC 000C 7549          add.w     #12,A7
                    7550   ; InstructionSize = 2 ;
00004286  24BC 0000 7551          move.l    #2,(A2)
0000428A  0002      
                    7552   ; strcatInstruction(TempString) ;
0000428C  2F0C      7553          move.l    A4,-(A7)
0000428E  4EB8 0CCC 7554          jsr       _strcatInstruction
00004292  584F      7555          addq.w    #4,A7
                    7556   ; Decode6BitEA(OpCode,0,1,0) ;
00004294  42A7      7557          clr.l     -(A7)
00004296  4878 0001 7558          pea       1
0000429A  42A7      7559          clr.l     -(A7)
0000429C  2F02      7560          move.l    D2,-(A7)
0000429E  4EB8 324C 7561          jsr       _Decode6BitEA
000042A2  DEFC 0010 7562          add.w     #16,A7
                    7563   DisassembleInstruction_122:
                    7564   ; }
                    7565   ; /////////////////////////////////////////////////////////////////////////////////
                    7566   ; // if instruction is BTST dn,<EA>
                    7567   ; /////////////////////////////////////////////////////////////////////////////////
                    7568   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
000042A6  2042      7569          move.l    D2,A0
000042A8  3010      7570          move.w    (A0),D0
000042AA  C07C F1C0 7571          and.w     #61888,D0
000042AE  0C40 0100 7572          cmp.w     #256,D0
000042B2  6600 004C 7573          bne       DisassembleInstruction_124
                    7574   ; InstructionSize = 1;
000042B6  24BC 0000 7575          move.l    #1,(A2)
000042BA  0001      
                    7576   ; strcpyInstruction("BTST ") ;
000042BC  4879 0000 7577          pea       @md_243.L
000042C0  7768      
000042C2  4E93      7578          jsr       (A3)
000042C4  584F      7579          addq.w    #4,A7
                    7580   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000042C6  2042      7581          move.l    D2,A0
000042C8  3210      7582          move.w    (A0),D1
000042CA  E041      7583          asr.w     #8,D1
000042CC  E241      7584          asr.w     #1,D1
000042CE  C27C 0007 7585          and.w     #7,D1
000042D2  C2BC 0000 7586          and.l     #65535,D1
000042D6  FFFF      
000042D8  2F01      7587          move.l    D1,-(A7)
000042DA  4879 0000 7588          pea       @md_239.L
000042DE  7750      
000042E0  2F0C      7589          move.l    A4,-(A7)
000042E2  4E95      7590          jsr       (A5)
000042E4  DEFC 000C 7591          add.w     #12,A7
                    7592   ; strcatInstruction(TempString) ;
000042E8  2F0C      7593          move.l    A4,-(A7)
000042EA  4EB8 0CCC 7594          jsr       _strcatInstruction
000042EE  584F      7595          addq.w    #4,A7
                    7596   ; Decode6BitEA(OpCode,0,0,0) ;
000042F0  42A7      7597          clr.l     -(A7)
000042F2  42A7      7598          clr.l     -(A7)
000042F4  42A7      7599          clr.l     -(A7)
000042F6  2F02      7600          move.l    D2,-(A7)
000042F8  4EB8 324C 7601          jsr       _Decode6BitEA
000042FC  DEFC 0010 7602          add.w     #16,A7
                    7603   DisassembleInstruction_124:
                    7604   ; }
                    7605   ; /////////////////////////////////////////////////////////////////////////////////
                    7606   ; // if instruction is BTST #data,<EA>
                    7607   ; /////////////////////////////////////////////////////////////////////////////////
                    7608   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00004300  2042      7609          move.l    D2,A0
00004302  3010      7610          move.w    (A0),D0
00004304  C07C FFC0 7611          and.w     #65472,D0
00004308  0C40 0800 7612          cmp.w     #2048,D0
0000430C  6600 0044 7613          bne       DisassembleInstruction_126
                    7614   ; strcpyInstruction("BTST ") ;
00004310  4879 0000 7615          pea       @md_243.L
00004314  7768      
00004316  4E93      7616          jsr       (A3)
00004318  584F      7617          addq.w    #4,A7
                    7618   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000431A  2042      7619          move.l    D2,A0
0000431C  3228 0002 7620          move.w    2(A0),D1
00004320  48C1      7621          ext.l     D1
00004322  2F01      7622          move.l    D1,-(A7)
00004324  4879 0000 7623          pea       @md_240.L
00004328  7756      
0000432A  2F0C      7624          move.l    A4,-(A7)
0000432C  4E95      7625          jsr       (A5)
0000432E  DEFC 000C 7626          add.w     #12,A7
                    7627   ; InstructionSize = 2 ;
00004332  24BC 0000 7628          move.l    #2,(A2)
00004336  0002      
                    7629   ; strcatInstruction(TempString) ;
00004338  2F0C      7630          move.l    A4,-(A7)
0000433A  4EB8 0CCC 7631          jsr       _strcatInstruction
0000433E  584F      7632          addq.w    #4,A7
                    7633   ; Decode6BitEA(OpCode,0,1,0) ;
00004340  42A7      7634          clr.l     -(A7)
00004342  4878 0001 7635          pea       1
00004346  42A7      7636          clr.l     -(A7)
00004348  2F02      7637          move.l    D2,-(A7)
0000434A  4EB8 324C 7638          jsr       _Decode6BitEA
0000434E  DEFC 0010 7639          add.w     #16,A7
                    7640   DisassembleInstruction_126:
                    7641   ; }
                    7642   ; /////////////////////////////////////////////////////////////////////////////////
                    7643   ; // if instruction is CHK.W <EA>,DN
                    7644   ; /////////////////////////////////////////////////////////////////////////////////
                    7645   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00004352  2042      7646          move.l    D2,A0
00004354  3010      7647          move.w    (A0),D0
00004356  C07C F1C0 7648          and.w     #61888,D0
0000435A  0C40 4180 7649          cmp.w     #16768,D0
0000435E  6600 004C 7650          bne       DisassembleInstruction_128
                    7651   ; InstructionSize = 1;
00004362  24BC 0000 7652          move.l    #1,(A2)
00004366  0001      
                    7653   ; strcpyInstruction("CHK ") ;
00004368  4879 0000 7654          pea       @md_244.L
0000436C  776E      
0000436E  4E93      7655          jsr       (A3)
00004370  584F      7656          addq.w    #4,A7
                    7657   ; Decode6BitEA(OpCode,0,0,0) ;
00004372  42A7      7658          clr.l     -(A7)
00004374  42A7      7659          clr.l     -(A7)
00004376  42A7      7660          clr.l     -(A7)
00004378  2F02      7661          move.l    D2,-(A7)
0000437A  4EB8 324C 7662          jsr       _Decode6BitEA
0000437E  DEFC 0010 7663          add.w     #16,A7
                    7664   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004382  2042      7665          move.l    D2,A0
00004384  3210      7666          move.w    (A0),D1
00004386  E041      7667          asr.w     #8,D1
00004388  E241      7668          asr.w     #1,D1
0000438A  C27C 0007 7669          and.w     #7,D1
0000438E  C2BC 0000 7670          and.l     #65535,D1
00004392  FFFF      
00004394  2F01      7671          move.l    D1,-(A7)
00004396  4879 0000 7672          pea       @md_245.L
0000439A  7774      
0000439C  2F0C      7673          move.l    A4,-(A7)
0000439E  4E95      7674          jsr       (A5)
000043A0  DEFC 000C 7675          add.w     #12,A7
                    7676   ; strcatInstruction(TempString) ;
000043A4  2F0C      7677          move.l    A4,-(A7)
000043A6  4EB8 0CCC 7678          jsr       _strcatInstruction
000043AA  584F      7679          addq.w    #4,A7
                    7680   DisassembleInstruction_128:
                    7681   ; }
                    7682   ; /////////////////////////////////////////////////////////////////////////////////
                    7683   ; // if instruction is CLR <EA>
                    7684   ; /////////////////////////////////////////////////////////////////////////////////
                    7685   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
000043AC  2042      7686          move.l    D2,A0
000043AE  3010      7687          move.w    (A0),D0
000043B0  C07C FF00 7688          and.w     #65280,D0
000043B4  0C40 4200 7689          cmp.w     #16896,D0
000043B8  6600 0034 7690          bne       DisassembleInstruction_130
                    7691   ; InstructionSize = 1;
000043BC  24BC 0000 7692          move.l    #1,(A2)
000043C0  0001      
                    7693   ; strcpyInstruction("CLR") ;
000043C2  4879 0000 7694          pea       @md_246.L
000043C6  777A      
000043C8  4E93      7695          jsr       (A3)
000043CA  584F      7696          addq.w    #4,A7
                    7697   ; Decode2BitOperandSize(*OpCode) ;
000043CC  2042      7698          move.l    D2,A0
000043CE  3210      7699          move.w    (A0),D1
000043D0  C2BC 0000 7700          and.l     #65535,D1
000043D4  FFFF      
000043D6  2F01      7701          move.l    D1,-(A7)
000043D8  4EB8 2FB8 7702          jsr       _Decode2BitOperandSize
000043DC  584F      7703          addq.w    #4,A7
                    7704   ; Decode6BitEA(OpCode,0,0,0) ;
000043DE  42A7      7705          clr.l     -(A7)
000043E0  42A7      7706          clr.l     -(A7)
000043E2  42A7      7707          clr.l     -(A7)
000043E4  2F02      7708          move.l    D2,-(A7)
000043E6  4EB8 324C 7709          jsr       _Decode6BitEA
000043EA  DEFC 0010 7710          add.w     #16,A7
                    7711   DisassembleInstruction_130:
                    7712   ; }
                    7713   ; /////////////////////////////////////////////////////////////////////////////////
                    7714   ; // if instruction is CMP, CMPA
                    7715   ; /////////////////////////////////////////////////////////////////////////////////
                    7716   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000043EE  2042      7717          move.l    D2,A0
000043F0  3010      7718          move.w    (A0),D0
000043F2  C07C F000 7719          and.w     #61440,D0
000043F6  0C40 B000 7720          cmp.w     #45056,D0
000043FA  6600 008C 7721          bne       DisassembleInstruction_135
                    7722   ; {
                    7723   ; InstructionSize = 1;
000043FE  24BC 0000 7724          move.l    #1,(A2)
00004402  0001      
                    7725   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004404  2042      7726          move.l    D2,A0
00004406  3010      7727          move.w    (A0),D0
00004408  EC40      7728          asr.w     #6,D0
0000440A  C07C 0007 7729          and.w     #7,D0
0000440E  3600      7730          move.w    D0,D3
                    7731   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004410  0C43 0003 7732          cmp.w     #3,D3
00004414  6708      7733          beq.s     DisassembleInstruction_136
00004416  0C43 0007 7734          cmp.w     #7,D3
0000441A  6600 005A 7735          bne       DisassembleInstruction_134
                    7736   DisassembleInstruction_136:
                    7737   ; if(OpMode == (unsigned short int)(0x0003))
0000441E  0C43 0003 7738          cmp.w     #3,D3
00004422  660C      7739          bne.s     DisassembleInstruction_137
                    7740   ; strcpyInstruction("CMPA.W ") ;
00004424  4879 0000 7741          pea       @md_247.L
00004428  777E      
0000442A  4E93      7742          jsr       (A3)
0000442C  584F      7743          addq.w    #4,A7
0000442E  600A      7744          bra.s     DisassembleInstruction_138
                    7745   DisassembleInstruction_137:
                    7746   ; else
                    7747   ; strcpyInstruction("CMPA.L ") ;
00004430  4879 0000 7748          pea       @md_248.L
00004434  7786      
00004436  4E93      7749          jsr       (A3)
00004438  584F      7750          addq.w    #4,A7
                    7751   DisassembleInstruction_138:
                    7752   ; Decode6BitEA(OpCode,0,0,0) ;
0000443A  42A7      7753          clr.l     -(A7)
0000443C  42A7      7754          clr.l     -(A7)
0000443E  42A7      7755          clr.l     -(A7)
00004440  2F02      7756          move.l    D2,-(A7)
00004442  4EB8 324C 7757          jsr       _Decode6BitEA
00004446  DEFC 0010 7758          add.w     #16,A7
                    7759   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
0000444A  2042      7760          move.l    D2,A0
0000444C  3210      7761          move.w    (A0),D1
0000444E  E041      7762          asr.w     #8,D1
00004450  E241      7763          asr.w     #1,D1
00004452  C27C 0007 7764          and.w     #7,D1
00004456  C2BC 0000 7765          and.l     #65535,D1
0000445A  FFFF      
0000445C  2F01      7766          move.l    D1,-(A7)
0000445E  4879 0000 7767          pea       @md_249.L
00004462  778E      
00004464  2F0C      7768          move.l    A4,-(A7)
00004466  4E95      7769          jsr       (A5)
00004468  DEFC 000C 7770          add.w     #12,A7
                    7771   ; strcatInstruction(TempString) ;
0000446C  2F0C      7772          move.l    A4,-(A7)
0000446E  4EB8 0CCC 7773          jsr       _strcatInstruction
00004472  584F      7774          addq.w    #4,A7
00004474  6012      7775          bra.s     DisassembleInstruction_135
                    7776   DisassembleInstruction_134:
                    7777   ; }
                    7778   ; else {
                    7779   ; strcpyInstruction("CMP") ;
00004476  4879 0000 7780          pea       @md_250.L
0000447A  7794      
0000447C  4E93      7781          jsr       (A3)
0000447E  584F      7782          addq.w    #4,A7
                    7783   ; Decode3BitOperandMode(OpCode) ;
00004480  2F02      7784          move.l    D2,-(A7)
00004482  4EB8 3674 7785          jsr       _Decode3BitOperandMode
00004486  584F      7786          addq.w    #4,A7
                    7787   DisassembleInstruction_135:
                    7788   ; }
                    7789   ; }
                    7790   ; /////////////////////////////////////////////////////////////////////////////////
                    7791   ; // if instruction is CMPM
                    7792   ; /////////////////////////////////////////////////////////////////////////////////
                    7793   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
00004488  2042      7794          move.l    D2,A0
0000448A  3010      7795          move.w    (A0),D0
0000448C  C07C F138 7796          and.w     #61752,D0
00004490  0C40 B108 7797          cmp.w     #45320,D0
00004494  6600 007A 7798          bne       DisassembleInstruction_141
                    7799   ; {
                    7800   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00004498  2042      7801          move.l    D2,A0
0000449A  3010      7802          move.w    (A0),D0
0000449C  EC40      7803          asr.w     #6,D0
0000449E  C07C 0003 7804          and.w     #3,D0
000044A2  3600      7805          move.w    D0,D3
                    7806   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
000044A4  0C43 0000 7807          cmp.w     #0,D3
000044A8  6500 0066 7808          blo       DisassembleInstruction_141
000044AC  0C43 0002 7809          cmp.w     #2,D3
000044B0  6200 005E 7810          bhi       DisassembleInstruction_141
                    7811   ; {
                    7812   ; InstructionSize = 1;
000044B4  24BC 0000 7813          move.l    #1,(A2)
000044B8  0001      
                    7814   ; strcpyInstruction("CMPM") ;
000044BA  4879 0000 7815          pea       @md_251.L
000044BE  7798      
000044C0  4E93      7816          jsr       (A3)
000044C2  584F      7817          addq.w    #4,A7
                    7818   ; Decode2BitOperandSize(*OpCode) ;
000044C4  2042      7819          move.l    D2,A0
000044C6  3210      7820          move.w    (A0),D1
000044C8  C2BC 0000 7821          and.l     #65535,D1
000044CC  FFFF      
000044CE  2F01      7822          move.l    D1,-(A7)
000044D0  4EB8 2FB8 7823          jsr       _Decode2BitOperandSize
000044D4  584F      7824          addq.w    #4,A7
                    7825   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
000044D6  2042      7826          move.l    D2,A0
000044D8  3210      7827          move.w    (A0),D1
000044DA  E041      7828          asr.w     #8,D1
000044DC  E241      7829          asr.w     #1,D1
000044DE  C27C 0007 7830          and.w     #7,D1
000044E2  C2BC 0000 7831          and.l     #65535,D1
000044E6  FFFF      
000044E8  2F01      7832          move.l    D1,-(A7)
000044EA  2042      7833          move.l    D2,A0
000044EC  3210      7834          move.w    (A0),D1
000044EE  C27C 0007 7835          and.w     #7,D1
000044F2  C2BC 0000 7836          and.l     #65535,D1
000044F6  FFFF      
000044F8  2F01      7837          move.l    D1,-(A7)
000044FA  4879 0000 7838          pea       @md_252.L
000044FE  779E      
00004500  2F0C      7839          move.l    A4,-(A7)
00004502  4E95      7840          jsr       (A5)
00004504  DEFC 0010 7841          add.w     #16,A7
                    7842   ; strcatInstruction(TempString) ;
00004508  2F0C      7843          move.l    A4,-(A7)
0000450A  4EB8 0CCC 7844          jsr       _strcatInstruction
0000450E  584F      7845          addq.w    #4,A7
                    7846   DisassembleInstruction_141:
                    7847   ; }
                    7848   ; }
                    7849   ; /////////////////////////////////////////////////////////////////////////////////
                    7850   ; // if instruction is DBCC
                    7851   ; /////////////////////////////////////////////////////////////////////////////////
                    7852   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004510  2042      7853          move.l    D2,A0
00004512  3010      7854          move.w    (A0),D0
00004514  C07C F0F8 7855          and.w     #61688,D0
00004518  0C40 50C8 7856          cmp.w     #20680,D0
0000451C  6600 0084 7857          bne       DisassembleInstruction_143
                    7858   ; {
                    7859   ; InstructionSize = 2;
00004520  24BC 0000 7860          move.l    #2,(A2)
00004524  0002      
                    7861   ; strcpy(Instruction,"DB") ;
00004526  4879 0000 7862          pea       @md_253.L
0000452A  77AC      
0000452C  4879 0803 7863          pea       _Instruction.L
00004530  04E2      
00004532  4EB9 0000 7864          jsr       _strcpy
00004536  5702      
00004538  504F      7865          addq.w    #8,A7
                    7866   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
0000453A  2042      7867          move.l    D2,A0
0000453C  3010      7868          move.w    (A0),D0
0000453E  E040      7869          asr.w     #8,D0
00004540  C07C 000F 7870          and.w     #15,D0
00004544  1D40 FFE9 7871          move.b    D0,-23(A6)
                    7872   ; DecodeBranchCondition(Condition) ;
00004548  122E FFE9 7873          move.b    -23(A6),D1
0000454C  C27C 00FF 7874          and.w     #255,D1
00004550  C2BC 0000 7875          and.l     #65535,D1
00004554  FFFF      
00004556  2F01      7876          move.l    D1,-(A7)
00004558  4EB8 370A 7877          jsr       _DecodeBranchCondition
0000455C  584F      7878          addq.w    #4,A7
                    7879   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
0000455E  2202      7880          move.l    D2,D1
00004560  2042      7881          move.l    D2,A0
00004562  2F00      7882          move.l    D0,-(A7)
00004564  3028 0002 7883          move.w    2(A0),D0
00004568  48C0      7884          ext.l     D0
0000456A  D280      7885          add.l     D0,D1
0000456C  201F      7886          move.l    (A7)+,D0
0000456E  5481      7887          addq.l    #2,D1
00004570  2F01      7888          move.l    D1,-(A7)
00004572  2042      7889          move.l    D2,A0
00004574  3228 0002 7890          move.w    2(A0),D1
00004578  48C1      7891          ext.l     D1
0000457A  2F01      7892          move.l    D1,-(A7)
0000457C  2042      7893          move.l    D2,A0
0000457E  3210      7894          move.w    (A0),D1
00004580  C27C 0007 7895          and.w     #7,D1
00004584  C2BC 0000 7896          and.l     #65535,D1
00004588  FFFF      
0000458A  2F01      7897          move.l    D1,-(A7)
0000458C  4879 0000 7898          pea       @md_254.L
00004590  77B0      
00004592  2F0C      7899          move.l    A4,-(A7)
00004594  4E95      7900          jsr       (A5)
00004596  DEFC 0014 7901          add.w     #20,A7
                    7902   ; strcatInstruction(TempString) ;
0000459A  2F0C      7903          move.l    A4,-(A7)
0000459C  4EB8 0CCC 7904          jsr       _strcatInstruction
000045A0  584F      7905          addq.w    #4,A7
                    7906   DisassembleInstruction_143:
                    7907   ; }
                    7908   ; /////////////////////////////////////////////////////////////////////////////////
                    7909   ; // if instruction is DIVS
                    7910   ; /////////////////////////////////////////////////////////////////////////////////
                    7911   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
000045A2  2042      7912          move.l    D2,A0
000045A4  3010      7913          move.w    (A0),D0
000045A6  C07C F1C0 7914          and.w     #61888,D0
000045AA  0C40 81C0 7915          cmp.w     #33216,D0
000045AE  6600 004A 7916          bne       DisassembleInstruction_145
                    7917   ; {
                    7918   ; InstructionSize = 1;
000045B2  24BC 0000 7919          move.l    #1,(A2)
000045B6  0001      
                    7920   ; strcpy(Instruction,"DIVS ") ;
000045B8  4879 0000 7921          pea       @md_255.L
000045BC  77C8      
000045BE  4879 0803 7922          pea       _Instruction.L
000045C2  04E2      
000045C4  4EB9 0000 7923          jsr       _strcpy
000045C8  5702      
000045CA  504F      7924          addq.w    #8,A7
                    7925   ; Decode6BitEA(OpCode,0,0,0) ;
000045CC  42A7      7926          clr.l     -(A7)
000045CE  42A7      7927          clr.l     -(A7)
000045D0  42A7      7928          clr.l     -(A7)
000045D2  2F02      7929          move.l    D2,-(A7)
000045D4  4EB8 324C 7930          jsr       _Decode6BitEA
000045D8  DEFC 0010 7931          add.w     #16,A7
                    7932   ; strcatInstruction(",") ;
000045DC  4879 0000 7933          pea       @md_190.L
000045E0  7628      
000045E2  4EB8 0CCC 7934          jsr       _strcatInstruction
000045E6  584F      7935          addq.w    #4,A7
                    7936   ; Decode3BitDataRegister(*OpCode) ;
000045E8  2042      7937          move.l    D2,A0
000045EA  3210      7938          move.w    (A0),D1
000045EC  C2BC 0000 7939          and.l     #65535,D1
000045F0  FFFF      
000045F2  2F01      7940          move.l    D1,-(A7)
000045F4  4EB8 3014 7941          jsr       _Decode3BitDataRegister
000045F8  584F      7942          addq.w    #4,A7
                    7943   DisassembleInstruction_145:
                    7944   ; }
                    7945   ; /////////////////////////////////////////////////////////////////////////////////
                    7946   ; // if instruction is DIVU
                    7947   ; /////////////////////////////////////////////////////////////////////////////////
                    7948   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000045FA  2042      7949          move.l    D2,A0
000045FC  3010      7950          move.w    (A0),D0
000045FE  C07C F1C0 7951          and.w     #61888,D0
00004602  0C40 80C0 7952          cmp.w     #32960,D0
00004606  6600 004A 7953          bne       DisassembleInstruction_147
                    7954   ; {
                    7955   ; InstructionSize = 1;
0000460A  24BC 0000 7956          move.l    #1,(A2)
0000460E  0001      
                    7957   ; strcpy(Instruction,"DIVU ") ;
00004610  4879 0000 7958          pea       @md_256.L
00004614  77CE      
00004616  4879 0803 7959          pea       _Instruction.L
0000461A  04E2      
0000461C  4EB9 0000 7960          jsr       _strcpy
00004620  5702      
00004622  504F      7961          addq.w    #8,A7
                    7962   ; Decode6BitEA(OpCode,0,0,0) ;
00004624  42A7      7963          clr.l     -(A7)
00004626  42A7      7964          clr.l     -(A7)
00004628  42A7      7965          clr.l     -(A7)
0000462A  2F02      7966          move.l    D2,-(A7)
0000462C  4EB8 324C 7967          jsr       _Decode6BitEA
00004630  DEFC 0010 7968          add.w     #16,A7
                    7969   ; strcatInstruction(",") ;
00004634  4879 0000 7970          pea       @md_190.L
00004638  7628      
0000463A  4EB8 0CCC 7971          jsr       _strcatInstruction
0000463E  584F      7972          addq.w    #4,A7
                    7973   ; Decode3BitDataRegister(*OpCode) ;
00004640  2042      7974          move.l    D2,A0
00004642  3210      7975          move.w    (A0),D1
00004644  C2BC 0000 7976          and.l     #65535,D1
00004648  FFFF      
0000464A  2F01      7977          move.l    D1,-(A7)
0000464C  4EB8 3014 7978          jsr       _Decode3BitDataRegister
00004650  584F      7979          addq.w    #4,A7
                    7980   DisassembleInstruction_147:
                    7981   ; }
                    7982   ; /////////////////////////////////////////////////////////////////////////////////
                    7983   ; // if instruction is EOR
                    7984   ; /////////////////////////////////////////////////////////////////////////////////
                    7985   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004652  2042      7986          move.l    D2,A0
00004654  3010      7987          move.w    (A0),D0
00004656  C07C F000 7988          and.w     #61440,D0
0000465A  0C40 B000 7989          cmp.w     #45056,D0
0000465E  6600 004A 7990          bne       DisassembleInstruction_151
                    7991   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004662  2042      7992          move.l    D2,A0
00004664  3010      7993          move.w    (A0),D0
00004666  EC40      7994          asr.w     #6,D0
00004668  C07C 0007 7995          and.w     #7,D0
0000466C  3600      7996          move.w    D0,D3
                    7997   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
0000466E  2042      7998          move.l    D2,A0
00004670  3010      7999          move.w    (A0),D0
00004672  E640      8000          asr.w     #3,D0
00004674  C07C 0007 8001          and.w     #7,D0
00004678  3D40 FFEC 8002          move.w    D0,-20(A6)
                    8003   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
0000467C  0C43 0004 8004          cmp.w     #4,D3
00004680  6528      8005          blo.s     DisassembleInstruction_151
00004682  0C43 0006 8006          cmp.w     #6,D3
00004686  6222      8007          bhi.s     DisassembleInstruction_151
00004688  302E FFEC 8008          move.w    -20(A6),D0
0000468C  0C40 0001 8009          cmp.w     #1,D0
00004690  6718      8010          beq.s     DisassembleInstruction_151
                    8011   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    8012   ; (EAMode != (unsigned short int)(0x0001)))
                    8013   ; {
                    8014   ; InstructionSize = 1;
00004692  24BC 0000 8015          move.l    #1,(A2)
00004696  0001      
                    8016   ; strcpyInstruction("EOR") ;
00004698  4879 0000 8017          pea       @md_257.L
0000469C  77D4      
0000469E  4E93      8018          jsr       (A3)
000046A0  584F      8019          addq.w    #4,A7
                    8020   ; Decode3BitOperandMode(OpCode);
000046A2  2F02      8021          move.l    D2,-(A7)
000046A4  4EB8 3674 8022          jsr       _Decode3BitOperandMode
000046A8  584F      8023          addq.w    #4,A7
                    8024   DisassembleInstruction_151:
                    8025   ; }
                    8026   ; }
                    8027   ; /////////////////////////////////////////////////////////////////////////////////
                    8028   ; // if instruction is EOR to CCR
                    8029   ; /////////////////////////////////////////////////////////////////////////////////
                    8030   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
000046AA  2042      8031          move.l    D2,A0
000046AC  3010      8032          move.w    (A0),D0
000046AE  0C40 0A3C 8033          cmp.w     #2620,D0
000046B2  662C      8034          bne.s     DisassembleInstruction_153
                    8035   ; InstructionSize = 1;
000046B4  24BC 0000 8036          move.l    #1,(A2)
000046B8  0001      
                    8037   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000046BA  2042      8038          move.l    D2,A0
000046BC  3228 0002 8039          move.w    2(A0),D1
000046C0  C27C 00FF 8040          and.w     #255,D1
000046C4  C2BC 0000 8041          and.l     #65535,D1
000046C8  FFFF      
000046CA  2F01      8042          move.l    D1,-(A7)
000046CC  4879 0000 8043          pea       @md_258.L
000046D0  77D8      
000046D2  4879 0803 8044          pea       _Instruction.L
000046D6  04E2      
000046D8  4E95      8045          jsr       (A5)
000046DA  DEFC 000C 8046          add.w     #12,A7
                    8047   ; InstructionSize += 1;
000046DE  5292      8048          addq.l    #1,(A2)
                    8049   DisassembleInstruction_153:
                    8050   ; }
                    8051   ; /////////////////////////////////////////////////////////////////////////////////
                    8052   ; // if instruction is EORI #data,SR
                    8053   ; /////////////////////////////////////////////////////////////////////////////////
                    8054   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000046E0  2042      8055          move.l    D2,A0
000046E2  3010      8056          move.w    (A0),D0
000046E4  0C40 0A7C 8057          cmp.w     #2684,D0
000046E8  6622      8058          bne.s     DisassembleInstruction_155
                    8059   ; InstructionSize = 2;
000046EA  24BC 0000 8060          move.l    #2,(A2)
000046EE  0002      
                    8061   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000046F0  2042      8062          move.l    D2,A0
000046F2  3228 0002 8063          move.w    2(A0),D1
000046F6  48C1      8064          ext.l     D1
000046F8  2F01      8065          move.l    D1,-(A7)
000046FA  4879 0000 8066          pea       @md_259.L
000046FE  77E8      
00004700  4879 0803 8067          pea       _Instruction.L
00004704  04E2      
00004706  4E95      8068          jsr       (A5)
00004708  DEFC 000C 8069          add.w     #12,A7
                    8070   DisassembleInstruction_155:
                    8071   ; }
                    8072   ; /////////////////////////////////////////////////////////////////////////////////
                    8073   ; // if instruction is EXG
                    8074   ; /////////////////////////////////////////////////////////////////////////////////
                    8075   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
0000470C  2042      8076          move.l    D2,A0
0000470E  3010      8077          move.w    (A0),D0
00004710  C07C F100 8078          and.w     #61696,D0
00004714  0C40 C100 8079          cmp.w     #49408,D0
00004718  6600 00E0 8080          bne       DisassembleInstruction_163
                    8081   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
0000471C  2042      8082          move.l    D2,A0
0000471E  3010      8083          move.w    (A0),D0
00004720  E040      8084          asr.w     #8,D0
00004722  E240      8085          asr.w     #1,D0
00004724  C07C 0007 8086          and.w     #7,D0
00004728  3D40 FFF0 8087          move.w    D0,-16(A6)
                    8088   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
0000472C  2042      8089          move.l    D2,A0
0000472E  3010      8090          move.w    (A0),D0
00004730  C07C 0007 8091          and.w     #7,D0
00004734  3D40 FFF2 8092          move.w    D0,-14(A6)
                    8093   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
00004738  2042      8094          move.l    D2,A0
0000473A  3010      8095          move.w    (A0),D0
0000473C  E640      8096          asr.w     #3,D0
0000473E  C07C 001F 8097          and.w     #31,D0
00004742  3D40 FFF4 8098          move.w    D0,-12(A6)
                    8099   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
00004746  302E FFF4 8100          move.w    -12(A6),D0
0000474A  0C40 0008 8101          cmp.w     #8,D0
0000474E  6634      8102          bne.s     DisassembleInstruction_159
                    8103   ; InstructionSize = 1;
00004750  24BC 0000 8104          move.l    #1,(A2)
00004754  0001      
                    8105   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
00004756  322E FFF2 8106          move.w    -14(A6),D1
0000475A  C2BC 0000 8107          and.l     #65535,D1
0000475E  FFFF      
00004760  2F01      8108          move.l    D1,-(A7)
00004762  322E FFF0 8109          move.w    -16(A6),D1
00004766  C2BC 0000 8110          and.l     #65535,D1
0000476A  FFFF      
0000476C  2F01      8111          move.l    D1,-(A7)
0000476E  4879 0000 8112          pea       @md_260.L
00004772  77F6      
00004774  4879 0803 8113          pea       _Instruction.L
00004778  04E2      
0000477A  4E95      8114          jsr       (A5)
0000477C  DEFC 0010 8115          add.w     #16,A7
00004780  6000 0078 8116          bra       DisassembleInstruction_163
                    8117   DisassembleInstruction_159:
                    8118   ; }
                    8119   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
00004784  302E FFF4 8120          move.w    -12(A6),D0
00004788  0C40 0009 8121          cmp.w     #9,D0
0000478C  6632      8122          bne.s     DisassembleInstruction_161
                    8123   ; InstructionSize = 1;
0000478E  24BC 0000 8124          move.l    #1,(A2)
00004792  0001      
                    8125   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004794  322E FFF2 8126          move.w    -14(A6),D1
00004798  C2BC 0000 8127          and.l     #65535,D1
0000479C  FFFF      
0000479E  2F01      8128          move.l    D1,-(A7)
000047A0  322E FFF0 8129          move.w    -16(A6),D1
000047A4  C2BC 0000 8130          and.l     #65535,D1
000047A8  FFFF      
000047AA  2F01      8131          move.l    D1,-(A7)
000047AC  4879 0000 8132          pea       @md_261.L
000047B0  7802      
000047B2  4879 0803 8133          pea       _Instruction.L
000047B6  04E2      
000047B8  4E95      8134          jsr       (A5)
000047BA  DEFC 0010 8135          add.w     #16,A7
000047BE  603A      8136          bra.s     DisassembleInstruction_163
                    8137   DisassembleInstruction_161:
                    8138   ; }
                    8139   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
000047C0  302E FFF4 8140          move.w    -12(A6),D0
000047C4  0C40 0011 8141          cmp.w     #17,D0
000047C8  6630      8142          bne.s     DisassembleInstruction_163
                    8143   ; InstructionSize = 1;
000047CA  24BC 0000 8144          move.l    #1,(A2)
000047CE  0001      
                    8145   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
000047D0  322E FFF2 8146          move.w    -14(A6),D1
000047D4  C2BC 0000 8147          and.l     #65535,D1
000047D8  FFFF      
000047DA  2F01      8148          move.l    D1,-(A7)
000047DC  322E FFF0 8149          move.w    -16(A6),D1
000047E0  C2BC 0000 8150          and.l     #65535,D1
000047E4  FFFF      
000047E6  2F01      8151          move.l    D1,-(A7)
000047E8  4879 0000 8152          pea       @md_262.L
000047EC  780E      
000047EE  4879 0803 8153          pea       _Instruction.L
000047F2  04E2      
000047F4  4E95      8154          jsr       (A5)
000047F6  DEFC 0010 8155          add.w     #16,A7
                    8156   DisassembleInstruction_163:
                    8157   ; }
                    8158   ; }
                    8159   ; /////////////////////////////////////////////////////////////////////////////////
                    8160   ; // if instruction is EXT
                    8161   ; /////////////////////////////////////////////////////////////////////////////////
                    8162   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000047FA  2042      8163          move.l    D2,A0
000047FC  3010      8164          move.w    (A0),D0
000047FE  C07C FE38 8165          and.w     #65080,D0
00004802  0C40 4800 8166          cmp.w     #18432,D0
00004806  6600 0054 8167          bne       DisassembleInstruction_165
                    8168   ; {
                    8169   ; InstructionSize = 1;
0000480A  24BC 0000 8170          move.l    #1,(A2)
0000480E  0001      
                    8171   ; strcpy(Instruction,"EXT") ;
00004810  4879 0000 8172          pea       @md_263.L
00004814  781A      
00004816  4879 0803 8173          pea       _Instruction.L
0000481A  04E2      
0000481C  4EB9 0000 8174          jsr       _strcpy
00004820  5702      
00004822  504F      8175          addq.w    #8,A7
                    8176   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
00004824  2042      8177          move.l    D2,A0
00004826  3010      8178          move.w    (A0),D0
00004828  C07C 00C0 8179          and.w     #192,D0
0000482C  0C40 00C0 8180          cmp.w     #192,D0
00004830  660E      8181          bne.s     DisassembleInstruction_167
                    8182   ; strcatInstruction(".L ") ;
00004832  4879 0000 8183          pea       @md_174.L
00004836  75DE      
00004838  4EB8 0CCC 8184          jsr       _strcatInstruction
0000483C  584F      8185          addq.w    #4,A7
0000483E  600C      8186          bra.s     DisassembleInstruction_168
                    8187   DisassembleInstruction_167:
                    8188   ; else
                    8189   ; strcatInstruction(".W ") ;
00004840  4879 0000 8190          pea       @md_173.L
00004844  75DA      
00004846  4EB8 0CCC 8191          jsr       _strcatInstruction
0000484A  584F      8192          addq.w    #4,A7
                    8193   DisassembleInstruction_168:
                    8194   ; Decode6BitEA(OpCode,0,0,0) ;
0000484C  42A7      8195          clr.l     -(A7)
0000484E  42A7      8196          clr.l     -(A7)
00004850  42A7      8197          clr.l     -(A7)
00004852  2F02      8198          move.l    D2,-(A7)
00004854  4EB8 324C 8199          jsr       _Decode6BitEA
00004858  DEFC 0010 8200          add.w     #16,A7
                    8201   DisassembleInstruction_165:
                    8202   ; }
                    8203   ; /////////////////////////////////////////////////////////////////////////////////
                    8204   ; // if instruction is ILLEGAL $4afc
                    8205   ; /////////////////////////////////////////////////////////////////////////////////
                    8206   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
0000485C  2042      8207          move.l    D2,A0
0000485E  3010      8208          move.w    (A0),D0
00004860  0C40 4AFC 8209          cmp.w     #19196,D0
00004864  661A      8210          bne.s     DisassembleInstruction_169
                    8211   ; InstructionSize = 1;
00004866  24BC 0000 8212          move.l    #1,(A2)
0000486A  0001      
                    8213   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
0000486C  4879 0000 8214          pea       @md_264.L
00004870  781E      
00004872  4879 0803 8215          pea       _Instruction.L
00004876  04E2      
00004878  4EB9 0000 8216          jsr       _strcpy
0000487C  5702      
0000487E  504F      8217          addq.w    #8,A7
                    8218   DisassembleInstruction_169:
                    8219   ; }
                    8220   ; /////////////////////////////////////////////////////////////////////////////////
                    8221   ; // if instruction is JMP
                    8222   ; /////////////////////////////////////////////////////////////////////////////////
                    8223   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004880  2042      8224          move.l    D2,A0
00004882  3010      8225          move.w    (A0),D0
00004884  C07C FFC0 8226          and.w     #65472,D0
00004888  0C40 4EC0 8227          cmp.w     #20160,D0
0000488C  662A      8228          bne.s     DisassembleInstruction_171
                    8229   ; {
                    8230   ; InstructionSize = 1;
0000488E  24BC 0000 8231          move.l    #1,(A2)
00004892  0001      
                    8232   ; strcpy(Instruction,"JMP ") ;
00004894  4879 0000 8233          pea       @md_265.L
00004898  782E      
0000489A  4879 0803 8234          pea       _Instruction.L
0000489E  04E2      
000048A0  4EB9 0000 8235          jsr       _strcpy
000048A4  5702      
000048A6  504F      8236          addq.w    #8,A7
                    8237   ; Decode6BitEA(OpCode,0,0,0) ;
000048A8  42A7      8238          clr.l     -(A7)
000048AA  42A7      8239          clr.l     -(A7)
000048AC  42A7      8240          clr.l     -(A7)
000048AE  2F02      8241          move.l    D2,-(A7)
000048B0  4EB8 324C 8242          jsr       _Decode6BitEA
000048B4  DEFC 0010 8243          add.w     #16,A7
                    8244   DisassembleInstruction_171:
                    8245   ; }
                    8246   ; /////////////////////////////////////////////////////////////////////////////////
                    8247   ; // if instruction is JSR
                    8248   ; /////////////////////////////////////////////////////////////////////////////////
                    8249   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
000048B8  2042      8250          move.l    D2,A0
000048BA  3010      8251          move.w    (A0),D0
000048BC  C07C FFC0 8252          and.w     #65472,D0
000048C0  0C40 4E80 8253          cmp.w     #20096,D0
000048C4  662A      8254          bne.s     DisassembleInstruction_173
                    8255   ; {
                    8256   ; InstructionSize = 1;
000048C6  24BC 0000 8257          move.l    #1,(A2)
000048CA  0001      
                    8258   ; strcpy(Instruction,"JSR ") ;
000048CC  4879 0000 8259          pea       @md_266.L
000048D0  7834      
000048D2  4879 0803 8260          pea       _Instruction.L
000048D6  04E2      
000048D8  4EB9 0000 8261          jsr       _strcpy
000048DC  5702      
000048DE  504F      8262          addq.w    #8,A7
                    8263   ; Decode6BitEA(OpCode,0,0,0) ;
000048E0  42A7      8264          clr.l     -(A7)
000048E2  42A7      8265          clr.l     -(A7)
000048E4  42A7      8266          clr.l     -(A7)
000048E6  2F02      8267          move.l    D2,-(A7)
000048E8  4EB8 324C 8268          jsr       _Decode6BitEA
000048EC  DEFC 0010 8269          add.w     #16,A7
                    8270   DisassembleInstruction_173:
                    8271   ; }
                    8272   ; /////////////////////////////////////////////////////////////////////////////////
                    8273   ; // if instruction is LEA
                    8274   ; /////////////////////////////////////////////////////////////////////////////////
                    8275   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
000048F0  2042      8276          move.l    D2,A0
000048F2  3010      8277          move.w    (A0),D0
000048F4  C07C F1C0 8278          and.w     #61888,D0
000048F8  0C40 41C0 8279          cmp.w     #16832,D0
000048FC  6600 0056 8280          bne       DisassembleInstruction_175
                    8281   ; {
                    8282   ; InstructionSize = 1;
00004900  24BC 0000 8283          move.l    #1,(A2)
00004904  0001      
                    8284   ; strcpy(Instruction,"LEA ") ;
00004906  4879 0000 8285          pea       @md_267.L
0000490A  783A      
0000490C  4879 0803 8286          pea       _Instruction.L
00004910  04E2      
00004912  4EB9 0000 8287          jsr       _strcpy
00004916  5702      
00004918  504F      8288          addq.w    #8,A7
                    8289   ; Decode6BitEA(OpCode,0,0,0) ;
0000491A  42A7      8290          clr.l     -(A7)
0000491C  42A7      8291          clr.l     -(A7)
0000491E  42A7      8292          clr.l     -(A7)
00004920  2F02      8293          move.l    D2,-(A7)
00004922  4EB8 324C 8294          jsr       _Decode6BitEA
00004926  DEFC 0010 8295          add.w     #16,A7
                    8296   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000492A  2042      8297          move.l    D2,A0
0000492C  3210      8298          move.w    (A0),D1
0000492E  E041      8299          asr.w     #8,D1
00004930  E241      8300          asr.w     #1,D1
00004932  C27C 0007 8301          and.w     #7,D1
00004936  C2BC 0000 8302          and.l     #65535,D1
0000493A  FFFF      
0000493C  2F01      8303          move.l    D1,-(A7)
0000493E  4879 0000 8304          pea       @md_249.L
00004942  778E      
00004944  2F0C      8305          move.l    A4,-(A7)
00004946  4E95      8306          jsr       (A5)
00004948  DEFC 000C 8307          add.w     #12,A7
                    8308   ; strcatInstruction(TempString);
0000494C  2F0C      8309          move.l    A4,-(A7)
0000494E  4EB8 0CCC 8310          jsr       _strcatInstruction
00004952  584F      8311          addq.w    #4,A7
                    8312   DisassembleInstruction_175:
                    8313   ; }
                    8314   ; /////////////////////////////////////////////////////////////////////////////////
                    8315   ; // if instruction is LINK.W
                    8316   ; /////////////////////////////////////////////////////////////////////////////////
                    8317   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004954  2042      8318          move.l    D2,A0
00004956  3010      8319          move.w    (A0),D0
00004958  C07C FFF8 8320          and.w     #65528,D0
0000495C  0C40 4E50 8321          cmp.w     #20048,D0
00004960  6600 0052 8322          bne       DisassembleInstruction_177
                    8323   ; {
                    8324   ; InstructionSize = 1;
00004964  24BC 0000 8325          move.l    #1,(A2)
00004968  0001      
                    8326   ; strcpy(Instruction,"LINK ") ;
0000496A  4879 0000 8327          pea       @md_268.L
0000496E  7840      
00004970  4879 0803 8328          pea       _Instruction.L
00004974  04E2      
00004976  4EB9 0000 8329          jsr       _strcpy
0000497A  5702      
0000497C  504F      8330          addq.w    #8,A7
                    8331   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
0000497E  2042      8332          move.l    D2,A0
00004980  3228 0002 8333          move.w    2(A0),D1
00004984  48C1      8334          ext.l     D1
00004986  2F01      8335          move.l    D1,-(A7)
00004988  2042      8336          move.l    D2,A0
0000498A  3210      8337          move.w    (A0),D1
0000498C  C27C 0007 8338          and.w     #7,D1
00004990  C2BC 0000 8339          and.l     #65535,D1
00004994  FFFF      
00004996  2F01      8340          move.l    D1,-(A7)
00004998  4879 0000 8341          pea       @md_269.L
0000499C  7846      
0000499E  2F0C      8342          move.l    A4,-(A7)
000049A0  4E95      8343          jsr       (A5)
000049A2  DEFC 0010 8344          add.w     #16,A7
                    8345   ; InstructionSize = 2 ;
000049A6  24BC 0000 8346          move.l    #2,(A2)
000049AA  0002      
                    8347   ; strcatInstruction(TempString);
000049AC  2F0C      8348          move.l    A4,-(A7)
000049AE  4EB8 0CCC 8349          jsr       _strcatInstruction
000049B2  584F      8350          addq.w    #4,A7
                    8351   DisassembleInstruction_177:
                    8352   ; }
                    8353   ; /////////////////////////////////////////////////////////////////////////////////
                    8354   ; // if instruction is MOVE, MOVEA
                    8355   ; /////////////////////////////////////////////////////////////////////////////////
                    8356   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
000049B4  2042      8357          move.l    D2,A0
000049B6  3010      8358          move.w    (A0),D0
000049B8  C07C C000 8359          and.w     #49152,D0
000049BC  6600 00F0 8360          bne       DisassembleInstruction_193
                    8361   ; {
                    8362   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
000049C0  2042      8363          move.l    D2,A0
000049C2  3010      8364          move.w    (A0),D0
000049C4  C07C 3000 8365          and.w     #12288,D0
000049C8  E048      8366          lsr.w     #8,D0
000049CA  E848      8367          lsr.w     #4,D0
000049CC  3D40 FFE2 8368          move.w    D0,-30(A6)
                    8369   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
000049D0  2042      8370          move.l    D2,A0
000049D2  3010      8371          move.w    (A0),D0
000049D4  E640      8372          asr.w     #3,D0
000049D6  C07C 0007 8373          and.w     #7,D0
000049DA  3600      8374          move.w    D0,D3
                    8375   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
000049DC  2042      8376          move.l    D2,A0
000049DE  3010      8377          move.w    (A0),D0
000049E0  C07C 0007 8378          and.w     #7,D0
000049E4  3D40 FFF6 8379          move.w    D0,-10(A6)
                    8380   ; DataSize = 0 ;
000049E8  7E00      8381          moveq     #0,D7
                    8382   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8383   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
000049EA  0C43 0005 8384          cmp.w     #5,D3
000049EE  6706      8385          beq.s     DisassembleInstruction_183
000049F0  0C43 0006 8386          cmp.w     #6,D3
000049F4  6602      8387          bne.s     DisassembleInstruction_181
                    8388   DisassembleInstruction_183:
                    8389   ; DataSize = 1;  // source operands has 1 word after EA
000049F6  7E01      8390          moveq     #1,D7
                    8391   DisassembleInstruction_181:
                    8392   ; // if source addressing mode is a 16 or 32 bit address
                    8393   ; if((OpMode == (unsigned short int)(0x0007))) {
000049F8  0C43 0007 8394          cmp.w     #7,D3
000049FC  660C      8395          bne.s     DisassembleInstruction_187
                    8396   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
000049FE  302E FFF6 8397          move.w    -10(A6),D0
00004A02  6604      8398          bne.s     DisassembleInstruction_186
                    8399   ; DataSize = 1 ;
00004A04  7E01      8400          moveq     #1,D7
00004A06  6002      8401          bra.s     DisassembleInstruction_187
                    8402   DisassembleInstruction_186:
                    8403   ; else
                    8404   ; DataSize = 2 ;
00004A08  7E02      8405          moveq     #2,D7
                    8406   DisassembleInstruction_187:
                    8407   ; }
                    8408   ; // if source addressing mode is # then figure out size
                    8409   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004A0A  0C43 0007 8410          cmp.w     #7,D3
00004A0E  6624      8411          bne.s     DisassembleInstruction_191
00004A10  302E FFF6 8412          move.w    -10(A6),D0
00004A14  0C40 0004 8413          cmp.w     #4,D0
00004A18  661A      8414          bne.s     DisassembleInstruction_191
                    8415   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004A1A  302E FFE2 8416          move.w    -30(A6),D0
00004A1E  0C40 0001 8417          cmp.w     #1,D0
00004A22  670A      8418          beq.s     DisassembleInstruction_192
00004A24  302E FFE2 8419          move.w    -30(A6),D0
00004A28  0C40 0003 8420          cmp.w     #3,D0
00004A2C  6604      8421          bne.s     DisassembleInstruction_190
                    8422   DisassembleInstruction_192:
                    8423   ; DataSize = 1;
00004A2E  7E01      8424          moveq     #1,D7
00004A30  6002      8425          bra.s     DisassembleInstruction_191
                    8426   DisassembleInstruction_190:
                    8427   ; else
                    8428   ; DataSize = 2 ;
00004A32  7E02      8429          moveq     #2,D7
                    8430   DisassembleInstruction_191:
                    8431   ; //printf("DataSize = %d",DataSize) ;
                    8432   ; }
                    8433   ; if(Size != 0)
00004A34  302E FFE2 8434          move.w    -30(A6),D0
00004A38  6700 0074 8435          beq       DisassembleInstruction_193
                    8436   ; {
                    8437   ; InstructionSize = 1;
00004A3C  24BC 0000 8438          move.l    #1,(A2)
00004A40  0001      
                    8439   ; if(Size == 1)
00004A42  302E FFE2 8440          move.w    -30(A6),D0
00004A46  0C40 0001 8441          cmp.w     #1,D0
00004A4A  660C      8442          bne.s     DisassembleInstruction_195
                    8443   ; strcpyInstruction("MOVE.B ") ;
00004A4C  4879 0000 8444          pea       @md_270.L
00004A50  784E      
00004A52  4E93      8445          jsr       (A3)
00004A54  584F      8446          addq.w    #4,A7
00004A56  6020      8447          bra.s     DisassembleInstruction_198
                    8448   DisassembleInstruction_195:
                    8449   ; else if(Size == 2)
00004A58  302E FFE2 8450          move.w    -30(A6),D0
00004A5C  0C40 0002 8451          cmp.w     #2,D0
00004A60  660C      8452          bne.s     DisassembleInstruction_197
                    8453   ; strcpyInstruction("MOVE.L ") ;
00004A62  4879 0000 8454          pea       @md_271.L
00004A66  7856      
00004A68  4E93      8455          jsr       (A3)
00004A6A  584F      8456          addq.w    #4,A7
00004A6C  600A      8457          bra.s     DisassembleInstruction_198
                    8458   DisassembleInstruction_197:
                    8459   ; else
                    8460   ; strcpyInstruction("MOVE.W ") ;
00004A6E  4879 0000 8461          pea       @md_272.L
00004A72  785E      
00004A74  4E93      8462          jsr       (A3)
00004A76  584F      8463          addq.w    #4,A7
                    8464   DisassembleInstruction_198:
                    8465   ; Decode6BitEA(OpCode,0,0,1) ;
00004A78  4878 0001 8466          pea       1
00004A7C  42A7      8467          clr.l     -(A7)
00004A7E  42A7      8468          clr.l     -(A7)
00004A80  2F02      8469          move.l    D2,-(A7)
00004A82  4EB8 324C 8470          jsr       _Decode6BitEA
00004A86  DEFC 0010 8471          add.w     #16,A7
                    8472   ; strcatInstruction(",") ;
00004A8A  4879 0000 8473          pea       @md_190.L
00004A8E  7628      
00004A90  4EB8 0CCC 8474          jsr       _strcatInstruction
00004A94  584F      8475          addq.w    #4,A7
                    8476   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8477   ; // but subtract 1 to make the maths correct in the called function
                    8478   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004A96  42A7      8479          clr.l     -(A7)
00004A98  CEBC 0000 8480          and.l     #65535,D7
00004A9C  FFFF      
00004A9E  2F07      8481          move.l    D7,-(A7)
00004AA0  4878 0002 8482          pea       2
00004AA4  2F02      8483          move.l    D2,-(A7)
00004AA6  4EB8 324C 8484          jsr       _Decode6BitEA
00004AAA  DEFC 0010 8485          add.w     #16,A7
                    8486   DisassembleInstruction_193:
                    8487   ; }
                    8488   ; }
                    8489   ; /////////////////////////////////////////////////////////////////////////////////
                    8490   ; // if instruction is MOVE <EA>,CCR
                    8491   ; /////////////////////////////////////////////////////////////////////////////////
                    8492   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004AAE  2042      8493          move.l    D2,A0
00004AB0  3010      8494          move.w    (A0),D0
00004AB2  C07C FFC0 8495          and.w     #65472,D0
00004AB6  0C40 44C0 8496          cmp.w     #17600,D0
00004ABA  6636      8497          bne.s     DisassembleInstruction_199
                    8498   ; {
                    8499   ; InstructionSize = 1;
00004ABC  24BC 0000 8500          move.l    #1,(A2)
00004AC0  0001      
                    8501   ; strcpy(Instruction,"MOVE ") ;
00004AC2  4879 0000 8502          pea       @md_273.L
00004AC6  7866      
00004AC8  4879 0803 8503          pea       _Instruction.L
00004ACC  04E2      
00004ACE  4EB9 0000 8504          jsr       _strcpy
00004AD2  5702      
00004AD4  504F      8505          addq.w    #8,A7
                    8506   ; Decode6BitEA(OpCode,0,0,0) ;
00004AD6  42A7      8507          clr.l     -(A7)
00004AD8  42A7      8508          clr.l     -(A7)
00004ADA  42A7      8509          clr.l     -(A7)
00004ADC  2F02      8510          move.l    D2,-(A7)
00004ADE  4EB8 324C 8511          jsr       _Decode6BitEA
00004AE2  DEFC 0010 8512          add.w     #16,A7
                    8513   ; strcatInstruction(",CCR") ;
00004AE6  4879 0000 8514          pea       @md_274.L
00004AEA  786C      
00004AEC  4EB8 0CCC 8515          jsr       _strcatInstruction
00004AF0  584F      8516          addq.w    #4,A7
                    8517   DisassembleInstruction_199:
                    8518   ; }
                    8519   ; /////////////////////////////////////////////////////////////////////////////////
                    8520   ; // if instruction is MOVE SR,<EA>
                    8521   ; /////////////////////////////////////////////////////////////////////////////////
                    8522   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004AF2  2042      8523          move.l    D2,A0
00004AF4  3010      8524          move.w    (A0),D0
00004AF6  C07C FFC0 8525          and.w     #65472,D0
00004AFA  0C40 40C0 8526          cmp.w     #16576,D0
00004AFE  662A      8527          bne.s     DisassembleInstruction_201
                    8528   ; {
                    8529   ; InstructionSize = 1;
00004B00  24BC 0000 8530          move.l    #1,(A2)
00004B04  0001      
                    8531   ; strcpy(Instruction,"MOVE SR,") ;
00004B06  4879 0000 8532          pea       @md_275.L
00004B0A  7872      
00004B0C  4879 0803 8533          pea       _Instruction.L
00004B10  04E2      
00004B12  4EB9 0000 8534          jsr       _strcpy
00004B16  5702      
00004B18  504F      8535          addq.w    #8,A7
                    8536   ; Decode6BitEA(OpCode,0,0,0) ;
00004B1A  42A7      8537          clr.l     -(A7)
00004B1C  42A7      8538          clr.l     -(A7)
00004B1E  42A7      8539          clr.l     -(A7)
00004B20  2F02      8540          move.l    D2,-(A7)
00004B22  4EB8 324C 8541          jsr       _Decode6BitEA
00004B26  DEFC 0010 8542          add.w     #16,A7
                    8543   DisassembleInstruction_201:
                    8544   ; }
                    8545   ; /////////////////////////////////////////////////////////////////////////////////
                    8546   ; // if instruction is MOVE <EA>,SR
                    8547   ; /////////////////////////////////////////////////////////////////////////////////
                    8548   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004B2A  2042      8549          move.l    D2,A0
00004B2C  3010      8550          move.w    (A0),D0
00004B2E  C07C FFC0 8551          and.w     #65472,D0
00004B32  0C40 46C0 8552          cmp.w     #18112,D0
00004B36  6636      8553          bne.s     DisassembleInstruction_203
                    8554   ; {
                    8555   ; InstructionSize = 1;
00004B38  24BC 0000 8556          move.l    #1,(A2)
00004B3C  0001      
                    8557   ; strcpy(Instruction,"MOVE ") ;
00004B3E  4879 0000 8558          pea       @md_273.L
00004B42  7866      
00004B44  4879 0803 8559          pea       _Instruction.L
00004B48  04E2      
00004B4A  4EB9 0000 8560          jsr       _strcpy
00004B4E  5702      
00004B50  504F      8561          addq.w    #8,A7
                    8562   ; Decode6BitEA(OpCode,0,0,0) ;
00004B52  42A7      8563          clr.l     -(A7)
00004B54  42A7      8564          clr.l     -(A7)
00004B56  42A7      8565          clr.l     -(A7)
00004B58  2F02      8566          move.l    D2,-(A7)
00004B5A  4EB8 324C 8567          jsr       _Decode6BitEA
00004B5E  DEFC 0010 8568          add.w     #16,A7
                    8569   ; strcatInstruction(",SR") ;
00004B62  4879 0000 8570          pea       @md_276.L
00004B66  787C      
00004B68  4EB8 0CCC 8571          jsr       _strcatInstruction
00004B6C  584F      8572          addq.w    #4,A7
                    8573   DisassembleInstruction_203:
                    8574   ; }
                    8575   ; /////////////////////////////////////////////////////////////////////////////////
                    8576   ; // if instruction is MOVE USP,An
                    8577   ; /////////////////////////////////////////////////////////////////////////////////
                    8578   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004B6E  2042      8579          move.l    D2,A0
00004B70  3010      8580          move.w    (A0),D0
00004B72  C07C FFF0 8581          and.w     #65520,D0
00004B76  0C40 4E60 8582          cmp.w     #20064,D0
00004B7A  6600 0060 8583          bne       DisassembleInstruction_208
                    8584   ; {
                    8585   ; InstructionSize = 1;
00004B7E  24BC 0000 8586          move.l    #1,(A2)
00004B82  0001      
                    8587   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004B84  2042      8588          move.l    D2,A0
00004B86  3010      8589          move.w    (A0),D0
00004B88  C07C 0007 8590          and.w     #7,D0
00004B8C  3D40 FFEA 8591          move.w    D0,-22(A6)
                    8592   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004B90  2042      8593          move.l    D2,A0
00004B92  3010      8594          move.w    (A0),D0
00004B94  C07C 0008 8595          and.w     #8,D0
00004B98  0C40 0008 8596          cmp.w     #8,D0
00004B9C  6620      8597          bne.s     DisassembleInstruction_207
                    8598   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004B9E  322E FFEA 8599          move.w    -22(A6),D1
00004BA2  C2BC 0000 8600          and.l     #65535,D1
00004BA6  FFFF      
00004BA8  2F01      8601          move.l    D1,-(A7)
00004BAA  4879 0000 8602          pea       @md_277.L
00004BAE  7880      
00004BB0  4879 0803 8603          pea       _Instruction.L
00004BB4  04E2      
00004BB6  4E95      8604          jsr       (A5)
00004BB8  DEFC 000C 8605          add.w     #12,A7
00004BBC  601E      8606          bra.s     DisassembleInstruction_208
                    8607   DisassembleInstruction_207:
                    8608   ; else
                    8609   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004BBE  322E FFEA 8610          move.w    -22(A6),D1
00004BC2  C2BC 0000 8611          and.l     #65535,D1
00004BC6  FFFF      
00004BC8  2F01      8612          move.l    D1,-(A7)
00004BCA  4879 0000 8613          pea       @md_278.L
00004BCE  788E      
00004BD0  4879 0803 8614          pea       _Instruction.L
00004BD4  04E2      
00004BD6  4E95      8615          jsr       (A5)
00004BD8  DEFC 000C 8616          add.w     #12,A7
                    8617   DisassembleInstruction_208:
                    8618   ; }
                    8619   ; /////////////////////////////////////////////////////////////////////////////////
                    8620   ; // if instruction is MOVEM
                    8621   ; /////////////////////////////////////////////////////////////////////////////////
                    8622   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004BDC  2042      8623          move.l    D2,A0
00004BDE  3010      8624          move.w    (A0),D0
00004BE0  C07C FB80 8625          and.w     #64384,D0
00004BE4  0C40 4880 8626          cmp.w     #18560,D0
00004BE8  6600 01FC 8627          bne       DisassembleInstruction_230
                    8628   ; {
                    8629   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004BEC  2042      8630          move.l    D2,A0
00004BEE  3010      8631          move.w    (A0),D0
00004BF0  E640      8632          asr.w     #3,D0
00004BF2  C07C 0007 8633          and.w     #7,D0
00004BF6  3600      8634          move.w    D0,D3
                    8635   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004BF8  4A43      8636          tst.w     D3
00004BFA  6700 01EA 8637          beq       DisassembleInstruction_230
00004BFE  0C43 0001 8638          cmp.w     #1,D3
00004C02  6700 01E2 8639          beq       DisassembleInstruction_230
00004C06  4A43      8640          tst.w     D3
00004C08  6700 01DC 8641          beq       DisassembleInstruction_230
                    8642   ; (OpMode != (unsigned short int)(0x1)) &&
                    8643   ; (OpMode != (unsigned short int)(0x0)))
                    8644   ; {
                    8645   ; InstructionSize = 1;
00004C0C  24BC 0000 8646          move.l    #1,(A2)
00004C10  0001      
                    8647   ; strcpy(Instruction,"MOVEM") ;
00004C12  4879 0000 8648          pea       @md_279.L
00004C16  789C      
00004C18  4879 0803 8649          pea       _Instruction.L
00004C1C  04E2      
00004C1E  4EB9 0000 8650          jsr       _strcpy
00004C22  5702      
00004C24  504F      8651          addq.w    #8,A7
                    8652   ; InstructionSize ++ ;
00004C26  5292      8653          addq.l    #1,(A2)
                    8654   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004C28  2042      8655          move.l    D2,A0
00004C2A  3010      8656          move.w    (A0),D0
00004C2C  C07C 0040 8657          and.w     #64,D0
00004C30  660E      8658          bne.s     DisassembleInstruction_213
                    8659   ; strcatInstruction(".W ") ;
00004C32  4879 0000 8660          pea       @md_173.L
00004C36  75DA      
00004C38  4EB8 0CCC 8661          jsr       _strcatInstruction
00004C3C  584F      8662          addq.w    #4,A7
00004C3E  600C      8663          bra.s     DisassembleInstruction_214
                    8664   DisassembleInstruction_213:
                    8665   ; else
                    8666   ; strcatInstruction(".L ") ;
00004C40  4879 0000 8667          pea       @md_174.L
00004C44  75DE      
00004C46  4EB8 0CCC 8668          jsr       _strcatInstruction
00004C4A  584F      8669          addq.w    #4,A7
                    8670   DisassembleInstruction_214:
                    8671   ; // movem  reg,-(An) if bit 10 = 0
                    8672   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004C4C  2042      8673          move.l    D2,A0
00004C4E  3010      8674          move.w    (A0),D0
00004C50  C07C 0400 8675          and.w     #1024,D0
00004C54  6600 00D2 8676          bne       DisassembleInstruction_215
                    8677   ; {
                    8678   ; Mask = 0x8000 ;                     // bit 15 = 1
00004C58  3D7C 8000 8679          move.w    #32768,-2(A6)
00004C5C  FFFE      
                    8680   ; DoneSlash = 0 ;
00004C5E  4246      8681          clr.w     D6
                    8682   ; for(i = 0; i < 16; i ++)    {
00004C60  4284      8683          clr.l     D4
                    8684   DisassembleInstruction_217:
00004C62  0C84 0000 8685          cmp.l     #16,D4
00004C66  0010      
00004C68  6C00 009E 8686          bge       DisassembleInstruction_219
                    8687   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004C6C  4879 0000 8688          pea       @md_33.L
00004C70  6592      
00004C72  4EB9 0000 8689          jsr       _printf
00004C76  58FE      
00004C78  584F      8690          addq.w    #4,A7
                    8691   ; if((OpCode[1] & Mask) == Mask)    {
00004C7A  2042      8692          move.l    D2,A0
00004C7C  3028 0002 8693          move.w    2(A0),D0
00004C80  C06E FFFE 8694          and.w     -2(A6),D0
00004C84  B06E FFFE 8695          cmp.w     -2(A6),D0
00004C88  6600 006E 8696          bne       DisassembleInstruction_220
                    8697   ; if(i < 8 )  {
00004C8C  0C84 0000 8698          cmp.l     #8,D4
00004C90  0008      
00004C92  6C2C      8699          bge.s     DisassembleInstruction_222
                    8700   ; if(DoneSlash == 0)  {
00004C94  4A46      8701          tst.w     D6
00004C96  6614      8702          bne.s     DisassembleInstruction_224
                    8703   ; sprintf(TempString, "D%d", i) ;
00004C98  2F04      8704          move.l    D4,-(A7)
00004C9A  4879 0000 8705          pea       @md_280.L
00004C9E  78A2      
00004CA0  2F0C      8706          move.l    A4,-(A7)
00004CA2  4E95      8707          jsr       (A5)
00004CA4  DEFC 000C 8708          add.w     #12,A7
                    8709   ; DoneSlash = 1;
00004CA8  7C01      8710          moveq     #1,D6
00004CAA  6010      8711          bra.s     DisassembleInstruction_225
                    8712   DisassembleInstruction_224:
                    8713   ; }
                    8714   ; else
                    8715   ; sprintf(TempString, "/D%d", i) ;
00004CAC  2F04      8716          move.l    D4,-(A7)
00004CAE  4879 0000 8717          pea       @md_281.L
00004CB2  78A6      
00004CB4  2F0C      8718          move.l    A4,-(A7)
00004CB6  4E95      8719          jsr       (A5)
00004CB8  DEFC 000C 8720          add.w     #12,A7
                    8721   DisassembleInstruction_225:
00004CBC  6000 0032 8722          bra       DisassembleInstruction_227
                    8723   DisassembleInstruction_222:
                    8724   ; }
                    8725   ; else   {
                    8726   ; if(DoneSlash == 0)  {
00004CC0  4A46      8727          tst.w     D6
00004CC2  6618      8728          bne.s     DisassembleInstruction_226
                    8729   ; sprintf(TempString, "A%d", i-8) ;
00004CC4  2204      8730          move.l    D4,D1
00004CC6  5181      8731          subq.l    #8,D1
00004CC8  2F01      8732          move.l    D1,-(A7)
00004CCA  4879 0000 8733          pea       @md_282.L
00004CCE  78AC      
00004CD0  2F0C      8734          move.l    A4,-(A7)
00004CD2  4E95      8735          jsr       (A5)
00004CD4  DEFC 000C 8736          add.w     #12,A7
                    8737   ; DoneSlash = 1;
00004CD8  7C01      8738          moveq     #1,D6
00004CDA  6014      8739          bra.s     DisassembleInstruction_227
                    8740   DisassembleInstruction_226:
                    8741   ; }
                    8742   ; else
                    8743   ; sprintf(TempString, "/A%d", i-8) ;
00004CDC  2204      8744          move.l    D4,D1
00004CDE  5181      8745          subq.l    #8,D1
00004CE0  2F01      8746          move.l    D1,-(A7)
00004CE2  4879 0000 8747          pea       @md_283.L
00004CE6  78B0      
00004CE8  2F0C      8748          move.l    A4,-(A7)
00004CEA  4E95      8749          jsr       (A5)
00004CEC  DEFC 000C 8750          add.w     #12,A7
                    8751   DisassembleInstruction_227:
                    8752   ; }
                    8753   ; strcatInstruction(TempString) ;
00004CF0  2F0C      8754          move.l    A4,-(A7)
00004CF2  4EB8 0CCC 8755          jsr       _strcatInstruction
00004CF6  584F      8756          addq.w    #4,A7
                    8757   DisassembleInstruction_220:
                    8758   ; }
                    8759   ; Mask = Mask >> 1 ;
00004CF8  302E FFFE 8760          move.w    -2(A6),D0
00004CFC  E240      8761          asr.w     #1,D0
00004CFE  3D40 FFFE 8762          move.w    D0,-2(A6)
00004D02  5284      8763          addq.l    #1,D4
00004D04  6000 FF5C 8764          bra       DisassembleInstruction_217
                    8765   DisassembleInstruction_219:
                    8766   ; }
                    8767   ; strcatInstruction(",") ;
00004D08  4879 0000 8768          pea       @md_190.L
00004D0C  7628      
00004D0E  4EB8 0CCC 8769          jsr       _strcatInstruction
00004D12  584F      8770          addq.w    #4,A7
                    8771   ; Decode6BitEA(OpCode,0,0,0) ;
00004D14  42A7      8772          clr.l     -(A7)
00004D16  42A7      8773          clr.l     -(A7)
00004D18  42A7      8774          clr.l     -(A7)
00004D1A  2F02      8775          move.l    D2,-(A7)
00004D1C  4EB8 324C 8776          jsr       _Decode6BitEA
00004D20  DEFC 0010 8777          add.w     #16,A7
00004D24  6000 00C0 8778          bra       DisassembleInstruction_230
                    8779   DisassembleInstruction_215:
                    8780   ; }
                    8781   ; //movem  (An)+,reg
                    8782   ; else    {
                    8783   ; Decode6BitEA(OpCode,0,0,0) ;
00004D28  42A7      8784          clr.l     -(A7)
00004D2A  42A7      8785          clr.l     -(A7)
00004D2C  42A7      8786          clr.l     -(A7)
00004D2E  2F02      8787          move.l    D2,-(A7)
00004D30  4EB8 324C 8788          jsr       _Decode6BitEA
00004D34  DEFC 0010 8789          add.w     #16,A7
                    8790   ; strcatInstruction(",") ;
00004D38  4879 0000 8791          pea       @md_190.L
00004D3C  7628      
00004D3E  4EB8 0CCC 8792          jsr       _strcatInstruction
00004D42  584F      8793          addq.w    #4,A7
                    8794   ; Mask = 0x0001 ;                     // bit 0 = 1
00004D44  3D7C 0001 8795          move.w    #1,-2(A6)
00004D48  FFFE      
                    8796   ; DoneSlash = 0 ;
00004D4A  4246      8797          clr.w     D6
                    8798   ; for(i = 0; i < 16 ; i ++)    {
00004D4C  4284      8799          clr.l     D4
                    8800   DisassembleInstruction_228:
00004D4E  0C84 0000 8801          cmp.l     #16,D4
00004D52  0010      
00004D54  6C00 0090 8802          bge       DisassembleInstruction_230
                    8803   ; if((OpCode[1] & Mask) == Mask)    {
00004D58  2042      8804          move.l    D2,A0
00004D5A  3028 0002 8805          move.w    2(A0),D0
00004D5E  C06E FFFE 8806          and.w     -2(A6),D0
00004D62  B06E FFFE 8807          cmp.w     -2(A6),D0
00004D66  6600 006E 8808          bne       DisassembleInstruction_231
                    8809   ; if(i < 8)   {       // data registers in bits 7-0
00004D6A  0C84 0000 8810          cmp.l     #8,D4
00004D6E  0008      
00004D70  6C2C      8811          bge.s     DisassembleInstruction_233
                    8812   ; if(DoneSlash == 0)  {
00004D72  4A46      8813          tst.w     D6
00004D74  6614      8814          bne.s     DisassembleInstruction_235
                    8815   ; sprintf(TempString, "D%d", i) ;
00004D76  2F04      8816          move.l    D4,-(A7)
00004D78  4879 0000 8817          pea       @md_280.L
00004D7C  78A2      
00004D7E  2F0C      8818          move.l    A4,-(A7)
00004D80  4E95      8819          jsr       (A5)
00004D82  DEFC 000C 8820          add.w     #12,A7
                    8821   ; DoneSlash = 1;
00004D86  7C01      8822          moveq     #1,D6
00004D88  6010      8823          bra.s     DisassembleInstruction_236
                    8824   DisassembleInstruction_235:
                    8825   ; }
                    8826   ; else
                    8827   ; sprintf(TempString, "/D%d", i) ;
00004D8A  2F04      8828          move.l    D4,-(A7)
00004D8C  4879 0000 8829          pea       @md_281.L
00004D90  78A6      
00004D92  2F0C      8830          move.l    A4,-(A7)
00004D94  4E95      8831          jsr       (A5)
00004D96  DEFC 000C 8832          add.w     #12,A7
                    8833   DisassembleInstruction_236:
00004D9A  6000 0032 8834          bra       DisassembleInstruction_238
                    8835   DisassembleInstruction_233:
                    8836   ; }
                    8837   ; else    {
                    8838   ; if(DoneSlash == 0)  {
00004D9E  4A46      8839          tst.w     D6
00004DA0  6618      8840          bne.s     DisassembleInstruction_237
                    8841   ; sprintf(TempString, "A%d", i-8) ;
00004DA2  2204      8842          move.l    D4,D1
00004DA4  5181      8843          subq.l    #8,D1
00004DA6  2F01      8844          move.l    D1,-(A7)
00004DA8  4879 0000 8845          pea       @md_282.L
00004DAC  78AC      
00004DAE  2F0C      8846          move.l    A4,-(A7)
00004DB0  4E95      8847          jsr       (A5)
00004DB2  DEFC 000C 8848          add.w     #12,A7
                    8849   ; DoneSlash = 1;
00004DB6  7C01      8850          moveq     #1,D6
00004DB8  6014      8851          bra.s     DisassembleInstruction_238
                    8852   DisassembleInstruction_237:
                    8853   ; }
                    8854   ; else
                    8855   ; sprintf(TempString, "/A%d", i-8) ;
00004DBA  2204      8856          move.l    D4,D1
00004DBC  5181      8857          subq.l    #8,D1
00004DBE  2F01      8858          move.l    D1,-(A7)
00004DC0  4879 0000 8859          pea       @md_283.L
00004DC4  78B0      
00004DC6  2F0C      8860          move.l    A4,-(A7)
00004DC8  4E95      8861          jsr       (A5)
00004DCA  DEFC 000C 8862          add.w     #12,A7
                    8863   DisassembleInstruction_238:
                    8864   ; }
                    8865   ; strcatInstruction(TempString) ;
00004DCE  2F0C      8866          move.l    A4,-(A7)
00004DD0  4EB8 0CCC 8867          jsr       _strcatInstruction
00004DD4  584F      8868          addq.w    #4,A7
                    8869   DisassembleInstruction_231:
                    8870   ; }
                    8871   ; Mask = Mask << 1 ;
00004DD6  302E FFFE 8872          move.w    -2(A6),D0
00004DDA  E340      8873          asl.w     #1,D0
00004DDC  3D40 FFFE 8874          move.w    D0,-2(A6)
00004DE0  5284      8875          addq.l    #1,D4
00004DE2  6000 FF6A 8876          bra       DisassembleInstruction_228
                    8877   DisassembleInstruction_230:
                    8878   ; }
                    8879   ; }
                    8880   ; }
                    8881   ; }
                    8882   ; /////////////////////////////////////////////////////////////////////////////////
                    8883   ; // if instruction is MOVEP
                    8884   ; /////////////////////////////////////////////////////////////////////////////////
                    8885   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004DE6  2042      8886          move.l    D2,A0
00004DE8  3010      8887          move.w    (A0),D0
00004DEA  C07C F038 8888          and.w     #61496,D0
00004DEE  0C40 0008 8889          cmp.w     #8,D0
00004DF2  6600 0112 8890          bne       DisassembleInstruction_247
                    8891   ; {
                    8892   ; InstructionSize = 1;
00004DF6  24BC 0000 8893          move.l    #1,(A2)
00004DFA  0001      
                    8894   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004DFC  2042      8895          move.l    D2,A0
00004DFE  3010      8896          move.w    (A0),D0
00004E00  E040      8897          asr.w     #8,D0
00004E02  E240      8898          asr.w     #1,D0
00004E04  C07C 0007 8899          and.w     #7,D0
00004E08  3A00      8900          move.w    D0,D5
                    8901   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004E0A  2042      8902          move.l    D2,A0
00004E0C  3010      8903          move.w    (A0),D0
00004E0E  C07C 0007 8904          and.w     #7,D0
00004E12  3D40 FFF8 8905          move.w    D0,-8(A6)
                    8906   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004E16  2042      8907          move.l    D2,A0
00004E18  3010      8908          move.w    (A0),D0
00004E1A  EC40      8909          asr.w     #6,D0
00004E1C  C07C 0007 8910          and.w     #7,D0
00004E20  3600      8911          move.w    D0,D3
                    8912   ; InstructionSize++ ;
00004E22  5292      8913          addq.l    #1,(A2)
                    8914   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004E24  0C43 0004 8915          cmp.w     #4,D3
00004E28  6634      8916          bne.s     DisassembleInstruction_241
                    8917   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004E2A  CABC 0000 8918          and.l     #65535,D5
00004E2E  FFFF      
00004E30  2F05      8919          move.l    D5,-(A7)
00004E32  322E FFF8 8920          move.w    -8(A6),D1
00004E36  C2BC 0000 8921          and.l     #65535,D1
00004E3A  FFFF      
00004E3C  2F01      8922          move.l    D1,-(A7)
00004E3E  2042      8923          move.l    D2,A0
00004E40  3228 0002 8924          move.w    2(A0),D1
00004E44  48C1      8925          ext.l     D1
00004E46  2F01      8926          move.l    D1,-(A7)
00004E48  4879 0000 8927          pea       @md_284.L
00004E4C  78B6      
00004E4E  4879 0803 8928          pea       _Instruction.L
00004E52  04E2      
00004E54  4E95      8929          jsr       (A5)
00004E56  DEFC 0014 8930          add.w     #20,A7
00004E5A  6000 00AA 8931          bra       DisassembleInstruction_247
                    8932   DisassembleInstruction_241:
                    8933   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004E5E  0C43 0005 8934          cmp.w     #5,D3
00004E62  6634      8935          bne.s     DisassembleInstruction_243
                    8936   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004E64  CABC 0000 8937          and.l     #65535,D5
00004E68  FFFF      
00004E6A  2F05      8938          move.l    D5,-(A7)
00004E6C  322E FFF8 8939          move.w    -8(A6),D1
00004E70  C2BC 0000 8940          and.l     #65535,D1
00004E74  FFFF      
00004E76  2F01      8941          move.l    D1,-(A7)
00004E78  2042      8942          move.l    D2,A0
00004E7A  3228 0002 8943          move.w    2(A0),D1
00004E7E  48C1      8944          ext.l     D1
00004E80  2F01      8945          move.l    D1,-(A7)
00004E82  4879 0000 8946          pea       @md_285.L
00004E86  78CC      
00004E88  4879 0803 8947          pea       _Instruction.L
00004E8C  04E2      
00004E8E  4E95      8948          jsr       (A5)
00004E90  DEFC 0014 8949          add.w     #20,A7
00004E94  6000 0070 8950          bra       DisassembleInstruction_247
                    8951   DisassembleInstruction_243:
                    8952   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004E98  0C43 0006 8953          cmp.w     #6,D3
00004E9C  6632      8954          bne.s     DisassembleInstruction_245
                    8955   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004E9E  322E FFF8 8956          move.w    -8(A6),D1
00004EA2  C2BC 0000 8957          and.l     #65535,D1
00004EA6  FFFF      
00004EA8  2F01      8958          move.l    D1,-(A7)
00004EAA  2042      8959          move.l    D2,A0
00004EAC  3228 0002 8960          move.w    2(A0),D1
00004EB0  48C1      8961          ext.l     D1
00004EB2  2F01      8962          move.l    D1,-(A7)
00004EB4  CABC 0000 8963          and.l     #65535,D5
00004EB8  FFFF      
00004EBA  2F05      8964          move.l    D5,-(A7)
00004EBC  4879 0000 8965          pea       @md_286.L
00004EC0  78E2      
00004EC2  4879 0803 8966          pea       _Instruction.L
00004EC6  04E2      
00004EC8  4E95      8967          jsr       (A5)
00004ECA  DEFC 0014 8968          add.w     #20,A7
00004ECE  6036      8969          bra.s     DisassembleInstruction_247
                    8970   DisassembleInstruction_245:
                    8971   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004ED0  0C43 0007 8972          cmp.w     #7,D3
00004ED4  6630      8973          bne.s     DisassembleInstruction_247
                    8974   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004ED6  322E FFF8 8975          move.w    -8(A6),D1
00004EDA  C2BC 0000 8976          and.l     #65535,D1
00004EDE  FFFF      
00004EE0  2F01      8977          move.l    D1,-(A7)
00004EE2  2042      8978          move.l    D2,A0
00004EE4  3228 0002 8979          move.w    2(A0),D1
00004EE8  48C1      8980          ext.l     D1
00004EEA  2F01      8981          move.l    D1,-(A7)
00004EEC  CABC 0000 8982          and.l     #65535,D5
00004EF0  FFFF      
00004EF2  2F05      8983          move.l    D5,-(A7)
00004EF4  4879 0000 8984          pea       @md_287.L
00004EF8  78F8      
00004EFA  4879 0803 8985          pea       _Instruction.L
00004EFE  04E2      
00004F00  4E95      8986          jsr       (A5)
00004F02  DEFC 0014 8987          add.w     #20,A7
                    8988   DisassembleInstruction_247:
                    8989   ; }
                    8990   ; /////////////////////////////////////////////////////////////////////////////////
                    8991   ; // if instruction is MOVEQ
                    8992   ; /////////////////////////////////////////////////////////////////////////////////
                    8993   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004F06  2042      8994          move.l    D2,A0
00004F08  3010      8995          move.w    (A0),D0
00004F0A  C07C F100 8996          and.w     #61696,D0
00004F0E  0C40 7000 8997          cmp.w     #28672,D0
00004F12  6600 0040 8998          bne       DisassembleInstruction_249
                    8999   ; {
                    9000   ; InstructionSize = 1;
00004F16  24BC 0000 9001          move.l    #1,(A2)
00004F1A  0001      
                    9002   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004F1C  2042      9003          move.l    D2,A0
00004F1E  3010      9004          move.w    (A0),D0
00004F20  E040      9005          asr.w     #8,D0
00004F22  E240      9006          asr.w     #1,D0
00004F24  C07C 0007 9007          and.w     #7,D0
00004F28  3A00      9008          move.w    D0,D5
                    9009   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004F2A  CABC 0000 9010          and.l     #65535,D5
00004F2E  FFFF      
00004F30  2F05      9011          move.l    D5,-(A7)
00004F32  2042      9012          move.l    D2,A0
00004F34  3210      9013          move.w    (A0),D1
00004F36  C27C 00FF 9014          and.w     #255,D1
00004F3A  C2BC 0000 9015          and.l     #65535,D1
00004F3E  FFFF      
00004F40  2F01      9016          move.l    D1,-(A7)
00004F42  4879 0000 9017          pea       @md_288.L
00004F46  790E      
00004F48  4879 0803 9018          pea       _Instruction.L
00004F4C  04E2      
00004F4E  4E95      9019          jsr       (A5)
00004F50  DEFC 0010 9020          add.w     #16,A7
                    9021   DisassembleInstruction_249:
                    9022   ; }
                    9023   ; /////////////////////////////////////////////////////////////////////////////////
                    9024   ; // if instruction is MULS.W
                    9025   ; /////////////////////////////////////////////////////////////////////////////////
                    9026   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004F54  2042      9027          move.l    D2,A0
00004F56  3010      9028          move.w    (A0),D0
00004F58  C07C F1C0 9029          and.w     #61888,D0
00004F5C  0C40 C1C0 9030          cmp.w     #49600,D0
00004F60  6600 004E 9031          bne       DisassembleInstruction_251
                    9032   ; {
                    9033   ; InstructionSize = 1;
00004F64  24BC 0000 9034          move.l    #1,(A2)
00004F68  0001      
                    9035   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004F6A  2042      9036          move.l    D2,A0
00004F6C  3010      9037          move.w    (A0),D0
00004F6E  E040      9038          asr.w     #8,D0
00004F70  E240      9039          asr.w     #1,D0
00004F72  C07C 0007 9040          and.w     #7,D0
00004F76  3A00      9041          move.w    D0,D5
                    9042   ; strcpyInstruction("MULS ");
00004F78  4879 0000 9043          pea       @md_289.L
00004F7C  791E      
00004F7E  4E93      9044          jsr       (A3)
00004F80  584F      9045          addq.w    #4,A7
                    9046   ; Decode6BitEA(OpCode,0,0,0) ;
00004F82  42A7      9047          clr.l     -(A7)
00004F84  42A7      9048          clr.l     -(A7)
00004F86  42A7      9049          clr.l     -(A7)
00004F88  2F02      9050          move.l    D2,-(A7)
00004F8A  4EB8 324C 9051          jsr       _Decode6BitEA
00004F8E  DEFC 0010 9052          add.w     #16,A7
                    9053   ; sprintf(TempString, ",D%d", DataRegister) ;
00004F92  CABC 0000 9054          and.l     #65535,D5
00004F96  FFFF      
00004F98  2F05      9055          move.l    D5,-(A7)
00004F9A  4879 0000 9056          pea       @md_245.L
00004F9E  7774      
00004FA0  2F0C      9057          move.l    A4,-(A7)
00004FA2  4E95      9058          jsr       (A5)
00004FA4  DEFC 000C 9059          add.w     #12,A7
                    9060   ; strcatInstruction(TempString);
00004FA8  2F0C      9061          move.l    A4,-(A7)
00004FAA  4EB8 0CCC 9062          jsr       _strcatInstruction
00004FAE  584F      9063          addq.w    #4,A7
                    9064   DisassembleInstruction_251:
                    9065   ; }
                    9066   ; /////////////////////////////////////////////////////////////////////////////////
                    9067   ; // if instruction is MULU.W
                    9068   ; /////////////////////////////////////////////////////////////////////////////////
                    9069   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004FB0  2042      9070          move.l    D2,A0
00004FB2  3010      9071          move.w    (A0),D0
00004FB4  C07C F1C0 9072          and.w     #61888,D0
00004FB8  0C40 C0C0 9073          cmp.w     #49344,D0
00004FBC  6600 004E 9074          bne       DisassembleInstruction_253
                    9075   ; {
                    9076   ; InstructionSize = 1;
00004FC0  24BC 0000 9077          move.l    #1,(A2)
00004FC4  0001      
                    9078   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004FC6  2042      9079          move.l    D2,A0
00004FC8  3010      9080          move.w    (A0),D0
00004FCA  E040      9081          asr.w     #8,D0
00004FCC  E240      9082          asr.w     #1,D0
00004FCE  C07C 0007 9083          and.w     #7,D0
00004FD2  3A00      9084          move.w    D0,D5
                    9085   ; strcpyInstruction("MULU ");
00004FD4  4879 0000 9086          pea       @md_290.L
00004FD8  7924      
00004FDA  4E93      9087          jsr       (A3)
00004FDC  584F      9088          addq.w    #4,A7
                    9089   ; Decode6BitEA(OpCode,0,0,0) ;
00004FDE  42A7      9090          clr.l     -(A7)
00004FE0  42A7      9091          clr.l     -(A7)
00004FE2  42A7      9092          clr.l     -(A7)
00004FE4  2F02      9093          move.l    D2,-(A7)
00004FE6  4EB8 324C 9094          jsr       _Decode6BitEA
00004FEA  DEFC 0010 9095          add.w     #16,A7
                    9096   ; sprintf(TempString, ",D%d", DataRegister) ;
00004FEE  CABC 0000 9097          and.l     #65535,D5
00004FF2  FFFF      
00004FF4  2F05      9098          move.l    D5,-(A7)
00004FF6  4879 0000 9099          pea       @md_245.L
00004FFA  7774      
00004FFC  2F0C      9100          move.l    A4,-(A7)
00004FFE  4E95      9101          jsr       (A5)
00005000  DEFC 000C 9102          add.w     #12,A7
                    9103   ; strcatInstruction(TempString);
00005004  2F0C      9104          move.l    A4,-(A7)
00005006  4EB8 0CCC 9105          jsr       _strcatInstruction
0000500A  584F      9106          addq.w    #4,A7
                    9107   DisassembleInstruction_253:
                    9108   ; }
                    9109   ; /////////////////////////////////////////////////////////////////////////////////
                    9110   ; // if instruction is NBCD <EA>
                    9111   ; /////////////////////////////////////////////////////////////////////////////////
                    9112   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
0000500C  2042      9113          move.l    D2,A0
0000500E  3010      9114          move.w    (A0),D0
00005010  C07C FFC0 9115          and.w     #65472,D0
00005014  0C40 4800 9116          cmp.w     #18432,D0
00005018  6620      9117          bne.s     DisassembleInstruction_255
                    9118   ; {
                    9119   ; InstructionSize = 1;
0000501A  24BC 0000 9120          move.l    #1,(A2)
0000501E  0001      
                    9121   ; strcpyInstruction("NBCD ");
00005020  4879 0000 9122          pea       @md_291.L
00005024  792A      
00005026  4E93      9123          jsr       (A3)
00005028  584F      9124          addq.w    #4,A7
                    9125   ; Decode6BitEA(OpCode,0,0,0);
0000502A  42A7      9126          clr.l     -(A7)
0000502C  42A7      9127          clr.l     -(A7)
0000502E  42A7      9128          clr.l     -(A7)
00005030  2F02      9129          move.l    D2,-(A7)
00005032  4EB8 324C 9130          jsr       _Decode6BitEA
00005036  DEFC 0010 9131          add.w     #16,A7
                    9132   DisassembleInstruction_255:
                    9133   ; }
                    9134   ; /////////////////////////////////////////////////////////////////////////////////
                    9135   ; // if instruction is NEG <EA>
                    9136   ; /////////////////////////////////////////////////////////////////////////////////
                    9137   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
0000503A  2042      9138          move.l    D2,A0
0000503C  3010      9139          move.w    (A0),D0
0000503E  C07C FF00 9140          and.w     #65280,D0
00005042  0C40 4400 9141          cmp.w     #17408,D0
00005046  6600 0046 9142          bne       DisassembleInstruction_259
                    9143   ; {
                    9144   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000504A  2042      9145          move.l    D2,A0
0000504C  3010      9146          move.w    (A0),D0
0000504E  EC40      9147          asr.w     #6,D0
00005050  C07C 0003 9148          and.w     #3,D0
00005054  0C40 0003 9149          cmp.w     #3,D0
00005058  6700 0034 9150          beq       DisassembleInstruction_259
                    9151   ; {
                    9152   ; InstructionSize = 1;
0000505C  24BC 0000 9153          move.l    #1,(A2)
00005060  0001      
                    9154   ; strcpyInstruction("NEG");
00005062  4879 0000 9155          pea       @md_292.L
00005066  7930      
00005068  4E93      9156          jsr       (A3)
0000506A  584F      9157          addq.w    #4,A7
                    9158   ; Decode2BitOperandSize(*OpCode) ;
0000506C  2042      9159          move.l    D2,A0
0000506E  3210      9160          move.w    (A0),D1
00005070  C2BC 0000 9161          and.l     #65535,D1
00005074  FFFF      
00005076  2F01      9162          move.l    D1,-(A7)
00005078  4EB8 2FB8 9163          jsr       _Decode2BitOperandSize
0000507C  584F      9164          addq.w    #4,A7
                    9165   ; Decode6BitEA(OpCode,0,0,0);
0000507E  42A7      9166          clr.l     -(A7)
00005080  42A7      9167          clr.l     -(A7)
00005082  42A7      9168          clr.l     -(A7)
00005084  2F02      9169          move.l    D2,-(A7)
00005086  4EB8 324C 9170          jsr       _Decode6BitEA
0000508A  DEFC 0010 9171          add.w     #16,A7
                    9172   DisassembleInstruction_259:
                    9173   ; }
                    9174   ; }
                    9175   ; /////////////////////////////////////////////////////////////////////////////////
                    9176   ; // if instruction is NEGX <EA>
                    9177   ; /////////////////////////////////////////////////////////////////////////////////
                    9178   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
0000508E  2042      9179          move.l    D2,A0
00005090  3010      9180          move.w    (A0),D0
00005092  C07C FF00 9181          and.w     #65280,D0
00005096  0C40 4000 9182          cmp.w     #16384,D0
0000509A  6600 0046 9183          bne       DisassembleInstruction_263
                    9184   ; {
                    9185   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000509E  2042      9186          move.l    D2,A0
000050A0  3010      9187          move.w    (A0),D0
000050A2  EC40      9188          asr.w     #6,D0
000050A4  C07C 0003 9189          and.w     #3,D0
000050A8  0C40 0003 9190          cmp.w     #3,D0
000050AC  6700 0034 9191          beq       DisassembleInstruction_263
                    9192   ; {
                    9193   ; InstructionSize = 1;
000050B0  24BC 0000 9194          move.l    #1,(A2)
000050B4  0001      
                    9195   ; strcpyInstruction("NEGX");
000050B6  4879 0000 9196          pea       @md_293.L
000050BA  7934      
000050BC  4E93      9197          jsr       (A3)
000050BE  584F      9198          addq.w    #4,A7
                    9199   ; Decode2BitOperandSize(*OpCode) ;
000050C0  2042      9200          move.l    D2,A0
000050C2  3210      9201          move.w    (A0),D1
000050C4  C2BC 0000 9202          and.l     #65535,D1
000050C8  FFFF      
000050CA  2F01      9203          move.l    D1,-(A7)
000050CC  4EB8 2FB8 9204          jsr       _Decode2BitOperandSize
000050D0  584F      9205          addq.w    #4,A7
                    9206   ; Decode6BitEA(OpCode,0,0,0);
000050D2  42A7      9207          clr.l     -(A7)
000050D4  42A7      9208          clr.l     -(A7)
000050D6  42A7      9209          clr.l     -(A7)
000050D8  2F02      9210          move.l    D2,-(A7)
000050DA  4EB8 324C 9211          jsr       _Decode6BitEA
000050DE  DEFC 0010 9212          add.w     #16,A7
                    9213   DisassembleInstruction_263:
                    9214   ; }
                    9215   ; }
                    9216   ; /////////////////////////////////////////////////////////////////////////////////
                    9217   ; // if instruction is NOP
                    9218   ; /////////////////////////////////////////////////////////////////////////////////
                    9219   ; if(*OpCode == (unsigned short int)(0x4E71))
000050E2  2042      9220          move.l    D2,A0
000050E4  3010      9221          move.w    (A0),D0
000050E6  0C40 4E71 9222          cmp.w     #20081,D0
000050EA  6610      9223          bne.s     DisassembleInstruction_265
                    9224   ; {
                    9225   ; InstructionSize = 1;
000050EC  24BC 0000 9226          move.l    #1,(A2)
000050F0  0001      
                    9227   ; strcpyInstruction("NOP");
000050F2  4879 0000 9228          pea       @md_294.L
000050F6  793A      
000050F8  4E93      9229          jsr       (A3)
000050FA  584F      9230          addq.w    #4,A7
                    9231   DisassembleInstruction_265:
                    9232   ; }
                    9233   ; /////////////////////////////////////////////////////////////////////////////////
                    9234   ; // if instruction is NOT <EA>
                    9235   ; /////////////////////////////////////////////////////////////////////////////////
                    9236   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
000050FC  2042      9237          move.l    D2,A0
000050FE  3010      9238          move.w    (A0),D0
00005100  C07C FF00 9239          and.w     #65280,D0
00005104  0C40 4600 9240          cmp.w     #17920,D0
00005108  6600 0046 9241          bne       DisassembleInstruction_269
                    9242   ; {
                    9243   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000510C  2042      9244          move.l    D2,A0
0000510E  3010      9245          move.w    (A0),D0
00005110  EC40      9246          asr.w     #6,D0
00005112  C07C 0003 9247          and.w     #3,D0
00005116  0C40 0003 9248          cmp.w     #3,D0
0000511A  6700 0034 9249          beq       DisassembleInstruction_269
                    9250   ; {
                    9251   ; InstructionSize = 1;
0000511E  24BC 0000 9252          move.l    #1,(A2)
00005122  0001      
                    9253   ; strcpyInstruction("NOT");
00005124  4879 0000 9254          pea       @md_295.L
00005128  793E      
0000512A  4E93      9255          jsr       (A3)
0000512C  584F      9256          addq.w    #4,A7
                    9257   ; Decode2BitOperandSize(*OpCode) ;
0000512E  2042      9258          move.l    D2,A0
00005130  3210      9259          move.w    (A0),D1
00005132  C2BC 0000 9260          and.l     #65535,D1
00005136  FFFF      
00005138  2F01      9261          move.l    D1,-(A7)
0000513A  4EB8 2FB8 9262          jsr       _Decode2BitOperandSize
0000513E  584F      9263          addq.w    #4,A7
                    9264   ; Decode6BitEA(OpCode,0,0,0);
00005140  42A7      9265          clr.l     -(A7)
00005142  42A7      9266          clr.l     -(A7)
00005144  42A7      9267          clr.l     -(A7)
00005146  2F02      9268          move.l    D2,-(A7)
00005148  4EB8 324C 9269          jsr       _Decode6BitEA
0000514C  DEFC 0010 9270          add.w     #16,A7
                    9271   DisassembleInstruction_269:
                    9272   ; }
                    9273   ; }
                    9274   ; /////////////////////////////////////////////////////////////////////////////////
                    9275   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9276   ; /////////////////////////////////////////////////////////////////////////////////
                    9277   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00005150  2042      9278          move.l    D2,A0
00005152  3010      9279          move.w    (A0),D0
00005154  C07C F000 9280          and.w     #61440,D0
00005158  0C40 8000 9281          cmp.w     #32768,D0
0000515C  6600 0038 9282          bne       DisassembleInstruction_273
                    9283   ; {
                    9284   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00005160  2042      9285          move.l    D2,A0
00005162  3010      9286          move.w    (A0),D0
00005164  EC40      9287          asr.w     #6,D0
00005166  C07C 0007 9288          and.w     #7,D0
0000516A  3600      9289          move.w    D0,D3
                    9290   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
0000516C  0C43 0002 9291          cmp.w     #2,D3
00005170  630C      9292          bls.s     DisassembleInstruction_275
00005172  0C43 0004 9293          cmp.w     #4,D3
00005176  651E      9294          blo.s     DisassembleInstruction_273
00005178  0C43 0006 9295          cmp.w     #6,D3
0000517C  6218      9296          bhi.s     DisassembleInstruction_273
                    9297   DisassembleInstruction_275:
                    9298   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9299   ; {
                    9300   ; InstructionSize = 1;
0000517E  24BC 0000 9301          move.l    #1,(A2)
00005182  0001      
                    9302   ; strcpyInstruction("OR") ;
00005184  4879 0000 9303          pea       @md_296.L
00005188  7942      
0000518A  4E93      9304          jsr       (A3)
0000518C  584F      9305          addq.w    #4,A7
                    9306   ; Decode3BitOperandMode(OpCode) ;
0000518E  2F02      9307          move.l    D2,-(A7)
00005190  4EB8 3674 9308          jsr       _Decode3BitOperandMode
00005194  584F      9309          addq.w    #4,A7
                    9310   DisassembleInstruction_273:
                    9311   ; }
                    9312   ; }
                    9313   ; /////////////////////////////////////////////////////////////////////////////////
                    9314   ; // if instruction is ORI to CCR
                    9315   ; /////////////////////////////////////////////////////////////////////////////////
                    9316   ; if(*OpCode == (unsigned short int)(0x003C))   {
00005196  2042      9317          move.l    D2,A0
00005198  3010      9318          move.w    (A0),D0
0000519A  0C40 003C 9319          cmp.w     #60,D0
0000519E  662A      9320          bne.s     DisassembleInstruction_276
                    9321   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000051A0  2042      9322          move.l    D2,A0
000051A2  3228 0002 9323          move.w    2(A0),D1
000051A6  C27C 00FF 9324          and.w     #255,D1
000051AA  C2BC 0000 9325          and.l     #65535,D1
000051AE  FFFF      
000051B0  2F01      9326          move.l    D1,-(A7)
000051B2  4879 0000 9327          pea       @md_297.L
000051B6  7946      
000051B8  4879 0803 9328          pea       _Instruction.L
000051BC  04E2      
000051BE  4E95      9329          jsr       (A5)
000051C0  DEFC 000C 9330          add.w     #12,A7
                    9331   ; InstructionSize = 2;
000051C4  24BC 0000 9332          move.l    #2,(A2)
000051C8  0002      
                    9333   DisassembleInstruction_276:
                    9334   ; }
                    9335   ; /////////////////////////////////////////////////////////////////////////////////
                    9336   ; // if instruction is ORI #data,SR
                    9337   ; /////////////////////////////////////////////////////////////////////////////////
                    9338   ; if(*OpCode  == (unsigned short int)(0x007c))
000051CA  2042      9339          move.l    D2,A0
000051CC  3010      9340          move.w    (A0),D0
000051CE  0C40 007C 9341          cmp.w     #124,D0
000051D2  6622      9342          bne.s     DisassembleInstruction_278
                    9343   ; {
                    9344   ; InstructionSize = 2;
000051D4  24BC 0000 9345          move.l    #2,(A2)
000051D8  0002      
                    9346   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
000051DA  2042      9347          move.l    D2,A0
000051DC  3228 0002 9348          move.w    2(A0),D1
000051E0  48C1      9349          ext.l     D1
000051E2  2F01      9350          move.l    D1,-(A7)
000051E4  4879 0000 9351          pea       @md_298.L
000051E8  7954      
000051EA  4879 0803 9352          pea       _Instruction.L
000051EE  04E2      
000051F0  4E95      9353          jsr       (A5)
000051F2  DEFC 000C 9354          add.w     #12,A7
                    9355   DisassembleInstruction_278:
                    9356   ; }
                    9357   ; /////////////////////////////////////////////////////////////////////////////////
                    9358   ; // if instruction is PEA
                    9359   ; /////////////////////////////////////////////////////////////////////////////////
                    9360   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
000051F6  2042      9361          move.l    D2,A0
000051F8  3010      9362          move.w    (A0),D0
000051FA  C07C FFC0 9363          and.w     #65472,D0
000051FE  0C40 4840 9364          cmp.w     #18496,D0
00005202  6620      9365          bne.s     DisassembleInstruction_280
                    9366   ; {
                    9367   ; InstructionSize = 1;
00005204  24BC 0000 9368          move.l    #1,(A2)
00005208  0001      
                    9369   ; strcpyInstruction("PEA ");
0000520A  4879 0000 9370          pea       @md_299.L
0000520E  7962      
00005210  4E93      9371          jsr       (A3)
00005212  584F      9372          addq.w    #4,A7
                    9373   ; Decode6BitEA(OpCode,0,0,0);
00005214  42A7      9374          clr.l     -(A7)
00005216  42A7      9375          clr.l     -(A7)
00005218  42A7      9376          clr.l     -(A7)
0000521A  2F02      9377          move.l    D2,-(A7)
0000521C  4EB8 324C 9378          jsr       _Decode6BitEA
00005220  DEFC 0010 9379          add.w     #16,A7
                    9380   DisassembleInstruction_280:
                    9381   ; }
                    9382   ; /////////////////////////////////////////////////////////////////////////////////
                    9383   ; // if instruction is reset
                    9384   ; /////////////////////////////////////////////////////////////////////////////////
                    9385   ; if(*OpCode  == (unsigned short int)(0x4E70))
00005224  2042      9386          move.l    D2,A0
00005226  3010      9387          move.w    (A0),D0
00005228  0C40 4E70 9388          cmp.w     #20080,D0
0000522C  6616      9389          bne.s     DisassembleInstruction_282
                    9390   ; {
                    9391   ; InstructionSize = 1;
0000522E  24BC 0000 9392          move.l    #1,(A2)
00005232  0001      
                    9393   ; sprintf(Instruction, "RESET");
00005234  4879 0000 9394          pea       @md_300.L
00005238  7968      
0000523A  4879 0803 9395          pea       _Instruction.L
0000523E  04E2      
00005240  4E95      9396          jsr       (A5)
00005242  504F      9397          addq.w    #8,A7
                    9398   DisassembleInstruction_282:
                    9399   ; }
                    9400   ; /////////////////////////////////////////////////////////////////////////////////
                    9401   ; // if instruction is RTE
                    9402   ; /////////////////////////////////////////////////////////////////////////////////
                    9403   ; if(*OpCode  == (unsigned short int)(0x4E73))
00005244  2042      9404          move.l    D2,A0
00005246  3010      9405          move.w    (A0),D0
00005248  0C40 4E73 9406          cmp.w     #20083,D0
0000524C  6616      9407          bne.s     DisassembleInstruction_284
                    9408   ; {
                    9409   ; InstructionSize = 1;
0000524E  24BC 0000 9410          move.l    #1,(A2)
00005252  0001      
                    9411   ; sprintf(Instruction, "RTE");
00005254  4879 0000 9412          pea       @md_301.L
00005258  796E      
0000525A  4879 0803 9413          pea       _Instruction.L
0000525E  04E2      
00005260  4E95      9414          jsr       (A5)
00005262  504F      9415          addq.w    #8,A7
                    9416   DisassembleInstruction_284:
                    9417   ; }
                    9418   ; /////////////////////////////////////////////////////////////////////////////////
                    9419   ; // if instruction is RTR
                    9420   ; /////////////////////////////////////////////////////////////////////////////////
                    9421   ; if(*OpCode == (unsigned short int)(0x4E77))
00005264  2042      9422          move.l    D2,A0
00005266  3010      9423          move.w    (A0),D0
00005268  0C40 4E77 9424          cmp.w     #20087,D0
0000526C  6610      9425          bne.s     DisassembleInstruction_286
                    9426   ; {
                    9427   ; InstructionSize = 1;
0000526E  24BC 0000 9428          move.l    #1,(A2)
00005272  0001      
                    9429   ; strcpyInstruction("RTR");
00005274  4879 0000 9430          pea       @md_302.L
00005278  7972      
0000527A  4E93      9431          jsr       (A3)
0000527C  584F      9432          addq.w    #4,A7
                    9433   DisassembleInstruction_286:
                    9434   ; }
                    9435   ; /////////////////////////////////////////////////////////////////////////////////
                    9436   ; // if instruction is RTS
                    9437   ; /////////////////////////////////////////////////////////////////////////////////
                    9438   ; if(*OpCode == (unsigned short int)(0x4E75))
0000527E  2042      9439          move.l    D2,A0
00005280  3010      9440          move.w    (A0),D0
00005282  0C40 4E75 9441          cmp.w     #20085,D0
00005286  6610      9442          bne.s     DisassembleInstruction_288
                    9443   ; {
                    9444   ; InstructionSize = 1;
00005288  24BC 0000 9445          move.l    #1,(A2)
0000528C  0001      
                    9446   ; strcpyInstruction("RTS");
0000528E  4879 0000 9447          pea       @md_303.L
00005292  7976      
00005294  4E93      9448          jsr       (A3)
00005296  584F      9449          addq.w    #4,A7
                    9450   DisassembleInstruction_288:
                    9451   ; }
                    9452   ; /////////////////////////////////////////////////////////////////////////////////
                    9453   ; // if instruction is STOP
                    9454   ; /////////////////////////////////////////////////////////////////////////////////
                    9455   ; if(*OpCode  == (unsigned short int)(0x4E72))
00005298  2042      9456          move.l    D2,A0
0000529A  3010      9457          move.w    (A0),D0
0000529C  0C40 4E72 9458          cmp.w     #20082,D0
000052A0  6622      9459          bne.s     DisassembleInstruction_290
                    9460   ; {
                    9461   ; InstructionSize = 2;
000052A2  24BC 0000 9462          move.l    #2,(A2)
000052A6  0002      
                    9463   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
000052A8  2042      9464          move.l    D2,A0
000052AA  3228 0002 9465          move.w    2(A0),D1
000052AE  48C1      9466          ext.l     D1
000052B0  2F01      9467          move.l    D1,-(A7)
000052B2  4879 0000 9468          pea       @md_304.L
000052B6  797A      
000052B8  4879 0803 9469          pea       _Instruction.L
000052BC  04E2      
000052BE  4E95      9470          jsr       (A5)
000052C0  DEFC 000C 9471          add.w     #12,A7
                    9472   DisassembleInstruction_290:
                    9473   ; }
                    9474   ; /////////////////////////////////////////////////////////////////////////////////
                    9475   ; // if instruction is SBCD
                    9476   ; /////////////////////////////////////////////////////////////////////////////////
                    9477   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
000052C4  2042      9478          move.l    D2,A0
000052C6  3010      9479          move.w    (A0),D0
000052C8  C07C F1F0 9480          and.w     #61936,D0
000052CC  0C40 8100 9481          cmp.w     #33024,D0
000052D0  6600 0092 9482          bne       DisassembleInstruction_295
                    9483   ; {
                    9484   ; InstructionSize = 1;
000052D4  24BC 0000 9485          move.l    #1,(A2)
000052D8  0001      
                    9486   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000052DA  2042      9487          move.l    D2,A0
000052DC  3010      9488          move.w    (A0),D0
000052DE  E040      9489          asr.w     #8,D0
000052E0  E240      9490          asr.w     #1,D0
000052E2  C07C 0007 9491          and.w     #7,D0
000052E6  3D40 FFE0 9492          move.w    D0,-32(A6)
                    9493   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000052EA  2042      9494          move.l    D2,A0
000052EC  3010      9495          move.w    (A0),D0
000052EE  C07C 0007 9496          and.w     #7,D0
000052F2  3D40 FFDE 9497          move.w    D0,-34(A6)
                    9498   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000052F6  2042      9499          move.l    D2,A0
000052F8  3010      9500          move.w    (A0),D0
000052FA  E640      9501          asr.w     #3,D0
000052FC  48C0      9502          ext.l     D0
000052FE  C0BC 0000 9503          and.l     #1,D0
00005302  0001      
00005304  2D40 FFE4 9504          move.l    D0,-28(A6)
                    9505   ; if(Mode == 0)
00005308  202E FFE4 9506          move.l    -28(A6),D0
0000530C  662C      9507          bne.s     DisassembleInstruction_294
                    9508   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
0000530E  322E FFE0 9509          move.w    -32(A6),D1
00005312  C2BC 0000 9510          and.l     #65535,D1
00005316  FFFF      
00005318  2F01      9511          move.l    D1,-(A7)
0000531A  322E FFDE 9512          move.w    -34(A6),D1
0000531E  C2BC 0000 9513          and.l     #65535,D1
00005322  FFFF      
00005324  2F01      9514          move.l    D1,-(A7)
00005326  4879 0000 9515          pea       @md_305.L
0000532A  7984      
0000532C  4879 0803 9516          pea       _Instruction.L
00005330  04E2      
00005332  4E95      9517          jsr       (A5)
00005334  DEFC 0010 9518          add.w     #16,A7
00005338  602A      9519          bra.s     DisassembleInstruction_295
                    9520   DisassembleInstruction_294:
                    9521   ; else
                    9522   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
0000533A  322E FFE0 9523          move.w    -32(A6),D1
0000533E  C2BC 0000 9524          and.l     #65535,D1
00005342  FFFF      
00005344  2F01      9525          move.l    D1,-(A7)
00005346  322E FFDE 9526          move.w    -34(A6),D1
0000534A  C2BC 0000 9527          and.l     #65535,D1
0000534E  FFFF      
00005350  2F01      9528          move.l    D1,-(A7)
00005352  4879 0000 9529          pea       @md_306.L
00005356  7992      
00005358  4879 0803 9530          pea       _Instruction.L
0000535C  04E2      
0000535E  4E95      9531          jsr       (A5)
00005360  DEFC 0010 9532          add.w     #16,A7
                    9533   DisassembleInstruction_295:
                    9534   ; }
                    9535   ; /////////////////////////////////////////////////////////////////////////////////
                    9536   ; // if instruction is Scc
                    9537   ; /////////////////////////////////////////////////////////////////////////////////
                    9538   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
00005364  2042      9539          move.l    D2,A0
00005366  3010      9540          move.w    (A0),D0
00005368  C07C F0C0 9541          and.w     #61632,D0
0000536C  0C40 50C0 9542          cmp.w     #20672,D0
00005370  6600 0060 9543          bne       DisassembleInstruction_298
                    9544   ; {
                    9545   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
00005374  2042      9546          move.l    D2,A0
00005376  3010      9547          move.w    (A0),D0
00005378  E640      9548          asr.w     #3,D0
0000537A  C07C 0007 9549          and.w     #7,D0
0000537E  3D40 FFEC 9550          move.w    D0,-20(A6)
                    9551   ; if(EAMode != (unsigned short int)(0x0001))
00005382  302E FFEC 9552          move.w    -20(A6),D0
00005386  0C40 0001 9553          cmp.w     #1,D0
0000538A  6700 0046 9554          beq       DisassembleInstruction_298
                    9555   ; {
                    9556   ; InstructionSize = 1;
0000538E  24BC 0000 9557          move.l    #1,(A2)
00005392  0001      
                    9558   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005394  2042      9559          move.l    D2,A0
00005396  3010      9560          move.w    (A0),D0
00005398  E040      9561          asr.w     #8,D0
0000539A  C07C 000F 9562          and.w     #15,D0
0000539E  1D40 FFE9 9563          move.b    D0,-23(A6)
                    9564   ; strcpyInstruction("S") ;
000053A2  4879 0000 9565          pea       @md_307.L
000053A6  79A6      
000053A8  4E93      9566          jsr       (A3)
000053AA  584F      9567          addq.w    #4,A7
                    9568   ; DecodeBranchCondition(Condition) ;
000053AC  122E FFE9 9569          move.b    -23(A6),D1
000053B0  C27C 00FF 9570          and.w     #255,D1
000053B4  C2BC 0000 9571          and.l     #65535,D1
000053B8  FFFF      
000053BA  2F01      9572          move.l    D1,-(A7)
000053BC  4EB8 370A 9573          jsr       _DecodeBranchCondition
000053C0  584F      9574          addq.w    #4,A7
                    9575   ; Decode6BitEA(OpCode,0,0,0);
000053C2  42A7      9576          clr.l     -(A7)
000053C4  42A7      9577          clr.l     -(A7)
000053C6  42A7      9578          clr.l     -(A7)
000053C8  2F02      9579          move.l    D2,-(A7)
000053CA  4EB8 324C 9580          jsr       _Decode6BitEA
000053CE  DEFC 0010 9581          add.w     #16,A7
                    9582   DisassembleInstruction_298:
                    9583   ; }
                    9584   ; }
                    9585   ; /////////////////////////////////////////////////////////////////////////////////
                    9586   ; // if instruction is SUB or SUBA
                    9587   ; /////////////////////////////////////////////////////////////////////////////////
                    9588   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
000053D2  2042      9589          move.l    D2,A0
000053D4  3010      9590          move.w    (A0),D0
000053D6  C07C F000 9591          and.w     #61440,D0
000053DA  0C40 9000 9592          cmp.w     #36864,D0
000053DE  6600 008C 9593          bne       DisassembleInstruction_303
                    9594   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000053E2  2042      9595          move.l    D2,A0
000053E4  3010      9596          move.w    (A0),D0
000053E6  EC40      9597          asr.w     #6,D0
000053E8  C07C 0007 9598          and.w     #7,D0
000053EC  3600      9599          move.w    D0,D3
                    9600   ; InstructionSize = 1;
000053EE  24BC 0000 9601          move.l    #1,(A2)
000053F2  0001      
                    9602   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000053F4  0C43 0003 9603          cmp.w     #3,D3
000053F8  6708      9604          beq.s     DisassembleInstruction_304
000053FA  0C43 0007 9605          cmp.w     #7,D3
000053FE  6600 005A 9606          bne       DisassembleInstruction_302
                    9607   DisassembleInstruction_304:
                    9608   ; {
                    9609   ; if(OpMode == (unsigned short int)(0x0003))
00005402  0C43 0003 9610          cmp.w     #3,D3
00005406  660C      9611          bne.s     DisassembleInstruction_305
                    9612   ; strcpyInstruction("SUBA.W ") ;
00005408  4879 0000 9613          pea       @md_308.L
0000540C  79A8      
0000540E  4E93      9614          jsr       (A3)
00005410  584F      9615          addq.w    #4,A7
00005412  600A      9616          bra.s     DisassembleInstruction_306
                    9617   DisassembleInstruction_305:
                    9618   ; else
                    9619   ; strcpyInstruction("SUBA.L ") ;
00005414  4879 0000 9620          pea       @md_309.L
00005418  79B0      
0000541A  4E93      9621          jsr       (A3)
0000541C  584F      9622          addq.w    #4,A7
                    9623   DisassembleInstruction_306:
                    9624   ; Decode6BitEA(OpCode,0,0,0)  ;
0000541E  42A7      9625          clr.l     -(A7)
00005420  42A7      9626          clr.l     -(A7)
00005422  42A7      9627          clr.l     -(A7)
00005424  2F02      9628          move.l    D2,-(A7)
00005426  4EB8 324C 9629          jsr       _Decode6BitEA
0000542A  DEFC 0010 9630          add.w     #16,A7
                    9631   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000542E  2042      9632          move.l    D2,A0
00005430  3210      9633          move.w    (A0),D1
00005432  E041      9634          asr.w     #8,D1
00005434  E241      9635          asr.w     #1,D1
00005436  C27C 0007 9636          and.w     #7,D1
0000543A  C2BC 0000 9637          and.l     #65535,D1
0000543E  FFFF      
00005440  2F01      9638          move.l    D1,-(A7)
00005442  4879 0000 9639          pea       @md_212.L
00005446  76A4      
00005448  2F0C      9640          move.l    A4,-(A7)
0000544A  4E95      9641          jsr       (A5)
0000544C  DEFC 000C 9642          add.w     #12,A7
                    9643   ; strcatInstruction(TempString) ;
00005450  2F0C      9644          move.l    A4,-(A7)
00005452  4EB8 0CCC 9645          jsr       _strcatInstruction
00005456  584F      9646          addq.w    #4,A7
00005458  6012      9647          bra.s     DisassembleInstruction_303
                    9648   DisassembleInstruction_302:
                    9649   ; }
                    9650   ; else {
                    9651   ; strcpyInstruction("SUB") ;
0000545A  4879 0000 9652          pea       @md_310.L
0000545E  79B8      
00005460  4E93      9653          jsr       (A3)
00005462  584F      9654          addq.w    #4,A7
                    9655   ; Decode3BitOperandMode(OpCode) ;
00005464  2F02      9656          move.l    D2,-(A7)
00005466  4EB8 3674 9657          jsr       _Decode3BitOperandMode
0000546A  584F      9658          addq.w    #4,A7
                    9659   DisassembleInstruction_303:
                    9660   ; }
                    9661   ; }
                    9662   ; /////////////////////////////////////////////////////////////////////////////////
                    9663   ; // if instruction is SUBQ
                    9664   ; /////////////////////////////////////////////////////////////////////////////////
                    9665   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
0000546C  2042      9666          move.l    D2,A0
0000546E  3010      9667          move.w    (A0),D0
00005470  C07C F100 9668          and.w     #61696,D0
00005474  0C40 5100 9669          cmp.w     #20736,D0
00005478  6600 0072 9670          bne       DisassembleInstruction_309
                    9671   ; {
                    9672   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000547C  2042      9673          move.l    D2,A0
0000547E  3010      9674          move.w    (A0),D0
00005480  EC40      9675          asr.w     #6,D0
00005482  C07C 0003 9676          and.w     #3,D0
00005486  3600      9677          move.w    D0,D3
                    9678   ; if(OpMode <= (unsigned short int)(0x0002))
00005488  0C43 0002 9679          cmp.w     #2,D3
0000548C  6200 005E 9680          bhi       DisassembleInstruction_309
                    9681   ; {
                    9682   ; InstructionSize = 1;
00005490  24BC 0000 9683          move.l    #1,(A2)
00005494  0001      
                    9684   ; strcpyInstruction("SUBQ") ;
00005496  4879 0000 9685          pea       @md_311.L
0000549A  79BC      
0000549C  4E93      9686          jsr       (A3)
0000549E  584F      9687          addq.w    #4,A7
                    9688   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000054A0  2042      9689          move.l    D2,A0
000054A2  3210      9690          move.w    (A0),D1
000054A4  C2BC 0000 9691          and.l     #65535,D1
000054A8  FFFF      
000054AA  2F01      9692          move.l    D1,-(A7)
000054AC  4EB8 2FB8 9693          jsr       _Decode2BitOperandSize
000054B0  584F      9694          addq.w    #4,A7
                    9695   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
000054B2  2042      9696          move.l    D2,A0
000054B4  3210      9697          move.w    (A0),D1
000054B6  E041      9698          asr.w     #8,D1
000054B8  E241      9699          asr.w     #1,D1
000054BA  C27C 0007 9700          and.w     #7,D1
000054BE  C2BC 0000 9701          and.l     #65535,D1
000054C2  FFFF      
000054C4  2F01      9702          move.l    D1,-(A7)
000054C6  4879 0000 9703          pea       @md_222.L
000054CA  76E4      
000054CC  2F0C      9704          move.l    A4,-(A7)
000054CE  4E95      9705          jsr       (A5)
000054D0  DEFC 000C 9706          add.w     #12,A7
                    9707   ; strcatInstruction(TempString) ;
000054D4  2F0C      9708          move.l    A4,-(A7)
000054D6  4EB8 0CCC 9709          jsr       _strcatInstruction
000054DA  584F      9710          addq.w    #4,A7
                    9711   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000054DC  42A7      9712          clr.l     -(A7)
000054DE  42A7      9713          clr.l     -(A7)
000054E0  42A7      9714          clr.l     -(A7)
000054E2  2F02      9715          move.l    D2,-(A7)
000054E4  4EB8 324C 9716          jsr       _Decode6BitEA
000054E8  DEFC 0010 9717          add.w     #16,A7
                    9718   DisassembleInstruction_309:
                    9719   ; }
                    9720   ; }
                    9721   ; /////////////////////////////////////////////////////////////////////////////////
                    9722   ; // if instruction is SUBX
                    9723   ; /////////////////////////////////////////////////////////////////////////////////
                    9724   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000054EC  2042      9725          move.l    D2,A0
000054EE  3010      9726          move.w    (A0),D0
000054F0  C07C F130 9727          and.w     #61744,D0
000054F4  0C40 9100 9728          cmp.w     #37120,D0
000054F8  6600 00A4 9729          bne       DisassembleInstruction_313
                    9730   ; {
                    9731   ; InstructionSize = 1;
000054FC  24BC 0000 9732          move.l    #1,(A2)
00005500  0001      
                    9733   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005502  2042      9734          move.l    D2,A0
00005504  3010      9735          move.w    (A0),D0
00005506  EC40      9736          asr.w     #6,D0
00005508  C07C 0003 9737          and.w     #3,D0
0000550C  3600      9738          move.w    D0,D3
                    9739   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
0000550E  0C43 0003 9740          cmp.w     #3,D3
00005512  6700 008A 9741          beq       DisassembleInstruction_313
                    9742   ; {
                    9743   ; strcpyInstruction("SUBX") ;
00005516  4879 0000 9744          pea       @md_312.L
0000551A  79C2      
0000551C  4E93      9745          jsr       (A3)
0000551E  584F      9746          addq.w    #4,A7
                    9747   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005520  2042      9748          move.l    D2,A0
00005522  3210      9749          move.w    (A0),D1
00005524  C2BC 0000 9750          and.l     #65535,D1
00005528  FFFF      
0000552A  2F01      9751          move.l    D1,-(A7)
0000552C  4EB8 2FB8 9752          jsr       _Decode2BitOperandSize
00005530  584F      9753          addq.w    #4,A7
                    9754   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005532  2042      9755          move.l    D2,A0
00005534  3010      9756          move.w    (A0),D0
00005536  C07C 0008 9757          and.w     #8,D0
0000553A  6600 0030 9758          bne       DisassembleInstruction_315
                    9759   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000553E  2042      9760          move.l    D2,A0
00005540  3210      9761          move.w    (A0),D1
00005542  E041      9762          asr.w     #8,D1
00005544  E241      9763          asr.w     #1,D1
00005546  C27C 0007 9764          and.w     #7,D1
0000554A  48C1      9765          ext.l     D1
0000554C  2F01      9766          move.l    D1,-(A7)
0000554E  2042      9767          move.l    D2,A0
00005550  3210      9768          move.w    (A0),D1
00005552  C27C 0007 9769          and.w     #7,D1
00005556  48C1      9770          ext.l     D1
00005558  2F01      9771          move.l    D1,-(A7)
0000555A  4879 0000 9772          pea       @md_313.L
0000555E  79C8      
00005560  2F0C      9773          move.l    A4,-(A7)
00005562  4E95      9774          jsr       (A5)
00005564  DEFC 0010 9775          add.w     #16,A7
00005568  6000 002C 9776          bra       DisassembleInstruction_316
                    9777   DisassembleInstruction_315:
                    9778   ; else        // -(ax),-(ay) mode used
                    9779   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000556C  2042      9780          move.l    D2,A0
0000556E  3210      9781          move.w    (A0),D1
00005570  E041      9782          asr.w     #8,D1
00005572  E241      9783          asr.w     #1,D1
00005574  C27C 0007 9784          and.w     #7,D1
00005578  48C1      9785          ext.l     D1
0000557A  2F01      9786          move.l    D1,-(A7)
0000557C  2042      9787          move.l    D2,A0
0000557E  3210      9788          move.w    (A0),D1
00005580  C27C 0007 9789          and.w     #7,D1
00005584  48C1      9790          ext.l     D1
00005586  2F01      9791          move.l    D1,-(A7)
00005588  4879 0000 9792          pea       @md_314.L
0000558C  79D2      
0000558E  2F0C      9793          move.l    A4,-(A7)
00005590  4E95      9794          jsr       (A5)
00005592  DEFC 0010 9795          add.w     #16,A7
                    9796   DisassembleInstruction_316:
                    9797   ; strcatInstruction(TempString) ;
00005596  2F0C      9798          move.l    A4,-(A7)
00005598  4EB8 0CCC 9799          jsr       _strcatInstruction
0000559C  584F      9800          addq.w    #4,A7
                    9801   DisassembleInstruction_313:
                    9802   ; }
                    9803   ; }
                    9804   ; /////////////////////////////////////////////////////////////////////////////////
                    9805   ; // if instruction is SWAP
                    9806   ; /////////////////////////////////////////////////////////////////////////////////
                    9807   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
0000559E  2042      9808          move.l    D2,A0
000055A0  3010      9809          move.w    (A0),D0
000055A2  C07C FFF8 9810          and.w     #65528,D0
000055A6  0C40 4840 9811          cmp.w     #18496,D0
000055AA  662A      9812          bne.s     DisassembleInstruction_317
                    9813   ; {
                    9814   ; InstructionSize = 1;
000055AC  24BC 0000 9815          move.l    #1,(A2)
000055B0  0001      
                    9816   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
000055B2  2042      9817          move.l    D2,A0
000055B4  3010      9818          move.w    (A0),D0
000055B6  C07C 0007 9819          and.w     #7,D0
000055BA  3A00      9820          move.w    D0,D5
                    9821   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
000055BC  CABC 0000 9822          and.l     #65535,D5
000055C0  FFFF      
000055C2  2F05      9823          move.l    D5,-(A7)
000055C4  4879 0000 9824          pea       @md_315.L
000055C8  79E2      
000055CA  4879 0803 9825          pea       _Instruction.L
000055CE  04E2      
000055D0  4E95      9826          jsr       (A5)
000055D2  DEFC 000C 9827          add.w     #12,A7
                    9828   DisassembleInstruction_317:
                    9829   ; }
                    9830   ; /////////////////////////////////////////////////////////////////////////////////
                    9831   ; // if instruction is TAS
                    9832   ; /////////////////////////////////////////////////////////////////////////////////
                    9833   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
000055D6  2042      9834          move.l    D2,A0
000055D8  3010      9835          move.w    (A0),D0
000055DA  C07C FFC0 9836          and.w     #65472,D0
000055DE  0C40 4AC0 9837          cmp.w     #19136,D0
000055E2  662A      9838          bne.s     DisassembleInstruction_321
                    9839   ; {
                    9840   ; if(*OpCode != (unsigned short int)(0x4AFC))
000055E4  2042      9841          move.l    D2,A0
000055E6  3010      9842          move.w    (A0),D0
000055E8  0C40 4AFC 9843          cmp.w     #19196,D0
000055EC  6720      9844          beq.s     DisassembleInstruction_321
                    9845   ; {
                    9846   ; InstructionSize = 1;
000055EE  24BC 0000 9847          move.l    #1,(A2)
000055F2  0001      
                    9848   ; strcpyInstruction("TAS ") ;
000055F4  4879 0000 9849          pea       @md_316.L
000055F8  79EC      
000055FA  4E93      9850          jsr       (A3)
000055FC  584F      9851          addq.w    #4,A7
                    9852   ; Decode6BitEA(OpCode,0,0,0) ;
000055FE  42A7      9853          clr.l     -(A7)
00005600  42A7      9854          clr.l     -(A7)
00005602  42A7      9855          clr.l     -(A7)
00005604  2F02      9856          move.l    D2,-(A7)
00005606  4EB8 324C 9857          jsr       _Decode6BitEA
0000560A  DEFC 0010 9858          add.w     #16,A7
                    9859   DisassembleInstruction_321:
                    9860   ; }
                    9861   ; }
                    9862   ; /////////////////////////////////////////////////////////////////////////////////
                    9863   ; // if instruction is TRAP
                    9864   ; /////////////////////////////////////////////////////////////////////////////////
                    9865   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
0000560E  2042      9866          move.l    D2,A0
00005610  3010      9867          move.w    (A0),D0
00005612  C07C FFF0 9868          and.w     #65520,D0
00005616  0C40 4E40 9869          cmp.w     #20032,D0
0000561A  6622      9870          bne.s     DisassembleInstruction_323
                    9871   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
0000561C  2042      9872          move.l    D2,A0
0000561E  3210      9873          move.w    (A0),D1
00005620  C27C 000F 9874          and.w     #15,D1
00005624  C2BC 0000 9875          and.l     #65535,D1
00005628  FFFF      
0000562A  2F01      9876          move.l    D1,-(A7)
0000562C  4879 0000 9877          pea       @md_317.L
00005630  79F2      
00005632  4879 0803 9878          pea       _Instruction.L
00005636  04E2      
00005638  4E95      9879          jsr       (A5)
0000563A  DEFC 000C 9880          add.w     #12,A7
                    9881   DisassembleInstruction_323:
                    9882   ; }
                    9883   ; /////////////////////////////////////////////////////////////////////////////////
                    9884   ; // if instruction is TRAPV
                    9885   ; /////////////////////////////////////////////////////////////////////////////////
                    9886   ; if(*OpCode == (unsigned short int)(0x4E76))
0000563E  2042      9887          move.l    D2,A0
00005640  3010      9888          move.w    (A0),D0
00005642  0C40 4E76 9889          cmp.w     #20086,D0
00005646  6610      9890          bne.s     DisassembleInstruction_325
                    9891   ; {
                    9892   ; InstructionSize = 1;
00005648  24BC 0000 9893          move.l    #1,(A2)
0000564C  0001      
                    9894   ; strcpyInstruction("TRAPV") ;
0000564E  4879 0000 9895          pea       @md_318.L
00005652  79FC      
00005654  4E93      9896          jsr       (A3)
00005656  584F      9897          addq.w    #4,A7
                    9898   DisassembleInstruction_325:
                    9899   ; }
                    9900   ; /////////////////////////////////////////////////////////////////////////////////
                    9901   ; // if instruction is TST
                    9902   ; /////////////////////////////////////////////////////////////////////////////////
                    9903   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
00005658  2042      9904          move.l    D2,A0
0000565A  3010      9905          move.w    (A0),D0
0000565C  C07C FF00 9906          and.w     #65280,D0
00005660  0C40 4A00 9907          cmp.w     #18944,D0
00005664  6600 005A 9908          bne       DisassembleInstruction_329
                    9909   ; {
                    9910   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005668  2042      9911          move.l    D2,A0
0000566A  3010      9912          move.w    (A0),D0
0000566C  EC40      9913          asr.w     #6,D0
0000566E  C07C 0003 9914          and.w     #3,D0
00005672  3D40 FFE2 9915          move.w    D0,-30(A6)
                    9916   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
00005676  2042      9917          move.l    D2,A0
00005678  3010      9918          move.w    (A0),D0
0000567A  0C40 4AFC 9919          cmp.w     #19196,D0
0000567E  6700 0040 9920          beq       DisassembleInstruction_329
00005682  302E FFE2 9921          move.w    -30(A6),D0
00005686  0C40 0003 9922          cmp.w     #3,D0
0000568A  6700 0034 9923          beq       DisassembleInstruction_329
                    9924   ; InstructionSize = 1;
0000568E  24BC 0000 9925          move.l    #1,(A2)
00005692  0001      
                    9926   ; strcpyInstruction("TST") ;
00005694  4879 0000 9927          pea       @md_319.L
00005698  7A02      
0000569A  4E93      9928          jsr       (A3)
0000569C  584F      9929          addq.w    #4,A7
                    9930   ; Decode2BitOperandSize(*OpCode) ;
0000569E  2042      9931          move.l    D2,A0
000056A0  3210      9932          move.w    (A0),D1
000056A2  C2BC 0000 9933          and.l     #65535,D1
000056A6  FFFF      
000056A8  2F01      9934          move.l    D1,-(A7)
000056AA  4EB8 2FB8 9935          jsr       _Decode2BitOperandSize
000056AE  584F      9936          addq.w    #4,A7
                    9937   ; Decode6BitEA(OpCode,0,0,0) ;
000056B0  42A7      9938          clr.l     -(A7)
000056B2  42A7      9939          clr.l     -(A7)
000056B4  42A7      9940          clr.l     -(A7)
000056B6  2F02      9941          move.l    D2,-(A7)
000056B8  4EB8 324C 9942          jsr       _Decode6BitEA
000056BC  DEFC 0010 9943          add.w     #16,A7
                    9944   DisassembleInstruction_329:
                    9945   ; }
                    9946   ; }
                    9947   ; /////////////////////////////////////////////////////////////////////////////////
                    9948   ; // if instruction is UNLK
                    9949   ; //////////////////////////////////////////////////////////
                    9950   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
000056C0  2042      9951          move.l    D2,A0
000056C2  3010      9952          move.w    (A0),D0
000056C4  C07C FFF8 9953          and.w     #65528,D0
000056C8  0C40 4E58 9954          cmp.w     #20056,D0
000056CC  6628      9955          bne.s     DisassembleInstruction_331
                    9956   ; {
                    9957   ; InstructionSize = 1;
000056CE  24BC 0000 9958          move.l    #1,(A2)
000056D2  0001      
                    9959   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
000056D4  2042      9960          move.l    D2,A0
000056D6  3210      9961          move.w    (A0),D1
000056D8  C27C 0007 9962          and.w     #7,D1
000056DC  C2BC 0000 9963          and.l     #65535,D1
000056E0  FFFF      
000056E2  2F01      9964          move.l    D1,-(A7)
000056E4  4879 0000 9965          pea       @md_320.L
000056E8  7A06      
000056EA  4879 0803 9966          pea       _Instruction.L
000056EE  04E2      
000056F0  4E95      9967          jsr       (A5)
000056F2  DEFC 000C 9968          add.w     #12,A7
                    9969   DisassembleInstruction_331:
                    9970   ; }
                    9971   ; FormatInstruction() ;
000056F6  4EB8 2F26 9972          jsr       _FormatInstruction
000056FA  4CDF 3CFC 9973          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000056FE  4E5E      9974          unlk      A6
00005700  4E75      9975          rts
                    9976   ; }
                    9977   _strcpy:
00005702  206F 0004 9978          move.l    (4,A7),A0
00005706  226F 0008 9979          move.l    (8,A7),A1
0000570A  2008      9980          move.l    A0,D0
                    9981   strcpy_1:
0000570C  10D9      9982          move.b    (A1)+,(A0)+
0000570E  66FC      9983          bne       strcpy_1
00005710  4E75      9984          rts
                    9985   ULDIV:
00005712  4E56 0000 9986          link    A6,#0
00005716  48E7 C000 9987          movem.l D0/D1,-(A7)
0000571A  222E 0008 9988          move.l  8(A6),D1
0000571E  202E 000C 9989          move.l  12(A6),D0
00005722  6036      9990          bra.s   ldiv_3
                    9991   LDIV:
00005724  4E56 0000 9992          link    A6,#0
00005728  48E7 C000 9993          movem.l D0/D1,-(A7)
0000572C  222E 0008 9994          move.l  8(A6),D1
00005730  202E 000C 9995          move.l  12(A6),D0
00005734  4A80      9996          tst.l   D0
00005736  6A0E      9997          bpl.s   ldiv_1
00005738  4480      9998          neg.l   D0
0000573A  4A81      9999          tst.l   D1
0000573C  6A14      10000          bpl.s   ldiv_2
0000573E  4481      10001          neg.l   D1
00005740  612A      10002          bsr.s   dodiv
00005742  4481      10003          neg.l   D1
00005744  6016      10004          bra.s   ldiv_4
                    10005   ldiv_1:
00005746  4A81      10006          tst.l   D1
00005748  6A10      10007          bpl.s   ldiv_3
0000574A  4481      10008          neg.l   D1
0000574C  611E      10009          bsr.s   dodiv
0000574E  4480      10010          neg.l   D0
00005750  600A      10011          bra.s   ldiv_4
                    10012   ldiv_2:
00005752  6118      10013          bsr.s   dodiv
00005754  4480      10014          neg.l   D0
00005756  4481      10015          neg.l   D1
00005758  6002      10016          bra.s   ldiv_4
                    10017   ldiv_3:
0000575A  6110      10018          bsr.s   dodiv
                    10019   ldiv_4:
0000575C  2D40 0008 10020          move.l  D0,8(A6)
00005760  2D41 000C 10021          move.l  D1,12(A6)
00005764  4CDF 0003 10022          movem.l (A7)+,D0/D1
00005768  4E5E      10023          unlk    A6
0000576A  4E75      10024          rts
                    10025   dodiv:
0000576C  0C81 0000 10026          cmpi.l  #$FFFF,D1
00005770  FFFF      
00005772  6236      10027          bhi.s   dodiv_2
00005774  0C80 0000 10028          cmpi.l  #$FFFF,D0
00005778  FFFF      
0000577A  6210      10029          bhi.s   dodiv_1
0000577C  80C1      10030          divu    D1,D0
0000577E  2200      10031          move.l  D0,D1
00005780  4241      10032          clr.w   D1
00005782  4841      10033          swap    D1
00005784  0280 0000 10034          andi.l  #$FFFF,D0
00005788  FFFF      
0000578A  4E75      10035          rts
                    10036   dodiv_1:
0000578C  48A7 A000 10037          movem.w D0/D2,-(A7)
00005790  4240      10038          clr.w   D0
00005792  4840      10039          swap    D0
00005794  80C1      10040          divu    D1,D0
00005796  3400      10041          move.w  D0,D2
00005798  301F      10042          move.w  (A7)+,D0
0000579A  80C1      10043          divu    D1,D0
0000579C  4840      10044          swap    D0
0000579E  4281      10045          clr.l   D1
000057A0  3200      10046          move.w  D0,D1
000057A2  3002      10047          move.w  D2,D0
000057A4  4840      10048          swap    D0
000057A6  341F      10049          move.w  (A7)+,D2
000057A8  4E75      10050          rts
                    10051   dodiv_2:
000057AA  48E7 3800 10052          movem.l D2/D3/D4,-(A7)
000057AE  2401      10053          move.l  D1,D2
000057B0  4242      10054          clr.w   D2
000057B2  4842      10055          swap    D2
000057B4  5282      10056          addq.l  #1,D2
000057B6  2600      10057          move.l  D0,D3
000057B8  2801      10058          move.l  D1,D4
000057BA  2202      10059          move.l  D2,D1
000057BC  61CE      10060          bsr.s   dodiv_1
000057BE  2204      10061          move.l  D4,D1
000057C0  82C2      10062          divu    D2,D1
000057C2  80C1      10063          divu    D1,D0
000057C4  0280 0000 10064          andi.l  #$FFFF,D0
000057C8  FFFF      
                    10065   dodiv_3:
000057CA  2204      10066          move.l  D4,D1
000057CC  2404      10067          move.l  D4,D2
000057CE  4842      10068          swap    D2
000057D0  C2C0      10069          mulu    D0,D1
000057D2  C4C0      10070          mulu    D0,D2
000057D4  4842      10071          swap    D2
000057D6  D282      10072          add.l   D2,D1
000057D8  9283      10073          sub.l   D3,D1
000057DA  620A      10074          bhi.s   dodiv_4
000057DC  4481      10075          neg.l   D1
000057DE  B881      10076          cmp.l   D1,D4
000057E0  6208      10077          bhi.s   dodiv_5
000057E2  5280      10078          addq.l  #1,D0
000057E4  60E4      10079          bra.s   dodiv_3
                    10080   dodiv_4:
000057E6  5380      10081          subq.l  #1,D0
000057E8  60E0      10082          bra.s   dodiv_3
                    10083   dodiv_5:
000057EA  4CDF 001C 10084          movem.l (A7)+,D2/D3/D4
000057EE  4E75      10085          rts
                    10086   _putch:
000057F0  4E56 0000 10087          link      A6,#0
000057F4  48E7 2000 10088          movem.l   D2,-(A7)
000057F8  242E 0008 10089          move.l    8(A6),D2
000057FC  0C82 0000 10090          cmp.l     #10,D2
00005800  000A      
00005802  660A      10091          bne.s     putch_1
00005804  4878 000D 10092          pea       13
00005808  6100 B332 10093          bsr       __putch
0000580C  584F      10094          addq.w    #4,A7
                    10095   putch_1:
0000580E  2F02      10096          move.l    D2,-(A7)
00005810  6100 B32A 10097          bsr       __putch
00005814  584F      10098          addq.w    #4,A7
00005816  2002      10099          move.l    D2,D0
00005818  4CDF 0004 10100          movem.l   (A7)+,D2
0000581C  4E5E      10101          unlk      A6
0000581E  4E75      10102          rts
                    10103   _getch:
00005820  48E7 2000 10104          movem.l   D2,-(A7)
00005824  2439 0803 10105          move.l    __ungetbuf,D2
00005828  00C0      
0000582A  2039 0803 10106          move.l    __ungetbuf,D0
0000582E  00C0      
00005830  0C80 FFFF 10107          cmp.l     #-1,D0
00005834  FFFF      
00005836  670C      10108          beq.s     getch_1
00005838  23FC FFFF 10109          move.l    #-1,__ungetbuf
0000583C  FFFF 0803 
00005840  00C0      
00005842  6010      10110          bra.s     getch_3
                    10111   getch_1:
00005844  6100 B322 10112          bsr       __getch
00005848  2400      10113          move.l    D0,D2
0000584A  0C80 0000 10114          cmp.l     #13,D0
0000584E  000D      
00005850  6602      10115          bne.s     getch_3
00005852  740A      10116          moveq     #10,D2
                    10117   getch_3:
00005854  2002      10118          move.l    D2,D0
00005856  4CDF 0004 10119          movem.l   (A7)+,D2
0000585A  4E75      10120          rts
                    10121   _tolower:
0000585C  4E56 0000 10122          link      A6,#0
00005860  48E7 2000 10123          movem.l   D2,-(A7)
00005864  242E 0008 10124          move.l    8(A6),D2
00005868  0C82 0000 10125          cmp.l     #65,D2
0000586C  0041      
0000586E  6D0E      10126          blt.s     tolower_1
00005870  0C82 0000 10127          cmp.l     #90,D2
00005874  005A      
00005876  6E06      10128          bgt.s     tolower_1
00005878  84BC 0000 10129          or.l      #32,D2
0000587C  0020      
                    10130   tolower_1:
0000587E  2002      10131          move.l    D2,D0
00005880  4CDF 0004 10132          movem.l   (A7)+,D2
00005884  4E5E      10133          unlk      A6
00005886  4E75      10134          rts
                    10135   _sprintf:
00005888  4E56 FFFC 10136          link      A6,#-4
0000588C  48E7 2000 10137          movem.l   D2,-(A7)
00005890  41EE 000C 10138          lea       12(A6),A0
00005894  5848      10139          addq.w    #4,A0
00005896  2408      10140          move.l    A0,D2
00005898  2F02      10141          move.l    D2,-(A7)
0000589A  2F2E 000C 10142          move.l    12(A6),-(A7)
0000589E  2F2E 0008 10143          move.l    8(A6),-(A7)
000058A2  6100 013E 10144          bsr       _vsprintf
000058A6  DEFC 000C 10145          add.w     #12,A7
000058AA  2D40 FFFC 10146          move.l    D0,-4(A6)
000058AE  4282      10147          clr.l     D2
000058B0  202E FFFC 10148          move.l    -4(A6),D0
000058B4  4CDF 0004 10149          movem.l   (A7)+,D2
000058B8  4E5E      10150          unlk      A6
000058BA  4E75      10151          rts
                    10152   _strcat:
000058BC  206F 0004 10153          move.l    (4,A7),A0	
000058C0  226F 0008 10154          move.l    (8,A7),A1	
000058C4  2008      10155          move.l    A0,D0		
                    10156   strcat_0:
000058C6  4A18      10157          tst.b     (A0)+
000058C8  66FC      10158          bne       strcat_0
000058CA  5348      10159          subq      #1,A0
                    10160   strcat_1:
000058CC  10D9      10161          move.b    (A1)+,(A0)+
000058CE  66FC      10162          bne       strcat_1
000058D0  4E75      10163          rts
                    10164   _toupper:
000058D2  4E56 0000 10165          link      A6,#0
000058D6  48E7 2000 10166          movem.l   D2,-(A7)
000058DA  242E 0008 10167          move.l    8(A6),D2
000058DE  0C82 0000 10168          cmp.l     #97,D2
000058E2  0061      
000058E4  6D0E      10169          blt.s     toupper_1
000058E6  0C82 0000 10170          cmp.l     #122,D2
000058EA  007A      
000058EC  6E06      10171          bgt.s     toupper_1
000058EE  C4BC 0000 10172          and.l     #95,D2
000058F2  005F      
                    10173   toupper_1:
000058F4  2002      10174          move.l    D2,D0
000058F6  4CDF 0004 10175          movem.l   (A7)+,D2
000058FA  4E5E      10176          unlk      A6
000058FC  4E75      10177          rts
                    10178   _printf:
000058FE  4E56 FFFC 10179          link      A6,#-4
00005902  48E7 2000 10180          movem.l   D2,-(A7)
00005906  41EE 0008 10181          lea       8(A6),A0
0000590A  5848      10182          addq.w    #4,A0
0000590C  2408      10183          move.l    A0,D2
0000590E  2F02      10184          move.l    D2,-(A7)
00005910  2F2E 0008 10185          move.l    8(A6),-(A7)
00005914  42A7      10186          clr.l     -(A7)
00005916  6100 00CA 10187          bsr       _vsprintf
0000591A  DEFC 000C 10188          add.w     #12,A7
0000591E  2D40 FFFC 10189          move.l    D0,-4(A6)
00005922  4282      10190          clr.l     D2
00005924  202E FFFC 10191          move.l    -4(A6),D0
00005928  4CDF 0004 10192          movem.l   (A7)+,D2
0000592C  4E5E      10193          unlk      A6
0000592E  4E75      10194          rts
                    10195   @vsprintf_copy:
00005930  4E56 0000 10196          link      A6,#0
00005934  206E 0008 10197          move.l    8(A6),A0
00005938  4A90      10198          tst.l     (A0)
0000593A  6710      10199          beq.s     @vsprintf_copy_1
0000593C  202E 000C 10200          move.l    12(A6),D0
00005940  206E 0008 10201          move.l    8(A6),A0
00005944  2250      10202          move.l    (A0),A1
00005946  5290      10203          addq.l    #1,(A0)
00005948  1280      10204          move.b    D0,(A1)
0000594A  600A      10205          bra.s     @vsprintf_copy_2
                    10206   @vsprintf_copy_1:
0000594C  2F2E 000C 10207          move.l    12(A6),-(A7)
00005950  6100 FE9E 10208          bsr       _putch
00005954  584F      10209          addq.w    #4,A7
                    10210   @vsprintf_copy_2:
00005956  4E5E      10211          unlk      A6
00005958  4E75      10212          rts
                    10213   @vsprintf_getval:
0000595A  4E56 0000 10214          link      A6,#0
0000595E  48E7 3000 10215          movem.l   D2/D3,-(A7)
00005962  242E 0008 10216          move.l    8(A6),D2
00005966  4283      10217          clr.l     D3
00005968  2042      10218          move.l    D2,A0
0000596A  2050      10219          move.l    (A0),A0
0000596C  1010      10220          move.b    (A0),D0
0000596E  4880      10221          ext.w     D0
00005970  48C0      10222          ext.l     D0
00005972  0C80 0000 10223          cmp.l     #42,D0
00005976  002A      
00005978  6612      10224          bne.s     @vsprintf_getval_1
0000597A  206E 000C 10225          move.l    12(A6),A0
0000597E  2250      10226          move.l    (A0),A1
00005980  5890      10227          addq.l    #4,(A0)
00005982  2611      10228          move.l    (A1),D3
00005984  2042      10229          move.l    D2,A0
00005986  5290      10230          addq.l    #1,(A0)
00005988  6000 004E 10231          bra       @vsprintf_getval_5
                    10232   @vsprintf_getval_1:
0000598C  2042      10233          move.l    D2,A0
0000598E  2050      10234          move.l    (A0),A0
00005990  1010      10235          move.b    (A0),D0
00005992  4880      10236          ext.w     D0
00005994  48C0      10237          ext.l     D0
00005996  0C80 0000 10238          cmp.l     #48,D0
0000599A  0030      
0000599C  6D00 003A 10239          blt       @vsprintf_getval_5
000059A0  2042      10240          move.l    D2,A0
000059A2  2050      10241          move.l    (A0),A0
000059A4  1010      10242          move.b    (A0),D0
000059A6  4880      10243          ext.w     D0
000059A8  48C0      10244          ext.l     D0
000059AA  0C80 0000 10245          cmp.l     #57,D0
000059AE  0039      
000059B0  6E26      10246          bgt.s     @vsprintf_getval_5
000059B2  2F03      10247          move.l    D3,-(A7)
000059B4  4878 000A 10248          pea       10
000059B8  6100 07F4 10249          bsr       LMUL
000059BC  2017      10250          move.l    (A7),D0
000059BE  504F      10251          addq.w    #8,A7
000059C0  2042      10252          move.l    D2,A0
000059C2  2250      10253          move.l    (A0),A1
000059C4  5290      10254          addq.l    #1,(A0)
000059C6  1211      10255          move.b    (A1),D1
000059C8  4881      10256          ext.w     D1
000059CA  48C1      10257          ext.l     D1
000059CC  D081      10258          add.l     D1,D0
000059CE  0480 0000 10259          sub.l     #48,D0
000059D2  0030      
000059D4  2600      10260          move.l    D0,D3
000059D6  60B4      10261          bra       @vsprintf_getval_1
                    10262   @vsprintf_getval_5:
000059D8  2003      10263          move.l    D3,D0
000059DA  4CDF 000C 10264          movem.l   (A7)+,D2/D3
000059DE  4E5E      10265          unlk      A6
000059E0  4E75      10266          rts
                    10267   _vsprintf:
000059E2  4E56 FFCC 10268          link      A6,#-52
000059E6  48E7 3F3C 10269          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000059EA  45EE 0008 10270          lea       8(A6),A2
000059EE  47F8 5930 10271          lea       @vsprintf_copy,A3
000059F2  49F9 0000 10272          lea       _ultoa,A4
000059F6  613A      
000059F8  4286      10273          clr.l     D6
                    10274   vsprintf_1:
000059FA  206E 000C 10275          move.l    12(A6),A0
000059FE  4A10      10276          tst.b     (A0)
00005A00  6700 0624 10277          beq       vsprintf_3
00005A04  206E 000C 10278          move.l    12(A6),A0
00005A08  1010      10279          move.b    (A0),D0
00005A0A  4880      10280          ext.w     D0
00005A0C  48C0      10281          ext.l     D0
00005A0E  0C80 0000 10282          cmp.l     #37,D0
00005A12  0025      
00005A14  671C      10283          beq.s     vsprintf_4
00005A16  206E 000C 10284          move.l    12(A6),A0
00005A1A  52AE 000C 10285          addq.l    #1,12(A6)
00005A1E  1210      10286          move.b    (A0),D1
00005A20  4881      10287          ext.w     D1
00005A22  48C1      10288          ext.l     D1
00005A24  2F01      10289          move.l    D1,-(A7)
00005A26  2F0A      10290          move.l    A2,-(A7)
00005A28  4E93      10291          jsr       (A3)
00005A2A  504F      10292          addq.w    #8,A7
00005A2C  5286      10293          addq.l    #1,D6
00005A2E  6000 05F2 10294          bra       vsprintf_2
                    10295   vsprintf_4:
00005A32  52AE 000C 10296          addq.l    #1,12(A6)
00005A36  422E FFD3 10297          clr.b     -45(A6)
00005A3A  422E FFD2 10298          clr.b     -46(A6)
00005A3E  422E FFD0 10299          clr.b     -48(A6)
00005A42  422E FFCF 10300          clr.b     -49(A6)
00005A46  422E FFCE 10301          clr.b     -50(A6)
00005A4A  422E FFCD 10302          clr.b     -51(A6)
00005A4E  42AE FFFC 10303          clr.l     -4(A6)
00005A52  7AFF      10304          moveq     #-1,D5
00005A54  41EE FFDC 10305          lea       -36(A6),A0
00005A58  2608      10306          move.l    A0,D3
00005A5A  2408      10307          move.l    A0,D2
                    10308   vsprintf_6:
00005A5C  206E 000C 10309          move.l    12(A6),A0
00005A60  1010      10310          move.b    (A0),D0
00005A62  4880      10311          ext.w     D0
00005A64  48C0      10312          ext.l     D0
00005A66  0C80 0000 10313          cmp.l     #43,D0
00005A6A  002B      
00005A6C  6730      10314          beq.s     vsprintf_12
00005A6E  6E18      10315          bgt.s     vsprintf_15
00005A70  0C80 0000 10316          cmp.l     #35,D0
00005A74  0023      
00005A76  6700 003E 10317          beq       vsprintf_14
00005A7A  6E00 0046 10318          bgt       vsprintf_9
00005A7E  0C80 0000 10319          cmp.l     #32,D0
00005A82  0020      
00005A84  6724      10320          beq.s     vsprintf_13
00005A86  603A      10321          bra.s     vsprintf_9
                    10322   vsprintf_15:
00005A88  0C80 0000 10323          cmp.l     #45,D0
00005A8C  002D      
00005A8E  6702      10324          beq.s     vsprintf_11
00005A90  6030      10325          bra.s     vsprintf_9
                    10326   vsprintf_11:
00005A92  1D7C 0001 10327          move.b    #1,-51(A6)
00005A96  FFCD      
00005A98  52AE 000C 10328          addq.l    #1,12(A6)
00005A9C  6026      10329          bra.s     vsprintf_7
                    10330   vsprintf_12:
00005A9E  1D7C 0001 10331          move.b    #1,-50(A6)
00005AA2  FFCE      
00005AA4  52AE 000C 10332          addq.l    #1,12(A6)
00005AA8  601A      10333          bra.s     vsprintf_7
                    10334   vsprintf_13:
00005AAA  1D7C 0001 10335          move.b    #1,-49(A6)
00005AAE  FFCF      
00005AB0  52AE 000C 10336          addq.l    #1,12(A6)
00005AB4  600E      10337          bra.s     vsprintf_7
                    10338   vsprintf_14:
00005AB6  1D7C 0001 10339          move.b    #1,-48(A6)
00005ABA  FFD0      
00005ABC  52AE 000C 10340          addq.l    #1,12(A6)
00005AC0  6002      10341          bra.s     vsprintf_7
                    10342   vsprintf_9:
00005AC2  6002      10343          bra.s     vsprintf_8
                    10344   vsprintf_7:
00005AC4  6096      10345          bra       vsprintf_6
                    10346   vsprintf_8:
00005AC6  206E 000C 10347          move.l    12(A6),A0
00005ACA  1010      10348          move.b    (A0),D0
00005ACC  4880      10349          ext.w     D0
00005ACE  48C0      10350          ext.l     D0
00005AD0  0C80 0000 10351          cmp.l     #48,D0
00005AD4  0030      
00005AD6  660A      10352          bne.s     vsprintf_16
00005AD8  52AE 000C 10353          addq.l    #1,12(A6)
00005ADC  1D7C 0001 10354          move.b    #1,-46(A6)
00005AE0  FFD2      
                    10355   vsprintf_16:
00005AE2  486E 0010 10356          pea       16(A6)
00005AE6  486E 000C 10357          pea       12(A6)
00005AEA  6100 FE6E 10358          bsr       @vsprintf_getval
00005AEE  504F      10359          addq.w    #8,A7
00005AF0  2A40      10360          move.l    D0,A5
00005AF2  206E 000C 10361          move.l    12(A6),A0
00005AF6  1010      10362          move.b    (A0),D0
00005AF8  4880      10363          ext.w     D0
00005AFA  48C0      10364          ext.l     D0
00005AFC  0C80 0000 10365          cmp.l     #46,D0
00005B00  002E      
00005B02  6614      10366          bne.s     vsprintf_18
00005B04  52AE 000C 10367          addq.l    #1,12(A6)
00005B08  486E 0010 10368          pea       16(A6)
00005B0C  486E 000C 10369          pea       12(A6)
00005B10  6100 FE48 10370          bsr       @vsprintf_getval
00005B14  504F      10371          addq.w    #8,A7
00005B16  2A00      10372          move.l    D0,D5
                    10373   vsprintf_18:
00005B18  206E 000C 10374          move.l    12(A6),A0
00005B1C  1010      10375          move.b    (A0),D0
00005B1E  4880      10376          ext.w     D0
00005B20  48C0      10377          ext.l     D0
00005B22  0C80 0000 10378          cmp.l     #108,D0
00005B26  006C      
00005B28  660A      10379          bne.s     vsprintf_20
00005B2A  52AE 000C 10380          addq.l    #1,12(A6)
00005B2E  1D7C 0001 10381          move.b    #1,-45(A6)
00005B32  FFD3      
                    10382   vsprintf_20:
00005B34  206E 000C 10383          move.l    12(A6),A0
00005B38  1010      10384          move.b    (A0),D0
00005B3A  4880      10385          ext.w     D0
00005B3C  48C0      10386          ext.l     D0
00005B3E  0C80 0000 10387          cmp.l     #111,D0
00005B42  006F      
00005B44  6700 00D4 10388          beq       vsprintf_27
00005B48  6E34      10389          bgt.s     vsprintf_33
00005B4A  0C80 0000 10390          cmp.l     #100,D0
00005B4E  0064      
00005B50  6700 0054 10391          beq       vsprintf_24
00005B54  6E1C      10392          bgt.s     vsprintf_34
00005B56  0C80 0000 10393          cmp.l     #99,D0
00005B5A  0063      
00005B5C  6700 012C 10394          beq       vsprintf_30
00005B60  6E00 016A 10395          bgt       vsprintf_22
00005B64  0C80 0000 10396          cmp.l     #88,D0
00005B68  0058      
00005B6A  6700 00E6 10397          beq       vsprintf_28
00005B6E  6000 015C 10398          bra       vsprintf_22
                    10399   vsprintf_34:
00005B72  0C80 0000 10400          cmp.l     #105,D0
00005B76  0069      
00005B78  672C      10401          beq.s     vsprintf_24
00005B7A  6000 0150 10402          bra       vsprintf_22
                    10403   vsprintf_33:
00005B7E  0C80 0000 10404          cmp.l     #117,D0
00005B82  0075      
00005B84  6700 005C 10405          beq       vsprintf_26
00005B88  6E0E      10406          bgt.s     vsprintf_35
00005B8A  0C80 0000 10407          cmp.l     #115,D0
00005B8E  0073      
00005B90  6700 011C 10408          beq       vsprintf_31
00005B94  6000 0136 10409          bra       vsprintf_22
                    10410   vsprintf_35:
00005B98  0C80 0000 10411          cmp.l     #120,D0
00005B9C  0078      
00005B9E  6700 00B2 10412          beq       vsprintf_28
00005BA2  6000 0128 10413          bra       vsprintf_22
                    10414   vsprintf_24:
00005BA6  4A2E FFD3 10415          tst.b     -45(A6)
00005BAA  671A      10416          beq.s     vsprintf_36
00005BAC  4878 000A 10417          pea       10
00005BB0  2F03      10418          move.l    D3,-(A7)
00005BB2  206E 0010 10419          move.l    16(A6),A0
00005BB6  58AE 0010 10420          addq.l    #4,16(A6)
00005BBA  2F10      10421          move.l    (A0),-(A7)
00005BBC  6100 04F8 10422          bsr       _ltoa
00005BC0  DEFC 000C 10423          add.w     #12,A7
00005BC4  6018      10424          bra.s     vsprintf_37
                    10425   vsprintf_36:
00005BC6  4878 000A 10426          pea       10
00005BCA  2F03      10427          move.l    D3,-(A7)
00005BCC  206E 0010 10428          move.l    16(A6),A0
00005BD0  58AE 0010 10429          addq.l    #4,16(A6)
00005BD4  2F10      10430          move.l    (A0),-(A7)
00005BD6  6100 04DE 10431          bsr       _ltoa
00005BDA  DEFC 000C 10432          add.w     #12,A7
                    10433   vsprintf_37:
00005BDE  6000 00FA 10434          bra       vsprintf_23
                    10435   vsprintf_26:
00005BE2  4A2E FFD3 10436          tst.b     -45(A6)
00005BE6  6718      10437          beq.s     vsprintf_38
00005BE8  4878 000A 10438          pea       10
00005BEC  2F03      10439          move.l    D3,-(A7)
00005BEE  206E 0010 10440          move.l    16(A6),A0
00005BF2  58AE 0010 10441          addq.l    #4,16(A6)
00005BF6  2F10      10442          move.l    (A0),-(A7)
00005BF8  4E94      10443          jsr       (A4)
00005BFA  DEFC 000C 10444          add.w     #12,A7
00005BFE  6016      10445          bra.s     vsprintf_39
                    10446   vsprintf_38:
00005C00  4878 000A 10447          pea       10
00005C04  2F03      10448          move.l    D3,-(A7)
00005C06  206E 0010 10449          move.l    16(A6),A0
00005C0A  58AE 0010 10450          addq.l    #4,16(A6)
00005C0E  2F10      10451          move.l    (A0),-(A7)
00005C10  4E94      10452          jsr       (A4)
00005C12  DEFC 000C 10453          add.w     #12,A7
                    10454   vsprintf_39:
00005C16  6000 00C2 10455          bra       vsprintf_23
                    10456   vsprintf_27:
00005C1A  4A2E FFD3 10457          tst.b     -45(A6)
00005C1E  6718      10458          beq.s     vsprintf_40
00005C20  4878 0008 10459          pea       8
00005C24  2F03      10460          move.l    D3,-(A7)
00005C26  206E 0010 10461          move.l    16(A6),A0
00005C2A  58AE 0010 10462          addq.l    #4,16(A6)
00005C2E  2F10      10463          move.l    (A0),-(A7)
00005C30  4E94      10464          jsr       (A4)
00005C32  DEFC 000C 10465          add.w     #12,A7
00005C36  6016      10466          bra.s     vsprintf_41
                    10467   vsprintf_40:
00005C38  4878 0008 10468          pea       8
00005C3C  2F03      10469          move.l    D3,-(A7)
00005C3E  206E 0010 10470          move.l    16(A6),A0
00005C42  58AE 0010 10471          addq.l    #4,16(A6)
00005C46  2F10      10472          move.l    (A0),-(A7)
00005C48  4E94      10473          jsr       (A4)
00005C4A  DEFC 000C 10474          add.w     #12,A7
                    10475   vsprintf_41:
00005C4E  6000 008A 10476          bra       vsprintf_23
                    10477   vsprintf_28:
00005C52  4A2E FFD3 10478          tst.b     -45(A6)
00005C56  6718      10479          beq.s     vsprintf_42
00005C58  4878 0010 10480          pea       16
00005C5C  2F03      10481          move.l    D3,-(A7)
00005C5E  206E 0010 10482          move.l    16(A6),A0
00005C62  58AE 0010 10483          addq.l    #4,16(A6)
00005C66  2F10      10484          move.l    (A0),-(A7)
00005C68  4E94      10485          jsr       (A4)
00005C6A  DEFC 000C 10486          add.w     #12,A7
00005C6E  6016      10487          bra.s     vsprintf_43
                    10488   vsprintf_42:
00005C70  4878 0010 10489          pea       16
00005C74  2F03      10490          move.l    D3,-(A7)
00005C76  206E 0010 10491          move.l    16(A6),A0
00005C7A  58AE 0010 10492          addq.l    #4,16(A6)
00005C7E  2F10      10493          move.l    (A0),-(A7)
00005C80  4E94      10494          jsr       (A4)
00005C82  DEFC 000C 10495          add.w     #12,A7
                    10496   vsprintf_43:
00005C86  6000 0052 10497          bra       vsprintf_23
                    10498   vsprintf_30:
00005C8A  206E 0010 10499          move.l    16(A6),A0
00005C8E  58AE 0010 10500          addq.l    #4,16(A6)
00005C92  2010      10501          move.l    (A0),D0
00005C94  2042      10502          move.l    D2,A0
00005C96  5282      10503          addq.l    #1,D2
00005C98  1080      10504          move.b    D0,(A0)
00005C9A  2042      10505          move.l    D2,A0
00005C9C  4210      10506          clr.b     (A0)
00005C9E  200D      10507          move.l    A5,D0
00005CA0  6704      10508          beq.s     vsprintf_44
00005CA2  200D      10509          move.l    A5,D0
00005CA4  6002      10510          bra.s     vsprintf_45
                    10511   vsprintf_44:
00005CA6  7001      10512          moveq     #1,D0
                    10513   vsprintf_45:
00005CA8  2A00      10514          move.l    D0,D5
00005CAA  6000 002E 10515          bra       vsprintf_23
                    10516   vsprintf_31:
00005CAE  206E 0010 10517          move.l    16(A6),A0
00005CB2  58AE 0010 10518          addq.l    #4,16(A6)
00005CB6  2610      10519          move.l    (A0),D3
00005CB8  0C85 FFFF 10520          cmp.l     #-1,D5
00005CBC  FFFF      
00005CBE  660A      10521          bne.s     vsprintf_46
00005CC0  2F03      10522          move.l    D3,-(A7)
00005CC2  6100 0578 10523          bsr       _strlen
00005CC6  584F      10524          addq.w    #4,A7
00005CC8  2A00      10525          move.l    D0,D5
                    10526   vsprintf_46:
00005CCA  600E      10527          bra.s     vsprintf_23
                    10528   vsprintf_22:
00005CCC  206E 000C 10529          move.l    12(A6),A0
00005CD0  2242      10530          move.l    D2,A1
00005CD2  5282      10531          addq.l    #1,D2
00005CD4  1290      10532          move.b    (A0),(A1)
00005CD6  2042      10533          move.l    D2,A0
00005CD8  4210      10534          clr.b     (A0)
                    10535   vsprintf_23:
00005CDA  2F03      10536          move.l    D3,-(A7)
00005CDC  6100 055E 10537          bsr       _strlen
00005CE0  584F      10538          addq.w    #4,A7
00005CE2  1800      10539          move.b    D0,D4
00005CE4  206E 000C 10540          move.l    12(A6),A0
00005CE8  1010      10541          move.b    (A0),D0
00005CEA  4880      10542          ext.w     D0
00005CEC  48C0      10543          ext.l     D0
00005CEE  0C80 0000 10544          cmp.l     #115,D0
00005CF2  0073      
00005CF4  6618      10545          bne.s     vsprintf_48
00005CF6  0C85 0000 10546          cmp.l     #0,D5
00005CFA  0000      
00005CFC  6D10      10547          blt.s     vsprintf_48
00005CFE  4884      10548          ext.w     D4
00005D00  48C4      10549          ext.l     D4
00005D02  B885      10550          cmp.l     D5,D4
00005D04  6F04      10551          ble.s     vsprintf_50
00005D06  1005      10552          move.b    D5,D0
00005D08  6002      10553          bra.s     vsprintf_51
                    10554   vsprintf_50:
00005D0A  1004      10555          move.b    D4,D0
                    10556   vsprintf_51:
00005D0C  1800      10557          move.b    D0,D4
                    10558   vsprintf_48:
00005D0E  206E 000C 10559          move.l    12(A6),A0
00005D12  1010      10560          move.b    (A0),D0
00005D14  4880      10561          ext.w     D0
00005D16  48C0      10562          ext.l     D0
00005D18  0C80 0000 10563          cmp.l     #88,D0
00005D1C  0058      
00005D1E  6600 0026 10564          bne       vsprintf_56
00005D22  41EE FFDC 10565          lea       -36(A6),A0
00005D26  2408      10566          move.l    A0,D2
                    10567   vsprintf_54:
00005D28  2042      10568          move.l    D2,A0
00005D2A  4A10      10569          tst.b     (A0)
00005D2C  6718      10570          beq.s     vsprintf_56
00005D2E  2042      10571          move.l    D2,A0
00005D30  1210      10572          move.b    (A0),D1
00005D32  4881      10573          ext.w     D1
00005D34  48C1      10574          ext.l     D1
00005D36  2F01      10575          move.l    D1,-(A7)
00005D38  6100 FB98 10576          bsr       _toupper
00005D3C  584F      10577          addq.w    #4,A7
00005D3E  2042      10578          move.l    D2,A0
00005D40  1080      10579          move.b    D0,(A0)
00005D42  5282      10580          addq.l    #1,D2
00005D44  60E2      10581          bra       vsprintf_54
                    10582   vsprintf_56:
00005D46  7E00      10583          moveq     #0,D7
00005D48  41EE FFD4 10584          lea       -44(A6),A0
00005D4C  2408      10585          move.l    A0,D2
00005D4E  206E 000C 10586          move.l    12(A6),A0
00005D52  1010      10587          move.b    (A0),D0
00005D54  4880      10588          ext.w     D0
00005D56  48C0      10589          ext.l     D0
00005D58  0C80 0000 10590          cmp.l     #100,D0
00005D5C  0064      
00005D5E  6714      10591          beq.s     vsprintf_59
00005D60  206E 000C 10592          move.l    12(A6),A0
00005D64  1010      10593          move.b    (A0),D0
00005D66  4880      10594          ext.w     D0
00005D68  48C0      10595          ext.l     D0
00005D6A  0C80 0000 10596          cmp.l     #105,D0
00005D6E  0069      
00005D70  6600 0076 10597          bne       vsprintf_65
                    10598   vsprintf_59:
00005D74  4A2E FFCE 10599          tst.b     -50(A6)
00005D78  6612      10600          bne.s     vsprintf_62
00005D7A  2043      10601          move.l    D3,A0
00005D7C  1010      10602          move.b    (A0),D0
00005D7E  4880      10603          ext.w     D0
00005D80  48C0      10604          ext.l     D0
00005D82  0C80 0000 10605          cmp.l     #45,D0
00005D86  002D      
00005D88  6600 002E 10606          bne       vsprintf_60
                    10607   vsprintf_62:
00005D8C  2043      10608          move.l    D3,A0
00005D8E  1010      10609          move.b    (A0),D0
00005D90  4880      10610          ext.w     D0
00005D92  48C0      10611          ext.l     D0
00005D94  0C80 0000 10612          cmp.l     #45,D0
00005D98  002D      
00005D9A  660E      10613          bne.s     vsprintf_63
00005D9C  2043      10614          move.l    D3,A0
00005D9E  5283      10615          addq.l    #1,D3
00005DA0  2242      10616          move.l    D2,A1
00005DA2  5282      10617          addq.l    #1,D2
00005DA4  1290      10618          move.b    (A0),(A1)
00005DA6  5304      10619          subq.b    #1,D4
00005DA8  6008      10620          bra.s     vsprintf_64
                    10621   vsprintf_63:
00005DAA  2042      10622          move.l    D2,A0
00005DAC  5282      10623          addq.l    #1,D2
00005DAE  10BC 002B 10624          move.b    #43,(A0)
                    10625   vsprintf_64:
00005DB2  5287      10626          addq.l    #1,D7
00005DB4  6000 0032 10627          bra       vsprintf_65
                    10628   vsprintf_60:
00005DB8  4A2E FFCF 10629          tst.b     -49(A6)
00005DBC  6700 002A 10630          beq       vsprintf_65
00005DC0  2043      10631          move.l    D3,A0
00005DC2  1010      10632          move.b    (A0),D0
00005DC4  4880      10633          ext.w     D0
00005DC6  48C0      10634          ext.l     D0
00005DC8  0C80 0000 10635          cmp.l     #45,D0
00005DCC  002D      
00005DCE  660E      10636          bne.s     vsprintf_67
00005DD0  2043      10637          move.l    D3,A0
00005DD2  5283      10638          addq.l    #1,D3
00005DD4  2242      10639          move.l    D2,A1
00005DD6  5282      10640          addq.l    #1,D2
00005DD8  1290      10641          move.b    (A0),(A1)
00005DDA  5304      10642          subq.b    #1,D4
00005DDC  6008      10643          bra.s     vsprintf_68
                    10644   vsprintf_67:
00005DDE  2042      10645          move.l    D2,A0
00005DE0  5282      10646          addq.l    #1,D2
00005DE2  10BC 0020 10647          move.b    #32,(A0)
                    10648   vsprintf_68:
00005DE6  5287      10649          addq.l    #1,D7
                    10650   vsprintf_65:
00005DE8  4A2E FFD0 10651          tst.b     -48(A6)
00005DEC  6700 0066 10652          beq       vsprintf_77
00005DF0  206E 000C 10653          move.l    12(A6),A0
00005DF4  1010      10654          move.b    (A0),D0
00005DF6  4880      10655          ext.w     D0
00005DF8  48C0      10656          ext.l     D0
00005DFA  0C80 0000 10657          cmp.l     #111,D0
00005DFE  006F      
00005E00  671A      10658          beq.s     vsprintf_73
00005E02  6E0C      10659          bgt.s     vsprintf_76
00005E04  0C80 0000 10660          cmp.l     #88,D0
00005E08  0058      
00005E0A  6710      10661          beq.s     vsprintf_73
00005E0C  6000 0046 10662          bra       vsprintf_77
                    10663   vsprintf_76:
00005E10  0C80 0000 10664          cmp.l     #120,D0
00005E14  0078      
00005E16  6704      10665          beq.s     vsprintf_73
00005E18  6000 003A 10666          bra       vsprintf_77
                    10667   vsprintf_73:
00005E1C  2042      10668          move.l    D2,A0
00005E1E  5282      10669          addq.l    #1,D2
00005E20  10BC 0030 10670          move.b    #48,(A0)
00005E24  5287      10671          addq.l    #1,D7
00005E26  206E 000C 10672          move.l    12(A6),A0
00005E2A  1010      10673          move.b    (A0),D0
00005E2C  4880      10674          ext.w     D0
00005E2E  48C0      10675          ext.l     D0
00005E30  0C80 0000 10676          cmp.l     #120,D0
00005E34  0078      
00005E36  6712      10677          beq.s     vsprintf_79
00005E38  206E 000C 10678          move.l    12(A6),A0
00005E3C  1010      10679          move.b    (A0),D0
00005E3E  4880      10680          ext.w     D0
00005E40  48C0      10681          ext.l     D0
00005E42  0C80 0000 10682          cmp.l     #88,D0
00005E46  0058      
00005E48  660A      10683          bne.s     vsprintf_77
                    10684   vsprintf_79:
00005E4A  2042      10685          move.l    D2,A0
00005E4C  5282      10686          addq.l    #1,D2
00005E4E  10BC 0078 10687          move.b    #120,(A0)
00005E52  5287      10688          addq.l    #1,D7
                    10689   vsprintf_77:
00005E54  2042      10690          move.l    D2,A0
00005E56  4210      10691          clr.b     (A0)
00005E58  206E 000C 10692          move.l    12(A6),A0
00005E5C  1010      10693          move.b    (A0),D0
00005E5E  4880      10694          ext.w     D0
00005E60  48C0      10695          ext.l     D0
00005E62  0C80 0000 10696          cmp.l     #105,D0
00005E66  0069      
00005E68  6700 0076 10697          beq       vsprintf_82
00005E6C  6E42      10698          bgt.s     vsprintf_93
00005E6E  0C80 0000 10699          cmp.l     #99,D0
00005E72  0063      
00005E74  6700 0084 10700          beq       vsprintf_96
00005E78  6E1C      10701          bgt.s     vsprintf_94
00005E7A  0C80 0000 10702          cmp.l     #88,D0
00005E7E  0058      
00005E80  6700 005E 10703          beq       vsprintf_82
00005E84  6E00 0184 10704          bgt       vsprintf_80
00005E88  0C80 0000 10705          cmp.l     #69,D0
00005E8C  0045      
00005E8E  6700 0050 10706          beq       vsprintf_82
00005E92  6000 0176 10707          bra       vsprintf_80
                    10708   vsprintf_94:
00005E96  0C80 0000 10709          cmp.l     #101,D0
00005E9A  0065      
00005E9C  6700 0042 10710          beq       vsprintf_82
00005EA0  6E00 0168 10711          bgt       vsprintf_80
00005EA4  0C80 0000 10712          cmp.l     #100,D0
00005EA8  0064      
00005EAA  6734      10713          beq.s     vsprintf_82
00005EAC  6000 015C 10714          bra       vsprintf_80
                    10715   vsprintf_93:
00005EB0  0C80 0000 10716          cmp.l     #117,D0
00005EB4  0075      
00005EB6  6728      10717          beq.s     vsprintf_82
00005EB8  6E1A      10718          bgt.s     vsprintf_95
00005EBA  0C80 0000 10719          cmp.l     #115,D0
00005EBE  0073      
00005EC0  6700 0038 10720          beq       vsprintf_96
00005EC4  6E00 0144 10721          bgt       vsprintf_80
00005EC8  0C80 0000 10722          cmp.l     #111,D0
00005ECC  006F      
00005ECE  6710      10723          beq.s     vsprintf_82
00005ED0  6000 0138 10724          bra       vsprintf_80
                    10725   vsprintf_95:
00005ED4  0C80 0000 10726          cmp.l     #120,D0
00005ED8  0078      
00005EDA  6704      10727          beq.s     vsprintf_82
00005EDC  6000 012C 10728          bra       vsprintf_80
                    10729   vsprintf_82:
00005EE0  4A2E FFD2 10730          tst.b     -46(A6)
00005EE4  6714      10731          beq.s     vsprintf_96
00005EE6  4A2E FFCD 10732          tst.b     -51(A6)
00005EEA  660E      10733          bne.s     vsprintf_96
00005EEC  200D      10734          move.l    A5,D0
00005EEE  9087      10735          sub.l     D7,D0
00005EF0  4884      10736          ext.w     D4
00005EF2  48C4      10737          ext.l     D4
00005EF4  9084      10738          sub.l     D4,D0
00005EF6  2D40 FFFC 10739          move.l    D0,-4(A6)
                    10740   vsprintf_96:
00005EFA  202E FFFC 10741          move.l    -4(A6),D0
00005EFE  0C80 0000 10742          cmp.l     #0,D0
00005F02  0000      
00005F04  6C04      10743          bge.s     vsprintf_98
00005F06  42AE FFFC 10744          clr.l     -4(A6)
                    10745   vsprintf_98:
00005F0A  4A2E FFCD 10746          tst.b     -51(A6)
00005F0E  6600 0030 10747          bne       vsprintf_104
00005F12  4884      10748          ext.w     D4
00005F14  48C4      10749          ext.l     D4
00005F16  2004      10750          move.l    D4,D0
00005F18  D0AE FFFC 10751          add.l     -4(A6),D0
00005F1C  D087      10752          add.l     D7,D0
00005F1E  1D40 FFD1 10753          move.b    D0,-47(A6)
                    10754   vsprintf_102:
00005F22  102E FFD1 10755          move.b    -47(A6),D0
00005F26  4880      10756          ext.w     D0
00005F28  48C0      10757          ext.l     D0
00005F2A  220D      10758          move.l    A5,D1
00005F2C  534D      10759          subq.w    #1,A5
00005F2E  B081      10760          cmp.l     D1,D0
00005F30  6C0E      10761          bge.s     vsprintf_104
00005F32  4878 0020 10762          pea       32
00005F36  2F0A      10763          move.l    A2,-(A7)
00005F38  4E93      10764          jsr       (A3)
00005F3A  504F      10765          addq.w    #8,A7
00005F3C  5286      10766          addq.l    #1,D6
00005F3E  60E2      10767          bra       vsprintf_102
                    10768   vsprintf_104:
00005F40  41EE FFD4 10769          lea       -44(A6),A0
00005F44  2408      10770          move.l    A0,D2
                    10771   vsprintf_105:
00005F46  2042      10772          move.l    D2,A0
00005F48  4A10      10773          tst.b     (A0)
00005F4A  6716      10774          beq.s     vsprintf_107
00005F4C  2042      10775          move.l    D2,A0
00005F4E  5282      10776          addq.l    #1,D2
00005F50  1210      10777          move.b    (A0),D1
00005F52  4881      10778          ext.w     D1
00005F54  48C1      10779          ext.l     D1
00005F56  2F01      10780          move.l    D1,-(A7)
00005F58  2F0A      10781          move.l    A2,-(A7)
00005F5A  4E93      10782          jsr       (A3)
00005F5C  504F      10783          addq.w    #8,A7
00005F5E  5286      10784          addq.l    #1,D6
00005F60  60E4      10785          bra       vsprintf_105
                    10786   vsprintf_107:
00005F62  202E FFFC 10787          move.l    -4(A6),D0
00005F66  1D40 FFD1 10788          move.b    D0,-47(A6)
                    10789   vsprintf_108:
00005F6A  102E FFD1 10790          move.b    -47(A6),D0
00005F6E  532E FFD1 10791          subq.b    #1,-47(A6)
00005F72  4A00      10792          tst.b     D0
00005F74  670E      10793          beq.s     vsprintf_110
00005F76  4878 0030 10794          pea       48
00005F7A  2F0A      10795          move.l    A2,-(A7)
00005F7C  4E93      10796          jsr       (A3)
00005F7E  504F      10797          addq.w    #8,A7
00005F80  5286      10798          addq.l    #1,D6
00005F82  60E6      10799          bra       vsprintf_108
                    10800   vsprintf_110:
00005F84  2043      10801          move.l    D3,A0
00005F86  4A10      10802          tst.b     (A0)
00005F88  6700 0048 10803          beq       vsprintf_113
00005F8C  206E 000C 10804          move.l    12(A6),A0
00005F90  1010      10805          move.b    (A0),D0
00005F92  4880      10806          ext.w     D0
00005F94  48C0      10807          ext.l     D0
00005F96  0C80 0000 10808          cmp.l     #115,D0
00005F9A  0073      
00005F9C  670C      10809          beq.s     vsprintf_116
00005F9E  6E18      10810          bgt.s     vsprintf_119
00005FA0  0C80 0000 10811          cmp.l     #99,D0
00005FA4  0063      
00005FA6  6702      10812          beq.s     vsprintf_116
00005FA8  600E      10813          bra.s     vsprintf_119
                    10814   vsprintf_116:
00005FAA  2005      10815          move.l    D5,D0
00005FAC  5385      10816          subq.l    #1,D5
00005FAE  0C80 0000 10817          cmp.l     #0,D0
00005FB2  0000      
00005FB4  6E02      10818          bgt.s     vsprintf_119
00005FB6  6016      10819          bra.s     vsprintf_115
                    10820   vsprintf_119:
00005FB8  2043      10821          move.l    D3,A0
00005FBA  5283      10822          addq.l    #1,D3
00005FBC  1210      10823          move.b    (A0),D1
00005FBE  4881      10824          ext.w     D1
00005FC0  48C1      10825          ext.l     D1
00005FC2  2F01      10826          move.l    D1,-(A7)
00005FC4  2F0A      10827          move.l    A2,-(A7)
00005FC6  4E93      10828          jsr       (A3)
00005FC8  504F      10829          addq.w    #8,A7
00005FCA  5286      10830          addq.l    #1,D6
00005FCC  6002      10831          bra.s     vsprintf_112
                    10832   vsprintf_115:
00005FCE  6002      10833          bra.s     vsprintf_113
                    10834   vsprintf_112:
00005FD0  60B2      10835          bra       vsprintf_110
                    10836   vsprintf_113:
00005FD2  4A2E FFCD 10837          tst.b     -51(A6)
00005FD6  6700 0030 10838          beq       vsprintf_125
00005FDA  4884      10839          ext.w     D4
00005FDC  48C4      10840          ext.l     D4
00005FDE  2004      10841          move.l    D4,D0
00005FE0  D0AE FFFC 10842          add.l     -4(A6),D0
00005FE4  D087      10843          add.l     D7,D0
00005FE6  1D40 FFD1 10844          move.b    D0,-47(A6)
                    10845   vsprintf_123:
00005FEA  102E FFD1 10846          move.b    -47(A6),D0
00005FEE  4880      10847          ext.w     D0
00005FF0  48C0      10848          ext.l     D0
00005FF2  220D      10849          move.l    A5,D1
00005FF4  534D      10850          subq.w    #1,A5
00005FF6  B081      10851          cmp.l     D1,D0
00005FF8  6C0E      10852          bge.s     vsprintf_125
00005FFA  4878 0020 10853          pea       32
00005FFE  2F0A      10854          move.l    A2,-(A7)
00006000  4E93      10855          jsr       (A3)
00006002  504F      10856          addq.w    #8,A7
00006004  5386      10857          subq.l    #1,D6
00006006  60E2      10858          bra       vsprintf_123
                    10859   vsprintf_125:
00006008  6014      10860          bra.s     vsprintf_81
                    10861   vsprintf_80:
0000600A  206E 000C 10862          move.l    12(A6),A0
0000600E  1210      10863          move.b    (A0),D1
00006010  4881      10864          ext.w     D1
00006012  48C1      10865          ext.l     D1
00006014  2F01      10866          move.l    D1,-(A7)
00006016  2F0A      10867          move.l    A2,-(A7)
00006018  4E93      10868          jsr       (A3)
0000601A  504F      10869          addq.w    #8,A7
0000601C  5286      10870          addq.l    #1,D6
                    10871   vsprintf_81:
0000601E  52AE 000C 10872          addq.l    #1,12(A6)
                    10873   vsprintf_2:
00006022  6000 F9D6 10874          bra       vsprintf_1
                    10875   vsprintf_3:
00006026  4A92      10876          tst.l     (A2)
00006028  6710      10877          beq.s     vsprintf_126
0000602A  4201      10878          clr.b     D1
0000602C  C2BC 0000 10879          and.l     #255,D1
00006030  00FF      
00006032  2F01      10880          move.l    D1,-(A7)
00006034  2F0A      10881          move.l    A2,-(A7)
00006036  4E93      10882          jsr       (A3)
00006038  504F      10883          addq.w    #8,A7
                    10884   vsprintf_126:
0000603A  2006      10885          move.l    D6,D0
0000603C  4CDF 3CFC 10886          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00006040  4E5E      10887          unlk      A6
00006042  4E75      10888          rts
                    10889   @itoa_convert:
00006044  4E56 0000 10890          link      A6,#0
00006048  48E7 3C00 10891          movem.l   D2/D3/D4/D5,-(A7)
0000604C  242E 0008 10892          move.l    8(A6),D2
00006050  262E 0010 10893          move.l    16(A6),D3
00006054  2A2E 000C 10894          move.l    12(A6),D5
00006058  2F05      10895          move.l    D5,-(A7)
0000605A  2F03      10896          move.l    D3,-(A7)
0000605C  6100 F6B4 10897          bsr       ULDIV
00006060  202F 0004 10898          move.l    4(A7),D0
00006064  504F      10899          addq.w    #8,A7
00006066  2800      10900          move.l    D0,D4
00006068  BA83      10901          cmp.l     D3,D5
0000606A  651A      10902          blo.s     @itoa_convert_1
0000606C  2F03      10903          move.l    D3,-(A7)
0000606E  2F05      10904          move.l    D5,-(A7)
00006070  2F03      10905          move.l    D3,-(A7)
00006072  6100 F69E 10906          bsr       ULDIV
00006076  2217      10907          move.l    (A7),D1
00006078  504F      10908          addq.w    #8,A7
0000607A  2F01      10909          move.l    D1,-(A7)
0000607C  2F02      10910          move.l    D2,-(A7)
0000607E  61C4      10911          bsr       @itoa_convert
00006080  DEFC 000C 10912          add.w     #12,A7
00006084  2400      10913          move.l    D0,D2
                    10914   @itoa_convert_1:
00006086  0C84 0000 10915          cmp.l     #9,D4
0000608A  0009      
0000608C  6E0A      10916          bgt.s     @itoa_convert_3
0000608E  2004      10917          move.l    D4,D0
00006090  0680 0000 10918          add.l     #48,D0
00006094  0030      
00006096  600E      10919          bra.s     @itoa_convert_4
                    10920   @itoa_convert_3:
00006098  2004      10921          move.l    D4,D0
0000609A  0680 0000 10922          add.l     #97,D0
0000609E  0061      
000060A0  0480 0000 10923          sub.l     #10,D0
000060A4  000A      
                    10924   @itoa_convert_4:
000060A6  2042      10925          move.l    D2,A0
000060A8  1080      10926          move.b    D0,(A0)
000060AA  2002      10927          move.l    D2,D0
000060AC  5280      10928          addq.l    #1,D0
000060AE  4CDF 003C 10929          movem.l   (A7)+,D2/D3/D4/D5
000060B2  4E5E      10930          unlk      A6
000060B4  4E75      10931          rts
                    10932   _ltoa:
000060B6  4E56 0000 10933          link      A6,#0
000060BA  48E7 3C00 10934          movem.l   D2/D3/D4/D5,-(A7)
000060BE  242E 0008 10935          move.l    8(A6),D2
000060C2  262E 000C 10936          move.l    12(A6),D3
000060C6  2A2E 0010 10937          move.l    16(A6),D5
000060CA  2803      10938          move.l    D3,D4
000060CC  0C85 0000 10939          cmp.l     #2,D5
000060D0  0002      
000060D2  6D08      10940          blt.s     ltoa_3
000060D4  0C85 0000 10941          cmp.l     #36,D5
000060D8  0024      
000060DA  6F06      10942          ble.s     ltoa_1
                    10943   ltoa_3:
000060DC  2003      10944          move.l    D3,D0
000060DE  6000 0052 10945          bra       ltoa_4
                    10946   ltoa_1:
000060E2  0C85 0000 10947          cmp.l     #10,D5
000060E6  000A      
000060E8  6600 0032 10948          bne       ltoa_5
000060EC  0C82 0000 10949          cmp.l     #0,D2
000060F0  0000      
000060F2  6C28      10950          bge.s     ltoa_5
000060F4  2002      10951          move.l    D2,D0
000060F6  4480      10952          neg.l     D0
000060F8  2400      10953          move.l    D0,D2
000060FA  0C82 0000 10954          cmp.l     #0,D2
000060FE  0000      
00006100  6C12      10955          bge.s     ltoa_7
00006102  4879 0000 10956          pea       @itoa_1
00006106  7A10      
00006108  2F03      10957          move.l    D3,-(A7)
0000610A  6100 F5F6 10958          bsr       _strcpy
0000610E  504F      10959          addq.w    #8,A7
00006110  2003      10960          move.l    D3,D0
00006112  601E      10961          bra.s     ltoa_4
                    10962   ltoa_7:
00006114  2044      10963          move.l    D4,A0
00006116  5284      10964          addq.l    #1,D4
00006118  10BC 002D 10965          move.b    #45,(A0)
                    10966   ltoa_5:
0000611C  2F05      10967          move.l    D5,-(A7)
0000611E  2F02      10968          move.l    D2,-(A7)
00006120  2F04      10969          move.l    D4,-(A7)
00006122  6100 FF20 10970          bsr       @itoa_convert
00006126  DEFC 000C 10971          add.w     #12,A7
0000612A  2800      10972          move.l    D0,D4
0000612C  2044      10973          move.l    D4,A0
0000612E  4210      10974          clr.b     (A0)
00006130  2003      10975          move.l    D3,D0
                    10976   ltoa_4:
00006132  4CDF 003C 10977          movem.l   (A7)+,D2/D3/D4/D5
00006136  4E5E      10978          unlk      A6
00006138  4E75      10979          rts
                    10980   _ultoa:
0000613A  4E56 0000 10981          link      A6,#0
0000613E  48E7 3800 10982          movem.l   D2/D3/D4,-(A7)
00006142  262E 0010 10983          move.l    16(A6),D3
00006146  282E 000C 10984          move.l    12(A6),D4
0000614A  2404      10985          move.l    D4,D2
0000614C  0C83 0000 10986          cmp.l     #2,D3
00006150  0002      
00006152  6D08      10987          blt.s     ultoa_3
00006154  0C83 0000 10988          cmp.l     #36,D3
00006158  0024      
0000615A  6F04      10989          ble.s     ultoa_1
                    10990   ultoa_3:
0000615C  2004      10991          move.l    D4,D0
0000615E  6018      10992          bra.s     ultoa_4
                    10993   ultoa_1:
00006160  2F03      10994          move.l    D3,-(A7)
00006162  2F2E 0008 10995          move.l    8(A6),-(A7)
00006166  2F02      10996          move.l    D2,-(A7)
00006168  6100 FEDA 10997          bsr       @itoa_convert
0000616C  DEFC 000C 10998          add.w     #12,A7
00006170  2400      10999          move.l    D0,D2
00006172  2042      11000          move.l    D2,A0
00006174  4210      11001          clr.b     (A0)
00006176  2004      11002          move.l    D4,D0
                    11003   ultoa_4:
00006178  4CDF 001C 11004          movem.l   (A7)+,D2/D3/D4
0000617C  4E5E      11005          unlk      A6
0000617E  4E75      11006          rts
                    11007   _itoa:
00006180  4E56 0000 11008          link      A6,#0
00006184  2F2E 0010 11009          move.l    16(A6),-(A7)
00006188  2F2E 000C 11010          move.l    12(A6),-(A7)
0000618C  2F2E 0008 11011          move.l    8(A6),-(A7)
00006190  6100 FF24 11012          bsr       _ltoa
00006194  DEFC 000C 11013          add.w     #12,A7
00006198  4E5E      11014          unlk      A6
0000619A  4E75      11015          rts
                    11016   ULMUL:
0000619C  4E56 0000 11017          link    A6,#0
000061A0  48E7 C000 11018          movem.l D0/D1,-(A7)
000061A4  222E 0008 11019          move.l  8(A6),D1
000061A8  202E 000C 11020          move.l  12(A6),D0
000061AC  602C      11021          bra.s   lmul_3
                    11022   LMUL:
000061AE  4E56 0000 11023          link    A6,#0
000061B2  48E7 C000 11024          movem.l D0/D1,-(A7)
000061B6  222E 0008 11025          move.l  8(A6),D1
000061BA  202E 000C 11026          move.l  12(A6),D0
000061BE  4A80      11027          tst.l   D0
000061C0  6A0A      11028          bpl.s   lmul_1
000061C2  4480      11029          neg.l   D0
000061C4  4A81      11030          tst.l   D1
000061C6  6A0A      11031          bpl.s   lmul_2
000061C8  4481      11032          neg.l   D1
000061CA  600E      11033          bra.s   lmul_3
                    11034   lmul_1:
000061CC  4A81      11035          tst.l   D1
000061CE  6A0A      11036          bpl.s   lmul_3
000061D0  4481      11037          neg.l   D1
                    11038   lmul_2:
000061D2  6114      11039          bsr.s   domul
000061D4  4481      11040          neg.l   D1
000061D6  4080      11041          negx.l  D0
000061D8  6002      11042          bra.s   lmul_4
                    11043   lmul_3:
000061DA  610C      11044          bsr.s   domul
                    11045   lmul_4:
000061DC  2D41 0008 11046          move.l  D1,8(A6)
000061E0  4CDF 0003 11047          movem.l (A7)+,D0/D1
000061E4  4E5E      11048          unlk    A6
000061E6  4E75      11049          rts
                    11050   domul:
000061E8  0C81 0000 11051          cmpi.l  #$FFFF,D1
000061EC  FFFF      
000061EE  620C      11052          bhi.s   domul_1
000061F0  0C80 0000 11053          cmpi.l  #$FFFF,D0
000061F4  FFFF      
000061F6  620E      11054          bhi.s   domul_2
000061F8  C2C0      11055          mulu    D0,D1
000061FA  4E75      11056          rts
                    11057   domul_1:
000061FC  0C80 0000 11058          cmpi.l  #$FFFF,D0
00006200  FFFF      
00006202  6218      11059          bhi.s   domul_4
00006204  6002      11060          bra.s   domul_3
                    11061   domul_2
00006206  C141      11062          exg     D0,D1
                    11063   domul_3:
00006208  2F02      11064          move.l  D2,-(A7)
0000620A  2401      11065          move.l  D1,D2
0000620C  4842      11066          swap    D2
0000620E  C2C0      11067          mulu    D0,D1
00006210  C4C0      11068          mulu    D0,D2
00006212  4842      11069          swap    D2
00006214  4242      11070          clr.w   D2
00006216  D282      11071          add.l   D2,D1
00006218  241F      11072          move.l  (A7)+,D2
0000621A  4E75      11073          rts
                    11074   domul_4:
0000621C  48E7 3000 11075          movem.l D2/D3,-(A7)
00006220  2401      11076          move.l  D1,D2
00006222  2601      11077          move.l  D1,D3
00006224  C2C0      11078          mulu    D0,D1
00006226  4842      11079          swap    D2
00006228  C4C0      11080          mulu    D0,D2
0000622A  4840      11081          swap    D0
0000622C  C6C0      11082          mulu    D0,D3
0000622E  D483      11083          add.l   D3,D2
00006230  4842      11084          swap    D2
00006232  4242      11085          clr.w   D2
00006234  D282      11086          add.l   D2,D1
00006236  4CDF 000C 11087          movem.l (A7)+,D2/D3
0000623A  4E75      11088          rts
                    11089   _strlen:
0000623C  206F 0004 11090          move.l    (4,A7),A0
00006240  2248      11091          move.l    A0,A1
                    11092   strlen_1:
00006242  4A19      11093          tst.b     (A1)+
00006244  66FC      11094          bne       strlen_1
00006246  2009      11095          move.l    A1,D0
00006248  9088      11096          sub.l     A0,D0
0000624A  5380      11097          subq.l    #1,D0
0000624C  4E75      11098          rts
                    11099          section   const
                    11100   
                    11101   @md_1:
0000624E  0D0A 00   11102          dc.b      13,10,0
                    11103   @md_2:
00006252  0D53 7769 11104          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00006256  7463 6865 
0000625A  7320 5357 
0000625E  5B        
0000625F  372D 305D 11105          dc.b      55,45,48,93,32,61,32,0
00006263  203D 2000 
                    11106   @md_3:
00006268  3000      11107          dc.b      48,0
                    11108   @md_4:
0000626A  3100      11109          dc.b      49,0
                    11110   @md_5:
0000626C  0D0A 456E 11111          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006270  7465 7220 
00006274  5374 6172 
00006278  74        
00006279  2041 6464 11112          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000627D  7265 7373 
00006281  3A20 00   
                    11113   @md_6:
00006284  0D0A 3C45 11114          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00006288  5343 3E20 
0000628C  3D20 4162 
00006290  6F72      
00006292  742C 2053 11115          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00006296  5041 4345 
0000629A  2074 6F20 
0000629E  436F      
000062A0  6E74 696E 11116          dc.b      110,116,105,110,117,101,0
000062A4  7565 00   
                    11117   @md_7:
000062A8  0D0A 2530 11118          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
000062AC  3858 2020 
000062B0  2530 3458 
000062B4  2020 20   
000062B7  2020 2020 11119          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
000062BB  2020 2020 
000062BF  2020 2020 
000062C3  2020 20   
000062C6  2020 2020 11120          dc.b      32,32,32,32,32,32,37,115,0
000062CA  2020 2573 
000062CE  00        
                    11121   @md_8:
000062D0  0D0A 2530 11122          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000062D4  3858 2020 
000062D8  2530 3458 
000062DC  2025 30   
000062DF  3458 2020 11123          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
000062E3  2020 2020 
000062E7  2020 2020 
000062EB  2020 20   
000062EE  2020 2020 11124          dc.b      32,32,32,32,32,32,37,115,0
000062F2  2020 2573 
000062F6  00        
                    11125   @md_9:
000062F8  0D0A 2530 11126          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000062FC  3858 2020 
00006300  2530 3458 
00006304  2025 30   
00006307  3458 2025 11127          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
0000630B  3034 5820 
0000630F  2020 2020 
00006313  2020 20   
00006316  2020 2020 11128          dc.b      32,32,32,32,32,32,37,115,0
0000631A  2020 2573 
0000631E  00        
                    11129   @md_10:
00006320  0D0A 2530 11130          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006324  3858 2020 
00006328  2530 3458 
0000632C  2025 30   
0000632F  3458 2025 11131          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00006333  3034 5820 
00006337  2530 3458 
0000633B  2020 20   
0000633E  2020 2020 11132          dc.b      32,32,32,32,32,32,37,115,0
00006342  2020 2573 
00006346  00        
                    11133   @md_11:
00006348  0D0A 2530 11134          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000634C  3858 2020 
00006350  2530 3458 
00006354  2025 30   
00006357  3458 2025 11135          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
0000635B  3034 5820 
0000635F  2530 3458 
00006363  2025 30   
00006366  3458 2020 11136          dc.b      52,88,32,32,32,32,37,115,0
0000636A  2020 2573 
0000636E  00        
                    11137   @md_12:
00006370  0D0A 4475 11138          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00006374  6D70 204D 
00006378  656D 6F72 
0000637C  79        
0000637D  2042 6C6F 11139          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00006381  636B 3A20 
00006385  3C45 5343 
00006389  3E20      
0000638B  746F 2041 11140          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
0000638F  626F 7274 
00006393  2C20 3C53 
00006397  50        
00006398  4143 453E 11141          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
0000639C  2074 6F20 
000063A0  436F 6E74 
000063A4  69        
000063A5  6E75 6500 11142          dc.b      110,117,101,0
                    11143   @md_13:
000063AA  0D0A 2530 11144          dc.b      13,10,37,48,56,120,32,0
000063AE  3878 2000 
                    11145   @md_14:
000063B2  2530 3258 11146          dc.b      37,48,50,88,0
000063B6  00        
                    11147   @md_15:
000063B8  2020 00   11148          dc.b      32,32,0
                    11149   @md_16:
000063BC  0D0A 4669 11150          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000063C0  6C6C 204D 
000063C4  656D 6F72 
000063C8  79        
000063C9  2042 6C6F 11151          dc.b      32,66,108,111,99,107,0
000063CD  636B 00   
                    11152   @md_17:
000063D0  0D0A 456E 11153          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000063D4  7465 7220 
000063D8  456E 6420 
000063DC  41        
000063DD  6464 7265 11154          dc.b      100,100,114,101,115,115,58,32,0
000063E1  7373 3A20 
000063E5  00        
                    11155   @md_18:
000063E6  0D0A 456E 11156          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000063EA  7465 7220 
000063EE  4669 6C6C 
000063F2  20        
000063F3  4461 7461 11157          dc.b      68,97,116,97,58,32,0
000063F7  3A20 00   
                    11158   @md_19:
000063FA  0D0A 4669 11159          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000063FE  6C6C 696E 
00006402  6720 4164 
00006406  64        
00006407  7265 7373 11160          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000640B  6573 205B 
0000640F  2425 3038 
00006413  58        
00006414  202D 2024 11161          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006418  2530 3858 
0000641C  5D20 7769 
00006420  7468      
00006422  2024 2530 11162          dc.b      32,36,37,48,50,88,0
00006426  3258 00   
                    11163   @md_20:
0000642A  0D0A 5573 11164          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000642E  6520 4879 
00006432  7065 7254 
00006436  65        
00006437  726D 696E 11165          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000643B  616C 2074 
0000643F  6F20 5365 
00006443  6E64 2054 11166          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00006447  6578 7420 
0000644B  4669 6C65 
0000644F  2028 2E68 11167          dc.b      32,40,46,104,101,120,41,13,10,0
00006453  6578 290D 
00006457  0A00      
                    11168   @md_21:
0000645A  0D0A 4C6F 11169          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000645E  6164 2046 
00006462  6169 6C65 
00006466  64        
00006467  2061 7420 11170          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000646B  4164 6472 
0000646F  6573 7320 
00006473  3D        
00006474  205B 2425 11171          dc.b      32,91,36,37,48,56,88,93,13,10,0
00006478  3038 585D 
0000647C  0D0A 00   
                    11172   @md_22:
00006480  0D0A 5375 11173          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006484  6363 6573 
00006488  733A 2044 
0000648C  6F        
0000648D  776E 6C6F 11174          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00006491  6164 6564 
00006495  2025 6420 
00006499  6279 7465 11175          dc.b      98,121,116,101,115,13,10,0
0000649D  730D 0A00 
                    11176   @md_23:
000064A2  0D0A 4578 11177          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000064A6  616D 696E 
000064AA  6520 616E 
000064AE  64        
000064AF  2043 6861 11178          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000064B3  6E67 6520 
000064B7  4D65 6D6F 
000064BB  72        
000064BC  7900      11179          dc.b      121,0
                    11180   @md_24:
000064BE  0D0A 3C45 11181          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000064C2  5343 3E20 
000064C6  746F 2053 
000064CA  746F      
000064CC  702C 203C 11182          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000064D0  5350 4143 
000064D4  453E 2074 
000064D8  6F20      
000064DA  4164 7661 11183          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000064DE  6E63 652C 
000064E2  2027 2D27 
000064E6  2074      
000064E8  6F20 476F 11184          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000064EC  2042 6163 
000064F0  6B2C 203C 
000064F4  4441      
000064F6  5441 3E20 11185          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000064FA  746F 2063 
000064FE  6861 6E67 
00006502  65        
00006503  00        11186          dc.b      0
                    11187   @md_25:
00006504  0D0A 456E 11188          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006508  7465 7220 
0000650C  4164 6472 
00006510  65        
00006511  7373 3A20 11189          dc.b      115,115,58,32,0
00006515  00        
                    11190   @md_26:
00006516  0D0A 5B25 11191          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000651A  3038 785D 
0000651E  203A 2025 
00006522  3032 78   
00006525  2020 00   11192          dc.b      32,32,0
                    11193   @md_27:
00006528  0D0A 5761 11194          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000652C  726E 696E 
00006530  6720 4368 
00006534  61        
00006535  6E67 6520 11195          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00006539  4661 696C 
0000653D  6564 3A20 
00006541  57        
00006542  726F 7465 11196          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00006546  205B 2530 
0000654A  3278 5D2C 
0000654E  20        
0000654F  5265 6164 11197          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00006553  205B 2530 
00006557  3278 5D00 
                    11198   @md_28:
0000655C  0D0A 4C6F 11199          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00006560  6164 696E 
00006564  6720 5072 
00006568  6F        
00006569  6772 616D 11200          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000656D  2046 726F 
00006571  6D20 5350 
00006575  49        
00006576  2046 6C61 11201          dc.b      32,70,108,97,115,104,46,46,46,46,0
0000657A  7368 2E2E 
0000657E  2E2E 00   
                    11202   @md_29:
00006582  2425 3038 11203          dc.b      36,37,48,56,88,32,32,0
00006586  5820 2000 
                    11204   @md_30:
0000658A  2000      11205          dc.b      32,0
                    11206   @md_31:
0000658C  2E00      11207          dc.b      46,0
                    11208   @md_32:
0000658E  2563 00   11209          dc.b      37,99,0
                    11210   @md_33:
00006592  00        11211          dc.b      0
                    11212   @md_34:
00006594  0D0A 0D0A 11213          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006598  2044 3020 
0000659C  3D20 2425 
000065A0  3038 58   
000065A3  2020 4130 11214          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000065A7  203D 2024 
000065AB  2530 3858 
000065AF  00        
                    11215   @md_35:
000065B0  0D0A 2044 11216          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000065B4  3120 3D20 
000065B8  2425 3038 
000065BC  5820 20   
000065BF  4131 203D 11217          dc.b      65,49,32,61,32,36,37,48,56,88,0
000065C3  2024 2530 
000065C7  3858 00   
                    11218   @md_36:
000065CA  0D0A 2044 11219          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000065CE  3220 3D20 
000065D2  2425 3038 
000065D6  5820 20   
000065D9  4132 203D 11220          dc.b      65,50,32,61,32,36,37,48,56,88,0
000065DD  2024 2530 
000065E1  3858 00   
                    11221   @md_37:
000065E4  0D0A 2044 11222          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000065E8  3320 3D20 
000065EC  2425 3038 
000065F0  5820 20   
000065F3  4133 203D 11223          dc.b      65,51,32,61,32,36,37,48,56,88,0
000065F7  2024 2530 
000065FB  3858 00   
                    11224   @md_38:
000065FE  0D0A 2044 11225          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00006602  3420 3D20 
00006606  2425 3038 
0000660A  5820 20   
0000660D  4134 203D 11226          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006611  2024 2530 
00006615  3858 00   
                    11227   @md_39:
00006618  0D0A 2044 11228          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000661C  3520 3D20 
00006620  2425 3038 
00006624  5820 20   
00006627  4135 203D 11229          dc.b      65,53,32,61,32,36,37,48,56,88,0
0000662B  2024 2530 
0000662F  3858 00   
                    11230   @md_40:
00006632  0D0A 2044 11231          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00006636  3620 3D20 
0000663A  2425 3038 
0000663E  5820 20   
00006641  4136 203D 11232          dc.b      65,54,32,61,32,36,37,48,56,88,0
00006645  2024 2530 
00006649  3858 00   
                    11233   @md_41:
0000664C  0D0A 2044 11234          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00006650  3720 3D20 
00006654  2425 3038 
00006658  5820 20   
0000665B  4137 203D 11235          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000665F  2024 2530 
00006663  3858 00   
                    11236   @md_42:
00006666  0D0A 0D0A 11237          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
0000666A  5553 5020 
0000666E  3D20 2425 
00006672  3038 58   
00006675  2020 2841 11238          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00006679  3729 2055 
0000667D  7365 7220 
00006681  5350      
00006683  00        11239          dc.b      0
                    11240   @md_43:
00006684  0D0A 5353 11241          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00006688  5020 3D20 
0000668C  2425 3038 
00006690  5820 20   
00006693  2841 3729 11242          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00006697  2053 7570 
0000669B  6572 7669 
0000669F  73        
000066A0  6F72 2053 11243          dc.b      111,114,32,83,80,0
000066A4  5000      
                    11244   @md_44:
000066A6  0D0A 2053 11245          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000066AA  5220 3D20 
000066AE  2425 3034 
000066B2  5820 20   
000066B5  2000      11246          dc.b      32,0
                    11247   @md_45:
000066B8  2020 205B 11248          dc.b      32,32,32,91,0
000066BC  00        
                    11249   @md_46:
000066BE  0D0A 2050 11250          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000066C2  4320 3D20 
000066C6  2425 3038 
000066CA  5820 20   
000066CD  00        11251          dc.b      0
                    11252   @md_47:
000066CE  2573 00   11253          dc.b      37,115,0
                    11254   @md_48:
000066D2  5B42 5245 11255          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
000066D6  414B 504F 
000066DA  494E 545D 
000066DE  00        
                    11256   @md_49:
000066E0  0D0A 5750 11257          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000066E4  2564 203D 
000066E8  2025 7300 
                    11258   @md_50:
000066EC  0D0A 0D0A 11259          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000066F0  0D0A 0D0A 
000066F4  0D0A 0D0A 
000066F8  5369 6E   
000066FB  676C 6520 11260          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000066FF  5374 6570 
00006703  2020 3A5B 
00006707  4F        
00006708  4E5D 00   11261          dc.b      78,93,0
                    11262   @md_51:
0000670C  0D0A 4272 11263          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006710  6561 6B20 
00006714  506F 696E 
00006718  74        
00006719  7320 3A5B 11264          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
0000671D  4469 7361 
00006721  626C 6564 
00006725  5D        
00006726  00        11265          dc.b      0
                    11266   @md_52:
00006728  0D0A 5072 11267          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000672C  6573 7320 
00006730  3C53 5041 
00006734  4345      
00006736  3E20 746F 11268          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
0000673A  2045 7865 
0000673E  6375 7465 
00006742  20        
00006743  4E65 7874 11269          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00006747  2049 6E73 
0000674B  7472 7563 
0000674F  7469 6F6E 11270          dc.b      116,105,111,110,0
00006753  00        
                    11271   @md_53:
00006754  0D0A 5072 11272          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006758  6573 7320 
0000675C  3C45 5343 
00006760  3E20      
00006762  746F 2052 11273          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00006766  6573 756D 
0000676A  6520 5072 
0000676E  6F67 7261 11274          dc.b      111,103,114,97,109,0
00006772  6D00      
                    11275   @md_54:
00006774  0D0A 496C 11276          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00006778  6C65 6761 
0000677C  6C20 4461 
00006780  74        
00006781  6120 5265 11277          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00006785  6769 7374 
00006789  6572 203A 
0000678D  20        
0000678E  5573 6520 11278          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00006792  4430 2D44 
00006796  372E 2E2E 
0000679A  2E2E      
0000679C  0D0A 00   11279          dc.b      13,10,0
                    11280   @md_55:
000067A0  0D0A 4425 11281          dc.b      13,10,68,37,99,32,61,32,0
000067A4  6320 3D20 
000067A8  00        
                    11282   @md_56:
000067AA  0D0A 496C 11283          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000067AE  6C65 6761 
000067B2  6C20 4164 
000067B6  64        
000067B7  7265 7373 11284          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000067BB  2052 6567 
000067BF  6973 7465 
000067C3  7220 3A20 11285          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000067C7  5573 6520 
000067CB  4130 2D41 
000067CF  372E      
000067D1  2E2E 2E2E 11286          dc.b      46,46,46,46,13,10,0
000067D5  0D0A 00   
                    11287   @md_57:
000067D8  0D0A 4125 11288          dc.b      13,10,65,37,99,32,61,32,0
000067DC  6320 3D20 
000067E0  00        
                    11289   @md_58:
000067E2  0D0A 5573 11290          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000067E6  6572 2053 
000067EA  5020 3D20 
000067EE  00        
                    11291   @md_59:
000067F0  0D0A 496C 11292          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000067F4  6C65 6761 
000067F8  6C20 5265 
000067FC  67        
000067FD  6973 7465 11293          dc.b      105,115,116,101,114,46,46,46,46,0
00006801  722E 2E2E 
00006805  2E00      
                    11294   @md_60:
00006808  0D0A 5379 11295          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
0000680C  7374 656D 
00006810  2053 5020 
00006814  3D        
00006815  2000      11296          dc.b      32,0
                    11297   @md_61:
00006818  0D0A 5043 11298          dc.b      13,10,80,67,32,61,32,0
0000681C  203D 2000 
                    11299   @md_62:
00006820  0D0A 5352 11300          dc.b      13,10,83,82,32,61,32,0
00006824  203D 2000 
                    11301   @md_63:
00006828  0D0A 496C 11302          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000682C  6C65 6761 
00006830  6C20 5265 
00006834  67        
00006835  6973 7465 11303          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00006839  723A 2055 
0000683D  7365 2041 
00006841  30        
00006842  2D41 372C 11304          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00006846  2044 302D 
0000684A  4437 2C20 
0000684E  5353 50   
00006851  2C20 5553 11305          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00006855  502C 2050 
00006859  4320 6F72 
0000685D  2053      
0000685F  520D 0A00 11306          dc.b      82,13,10,0
                    11307   @md_64:
00006864  0D0A 0D0A 11308          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00006868  4E75 6D20 
0000686C  2020 2020 
00006870  4164      
00006872  6472 6573 11309          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00006876  7320 2020 
0000687A  2020 2049 
0000687E  6E        
0000687F  7374 7275 11310          dc.b      115,116,114,117,99,116,105,111,110,0
00006883  6374 696F 
00006887  6E00      
                    11311   @md_65:
0000688A  0D0A 2D2D 11312          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000688E  2D20 2020 
00006892  2020 2D2D 
00006896  2D2D 2D   
00006899  2D2D 2D2D 11313          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000689D  2020 2020 
000068A1  2D2D 2D2D 
000068A5  2D2D 2D   
000068A8  2D2D 2D2D 11314          dc.b      45,45,45,45,0
000068AC  00        
                    11315   @md_66:
000068AE  0D0A 4E6F 11316          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000068B2  2042 7265 
000068B6  616B 506F 
000068BA  69        
000068BB  6E74 7320 11317          dc.b      110,116,115,32,83,101,116,0
000068BF  5365 7400 
                    11318   @md_67:
000068C4  0D0A 2533 11319          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000068C8  6420 2020 
000068CC  2020 2425 
000068D0  3038 78   
000068D3  00        11320          dc.b      0
                    11321   @md_68:
000068D4  2020 2020 11322          dc.b      32,32,32,32,37,115,0
000068D8  2573 00   
                    11323   @md_69:
000068DC  0D0A 4E75 11324          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000068E0  6D20 2020 
000068E4  2020 4164 
000068E8  6472      
000068EA  6573 7300 11325          dc.b      101,115,115,0
                    11326   @md_70:
000068EE  0D0A 2D2D 11327          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000068F2  2D20 2020 
000068F6  2020 2D2D 
000068FA  2D2D 2D   
000068FD  2D2D 2D2D 11328          dc.b      45,45,45,45,0
00006901  00        
                    11329   @md_71:
00006902  0D0A 4E6F 11330          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00006906  2057 6174 
0000690A  6368 506F 
0000690E  69        
0000690F  6E74 7320 11331          dc.b      110,116,115,32,83,101,116,0
00006913  5365 7400 
                    11332   @md_72:
00006918  0D0A 456E 11333          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000691C  7465 7220 
00006920  4272 6561 
00006924  6B        
00006925  2050 6F69 11334          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006929  6E74 204E 
0000692D  756D 6265 
00006931  72        
00006932  3A20 00   11335          dc.b      58,32,0
                    11336   @md_73:
00006936  0D0A 496C 11337          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000693A  6C65 6761 
0000693E  6C20 5261 
00006942  6E        
00006943  6765 203A 11338          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00006947  2055 7365 
0000694B  2030 202D 
0000694F  2037      
00006951  00        11339          dc.b      0
                    11340   @md_74:
00006952  0D0A 4272 11341          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006956  6561 6B20 
0000695A  506F 696E 
0000695E  74        
0000695F  2043 6C65 11342          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006963  6172 6564 
00006967  2E2E 2E2E 
0000696B  2E        
0000696C  0D0A 00   11343          dc.b      13,10,0
                    11344   @md_75:
00006970  0D0A 4272 11345          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006974  6561 6B20 
00006978  506F 696E 
0000697C  74        
0000697D  2077 6173 11346          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00006981  6E27 7420 
00006985  5365 742E 
00006989  2E        
0000698A  2E2E 2E00 11347          dc.b      46,46,46,0
                    11348   @md_76:
0000698E  0D0A 456E 11349          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00006992  7465 7220 
00006996  5761 7463 
0000699A  68        
0000699B  2050 6F69 11350          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000699F  6E74 204E 
000069A3  756D 6265 
000069A7  72        
000069A8  3A20 00   11351          dc.b      58,32,0
                    11352   @md_77:
000069AC  0D0A 5761 11353          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000069B0  7463 6820 
000069B4  506F 696E 
000069B8  74        
000069B9  2043 6C65 11354          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000069BD  6172 6564 
000069C1  2E2E 2E2E 
000069C5  2E        
000069C6  0D0A 00   11355          dc.b      13,10,0
                    11356   @md_78:
000069CA  0D0A 5761 11357          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000069CE  7463 6820 
000069D2  506F 696E 
000069D6  74        
000069D7  2057 6173 11358          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000069DB  206E 6F74 
000069DF  2053 6574 
000069E3  2E        
000069E4  2E2E 2E2E 11359          dc.b      46,46,46,46,0
000069E8  00        
                    11360   @md_79:
000069EA  0D0A 4E6F 11361          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000069EE  2046 5245 
000069F2  4520 4272 
000069F6  6561      
000069F8  6B20 506F 11362          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000069FC  696E 7473 
00006A00  2E2E 2E2E 
00006A04  2E        
00006A05  00        11363          dc.b      0
                    11364   @md_80:
00006A06  0D0A 4272 11365          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006A0A  6561 6B20 
00006A0E  506F 696E 
00006A12  74        
00006A13  2041 6464 11366          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006A17  7265 7373 
00006A1B  3A20 00   
                    11367   @md_81:
00006A1E  0D0A 4572 11368          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006A22  726F 7220 
00006A26  3A20 4272 
00006A2A  65        
00006A2B  616B 2050 11369          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006A2F  6F69 6E74 
00006A33  7320 4341 
00006A37  4E        
00006A38  4E4F 5420 11370          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00006A3C  6265 2073 
00006A40  6574 2061 
00006A44  74        
00006A45  204F 4444 11371          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00006A49  2061 6464 
00006A4D  7265 7373 
00006A51  65        
00006A52  7300      11372          dc.b      115,0
                    11373   @md_82:
00006A54  0D0A 4572 11374          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006A58  726F 7220 
00006A5C  3A20 4272 
00006A60  65        
00006A61  616B 2050 11375          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006A65  6F69 6E74 
00006A69  7320 4341 
00006A6D  4E        
00006A6E  4E4F 5420 11376          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00006A72  6265 2073 
00006A76  6574 2066 
00006A7A  6F        
00006A7B  7220 524F 11377          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00006A7F  4D20 696E 
00006A83  2052 616E 
00006A87  67        
00006A88  6520 3A20 11378          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00006A8C  5B24 302D 
00006A90  2430 3030 
00006A94  3037 46   
00006A97  4646 5D00 11379          dc.b      70,70,93,0
                    11380   @md_83:
00006A9C  0D0A 4572 11381          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00006AA0  726F 723A 
00006AA4  2042 7265 
00006AA8  61        
00006AA9  6B20 506F 11382          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00006AAD  696E 7420 
00006AB1  416C 7265 
00006AB5  6164 7920 11383          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00006AB9  4578 6973 
00006ABD  7473 2061 
00006AC1  74        
00006AC2  2041 6464 11384          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00006AC6  7265 7373 
00006ACA  203A 2025 
00006ACE  30        
00006ACF  3878 0D0A 11385          dc.b      56,120,13,10,0
00006AD3  00        
                    11386   @md_84:
00006AD4  0D0A 4272 11387          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006AD8  6561 6B20 
00006ADC  506F 696E 
00006AE0  74        
00006AE1  2053 6574 11388          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006AE5  2061 7420 
00006AE9  4164 6472 
00006AED  65        
00006AEE  7373 3A20 11389          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00006AF2  5B24 2530 
00006AF6  3878 5D2C 
00006AFA  2049      
00006AFC  6E73 7472 11390          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006B00  7563 7469 
00006B04  6F6E 203D 
00006B08  2025 7300 11391          dc.b      32,37,115,0
                    11392   @md_85:
00006B0C  0D0A 4E6F 11393          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006B10  2046 5245 
00006B14  4520 5761 
00006B18  7463      
00006B1A  6820 506F 11394          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006B1E  696E 7473 
00006B22  2E2E 2E2E 
00006B26  2E        
00006B27  00        11395          dc.b      0
                    11396   @md_86:
00006B28  0D0A 5761 11397          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006B2C  7463 6820 
00006B30  506F 696E 
00006B34  74        
00006B35  2041 6464 11398          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006B39  7265 7373 
00006B3D  3A20 00   
                    11399   @md_87:
00006B40  0D0A 4572 11400          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00006B44  726F 723A 
00006B48  2057 6174 
00006B4C  63        
00006B4D  6820 506F 11401          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00006B51  696E 7420 
00006B55  416C 7265 
00006B59  6164 7920 11402          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00006B5D  5365 7420 
00006B61  6174 2041 
00006B65  64        
00006B66  6472 6573 11403          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00006B6A  7320 3A20 
00006B6E  2530 3878 
00006B72  0D        
00006B73  0A00      11404          dc.b      10,0
                    11405   @md_88:
00006B76  0D0A 5761 11406          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006B7A  7463 6820 
00006B7E  506F 696E 
00006B82  74        
00006B83  2053 6574 11407          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006B87  2061 7420 
00006B8B  4164 6472 
00006B8F  65        
00006B90  7373 3A20 11408          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00006B94  5B24 2530 
00006B98  3878 5D00 
                    11409   @md_89:
00006B9C  0D0A 0D0A 11410          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00006BA0  0D0A 0D0A 
00006BA4  4042 5245 
00006BA8  414B 50   
00006BAB  4F49 4E54 11411          dc.b      79,73,78,84,0
00006BAF  00        
                    11412   @md_90:
00006BB0  0D0A 5369 11413          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006BB4  6E67 6C65 
00006BB8  2053 7465 
00006BBC  70        
00006BBD  203A 205B 11414          dc.b      32,58,32,91,79,78,93,0
00006BC1  4F4E 5D00 
                    11415   @md_91:
00006BC6  0D0A 4272 11416          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006BCA  6561 6B50 
00006BCE  6F69 6E74 
00006BD2  73        
00006BD3  203A 205B 11417          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006BD7  456E 6162 
00006BDB  6C65 645D 
00006BDF  00        
                    11418   @md_92:
00006BE0  0D0A 5072 11419          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006BE4  6573 7320 
00006BE8  3C45 5343 
00006BEC  3E20      
00006BEE  746F 2052 11420          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006BF2  6573 756D 
00006BF6  6520 5573 
00006BFA  6572 2050 11421          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006BFE  726F 6772 
00006C02  616D 0D0A 
00006C06  00        
                    11422   @md_93:
00006C08  0D0A 556E 11423          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006C0C  6B6E 6F77 
00006C10  6E20 436F 
00006C14  6D        
00006C15  6D61 6E64 11424          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006C19  2E2E 2E2E 
00006C1D  2E0D 0A00 
                    11425   @md_94:
00006C22  0D0A 5072 11426          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006C26  6F67 7261 
00006C2A  6D20 456E 
00006C2E  64        
00006C2F  6564 2028 11427          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006C33  5452 4150 
00006C37  2023 3135 
00006C3B  292E      
00006C3D  2E2E 2E00 11428          dc.b      46,46,46,0
                    11429   @md_95:
00006C42  0D0A 4B69 11430          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006C46  6C6C 2041 
00006C4A  6C6C 2042 
00006C4E  72        
00006C4F  6561 6B20 11431          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006C53  506F 696E 
00006C57  7473 2E2E 
00006C5B  2E        
00006C5C  2879 2F6E 11432          dc.b      40,121,47,110,41,63,0
00006C60  293F 00   
                    11433   @md_96:
00006C64  0D0A 4B69 11434          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006C68  6C6C 2041 
00006C6C  6C6C 2057 
00006C70  61        
00006C71  7463 6820 11435          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006C75  506F 696E 
00006C79  7473 2E2E 
00006C7D  2E        
00006C7E  2879 2F6E 11436          dc.b      40,121,47,110,41,63,0
00006C82  293F 00   
                    11437   @md_97:
00006C86  0D0A 2D2D 11438          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006C8A  2D2D 2D2D 
00006C8E  2D2D 2D2D 
00006C92  2D2D 2D   
00006C95  2D2D 2D2D 11439          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006C99  2D2D 2D2D 
00006C9D  2D2D 2D2D 
00006CA1  2D2D 2D   
00006CA4  2D2D 2D2D 11440          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006CA8  2D2D 2D2D 
00006CAC  2D2D 2D2D 
00006CB0  2D2D 2D   
00006CB3  2D2D 2D2D 11441          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006CB7  2D2D 2D2D 
00006CBB  2D2D 2D2D 
00006CBF  2D2D 2D   
00006CC2  2D2D 2D2D 11442          dc.b      45,45,45,45,45,45,0
00006CC6  2D2D 00   
                    11443   @md_98:
00006CCA  0D0A 2020 11444          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006CCE  4465 6275 
00006CD2  6767 6572 
00006CD6  20        
00006CD7  436F 6D6D 11445          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006CDB  616E 6420 
00006CDF  5375 6D6D 
00006CE3  6172 7900 11446          dc.b      97,114,121,0
                    11447   @md_99:
00006CE8  0D0A 2020 11448          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006CEC  2E28 7265 
00006CF0  6729 2020 
00006CF4  2020      
00006CF6  2020 202D 11449          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006CFA  2043 6861 
00006CFE  6E67 6520 
00006D02  5265      
00006D04  6769 7374 11450          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006D08  6572 733A 
00006D0C  2065 2E67 
00006D10  2041 302D 11451          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006D14  4137 2C44 
00006D18  302D 4437 
00006D1C  2C50 43   
00006D1F  2C53 5350 11452          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006D23  2C55 5350 
00006D27  2C53 5200 
                    11453   @md_100:
00006D2C  0D0A 2020 11454          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006D30  4244 2F42 
00006D34  532F 4243 
00006D38  2F42 4B   
00006D3B  2020 2D20 11455          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006D3F  4272 6561 
00006D43  6B20 506F 
00006D47  69        
00006D48  6E74 3A20 11456          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006D4C  4469 7370 
00006D50  6C61 792F 
00006D54  53        
00006D55  6574 2F43 11457          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006D59  6C65 6172 
00006D5D  2F4B 696C 
00006D61  6C        
00006D62  00        11458          dc.b      0
                    11459   @md_101:
00006D64  0D0A 2020 11460          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006D68  4320 2020 
00006D6C  2020 2020 
00006D70  2020 20   
00006D73  2020 2D20 11461          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006D77  436F 7079 
00006D7B  2050 726F 
00006D7F  67        
00006D80  7261 6D20 11462          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006D84  6672 6F6D 
00006D88  2046 6C61 
00006D8C  73        
00006D8D  6820 746F 11463          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006D91  204D 6169 
00006D95  6E20 4D65 
00006D99  6D        
00006D9A  6F72 7900 11464          dc.b      111,114,121,0
                    11465   @md_102:
00006D9E  0D0A 2020 11466          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006DA2  4449 2020 
00006DA6  2020 2020 
00006DAA  2020 20   
00006DAD  2020 2D20 11467          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006DB1  4469 7361 
00006DB5  7373 656D 
00006DB9  62        
00006DBA  6C65 2050 11468          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006DBE  726F 6772 
00006DC2  616D 00   
                    11469   @md_103:
00006DC6  0D0A 2020 11470          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006DCA  4455 2020 
00006DCE  2020 2020 
00006DD2  2020 20   
00006DD5  2020 2D20 11471          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006DD9  4475 6D70 
00006DDD  204D 656D 
00006DE1  6F        
00006DE2  7279 2043 11472          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006DE6  6F6E 7465 
00006DEA  6E74 7320 
00006DEE  746F 2053 11473          dc.b      116,111,32,83,99,114,101,101,110,0
00006DF2  6372 6565 
00006DF6  6E00      
                    11474   @md_104:
00006DF8  0D0A 2020 11475          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006DFC  4520 2020 
00006E00  2020 2020 
00006E04  2020 20   
00006E07  2020 2D20 11476          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006E0B  456E 7465 
00006E0F  7220 5374 
00006E13  72        
00006E14  696E 6720 11477          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006E18  696E 746F 
00006E1C  204D 656D 
00006E20  6F72 7900 11478          dc.b      111,114,121,0
                    11479   @md_105:
00006E24  0D0A 2020 11480          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006E28  4620 2020 
00006E2C  2020 2020 
00006E30  2020 20   
00006E33  2020 2D20 11481          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006E37  4669 6C6C 
00006E3B  204D 656D 
00006E3F  6F        
00006E40  7279 2077 11482          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006E44  6974 6820 
00006E48  4461 7461 
00006E4C  00        
                    11483   @md_106:
00006E4E  0D0A 2020 11484          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006E52  4720 2020 
00006E56  2020 2020 
00006E5A  2020 20   
00006E5D  2020 2D20 11485          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006E61  476F 2050 
00006E65  726F 6772 
00006E69  61        
00006E6A  6D20 5374 11486          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006E6E  6172 7469 
00006E72  6E67 2061 
00006E76  74        
00006E77  2041 6464 11487          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006E7B  7265 7373 
00006E7F  3A20 2425 
00006E83  30        
00006E84  3858 00   11488          dc.b      56,88,0
                    11489   @md_107:
00006E88  0D0A 2020 11490          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006E8C  4C20 2020 
00006E90  2020 2020 
00006E94  2020 20   
00006E97  2020 2D20 11491          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006E9B  4C6F 6164 
00006E9F  2050 726F 
00006EA3  67        
00006EA4  7261 6D20 11492          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006EA8  282E 4845 
00006EAC  5820 6669 
00006EB0  6C        
00006EB1  6529 2066 11493          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006EB5  726F 6D20 
00006EB9  4C61 7074 
00006EBD  6F        
00006EBE  7000      11494          dc.b      112,0
                    11495   @md_108:
00006EC0  0D0A 2020 11496          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006EC4  4D20 2020 
00006EC8  2020 2020 
00006ECC  2020 20   
00006ECF  2020 2D20 11497          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006ED3  4D65 6D6F 
00006ED7  7279 2045 
00006EDB  78        
00006EDC  616D 696E 11498          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006EE0  6520 616E 
00006EE4  6420 4368 
00006EE8  61        
00006EE9  6E67 6500 11499          dc.b      110,103,101,0
                    11500   @md_109:
00006EEE  0D0A 2020 11501          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006EF2  5020 2020 
00006EF6  2020 2020 
00006EFA  2020 20   
00006EFD  2020 2D20 11502          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006F01  5072 6F67 
00006F05  7261 6D20 
00006F09  46        
00006F0A  6C61 7368 11503          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006F0E  204D 656D 
00006F12  6F72 7920 
00006F16  7769 7468 11504          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006F1A  2055 7365 
00006F1E  7220 5072 
00006F22  6F67 7261 11505          dc.b      111,103,114,97,109,0
00006F26  6D00      
                    11506   @md_110:
00006F28  0D0A 2020 11507          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006F2C  5220 2020 
00006F30  2020 2020 
00006F34  2020 20   
00006F37  2020 2D20 11508          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006F3B  4469 7370 
00006F3F  6C61 7920 
00006F43  36        
00006F44  3830 3030 11509          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006F48  2052 6567 
00006F4C  6973 7465 
00006F50  72        
00006F51  7300      11510          dc.b      115,0
                    11511   @md_111:
00006F54  0D0A 2020 11512          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006F58  5320 2020 
00006F5C  2020 2020 
00006F60  2020 20   
00006F63  2020 2D20 11513          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006F67  546F 6767 
00006F6B  6C65 204F 
00006F6F  4E        
00006F70  2F4F 4646 11514          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006F74  2053 696E 
00006F78  676C 6520 
00006F7C  53        
00006F7D  7465 7020 11515          dc.b      116,101,112,32,77,111,100,101,0
00006F81  4D6F 6465 
00006F85  00        
                    11516   @md_112:
00006F86  0D0A 2020 11517          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006F8A  544D 2020 
00006F8E  2020 2020 
00006F92  2020 20   
00006F95  2020 2D20 11518          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006F99  5465 7374 
00006F9D  204D 656D 
00006FA1  6F        
00006FA2  7279 00   11519          dc.b      114,121,0
                    11520   @md_113:
00006FA6  0D0A 2020 11521          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006FAA  5453 2020 
00006FAE  2020 2020 
00006FB2  2020 20   
00006FB5  2020 2D20 11522          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006FB9  5465 7374 
00006FBD  2053 7769 
00006FC1  74        
00006FC2  6368 6573 11523          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006FC6  3A20 5357 
00006FCA  372D 3000 
                    11524   @md_114:
00006FCE  0D0A 2020 11525          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006FD2  5444 2020 
00006FD6  2020 2020 
00006FDA  2020 20   
00006FDD  2020 2D20 11526          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006FE1  5465 7374 
00006FE5  2044 6973 
00006FE9  70        
00006FEA  6C61 7973 11527          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006FEE  3A20 4C45 
00006FF2  4473 2061 
00006FF6  6E        
00006FF7  6420 372D 11528          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006FFB  5365 676D 
00006FFF  656E 7400 
                    11529   @md_115:
00007004  0D0A 2020 11530          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00007008  5744 2F57 
0000700C  532F 5743 
00007010  2F57 4B   
00007013  2020 2D20 11531          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00007017  5761 7463 
0000701B  6820 506F 
0000701F  696E      
00007021  743A 2044 11532          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00007025  6973 706C 
00007029  6179 2F53 
0000702D  65        
0000702E  742F 436C 11533          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00007032  6561 722F 
00007036  4B69 6C6C 
0000703A  00        
                    11534   @md_116:
0000703C  0D0A 2300 11535          dc.b      13,10,35,0
                    11536   @md_117:
00007040  0D0A 5072 11537          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00007044  6F67 7261 
00007048  6D20 5275 
0000704C  6E        
0000704D  6E69 6E67 11538          dc.b      110,105,110,103,46,46,46,46,46,0
00007051  2E2E 2E2E 
00007055  2E00      
                    11539   @md_118:
00007058  0D0A 5072 11540          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
0000705C  6573 7320 
00007060  3C52 4553 
00007064  4554      
00007066  3E20 6275 11541          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0000706A  7474 6F6E 
0000706E  203C 4B65 
00007072  79        
00007073  303E 206F 11542          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00007077  6E20 4445 
0000707B  3120 746F 
0000707F  2073      
00007081  746F 7000 11543          dc.b      116,111,112,0
                    11544   @md_119:
00007086  0D0A 4572 11545          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000708A  726F 723A 
0000708E  2050 7265 
00007092  73        
00007093  7320 2747 11546          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00007097  2720 6669 
0000709B  7273 7420 
0000709F  74        
000070A0  6F20 7374 11547          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000070A4  6172 7420 
000070A8  7072 6F67 
000070AC  7261 6D00 11548          dc.b      114,97,109,0
                    11549   @md_120:
000070B0  0D0A 5369 11550          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000070B4  6E67 6C65 
000070B8  2053 7465 
000070BC  70        
000070BD  2020 3A5B 11551          dc.b      32,32,58,91,79,78,93,0
000070C1  4F4E 5D00 
                    11552   @md_121:
000070C6  0D0A 5072 11553          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000070CA  6573 7320 
000070CE  2747 2720 
000070D2  74        
000070D3  6F20 5472 11554          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000070D7  6163 6520 
000070DB  5072 6F67 
000070DF  72        
000070E0  616D 2066 11555          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000070E4  726F 6D20 
000070E8  6164 6472 
000070EC  6573 7320 11556          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000070F0  2425 582E 
000070F4  2E2E 2E2E 
000070F8  00        
                    11557   @md_122:
000070FA  0D0A 5075 11558          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000070FE  7368 203C 
00007102  5245 5345 
00007106  5420      
00007108  4275 7474 11559          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
0000710C  6F6E 3E20 
00007110  746F 2053 
00007114  74        
00007115  6F70 2E2E 11560          dc.b      111,112,46,46,46,46,46,0
00007119  2E2E 2E00 
                    11561   @md_123:
0000711E  0D0A 5369 11562          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007122  6E67 6C65 
00007126  2053 7465 
0000712A  70        
0000712B  203A 205B 11563          dc.b      32,58,32,91,79,70,70,93,0
0000712F  4F46 465D 
00007133  00        
                    11564   @md_124:
00007134  0D0A 4272 11565          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007138  6561 6B20 
0000713C  506F 696E 
00007140  74        
00007141  7320 3A5B 11566          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00007145  456E 6162 
00007149  6C65 645D 
0000714D  00        
                    11567   @md_125:
0000714E  0D0A 5072 11568          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00007152  6573 7320 
00007156  3C45 5343 
0000715A  3E20      
0000715C  746F 2052 11569          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00007160  6573 756D 
00007164  6520 5573 
00007168  6572 2050 11570          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
0000716C  726F 6772 
00007170  616D 2E2E 
00007174  2E        
00007175  2E2E 00   11571          dc.b      46,46,0
                    11572   @md_126:
00007178  0D0A 5369 11573          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000717C  6E67 6C65 
00007180  2053 7465 
00007184  70        
00007185  2020 3A5B 11574          dc.b      32,32,58,91,79,70,70,93,0
00007189  4F46 465D 
0000718D  00        
                    11575   @md_127:
0000718E  0D0A 0D0A 11576          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007192  5072 6F67 
00007196  7261 6D20 
0000719A  41        
0000719B  424F 5254 11577          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
0000719F  2021 2121 
000071A3  2121 210D 
000071A7  0A00      
                    11578   @md_128:
000071AA  2573 0D0A 11579          dc.b      37,115,13,10,0
000071AE  00        
                    11580   @md_129:
000071B0  0D0A 0D0A 11581          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000071B4  5072 6F67 
000071B8  7261 6D20 
000071BC  41        
000071BD  424F 5254 11582          dc.b      66,79,82,84,32,33,33,33,33,33,0
000071C1  2021 2121 
000071C5  2121 00   
                    11583   @md_130:
000071C8  0D0A 556E 11584          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000071CC  6861 6E64 
000071D0  6C65 6420 
000071D4  49        
000071D5  6E74 6572 11585          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000071D9  7275 7074 
000071DD  3A20 4952 
000071E1  5125 6420 11586          dc.b      81,37,100,32,33,33,33,33,33,0
000071E5  2121 2121 
000071E9  2100      
                    11587   @md_131:
000071EC  4144 4452 11588          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000071F0  4553 5320 
000071F4  4552 524F 
000071F8  523A 20   
000071FB  3136 206F 11589          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000071FF  7220 3332 
00007203  2042 6974 
00007207  2054      
00007209  7261 6E73 11590          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
0000720D  6665 7220 
00007211  746F 2F66 
00007215  726F 6D20 11591          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007219  616E 204F 
0000721D  4444 2041 
00007221  64        
00007222  6472 6573 11592          dc.b      100,114,101,115,115,46,46,46,46,0
00007226  732E 2E2E 
0000722A  2E00      
                    11593   @md_132:
0000722C  556E 6861 11594          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00007230  6E64 6C65 
00007234  6420 5472 
00007238  6170 2021 11595          dc.b      97,112,32,33,33,33,33,33,0
0000723C  2121 2121 
00007240  00        
                    11596   @md_133:
00007242  4255 5320 11597          dc.b      66,85,83,32,69,114,114,111,114,33,0
00007246  4572 726F 
0000724A  7221 00   
                    11598   @md_134:
0000724E  4144 4452 11599          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00007252  4553 5320 
00007256  4572 726F 
0000725A  7221      
0000725C  00        11600          dc.b      0
                    11601   @md_135:
0000725E  494C 4C45 11602          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00007262  4741 4C20 
00007266  494E 5354 
0000726A  5255 43   
0000726D  5449 4F4E 11603          dc.b      84,73,79,78,0
00007271  00        
                    11604   @md_136:
00007272  4449 5649 11605          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007276  4445 2042 
0000727A  5920 5A45 
0000727E  524F 00   
                    11606   @md_137:
00007282  2743 484B 11607          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00007286  2720 494E 
0000728A  5354 5255 
0000728E  4354 49   
00007291  4F4E 00   11608          dc.b      79,78,0
                    11609   @md_138:
00007294  5452 4150 11610          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007298  5620 494E 
0000729C  5354 5255 
000072A0  4354 49   
000072A3  4F4E 00   11611          dc.b      79,78,0
                    11612   @md_139:
000072A6  5052 4956 11613          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000072AA  494C 4547 
000072AE  4520 5649 
000072B2  4F4C 41   
000072B5  5449 4F4E 11614          dc.b      84,73,79,78,0
000072B9  00        
                    11615   @md_140:
000072BA  554E 494E 11616          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000072BE  4954 4941 
000072C2  4C49 5345 
000072C6  4420 49   
000072C9  5251 00   11617          dc.b      82,81,0
                    11618   @md_141:
000072CC  5350 5552 11619          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000072D0  494F 5553 
000072D4  2049 5251 
000072D8  00        
                    11620   @md_142:
000072DA  0D0A 5374 11621          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000072DE  6172 7420 
000072E2  4164 6472 
000072E6  65        
000072E7  7373 2069 11622          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000072EB  6E20 4D65 
000072EF  6D6F 7279 
000072F3  3A20 00   11623          dc.b      58,32,0
                    11624   @md_143:
000072F6  0D0A 456E 11625          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000072FA  7465 7220 
000072FE  5374 7269 
00007302  6E        
00007303  6720 2845 11626          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007307  5343 2074 
0000730B  6F20 656E 
0000730F  64        
00007310  2920 3A00 11627          dc.b      41,32,58,0
                    11628   @md_144:
00007314  0D0A 7374 11629          dc.b      13,10,115,116,97,114,116,32,65,100,100,114,101
00007318  6172 7420 
0000731C  4164 6472 
00007320  65        
00007321  7373 2066 11630          dc.b      115,115,32,102,114,111,109,32,48,120,48,56,48
00007325  726F 6D20 
00007329  3078 3038 
0000732D  30        
0000732E  3230 3030 11631          dc.b      50,48,48,48,48,32,116,111,32,48,120,48,56,48
00007332  3020 746F 
00007336  2030 7830 
0000733A  3830      
0000733C  3330 3030 11632          dc.b      51,48,48,48,48,41,58,32,0
00007340  3029 3A20 
00007344  00        
                    11633   @md_145:
00007346  0D0A 656E 11634          dc.b      13,10,101,110,100,32,65,100,100,114,101,115
0000734A  6420 4164 
0000734E  6472 6573 
00007352  7320 6672 11635          dc.b      115,32,102,114,111,109,32,48,120,48,56,48,50
00007356  6F6D 2030 
0000735A  7830 3830 
0000735E  32        
0000735F  3030 3030 11636          dc.b      48,48,48,48,32,116,111,32,48,120,48,56,48,51
00007363  2074 6F20 
00007367  3078 3038 
0000736B  3033      
0000736D  3030 3030 11637          dc.b      48,48,48,48,41,58,32,0
00007371  293A 2000 
                    11638   @md_146:
00007376  0D0A 4368 11639          dc.b      13,10,67,104,111,111,115,101,32,100,97,116,97
0000737A  6F6F 7365 
0000737E  2064 6174 
00007382  61        
00007383  2070 6174 11640          dc.b      32,112,97,116,116,101,114,110,58,32,13,10,49
00007387  7465 726E 
0000738B  3A20 0D0A 
0000738F  31        
00007390  3A20 3535 11641          dc.b      58,32,53,53,13,10,50,58,32,65,65,13,10,51,58
00007394  0D0A 323A 
00007398  2041 410D 
0000739C  0A33 3A   
0000739F  2046 460D 11642          dc.b      32,70,70,13,10,52,58,32,48,48,0
000073A3  0A34 3A20 
000073A7  3030 00   
                    11643   @md_147:
000073AA  0D0A 6461 11644          dc.b      13,10,100,97,116,97,58,32,37,120,0
000073AE  7461 3A20 
000073B2  2578 00   
                    11645   @md_148:
000073B6  0D0A 456E 11646          dc.b      13,10,69,110,116,101,114,32,39,66,39,44,32,102
000073BA  7465 7220 
000073BE  2742 272C 
000073C2  2066      
000073C4  6F72 2062 11647          dc.b      111,114,32,98,121,116,101,115,44,32,39,87,39
000073C8  7974 6573 
000073CC  2C20 2757 
000073D0  27        
000073D1  2066 6F72 11648          dc.b      32,102,111,114,32,119,111,114,100,115,44,32
000073D5  2077 6F72 
000073D9  6473 2C20 
000073DD  6F72 2027 11649          dc.b      111,114,32,39,76,39,32,102,111,114,32,108,111
000073E1  4C27 2066 
000073E5  6F72 206C 
000073E9  6F        
000073EA  6E67 2077 11650          dc.b      110,103,32,119,111,114,100,115,58,32,0
000073EE  6F72 6473 
000073F2  3A20 00   
                    11651   @md_149:
000073F6  0D0A 4279 11652          dc.b      13,10,66,121,116,101,115,0
000073FA  7465 7300 
                    11653   @md_150:
000073FE  0D0A 576F 11654          dc.b      13,10,87,111,114,100,115,0
00007402  7264 7300 
                    11655   @md_151:
00007406  0D0A 4C6F 11656          dc.b      13,10,76,111,110,103,32,87,111,114,100,115,0
0000740A  6E67 2057 
0000740E  6F72 6473 
00007412  00        
                    11657   @md_152:
00007414  0D0A 4279 11658          dc.b      13,10,66,121,116,101,32,87,114,105,116,101,32
00007418  7465 2057 
0000741C  7269 7465 
00007420  20        
00007421  4669 6E69 11659          dc.b      70,105,110,105,115,104,101,100,46,32,82,101
00007425  7368 6564 
00007429  2E20 5265 
0000742D  6164 2073 11660          dc.b      97,100,32,115,116,97,114,116,115,46,0
00007431  7461 7274 
00007435  732E 00   
                    11661   @md_153:
00007438  0D0A 6279 11662          dc.b      13,10,98,121,116,101,100,97,116,97,58,32,37
0000743C  7465 6461 
00007440  7461 3A20 
00007444  25        
00007445  7800      11663          dc.b      120,0
                    11664   @md_154:
00007448  0D0A 5772 11665          dc.b      13,10,87,114,105,116,101,58,32,37,120,32,116
0000744C  6974 653A 
00007450  2025 7820 
00007454  74        
00007455  6F20 6164 11666          dc.b      111,32,97,100,100,114,32,37,120,0
00007459  6472 2025 
0000745D  7800      
                    11667   @md_155:
00007460  0D0A 576F 11668          dc.b      13,10,87,111,114,100,32,87,114,105,116,101,32
00007464  7264 2057 
00007468  7269 7465 
0000746C  20        
0000746D  4669 6E69 11669          dc.b      70,105,110,105,115,104,101,100,46,32,82,101
00007471  7368 6564 
00007475  2E20 5265 
00007479  6164 2073 11670          dc.b      97,100,32,115,116,97,114,116,115,46,0
0000747D  7461 7274 
00007481  732E 00   
                    11671   @md_156:
00007484  0D0A 776F 11672          dc.b      13,10,119,111,114,100,100,97,116,97,58,32,37
00007488  7264 6461 
0000748C  7461 3A20 
00007490  25        
00007491  7800      11673          dc.b      120,0
                    11674   @md_157:
00007494  0D0A 4C6F 11675          dc.b      13,10,76,111,110,103,32,87,111,114,100,32,87
00007498  6E67 2057 
0000749C  6F72 6420 
000074A0  57        
000074A1  7269 7465 11676          dc.b      114,105,116,101,32,70,105,110,105,115,104,101
000074A5  2046 696E 
000074A9  6973 6865 
000074AD  642E 2052 11677          dc.b      100,46,32,82,101,97,100,32,115,116,97,114,116
000074B1  6561 6420 
000074B5  7374 6172 
000074B9  74        
000074BA  732E 00   11678          dc.b      115,46,0
                    11679   @md_158:
000074BE  0D0A 6C6F 11680          dc.b      13,10,108,111,110,103,100,97,116,97,58,32,37
000074C2  6E67 6461 
000074C6  7461 3A20 
000074CA  25        
000074CB  7800      11681          dc.b      120,0
                    11682   @md_159:
000074CE  0D0A 4279 11683          dc.b      13,10,66,121,116,101,32,82,101,97,100,32,99
000074D2  7465 2052 
000074D6  6561 6420 
000074DA  63        
000074DB  6F6D 706C 11684          dc.b      111,109,112,108,101,116,101,46,0
000074DF  6574 652E 
000074E3  00        
                    11685   @md_160:
000074E4  0D0A 5041 11686          dc.b      13,10,80,65,83,83,46,0
000074E8  5353 2E00 
                    11687   @md_161:
000074EC  0D0A 4552 11688          dc.b      13,10,69,82,82,79,82,58,32,65,100,100,114,101
000074F0  524F 523A 
000074F4  2041 6464 
000074F8  7265      
000074FA  7373 2025 11689          dc.b      115,115,32,37,120,32,100,97,116,97,32,105,115
000074FE  7820 6461 
00007502  7461 2069 
00007506  73        
00007507  2025 7820 11690          dc.b      32,37,120,32,98,117,116,32,115,104,111,117,108
0000750B  6275 7420 
0000750F  7368 6F75 
00007513  6C        
00007514  6420 6265 11691          dc.b      100,32,98,101,32,37,120,0
00007518  2025 7800 
                    11692   @md_162:
0000751C  0D0A 4641 11693          dc.b      13,10,70,65,73,76,46,0
00007520  494C 2E00 
                    11694   @md_163:
00007524  0D0A 5265 11695          dc.b      13,10,82,101,97,100,58,32,65,100,100,114,101
00007528  6164 3A20 
0000752C  4164 6472 
00007530  65        
00007531  7373 2025 11696          dc.b      115,115,32,37,120,32,100,97,116,97,32,105,115
00007535  7820 6461 
00007539  7461 2069 
0000753D  73        
0000753E  2025 7800 11697          dc.b      32,37,120,0
                    11698   @md_164:
00007542  0D0A 576F 11699          dc.b      13,10,87,111,114,100,32,82,101,97,100,32,99
00007546  7264 2052 
0000754A  6561 6420 
0000754E  63        
0000754F  6F6D 706C 11700          dc.b      111,109,112,108,101,116,101,46,0
00007553  6574 652E 
00007557  00        
                    11701   @md_165:
00007558  0D0A 4C6F 11702          dc.b      13,10,76,111,110,103,32,87,111,114,100,32,82
0000755C  6E67 2057 
00007560  6F72 6420 
00007564  52        
00007565  6561 6420 11703          dc.b      101,97,100,32,99,111,109,112,108,101,116,101
00007569  636F 6D70 
0000756D  6C65 7465 
00007571  2E00      11704          dc.b      46,0
                    11705   @md_166:
00007574  4445 312D 11706          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00007578  3638 6B20 
0000757C  4275 6720 
00007580  5631      
00007582  2E37 3700 11707          dc.b      46,55,55,0
                    11708   @md_167:
00007586  436F 7079 11709          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000758A  7269 6768 
0000758E  7420 2843 
00007592  2920 504A 11710          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00007596  2044 6176 
0000759A  6965 7320 
0000759E  3230      
000075A0  3136 00   11711          dc.b      49,54,0
                    11712   @md_168:
000075A4  0D0A 5275 11713          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000075A8  6E6E 696E 
000075AC  672E 2E2E 
000075B0  2E        
000075B1  2E00      11714          dc.b      46,0
                    11715   @md_169:
000075B4  5275 6E6E 11716          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000075B8  696E 672E 
000075BC  2E2E 2E2E 
000075C0  00        
                    11717   @md_170:
000075C2  4279 3A20 11718          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000075C6  504A 2044 
000075CA  6176 6965 
000075CE  73        
000075CF  00        11719          dc.b      0
                    11720   @md_171:
000075D0  0D0A 2573 11721          dc.b      13,10,37,115,0
000075D4  00        
                    11722   @md_172:
000075D6  2E42 2000 11723          dc.b      46,66,32,0
                    11724   @md_173:
000075DA  2E57 2000 11725          dc.b      46,87,32,0
                    11726   @md_174:
000075DE  2E4C 2000 11727          dc.b      46,76,32,0
                    11728   @md_175:
000075E2  2324 2558 11729          dc.b      35,36,37,88,0
000075E6  00        
                    11730   @md_176:
000075E8  2800      11731          dc.b      40,0
                    11732   @md_177:
000075EA  2900      11733          dc.b      41,0
                    11734   @md_178:
000075EC  292B 00   11735          dc.b      41,43,0
                    11736   @md_179:
000075F0  2D28 00   11737          dc.b      45,40,0
                    11738   @md_180:
000075F4  2564 2841 11739          dc.b      37,100,40,65,37,100,41,0
000075F8  2564 2900 
                    11740   @md_181:
000075FC  2564 2841 11741          dc.b      37,100,40,65,37,100,44,0
00007600  2564 2C00 
                    11742   @md_182:
00007604  4400      11743          dc.b      68,0
                    11744   @md_183:
00007606  4100      11745          dc.b      65,0
                    11746   @md_184:
00007608  2564 00   11747          dc.b      37,100,0
                    11748   @md_185:
0000760C  2E57 2900 11749          dc.b      46,87,41,0
                    11750   @md_186:
00007610  2E4C 2900 11751          dc.b      46,76,41,0
                    11752   @md_187:
00007614  2425 5800 11753          dc.b      36,37,88,0
                    11754   @md_188:
00007618  2564 2850 11755          dc.b      37,100,40,80,67,41,0
0000761C  4329 00   
                    11756   @md_189:
00007620  2564 2850 11757          dc.b      37,100,40,80,67,44,0
00007624  432C 00   
                    11758   @md_190:
00007628  2C00      11759          dc.b      44,0
                    11760   @md_191:
0000762A  4343 00   11761          dc.b      67,67,0
                    11762   @md_192:
0000762E  4353 00   11763          dc.b      67,83,0
                    11764   @md_193:
00007632  4551 00   11765          dc.b      69,81,0
                    11766   @md_194:
00007636  4745 00   11767          dc.b      71,69,0
                    11768   @md_195:
0000763A  4754 00   11769          dc.b      71,84,0
                    11770   @md_196:
0000763E  4849 00   11771          dc.b      72,73,0
                    11772   @md_197:
00007642  4C45 00   11773          dc.b      76,69,0
                    11774   @md_198:
00007646  4C53 00   11775          dc.b      76,83,0
                    11776   @md_199:
0000764A  4C54 00   11777          dc.b      76,84,0
                    11778   @md_200:
0000764E  4D49 00   11779          dc.b      77,73,0
                    11780   @md_201:
00007652  4E45 00   11781          dc.b      78,69,0
                    11782   @md_202:
00007656  504C 00   11783          dc.b      80,76,0
                    11784   @md_203:
0000765A  5653 00   11785          dc.b      86,83,0
                    11786   @md_204:
0000765E  5643 00   11787          dc.b      86,67,0
                    11788   @md_205:
00007662  5241 00   11789          dc.b      82,65,0
                    11790   @md_206:
00007666  5352 00   11791          dc.b      83,82,0
                    11792   @md_207:
0000766A  556E 6B6E 11793          dc.b      85,110,107,110,111,119,110,0
0000766E  6F77 6E00 
                    11794   @md_208:
00007672  4142 4344 11795          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00007676  2044 2564 
0000767A  2C44 2564 
0000767E  00        
                    11796   @md_209:
00007680  4142 4344 11797          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007684  202D 2841 
00007688  2564 292C 
0000768C  2D28 41   
0000768F  2564 2900 11798          dc.b      37,100,41,0
                    11799   @md_210:
00007694  4144 4441 11800          dc.b      65,68,68,65,46,87,32,0
00007698  2E57 2000 
                    11801   @md_211:
0000769C  4144 4441 11802          dc.b      65,68,68,65,46,76,32,0
000076A0  2E4C 2000 
                    11803   @md_212:
000076A4  2C41 2558 11804          dc.b      44,65,37,88,0
000076A8  00        
                    11805   @md_213:
000076AA  4144 4400 11806          dc.b      65,68,68,0
                    11807   @md_214:
000076AE  4144 4449 11808          dc.b      65,68,68,73,0
000076B2  00        
                    11809   @md_215:
000076B4  414E 4449 11810          dc.b      65,78,68,73,0
000076B8  00        
                    11811   @md_216:
000076BA  434D 5049 11812          dc.b      67,77,80,73,0
000076BE  00        
                    11813   @md_217:
000076C0  454F 5249 11814          dc.b      69,79,82,73,0
000076C4  00        
                    11815   @md_218:
000076C6  4F52 4900 11816          dc.b      79,82,73,0
                    11817   @md_219:
000076CA  5355 4249 11818          dc.b      83,85,66,73,0
000076CE  00        
                    11819   @md_220:
000076D0  414E 4449 11820          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
000076D4  2023 2425 
000076D8  582C 5352 
000076DC  00        
                    11821   @md_221:
000076DE  4144 4451 11822          dc.b      65,68,68,81,0
000076E2  00        
                    11823   @md_222:
000076E4  2325 3158 11824          dc.b      35,37,49,88,44,0
000076E8  2C00      
                    11825   @md_223:
000076EA  4144 4458 11826          dc.b      65,68,68,88,0
000076EE  00        
                    11827   @md_224:
000076F0  4425 582C 11828          dc.b      68,37,88,44,68,37,88,0
000076F4  4425 5800 
                    11829   @md_225:
000076F8  2D28 4125 11830          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
000076FC  5829 2C2D 
00007700  2841 2558 
00007704  2900      
                    11831   @md_226:
00007706  414E 4400 11832          dc.b      65,78,68,0
                    11833   @md_227:
0000770A  414E 4449 11834          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
0000770E  2023 2425 
00007712  3258 2C43 
00007716  4352 00   
                    11835   @md_228:
0000771A  4153 4C00 11836          dc.b      65,83,76,0
                    11837   @md_229:
0000771E  4153 5200 11838          dc.b      65,83,82,0
                    11839   @md_230:
00007722  4C53 4C00 11840          dc.b      76,83,76,0
                    11841   @md_231:
00007726  4C53 5200 11842          dc.b      76,83,82,0
                    11843   @md_232:
0000772A  524F 4C00 11844          dc.b      82,79,76,0
                    11845   @md_233:
0000772E  524F 5200 11846          dc.b      82,79,82,0
                    11847   @md_234:
00007732  524F 584C 11848          dc.b      82,79,88,76,0
00007736  00        
                    11849   @md_235:
00007738  524F 5852 11850          dc.b      82,79,88,82,0
0000773C  00        
                    11851   @md_236:
0000773E  2324 2558 11852          dc.b      35,36,37,88,44,68,37,88,0
00007742  2C44 2558 
00007746  00        
                    11853   @md_237:
00007748  4200      11854          dc.b      66,0
                    11855   @md_238:
0000774A  4243 4847 11856          dc.b      66,67,72,71,32,0
0000774E  2000      
                    11857   @md_239:
00007750  4425 642C 11858          dc.b      68,37,100,44,0
00007754  00        
                    11859   @md_240:
00007756  2324 2558 11860          dc.b      35,36,37,88,44,0
0000775A  2C00      
                    11861   @md_241:
0000775C  4243 4C52 11862          dc.b      66,67,76,82,32,0
00007760  2000      
                    11863   @md_242:
00007762  4253 4554 11864          dc.b      66,83,69,84,32,0
00007766  2000      
                    11865   @md_243:
00007768  4254 5354 11866          dc.b      66,84,83,84,32,0
0000776C  2000      
                    11867   @md_244:
0000776E  4348 4B20 11868          dc.b      67,72,75,32,0
00007772  00        
                    11869   @md_245:
00007774  2C44 2564 11870          dc.b      44,68,37,100,0
00007778  00        
                    11871   @md_246:
0000777A  434C 5200 11872          dc.b      67,76,82,0
                    11873   @md_247:
0000777E  434D 5041 11874          dc.b      67,77,80,65,46,87,32,0
00007782  2E57 2000 
                    11875   @md_248:
00007786  434D 5041 11876          dc.b      67,77,80,65,46,76,32,0
0000778A  2E4C 2000 
                    11877   @md_249:
0000778E  2C41 2564 11878          dc.b      44,65,37,100,0
00007792  00        
                    11879   @md_250:
00007794  434D 5000 11880          dc.b      67,77,80,0
                    11881   @md_251:
00007798  434D 504D 11882          dc.b      67,77,80,77,0
0000779C  00        
                    11883   @md_252:
0000779E  2841 2564 11884          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
000077A2  292B 2C28 
000077A6  4125 6429 
000077AA  2B00      
                    11885   @md_253:
000077AC  4442 00   11886          dc.b      68,66,0
                    11887   @md_254:
000077B0  4425 642C 11888          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
000077B4  252B 6428 
000077B8  5043 2920 
000077BC  746F      
000077BE  2041 6464 11889          dc.b      32,65,100,100,114,58,36,37,88,0
000077C2  723A 2425 
000077C6  5800      
                    11890   @md_255:
000077C8  4449 5653 11891          dc.b      68,73,86,83,32,0
000077CC  2000      
                    11892   @md_256:
000077CE  4449 5655 11893          dc.b      68,73,86,85,32,0
000077D2  2000      
                    11894   @md_257:
000077D4  454F 5200 11895          dc.b      69,79,82,0
                    11896   @md_258:
000077D8  454F 5249 11897          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
000077DC  2023 2425 
000077E0  3258 2C43 
000077E4  4352 00   
                    11898   @md_259:
000077E8  454F 5249 11899          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
000077EC  2023 2425 
000077F0  582C 5352 
000077F4  00        
                    11900   @md_260:
000077F6  4558 4720 11901          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
000077FA  4425 642C 
000077FE  4425 6400 
                    11902   @md_261:
00007802  4558 4720 11903          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
00007806  4125 642C 
0000780A  4125 6400 
                    11904   @md_262:
0000780E  4558 4720 11905          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00007812  4425 642C 
00007816  4125 6400 
                    11906   @md_263:
0000781A  4558 5400 11907          dc.b      69,88,84,0
                    11908   @md_264:
0000781E  494C 4C45 11909          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
00007822  4741 4C20 
00007826  2824 3441 
0000782A  4643 29   
0000782D  00        11910          dc.b      0
                    11911   @md_265:
0000782E  4A4D 5020 11912          dc.b      74,77,80,32,0
00007832  00        
                    11913   @md_266:
00007834  4A53 5220 11914          dc.b      74,83,82,32,0
00007838  00        
                    11915   @md_267:
0000783A  4C45 4120 11916          dc.b      76,69,65,32,0
0000783E  00        
                    11917   @md_268:
00007840  4C49 4E4B 11918          dc.b      76,73,78,75,32,0
00007844  2000      
                    11919   @md_269:
00007846  4125 642C 11920          dc.b      65,37,100,44,35,37,100,0
0000784A  2325 6400 
                    11921   @md_270:
0000784E  4D4F 5645 11922          dc.b      77,79,86,69,46,66,32,0
00007852  2E42 2000 
                    11923   @md_271:
00007856  4D4F 5645 11924          dc.b      77,79,86,69,46,76,32,0
0000785A  2E4C 2000 
                    11925   @md_272:
0000785E  4D4F 5645 11926          dc.b      77,79,86,69,46,87,32,0
00007862  2E57 2000 
                    11927   @md_273:
00007866  4D4F 5645 11928          dc.b      77,79,86,69,32,0
0000786A  2000      
                    11929   @md_274:
0000786C  2C43 4352 11930          dc.b      44,67,67,82,0
00007870  00        
                    11931   @md_275:
00007872  4D4F 5645 11932          dc.b      77,79,86,69,32,83,82,44,0
00007876  2053 522C 
0000787A  00        
                    11933   @md_276:
0000787C  2C53 5200 11934          dc.b      44,83,82,0
                    11935   @md_277:
00007880  4D4F 5645 11936          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00007884  2055 5350 
00007888  2C41 2564 
0000788C  00        
                    11937   @md_278:
0000788E  4D4F 5645 11938          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
00007892  2041 2564 
00007896  2C55 5350 
0000789A  00        
                    11939   @md_279:
0000789C  4D4F 5645 11940          dc.b      77,79,86,69,77,0
000078A0  4D00      
                    11941   @md_280:
000078A2  4425 6400 11942          dc.b      68,37,100,0
                    11943   @md_281:
000078A6  2F44 2564 11944          dc.b      47,68,37,100,0
000078AA  00        
                    11945   @md_282:
000078AC  4125 6400 11946          dc.b      65,37,100,0
                    11947   @md_283:
000078B0  2F41 2564 11948          dc.b      47,65,37,100,0
000078B4  00        
                    11949   @md_284:
000078B6  4D4F 5645 11950          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
000078BA  502E 5720 
000078BE  2425 5828 
000078C2  4125 64   
000078C5  292C 4425 11951          dc.b      41,44,68,37,100,0
000078C9  6400      
                    11952   @md_285:
000078CC  4D4F 5645 11953          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
000078D0  502E 4C20 
000078D4  2425 5828 
000078D8  4125 64   
000078DB  292C 4425 11954          dc.b      41,44,68,37,100,0
000078DF  6400      
                    11955   @md_286:
000078E2  4D4F 5645 11956          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
000078E6  502E 5720 
000078EA  4425 642C 
000078EE  2425 58   
000078F1  2841 2564 11957          dc.b      40,65,37,100,41,0
000078F5  2900      
                    11958   @md_287:
000078F8  4D4F 5645 11959          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
000078FC  502E 4C20 
00007900  4425 642C 
00007904  2425 58   
00007907  2841 2564 11960          dc.b      40,65,37,100,41,0
0000790B  2900      
                    11961   @md_288:
0000790E  4D4F 5645 11962          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00007912  5120 2324 
00007916  2558 2C44 
0000791A  2564 00   
                    11963   @md_289:
0000791E  4D55 4C53 11964          dc.b      77,85,76,83,32,0
00007922  2000      
                    11965   @md_290:
00007924  4D55 4C55 11966          dc.b      77,85,76,85,32,0
00007928  2000      
                    11967   @md_291:
0000792A  4E42 4344 11968          dc.b      78,66,67,68,32,0
0000792E  2000      
                    11969   @md_292:
00007930  4E45 4700 11970          dc.b      78,69,71,0
                    11971   @md_293:
00007934  4E45 4758 11972          dc.b      78,69,71,88,0
00007938  00        
                    11973   @md_294:
0000793A  4E4F 5000 11974          dc.b      78,79,80,0
                    11975   @md_295:
0000793E  4E4F 5400 11976          dc.b      78,79,84,0
                    11977   @md_296:
00007942  4F52 00   11978          dc.b      79,82,0
                    11979   @md_297:
00007946  4F52 4920 11980          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
0000794A  2324 2532 
0000794E  582C 4343 
00007952  5200      
                    11981   @md_298:
00007954  4F52 4920 11982          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
00007958  2023 2425 
0000795C  582C 5352 
00007960  00        
                    11983   @md_299:
00007962  5045 4120 11984          dc.b      80,69,65,32,0
00007966  00        
                    11985   @md_300:
00007968  5245 5345 11986          dc.b      82,69,83,69,84,0
0000796C  5400      
                    11987   @md_301:
0000796E  5254 4500 11988          dc.b      82,84,69,0
                    11989   @md_302:
00007972  5254 5200 11990          dc.b      82,84,82,0
                    11991   @md_303:
00007976  5254 5300 11992          dc.b      82,84,83,0
                    11993   @md_304:
0000797A  5354 4F50 11994          dc.b      83,84,79,80,32,35,36,37,88,0
0000797E  2023 2425 
00007982  5800      
                    11995   @md_305:
00007984  5342 4344 11996          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
00007988  2044 2564 
0000798C  2C44 2564 
00007990  00        
                    11997   @md_306:
00007992  5342 4344 11998          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007996  202D 2841 
0000799A  2564 292C 
0000799E  2D28 41   
000079A1  2564 2900 11999          dc.b      37,100,41,0
                    12000   @md_307:
000079A6  5300      12001          dc.b      83,0
                    12002   @md_308:
000079A8  5355 4241 12003          dc.b      83,85,66,65,46,87,32,0
000079AC  2E57 2000 
                    12004   @md_309:
000079B0  5355 4241 12005          dc.b      83,85,66,65,46,76,32,0
000079B4  2E4C 2000 
                    12006   @md_310:
000079B8  5355 4200 12007          dc.b      83,85,66,0
                    12008   @md_311:
000079BC  5355 4251 12009          dc.b      83,85,66,81,0
000079C0  00        
                    12010   @md_312:
000079C2  5355 4258 12011          dc.b      83,85,66,88,0
000079C6  00        
                    12012   @md_313:
000079C8  4425 3158 12013          dc.b      68,37,49,88,44,68,37,49,88,0
000079CC  2C44 2531 
000079D0  5800      
                    12014   @md_314:
000079D2  2D28 4125 12015          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
000079D6  3158 292C 
000079DA  2D28 4125 
000079DE  3158 29   
000079E1  00        12016          dc.b      0
                    12017   @md_315:
000079E2  5357 4150 12018          dc.b      83,87,65,80,32,68,37,100,0
000079E6  2044 2564 
000079EA  00        
                    12019   @md_316:
000079EC  5441 5320 12020          dc.b      84,65,83,32,0
000079F0  00        
                    12021   @md_317:
000079F2  5452 4150 12022          dc.b      84,82,65,80,32,35,37,100,0
000079F6  2023 2564 
000079FA  00        
                    12023   @md_318:
000079FC  5452 4150 12024          dc.b      84,82,65,80,86,0
00007A00  5600      
                    12025   @md_319:
00007A02  5453 5400 12026          dc.b      84,83,84,0
                    12027   @md_320:
00007A06  554E 4C4B 12028          dc.b      85,78,76,75,32,65,37,100,0
00007A0A  2041 2564 
00007A0E  00        
                    12029          section   data
00007A10            12030                   align
          0000 7A10 12031   DataStart       equ       *
                    12032   
                    12033   *********************************************************************************************************
                    12034   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    12035   * to ram as part of the CStart routine in this file
                    12036   *********************************************************************************************************
                    12037   
                    12038   @itoa_1:
00007A10  2D32 3134 12039          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00007A14  3734 3833 
00007A18  3634 3800 
                    12040          section   bss
00007A1C            12041                   align
          0000 7A1C 12042   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    12043   
                    12044   *********************************************************************************************************
                    12045   * Section for Uninitialised Data held in ROM as constants
                    12046   *********************************************************************************************************
                    12047   
08030000            12048                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 12049   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    12050   
                    12051   
08030000            12052   bss             org       bss
                    12053   
                    12054   *********************************************************************************************************
                    12055   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    12056   * install the exception handler using the C function InstallExceptionHandler()
                    12057   *********************************************************************************************************
                    12058   
                    12059   
                    12060   
08030000            12061   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            12062   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            12063   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            12064   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            12065   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            12066   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            12067   VCheck           ds.l    1      ditto
0803001C            12068   VTrapV           ds.l    1      ditto
08030020            12069   VPrivilege       ds.l    1      ditto
08030024            12070   VTrace           ds.l    1
08030028            12071   VLine1010emul    ds.l    1
0803002C            12072   VLine1111emul    ds.l    1
08030030            12073   VUnassigned1     ds.l    1
08030034            12074   VUnassigned2     ds.l    1
08030038            12075   VUnassigned3     ds.l    1
0803003C            12076   VUninit_IRQ      ds.l    1
08030040            12077   VUnassigned4     ds.l    1
08030044            12078   VUnassigned5     ds.l    1
08030048            12079   VUnassigned6     ds.l    1
0803004C            12080   VUnassigned7     ds.l    1
08030050            12081   VUnassigned8     ds.l    1
08030054            12082   VUnassigned9     ds.l    1
08030058            12083   VUnassigned10    ds.l    1
0803005C            12084   VUnassigned11    ds.l    1
08030060            12085   VSpuriousIRQ     ds.l    1
                    12086   
                    12087   * Interrupt handlers Vector 25-31
08030064            12088   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            12089   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            12090   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            12091   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            12092   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            12093   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            12094   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12095   
                    12096   * Trap Handler vectors 32-47
08030080            12097   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            12098   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            12099   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            12100   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            12101   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            12102   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            12103   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            12104   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            12105   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            12106   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            12107   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            12108   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            12109   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            12110   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            12111   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            12112   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12113   
                    12114   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    12115   
                    12116   ***********************************************************************************************************
                    12117   * Other Variables
                    12118   ***********************************************************************************************************
                    12119   *__DebugA5       ds.l    1
                    12120   *__UserA5        ds.l    1
                    12121   
                    12122   ***********************************************************************************************************
080300C0            12123   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            12124   __allocp:       ds.l    0       ; start of allocation units
080300C4            12125   __heap:         ds.l    0       ; pointers for malloc functions
                    12126   
                    12127   *__himem:       ds.l    himem            ; highest memory location + 1
                    12128   *__stklen:      ds.l    stklen           ; default stack size
                    12129   
                    12130   *********************************************************************************************************
                    12131   * Section for Heap
                    12132   *********************************************************************************************************
                    12133   
                    12134   _i:
080300C4            12135          ds.b      4
                    12136   _x:
080300C8            12137          ds.b      4
                    12138   _y:
080300CC            12139          ds.b      4
                    12140   _z:
080300D0            12141          ds.b      4
                    12142   _PortA_Count:
080300D4            12143          ds.b      4
                    12144   _Trace:
080300D8            12145          ds.b      4
                    12146   _GoFlag:
080300DC            12147          ds.b      4
                    12148   _Echo:
080300E0            12149          ds.b      4
                    12150   _d0:
080300E4            12151          ds.b      4
                    12152   _d1:
080300E8            12153          ds.b      4
                    12154   _d2:
080300EC            12155          ds.b      4
                    12156   _d3:
080300F0            12157          ds.b      4
                    12158   _d4:
080300F4            12159          ds.b      4
                    12160   _d5:
080300F8            12161          ds.b      4
                    12162   _d6:
080300FC            12163          ds.b      4
                    12164   _d7:
08030100            12165          ds.b      4
                    12166   _a0:
08030104            12167          ds.b      4
                    12168   _a1:
08030108            12169          ds.b      4
                    12170   _a2:
0803010C            12171          ds.b      4
                    12172   _a3:
08030110            12173          ds.b      4
                    12174   _a4:
08030114            12175          ds.b      4
                    12176   _a5:
08030118            12177          ds.b      4
                    12178   _a6:
0803011C            12179          ds.b      4
                    12180   _PC:
08030120            12181          ds.b      4
                    12182   _SSP:
08030124            12183          ds.b      4
                    12184   _USP:
08030128            12185          ds.b      4
                    12186   _SR:
0803012C            12187          ds.b      2
                    12188   _BreakPointAddress:
0803012E            12189          ds.b      32
                    12190   _BreakPointInstruction:
0803014E            12191          ds.b      16
                    12192   _BreakPointSetOrCleared:
0803015E            12193          ds.b      32
                    12194   _InstructionSize:
0803017E            12195          ds.b      4
                    12196   _WatchPointAddress:
08030182            12197          ds.b      32
                    12198   _WatchPointSetOrCleared:
080301A2            12199          ds.b      32
                    12200   _WatchPointString:
080301C2            12201          ds.b      800
                    12202   _Instruction:
080304E2            12203          ds.b      100
                    12204   _TempString:
08030546            12205          ds.b      100
                    12206          section   heap
080305AA            12207                   align
          0803 05AA 12208   bssEnd          equ *                   end of storage space for unitialised variables
                    12209   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05AA 12210   heap   equ       *
080305AA            12211                    align
          0000 0000

Assembly errors: 0
