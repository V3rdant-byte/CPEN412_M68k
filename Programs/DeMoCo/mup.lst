680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Jan 2024      Time: 10:38:29          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\MUP.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  125C      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  001C      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  1244      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  1248      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  1278 0800 
08000034  124C      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  03C2      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\MUPDE1.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <string.h>
                      47   ; #include <ctype.h>
                      48   ; //IMPORTANT
                      49   ; //
                      50   ; // Uncomment one of the two #defines below
                      51   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                      52   ; // 0B000000 for running programs from dram
                      53   ; //
                      54   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      55   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      56   ; // building
                      57   ; //
                      58   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      59   ; // is based around Dram so #define accordingly before building
                      60   ; #define StartOfExceptionVectorTable 0x08030000
                      61   ; //#define StartOfExceptionVectorTable 0x0B000000
                      62   ; /**********************************************************************************************
                      63   ; **	Parallel port addresses
                      64   ; **********************************************************************************************/
                      65   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      66   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      67   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      68   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      69   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      70   ; /*********************************************************************************************
                      71   ; **	Hex 7 seg displays port addresses
                      72   ; *********************************************************************************************/
                      73   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      74   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      75   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      76   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      77   ; /**********************************************************************************************
                      78   ; **	LCD display port addresses
                      79   ; **********************************************************************************************/
                      80   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      81   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      82   ; /********************************************************************************************
                      83   ; **	Timer Port addresses
                      84   ; *********************************************************************************************/
                      85   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      86   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      87   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      88   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      89   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      90   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      91   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      92   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      93   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      94   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      95   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      96   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      97   ; /*********************************************************************************************
                      98   ; **	RS232 port addresses
                      99   ; *********************************************************************************************/
                     100   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     101   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     102   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     103   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     104   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     105   ; /*********************************************************************************************
                     106   ; **	PIA 1 and 2 port addresses
                     107   ; *********************************************************************************************/
                     108   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     109   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     110   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     111   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     112   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     113   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     114   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     115   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     116   ; /*********************************************************************************************************************************
                     117   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     118   ; (( it's a limitation of the compiler
                     119   ; (( YOU HAVE BEEN WARNED
                     120   ; *********************************************************************************************************************************/
                     121   ; unsigned int i, x, y, z, PortA_Count;
                     122   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     123   ; /*******************************************************************************************
                     124   ; ** Function Prototypes
                     125   ; *******************************************************************************************/
                     126   ; void Wait1ms(void);
                     127   ; void Wait3ms(void);
                     128   ; void Init_LCD(void) ;
                     129   ; void LCDOutchar(int c);
                     130   ; void LCDOutMess(char *theMessage);
                     131   ; void LCDClearln(void);
                     132   ; void LCDline1Message(char *theMessage);
                     133   ; void LCDline2Message(char *theMessage);
                     134   ; int sprintf(char *out, const char *format, ...) ;
                     135   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     136   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     137   ; void FlushKeyboard(void)
                     138   ; {
                     139   _FlushKeyboard:
0800003E  4E56 FFFC  140          link      A6,#-4
                     141   ; char c ;
                     142   ; while(1)    {
                     143   FlushKeyboard_1:
                     144   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
08000042  1039 0040  145          move.b    4194368,D0
08000046  0040      
08000048  C03C 0001  146          and.b     #1,D0
0800004C  0C00 0001  147          cmp.b     #1,D0
08000050  6610       148          bne.s     FlushKeyboard_4
                     149   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
08000052  1039 0040  150          move.b    4194370,D0
08000056  0042      
08000058  C03C 007F  151          and.b     #127,D0
0800005C  1D40 FFFF  152          move.b    D0,-1(A6)
08000060  6002       153          bra.s     FlushKeyboard_5
                     154   FlushKeyboard_4:
                     155   ; else
                     156   ; return ;
08000062  6002       157          bra.s     FlushKeyboard_6
                     158   FlushKeyboard_5:
08000064  60DC       159          bra       FlushKeyboard_1
                     160   FlushKeyboard_6:
08000066  4E5E       161          unlk      A6
08000068  4E75       162          rts
                     163   ; }
                     164   ; }
                     165   ; char xtod(int c)
                     166   ; {
                     167   _xtod:
0800006A  4E56 0000  168          link      A6,#0
0800006E  2F02       169          move.l    D2,-(A7)
08000070  242E 0008  170          move.l    8(A6),D2
                     171   ; if ((char)(c) <= (char)('9'))
08000074  0C02 0039  172          cmp.b     #57,D2
08000078  6E08       173          bgt.s     xtod_1
                     174   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0800007A  1002       175          move.b    D2,D0
0800007C  0400 0030  176          sub.b     #48,D0
08000080  6014       177          bra.s     xtod_3
                     178   xtod_1:
                     179   ; else if((char)(c) > (char)('F'))    // assume lower case
08000082  0C02 0046  180          cmp.b     #70,D2
08000086  6F08       181          ble.s     xtod_4
                     182   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
08000088  1002       183          move.b    D2,D0
0800008A  0400 0057  184          sub.b     #87,D0
0800008E  6006       185          bra.s     xtod_3
                     186   xtod_4:
                     187   ; else
                     188   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
08000090  1002       189          move.b    D2,D0
08000092  0400 0037  190          sub.b     #55,D0
                     191   xtod_3:
08000096  241F       192          move.l    (A7)+,D2
08000098  4E5E       193          unlk      A6
0800009A  4E75       194          rts
                     195   ; }
                     196   ; int Get2HexDigits(char *CheckSumPtr)
                     197   ; {
                     198   _Get2HexDigits:
0800009C  4E56 0000  199          link      A6,#0
080000A0  2F02       200          move.l    D2,-(A7)
                     201   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
080000A2  2F00       202          move.l    D0,-(A7)
080000A4  4EB9 0800  203          jsr       __getch
080000A8  02A6      
080000AA  2200       204          move.l    D0,D1
080000AC  201F       205          move.l    (A7)+,D0
080000AE  2F01       206          move.l    D1,-(A7)
080000B0  4EB9 0800  207          jsr       _xtod
080000B4  006A      
080000B6  584F       208          addq.w    #4,A7
080000B8  C0BC 0000  209          and.l     #255,D0
080000BC  00FF      
080000BE  E980       210          asl.l     #4,D0
080000C0  2F00       211          move.l    D0,-(A7)
080000C2  2F01       212          move.l    D1,-(A7)
080000C4  4EB9 0800  213          jsr       __getch
080000C8  02A6      
080000CA  221F       214          move.l    (A7)+,D1
080000CC  2F00       215          move.l    D0,-(A7)
080000CE  4EB9 0800  216          jsr       _xtod
080000D2  006A      
080000D4  584F       217          addq.w    #4,A7
080000D6  2200       218          move.l    D0,D1
080000D8  201F       219          move.l    (A7)+,D0
080000DA  C2BC 0000  220          and.l     #255,D1
080000DE  00FF      
080000E0  8081       221          or.l      D1,D0
080000E2  2400       222          move.l    D0,D2
                     223   ; if(CheckSumPtr)
080000E4  4AAE 0008  224          tst.l     8(A6)
080000E8  6706       225          beq.s     Get2HexDigits_1
                     226   ; *CheckSumPtr += i ;
080000EA  206E 0008  227          move.l    8(A6),A0
080000EE  D510       228          add.b     D2,(A0)
                     229   Get2HexDigits_1:
                     230   ; return i ;
080000F0  2002       231          move.l    D2,D0
080000F2  241F       232          move.l    (A7)+,D2
080000F4  4E5E       233          unlk      A6
080000F6  4E75       234          rts
                     235   ; }
                     236   ; int Get4HexDigits(char *CheckSumPtr)
                     237   ; {
                     238   _Get4HexDigits:
080000F8  4E56 0000  239          link      A6,#0
                     240   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000FC  2F2E 0008  241          move.l    8(A6),-(A7)
08000100  4EB9 0800  242          jsr       _Get2HexDigits
08000104  009C      
08000106  584F       243          addq.w    #4,A7
08000108  E180       244          asl.l     #8,D0
0800010A  2F00       245          move.l    D0,-(A7)
0800010C  2F2E 0008  246          move.l    8(A6),-(A7)
08000110  4EB9 0800  247          jsr       _Get2HexDigits
08000114  009C      
08000116  584F       248          addq.w    #4,A7
08000118  2200       249          move.l    D0,D1
0800011A  201F       250          move.l    (A7)+,D0
0800011C  8081       251          or.l      D1,D0
0800011E  4E5E       252          unlk      A6
08000120  4E75       253          rts
                     254   ; }
                     255   ; int Get6HexDigits(char *CheckSumPtr)
                     256   ; {
                     257   _Get6HexDigits:
08000122  4E56 0000  258          link      A6,#0
                     259   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
08000126  2F2E 0008  260          move.l    8(A6),-(A7)
0800012A  4EB9 0800  261          jsr       _Get4HexDigits
0800012E  00F8      
08000130  584F       262          addq.w    #4,A7
08000132  E180       263          asl.l     #8,D0
08000134  2F00       264          move.l    D0,-(A7)
08000136  2F2E 0008  265          move.l    8(A6),-(A7)
0800013A  4EB9 0800  266          jsr       _Get2HexDigits
0800013E  009C      
08000140  584F       267          addq.w    #4,A7
08000142  2200       268          move.l    D0,D1
08000144  201F       269          move.l    (A7)+,D0
08000146  8081       270          or.l      D1,D0
08000148  4E5E       271          unlk      A6
0800014A  4E75       272          rts
                     273   ; }
                     274   ; int Get8HexDigits(char *CheckSumPtr)
                     275   ; {
                     276   _Get8HexDigits:
0800014C  4E56 0000  277          link      A6,#0
                     278   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
08000150  2F2E 0008  279          move.l    8(A6),-(A7)
08000154  4EB9 0800  280          jsr       _Get4HexDigits
08000158  00F8      
0800015A  584F       281          addq.w    #4,A7
0800015C  E180       282          asl.l     #8,D0
0800015E  E180       283          asl.l     #8,D0
08000160  2F00       284          move.l    D0,-(A7)
08000162  2F2E 0008  285          move.l    8(A6),-(A7)
08000166  4EB9 0800  286          jsr       _Get4HexDigits
0800016A  00F8      
0800016C  584F       287          addq.w    #4,A7
0800016E  2200       288          move.l    D0,D1
08000170  201F       289          move.l    (A7)+,D0
08000172  8081       290          or.l      D1,D0
08000174  4E5E       291          unlk      A6
08000176  4E75       292          rts
                     293   ; }
                     294   ; /*****************************************************************************************
                     295   ; **	Interrupt service routine for Timers
                     296   ; **
                     297   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     298   ; **  out which timer is producing the interrupt
                     299   ; **
                     300   ; *****************************************************************************************/
                     301   ; void Timer_ISR()
                     302   ; {
                     303   _Timer_ISR:
                     304   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
08000178  1039 0040  305          move.b    4194354,D0
0800017C  0032      
0800017E  0C00 0001  306          cmp.b     #1,D0
08000182  661A       307          bne.s     Timer_ISR_1
                     308   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000184  13FC 0003  309          move.b    #3,4194354
08000188  0040 0032 
                     310   ; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
0800018C  1039 0800  311          move.b    _Timer1Count.L,D0
08000190  1270      
08000192  5239 0800  312          addq.b    #1,_Timer1Count.L
08000196  1270      
08000198  13C0 0040  313          move.b    D0,4194304
0800019C  0000      
                     314   Timer_ISR_1:
                     315   ; }
                     316   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
0800019E  1039 0040  317          move.b    4194358,D0
080001A2  0036      
080001A4  0C00 0001  318          cmp.b     #1,D0
080001A8  661A       319          bne.s     Timer_ISR_3
                     320   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001AA  13FC 0003  321          move.b    #3,4194358
080001AE  0040 0036 
                     322   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
080001B2  1039 0800  323          move.b    _Timer2Count.L,D0
080001B6  1272      
080001B8  5239 0800  324          addq.b    #1,_Timer2Count.L
080001BC  1272      
080001BE  13C0 0040  325          move.b    D0,4194308
080001C2  0004      
                     326   Timer_ISR_3:
                     327   ; }
                     328   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
080001C4  1039 0040  329          move.b    4194362,D0
080001C8  003A      
080001CA  0C00 0001  330          cmp.b     #1,D0
080001CE  661A       331          bne.s     Timer_ISR_5
                     332   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001D0  13FC 0003  333          move.b    #3,4194362
080001D4  0040 003A 
                     334   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
080001D8  1039 0800  335          move.b    _Timer3Count.L,D0
080001DC  1274      
080001DE  5239 0800  336          addq.b    #1,_Timer3Count.L
080001E2  1274      
080001E4  13C0 0040  337          move.b    D0,4194320
080001E8  0010      
                     338   Timer_ISR_5:
                     339   ; }
                     340   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
080001EA  1039 0040  341          move.b    4194366,D0
080001EE  003E      
080001F0  0C00 0001  342          cmp.b     #1,D0
080001F4  661A       343          bne.s     Timer_ISR_7
                     344   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001F6  13FC 0003  345          move.b    #3,4194366
080001FA  0040 003E 
                     346   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
080001FE  1039 0800  347          move.b    _Timer4Count.L,D0
08000202  1276      
08000204  5239 0800  348          addq.b    #1,_Timer4Count.L
08000208  1276      
0800020A  13C0 0040  349          move.b    D0,4194322
0800020E  0012      
                     350   Timer_ISR_7:
08000210  4E75       351          rts
                     352   ; }
                     353   ; }
                     354   ; /*****************************************************************************************
                     355   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     356   ; **  Add your code here to poll Status register and clear interrupt
                     357   ; *****************************************************************************************/
                     358   ; void ACIA_ISR()
                     359   ; {}
                     360   _ACIA_ISR:
08000212  4E75       361          rts
                     362   ; /***************************************************************************************
                     363   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     364   ; **  Add your code here to poll Status register and clear interrupt
                     365   ; *****************************************************************************************/
                     366   ; void PIA_ISR()
                     367   ; {}
                     368   _PIA_ISR:
08000214  4E75       369          rts
                     370   ; /***********************************************************************************
                     371   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     372   ; ************************************************************************************/
                     373   ; void Key2PressISR()
                     374   ; {}
                     375   _Key2PressISR:
08000216  4E75       376          rts
                     377   ; /***********************************************************************************
                     378   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     379   ; ************************************************************************************/
                     380   ; void Key1PressISR()
                     381   ; {}
                     382   _Key1PressISR:
08000218  4E75       383          rts
                     384   ; /************************************************************************************
                     385   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     386   ; ************************************************************************************/
                     387   ; void Wait1ms(void)
                     388   ; {
                     389   _Wait1ms:
0800021A  2F02       390          move.l    D2,-(A7)
                     391   ; int  i ;
                     392   ; for(i = 0; i < 1000; i ++)
0800021C  4282       393          clr.l     D2
                     394   Wait1ms_1:
0800021E  0C82 0000  395          cmp.l     #1000,D2
08000222  03E8      
08000224  6C04       396          bge.s     Wait1ms_3
08000226  5282       397          addq.l    #1,D2
08000228  60F4       398          bra       Wait1ms_1
                     399   Wait1ms_3:
0800022A  241F       400          move.l    (A7)+,D2
0800022C  4E75       401          rts
                     402   ; ;
                     403   ; }
                     404   ; /************************************************************************************
                     405   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     406   ; **************************************************************************************/
                     407   ; void Wait3ms(void)
                     408   ; {
                     409   _Wait3ms:
0800022E  2F02       410          move.l    D2,-(A7)
                     411   ; int i ;
                     412   ; for(i = 0; i < 3; i++)
08000230  4282       413          clr.l     D2
                     414   Wait3ms_1:
08000232  0C82 0000  415          cmp.l     #3,D2
08000236  0003      
08000238  6C0A       416          bge.s     Wait3ms_3
                     417   ; Wait1ms() ;
0800023A  4EB9 0800  418          jsr       _Wait1ms
0800023E  021A      
08000240  5282       419          addq.l    #1,D2
08000242  60EE       420          bra       Wait3ms_1
                     421   Wait3ms_3:
08000244  241F       422          move.l    (A7)+,D2
08000246  4E75       423          rts
                     424   ; }
                     425   ; /*********************************************************************************************
                     426   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     427   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     428   ; *********************************************************************************************/
                     429   ; void Init_LCD(void)
                     430   ; {
                     431   _Init_LCD:
                     432   ; LCDcommand = 0x0c ;
08000248  13FC 000C  433          move.b    #12,4194336
0800024C  0040 0020 
                     434   ; Wait3ms() ;
08000250  4EB9 0800  435          jsr       _Wait3ms
08000254  022E      
                     436   ; LCDcommand = 0x38 ;
08000256  13FC 0038  437          move.b    #56,4194336
0800025A  0040 0020 
                     438   ; Wait3ms() ;
0800025E  4EB9 0800  439          jsr       _Wait3ms
08000262  022E      
08000264  4E75       440          rts
                     441   ; }
                     442   ; /*********************************************************************************************
                     443   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     444   ; *********************************************************************************************/
                     445   ; void Init_RS232(void)
                     446   ; {
                     447   _Init_RS232:
                     448   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
08000266  13FC 0015  449          move.b    #21,4194368
0800026A  0040 0040 
                     450   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
0800026E  13FC 0001  451          move.b    #1,4194372
08000272  0040 0044 
08000276  4E75       452          rts
                     453   ; }
                     454   ; /*********************************************************************************************************
                     455   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     456   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     457   ; **  to allow the board to communicate with HyperTerminal Program
                     458   ; **
                     459   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     460   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     461   ; **  call _putch() also
                     462   ; *********************************************************************************************************/
                     463   ; int _putch( int c)
                     464   ; {
                     465   __putch:
08000278  4E56 0000  466          link      A6,#0
                     467   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     468   _putch_1:
0800027C  1039 0040  469          move.b    4194368,D0
08000280  0040      
08000282  C03C 0002  470          and.b     #2,D0
08000286  0C00 0002  471          cmp.b     #2,D0
0800028A  6702       472          beq.s     _putch_3
0800028C  60EE       473          bra       _putch_1
                     474   _putch_3:
                     475   ; ;
                     476   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
0800028E  202E 0008  477          move.l    8(A6),D0
08000292  C0BC 0000  478          and.l     #127,D0
08000296  007F      
08000298  13C0 0040  479          move.b    D0,4194370
0800029C  0042      
                     480   ; return c ;                                              // putchar() expects the character to be returned
0800029E  202E 0008  481          move.l    8(A6),D0
080002A2  4E5E       482          unlk      A6
080002A4  4E75       483          rts
                     484   ; }
                     485   ; /*********************************************************************************************************
                     486   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     487   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     488   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     489   ; **
                     490   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     491   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     492   ; **  call _getch() also
                     493   ; *********************************************************************************************************/
                     494   ; int _getch( void )
                     495   ; {
                     496   __getch:
080002A6  4E56 FFFC  497          link      A6,#-4
                     498   ; char c ;
                     499   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     500   _getch_1:
080002AA  1039 0040  501          move.b    4194368,D0
080002AE  0040      
080002B0  C03C 0001  502          and.b     #1,D0
080002B4  0C00 0001  503          cmp.b     #1,D0
080002B8  6702       504          beq.s     _getch_3
080002BA  60EE       505          bra       _getch_1
                     506   _getch_3:
                     507   ; ;
                     508   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
080002BC  1039 0040  509          move.b    4194370,D0
080002C0  0042      
080002C2  C0BC 0000  510          and.l     #255,D0
080002C6  00FF      
080002C8  C0BC 0000  511          and.l     #127,D0
080002CC  007F      
080002CE  4E5E       512          unlk      A6
080002D0  4E75       513          rts
                     514   ; }
                     515   ; /******************************************************************************
                     516   ; **  Subroutine to output a single character to the 2 row LCD display
                     517   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     518   ; **  current cursor position
                     519   ; *******************************************************************************/
                     520   ; void LCDOutchar(int c)
                     521   ; {
                     522   _LCDOutchar:
080002D2  4E56 0000  523          link      A6,#0
                     524   ; LCDdata = (char)(c);
080002D6  202E 0008  525          move.l    8(A6),D0
080002DA  13C0 0040  526          move.b    D0,4194338
080002DE  0022      
                     527   ; Wait1ms() ;
080002E0  4EB9 0800  528          jsr       _Wait1ms
080002E4  021A      
080002E6  4E5E       529          unlk      A6
080002E8  4E75       530          rts
                     531   ; }
                     532   ; /**********************************************************************************
                     533   ; *subroutine to output a message at the current cursor position of the LCD display
                     534   ; ************************************************************************************/
                     535   ; void LCDOutMessage(char *theMessage)
                     536   ; {
                     537   _LCDOutMessage:
080002EA  4E56 FFFC  538          link      A6,#-4
                     539   ; char c ;
                     540   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     541   LCDOutMessage_1:
080002EE  206E 0008  542          move.l    8(A6),A0
080002F2  52AE 0008  543          addq.l    #1,8(A6)
080002F6  1D50 FFFF  544          move.b    (A0),-1(A6)
080002FA  1010       545          move.b    (A0),D0
080002FC  6714       546          beq.s     LCDOutMessage_3
                     547   ; LCDOutchar(c) ;
080002FE  122E FFFF  548          move.b    -1(A6),D1
08000302  4881       549          ext.w     D1
08000304  48C1       550          ext.l     D1
08000306  2F01       551          move.l    D1,-(A7)
08000308  4EB9 0800  552          jsr       _LCDOutchar
0800030C  02D2      
0800030E  584F       553          addq.w    #4,A7
08000310  60DC       554          bra       LCDOutMessage_1
                     555   LCDOutMessage_3:
08000312  4E5E       556          unlk      A6
08000314  4E75       557          rts
                     558   ; }
                     559   ; /******************************************************************************
                     560   ; *subroutine to clear the line by issuing 24 space characters
                     561   ; *******************************************************************************/
                     562   ; void LCDClearln(void)
                     563   ; {
                     564   _LCDClearln:
08000316  2F02       565          move.l    D2,-(A7)
                     566   ; int i ;
                     567   ; for(i = 0; i < 24; i ++)
08000318  4282       568          clr.l     D2
                     569   LCDClearln_1:
0800031A  0C82 0000  570          cmp.l     #24,D2
0800031E  0018      
08000320  6C10       571          bge.s     LCDClearln_3
                     572   ; LCDOutchar(' ') ;       // write a space char to the LCD display
08000322  4878 0020  573          pea       32
08000326  4EB9 0800  574          jsr       _LCDOutchar
0800032A  02D2      
0800032C  584F       575          addq.w    #4,A7
0800032E  5282       576          addq.l    #1,D2
08000330  60E8       577          bra       LCDClearln_1
                     578   LCDClearln_3:
08000332  241F       579          move.l    (A7)+,D2
08000334  4E75       580          rts
                     581   ; }
                     582   ; /******************************************************************************
                     583   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     584   ; *******************************************************************************/
                     585   ; void LCDLine1Message(char *theMessage)
                     586   ; {
                     587   _LCDLine1Message:
08000336  4E56 0000  588          link      A6,#0
                     589   ; LCDcommand = 0x80 ;
0800033A  13FC 0080  590          move.b    #128,4194336
0800033E  0040 0020 
                     591   ; Wait3ms();
08000342  4EB9 0800  592          jsr       _Wait3ms
08000346  022E      
                     593   ; LCDClearln() ;
08000348  4EB9 0800  594          jsr       _LCDClearln
0800034C  0316      
                     595   ; LCDcommand = 0x80 ;
0800034E  13FC 0080  596          move.b    #128,4194336
08000352  0040 0020 
                     597   ; Wait3ms() ;
08000356  4EB9 0800  598          jsr       _Wait3ms
0800035A  022E      
                     599   ; LCDOutMessage(theMessage) ;
0800035C  2F2E 0008  600          move.l    8(A6),-(A7)
08000360  4EB9 0800  601          jsr       _LCDOutMessage
08000364  02EA      
08000366  584F       602          addq.w    #4,A7
08000368  4E5E       603          unlk      A6
0800036A  4E75       604          rts
                     605   ; }
                     606   ; /******************************************************************************
                     607   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     608   ; *******************************************************************************/
                     609   ; void LCDLine2Message(char *theMessage)
                     610   ; {
                     611   _LCDLine2Message:
0800036C  4E56 0000  612          link      A6,#0
                     613   ; LCDcommand = 0xC0 ;
08000370  13FC 00C0  614          move.b    #192,4194336
08000374  0040 0020 
                     615   ; Wait3ms();
08000378  4EB9 0800  616          jsr       _Wait3ms
0800037C  022E      
                     617   ; LCDClearln() ;
0800037E  4EB9 0800  618          jsr       _LCDClearln
08000382  0316      
                     619   ; LCDcommand = 0xC0 ;
08000384  13FC 00C0  620          move.b    #192,4194336
08000388  0040 0020 
                     621   ; Wait3ms() ;
0800038C  4EB9 0800  622          jsr       _Wait3ms
08000390  022E      
                     623   ; LCDOutMessage(theMessage) ;
08000392  2F2E 0008  624          move.l    8(A6),-(A7)
08000396  4EB9 0800  625          jsr       _LCDOutMessage
0800039A  02EA      
0800039C  584F       626          addq.w    #4,A7
0800039E  4E5E       627          unlk      A6
080003A0  4E75       628          rts
                     629   ; }
                     630   ; /*********************************************************************************************************************************
                     631   ; **  IMPORTANT FUNCTION
                     632   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                     633   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                     634   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                     635   ; **  Calling this function allows you to deal with Interrupts for example
                     636   ; ***********************************************************************************************************************************/
                     637   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     638   ; {
                     639   _InstallExceptionHandler:
080003A2  4E56 FFFC  640          link      A6,#-4
                     641   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
080003A6  2D7C 0803  642          move.l    #134414336,-4(A6)
080003AA  0000 FFFC 
                     643   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
080003AE  206E FFFC  644          move.l    -4(A6),A0
080003B2  202E 000C  645          move.l    12(A6),D0
080003B6  E588       646          lsl.l     #2,D0
080003B8  21AE 0008  647          move.l    8(A6),0(A0,D0.L)
080003BC  0800      
080003BE  4E5E       648          unlk      A6
080003C0  4E75       649          rts
                     650   ; }
                     651   ; /******************************************************************************************************************************
                     652   ; * Start of user program
                     653   ; ******************************************************************************************************************************/
                     654   ; void main()
                     655   ; {
                     656   _main:
080003C2  4E56 FFFC  657          link      A6,#-4
080003C6  48E7 3E20  658          movem.l   D2/D3/D4/D5/D6/A2,-(A7)
080003CA  45F9 0800  659          lea       _printf.L,A2
080003CE  05DC      
                     660   ; //     unsigned int row, i=0, count=0, counter1=1;
                     661   ; //     char c, text[150] ;
                     662   ; unsigned int start ;
                     663   ; unsigned int end ;
                     664   ; char input_char;
                     665   ; unsigned long int data;
                     666   ; unsigned long int write_data;
                     667   ; unsigned long long int *ramptr;
                     668   ; // 	int PassFailFlag = 1 ;
                     669   ; //     i = x = y = z = PortA_Count =0;
                     670   ; //     Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
                     671   ; // InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
                     672   ; // InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
                     673   ; // InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
                     674   ; // InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
                     675   ; // InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
                     676   ; //     Timer1Data = 0x10;		// program time delay into timers 1-4
                     677   ; //     Timer2Data = 0x20;
                     678   ; //     Timer3Data = 0x15;
                     679   ; //     Timer4Data = 0x25;
                     680   ; //     Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
                     681   ; //     Timer2Control = 3;
                     682   ; //     Timer3Control = 3;
                     683   ; //     Timer4Control = 3;
                     684   ; //     Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
                     685   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
080003D0  4EB9 0800  686          jsr       _Init_RS232
080003D4  0266      
                     687   ; // /*************************************************************************************************
                     688   ; // **  Test of scanf function
                     689   ; // *************************************************************************************************/
                     690   ; //     scanflush() ;                       // flush any text that may have been typed ahead
                     691   ; //     printf("\r\nEnter Integer: ") ;
                     692   ; //     scanf("%d", &i) ;
                     693   ; //     printf("You entered %d", i) ;
                     694   ; //     sprintf(text, "Hello CPEN 412 Student") ;
                     695   ; //     LCDLine1Message(text) ;
                     696   ; //     printf("\r\nHello CPEN 412 Student\r\nYour LEDs should be Flashing") ;
                     697   ; //     printf("\r\nYour LCD should be displaying") ;
                     698   ; //     // address input
                     699   ; //     // word and long input should be aligned to even addresses
                     700   ; do{
                     701   main_1:
                     702   ; printf("\r\nstart Address from 0x08020000 to 0x08030000): ");
080003D6  4879 0800  703          pea       @mupde1_1.L
080003DA  104C      
080003DC  4E92       704          jsr       (A2)
080003DE  584F       705          addq.w    #4,A7
                     706   ; start = Get8HexDigits(0);
080003E0  42A7       707          clr.l     -(A7)
080003E2  4EB9 0800  708          jsr       _Get8HexDigits
080003E6  014C      
080003E8  584F       709          addq.w    #4,A7
080003EA  2A00       710          move.l    D0,D5
080003EC  0C85 0802  711          cmp.l     #134348800,D5
080003F0  0000      
080003F2  65E2       712          blo       main_1
080003F4  0C85 0803  713          cmp.l     #134414336,D5
080003F8  0000      
080003FA  62DA       714          bhi       main_1
                     715   ; } while (0x08020000 > start || 0x08030000 < start);
                     716   ; do{
                     717   main_3:
                     718   ; printf("\r\nend Address from 0x08020000 to 0x08030000): ");
080003FC  4879 0800  719          pea       @mupde1_2.L
08000400  107E      
08000402  4E92       720          jsr       (A2)
08000404  584F       721          addq.w    #4,A7
                     722   ; end = Get8HexDigits(0);
08000406  42A7       723          clr.l     -(A7)
08000408  4EB9 0800  724          jsr       _Get8HexDigits
0800040C  014C      
0800040E  584F       725          addq.w    #4,A7
08000410  2C00       726          move.l    D0,D6
08000412  BA86       727          cmp.l     D6,D5
08000414  62E6       728          bhi       main_3
08000416  0C86 0803  729          cmp.l     #134414336,D6
0800041A  0000      
0800041C  62DE       730          bhi       main_3
                     731   ; } while (start > end || end > 0x08030000);
                     732   ; // test data pattern
                     733   ; while(1){
                     734   main_5:
                     735   ; FlushKeyboard();
0800041E  4EB9 0800  736          jsr       _FlushKeyboard
08000422  003E      
                     737   ; printf("\r\nChoose test pattern: \r\na: 55\r\nb: AA\r\nc: FF\r\nd: 00");
08000424  4879 0800  738          pea       @mupde1_3.L
08000428  10AE      
0800042A  4E92       739          jsr       (A2)
0800042C  584F       740          addq.w    #4,A7
                     741   ; printf("\r\n#");
0800042E  4879 0800  742          pea       @mupde1_4.L
08000432  10E2      
08000434  4E92       743          jsr       (A2)
08000436  584F       744          addq.w    #4,A7
                     745   ; input_char = toupper(_getch());
08000438  2F00       746          move.l    D0,-(A7)
0800043A  4EB9 0800  747          jsr       __getch
0800043E  02A6      
08000440  2200       748          move.l    D0,D1
08000442  201F       749          move.l    (A7)+,D0
08000444  2F01       750          move.l    D1,-(A7)
08000446  4EB9 0800  751          jsr       _toupper
0800044A  05B0      
0800044C  584F       752          addq.w    #4,A7
0800044E  1800       753          move.b    D0,D4
                     754   ; if(input_char == 'a'){
08000450  0C04 0061  755          cmp.b     #97,D4
08000454  6612       756          bne.s     main_8
                     757   ; data = 0x55;
08000456  7455       758          moveq     #85,D2
                     759   ; printf("\r\nData: 0x%x", data);
08000458  2F02       760          move.l    D2,-(A7)
0800045A  4879 0800  761          pea       @mupde1_5.L
0800045E  10E6      
08000460  4E92       762          jsr       (A2)
08000462  504F       763          addq.w    #8,A7
                     764   ; break;
08000464  6000 0052  765          bra       main_7
                     766   main_8:
                     767   ; }
                     768   ; else if(input_char == 'b'){
08000468  0C04 0062  769          cmp.b     #98,D4
0800046C  6616       770          bne.s     main_10
                     771   ; data = 0xAA;
0800046E  243C 0000  772          move.l    #170,D2
08000472  00AA      
                     773   ; printf("\r\nData: 0x%x", data);
08000474  2F02       774          move.l    D2,-(A7)
08000476  4879 0800  775          pea       @mupde1_6.L
0800047A  10F4      
0800047C  4E92       776          jsr       (A2)
0800047E  504F       777          addq.w    #8,A7
                     778   ; break;
08000480  6000 0036  779          bra       main_7
                     780   main_10:
                     781   ; }
                     782   ; else if(input_char == 'c'){
08000484  0C04 0063  783          cmp.b     #99,D4
08000488  6614       784          bne.s     main_12
                     785   ; data = 0xFF;
0800048A  243C 0000  786          move.l    #255,D2
0800048E  00FF      
                     787   ; printf("\r\nData: 0x%x", data);
08000490  2F02       788          move.l    D2,-(A7)
08000492  4879 0800  789          pea       @mupde1_7.L
08000496  1102      
08000498  4E92       790          jsr       (A2)
0800049A  504F       791          addq.w    #8,A7
                     792   ; break;
0800049C  601A       793          bra.s     main_7
                     794   main_12:
                     795   ; }
                     796   ; else if(input_char == 'd'){
0800049E  0C04 0064  797          cmp.b     #100,D4
080004A2  6610       798          bne.s     main_14
                     799   ; data = 0x00;
080004A4  4282       800          clr.l     D2
                     801   ; printf("\r\nData: 0x%x", data);
080004A6  2F02       802          move.l    D2,-(A7)
080004A8  4879 0800  803          pea       @mupde1_8.L
080004AC  1110      
080004AE  4E92       804          jsr       (A2)
080004B0  504F       805          addq.w    #8,A7
                     806   ; break;
080004B2  6004       807          bra.s     main_7
                     808   main_14:
080004B4  6000 FF68  809          bra       main_5
                     810   main_7:
                     811   ; }
                     812   ; }
                     813   ; // test data size selection
                     814   ; while(1)    {
                     815   main_16:
                     816   ; FlushKeyboard();
080004B8  4EB9 0800  817          jsr       _FlushKeyboard
080004BC  003E      
                     818   ; printf("\r\nEnter 'B', for bytes, 'W' for words, or 'L' for long words: ");
080004BE  4879 0800  819          pea       @mupde1_9.L
080004C2  111E      
080004C4  4E92       820          jsr       (A2)
080004C6  584F       821          addq.w    #4,A7
                     822   ; printf("\r\n#");
080004C8  4879 0800  823          pea       @mupde1_10.L
080004CC  115E      
080004CE  4E92       824          jsr       (A2)
080004D0  584F       825          addq.w    #4,A7
                     826   ; input_char = toupper(_getch());
080004D2  2F00       827          move.l    D0,-(A7)
080004D4  4EB9 0800  828          jsr       __getch
080004D8  02A6      
080004DA  2200       829          move.l    D0,D1
080004DC  201F       830          move.l    (A7)+,D0
080004DE  2F01       831          move.l    D1,-(A7)
080004E0  4EB9 0800  832          jsr       _toupper
080004E4  05B0      
080004E6  584F       833          addq.w    #4,A7
080004E8  1800       834          move.b    D0,D4
                     835   ; if(input_char == 'B'){
080004EA  0C04 0042  836          cmp.b     #66,D4
080004EE  660E       837          bne.s     main_19
                     838   ; printf("\r\nBytes");
080004F0  4879 0800  839          pea       @mupde1_11.L
080004F4  1162      
080004F6  4E92       840          jsr       (A2)
080004F8  584F       841          addq.w    #4,A7
                     842   ; break;
080004FA  6000 0050  843          bra       main_18
                     844   main_19:
                     845   ; }
                     846   ; else if(input_char == 'W'){
080004FE  0C04 0057  847          cmp.b     #87,D4
08000502  6614       848          bne.s     main_21
                     849   ; printf("\r\nWords");
08000504  4879 0800  850          pea       @mupde1_12.L
08000508  116A      
0800050A  4E92       851          jsr       (A2)
0800050C  584F       852          addq.w    #4,A7
                     853   ; data = data | data << 8;
0800050E  2002       854          move.l    D2,D0
08000510  E188       855          lsl.l     #8,D0
08000512  8480       856          or.l      D0,D2
                     857   ; break;
08000514  6000 0036  858          bra       main_18
                     859   main_21:
                     860   ; }
                     861   ; else if(input_char == 'L'){
08000518  0C04 004C  862          cmp.b     #76,D4
0800051C  6600 002A  863          bne       main_23
                     864   ; printf("\r\nLong Words");
08000520  4879 0800  865          pea       @mupde1_13.L
08000524  1172      
08000526  4E92       866          jsr       (A2)
08000528  584F       867          addq.w    #4,A7
                     868   ; data = data | data << 8 | data << 16 | data << 24;
0800052A  2002       869          move.l    D2,D0
0800052C  2202       870          move.l    D2,D1
0800052E  E189       871          lsl.l     #8,D1
08000530  8081       872          or.l      D1,D0
08000532  2202       873          move.l    D2,D1
08000534  E189       874          lsl.l     #8,D1
08000536  E189       875          lsl.l     #8,D1
08000538  8081       876          or.l      D1,D0
0800053A  2202       877          move.l    D2,D1
0800053C  E189       878          lsl.l     #8,D1
0800053E  E189       879          lsl.l     #8,D1
08000540  E189       880          lsl.l     #8,D1
08000542  8081       881          or.l      D1,D0
08000544  2400       882          move.l    D0,D2
                     883   ; break;
08000546  6004       884          bra.s     main_18
                     885   main_23:
08000548  6000 FF6E  886          bra       main_16
                     887   main_18:
                     888   ; }
                     889   ; }
                     890   ; // start writing
                     891   ; // unsigned int counter = 0x900;
                     892   ; ramptr = start;
0800054C  2605       893          move.l    D5,D3
                     894   ; while(1){
                     895   main_25:
                     896   ; if (ramptr > end){
0800054E  B686       897          cmp.l     D6,D3
08000550  630C       898          bls.s     main_28
                     899   ; printf("\r\nWrite Finished. Read starts.");
08000552  4879 0800  900          pea       @mupde1_14.L
08000556  1180      
08000558  4E92       901          jsr       (A2)
0800055A  584F       902          addq.w    #4,A7
                     903   ; break;
0800055C  6008       904          bra.s     main_27
                     905   main_28:
                     906   ; }
                     907   ; *ramptr = data;
0800055E  2043       908          move.l    D3,A0
08000560  2082       909          move.l    D2,(A0)
                     910   ; // counter++;
                     911   ; // Dont check every time, just check some time incl first time
                     912   ; // if (counter == 0x901){
                     913   ; //     printf("\r\nWrite: 0x%x to addr 0x%x", *ramptr, ramptr);
                     914   ; //     counter = 1;
                     915   ; // }
                     916   ; // Increment address
                     917   ; ramptr++;
08000562  5883       918          addq.l    #4,D3
08000564  60E8       919          bra       main_25
                     920   main_27:
                     921   ; }
                     922   ; // start reading
                     923   ; ramptr = start;
08000566  2605       924          move.l    D5,D3
                     925   ; // Reset counter to default
                     926   ; // counter = 0x900;
                     927   ; // Read loop
                     928   ; while(1){
                     929   main_30:
                     930   ; // When end addr is reached
                     931   ; if (ramptr > end){
08000568  B686       932          cmp.l     D6,D3
0800056A  6318       933          bls.s     main_33
                     934   ; printf("\r\nRead complete.");
0800056C  4879 0800  935          pea       @mupde1_15.L
08000570  11A0      
08000572  4E92       936          jsr       (A2)
08000574  584F       937          addq.w    #4,A7
                     938   ; printf("\r\nPASS: Mem test completed with no errors.");
08000576  4879 0800  939          pea       @mupde1_16.L
0800057A  11B2      
0800057C  4E92       940          jsr       (A2)
0800057E  584F       941          addq.w    #4,A7
                     942   ; break;
08000580  6000 002C  943          bra       main_32
                     944   main_33:
                     945   ; }
                     946   ; // Read check every address to specified data by user
                     947   ; if (*ramptr != data){
08000584  2043       948          move.l    D3,A0
08000586  B490       949          cmp.l     (A0),D2
08000588  6720       950          beq.s     main_35
                     951   ; printf("\r\nERROR: Address 0x%x data is 0x%x but should be 0x%x", ramptr, *ramptr, data);
0800058A  2F02       952          move.l    D2,-(A7)
0800058C  2043       953          move.l    D3,A0
0800058E  2F10       954          move.l    (A0),-(A7)
08000590  2F03       955          move.l    D3,-(A7)
08000592  4879 0800  956          pea       @mupde1_17.L
08000596  11DE      
08000598  4E92       957          jsr       (A2)
0800059A  DEFC 0010  958          add.w     #16,A7
                     959   ; printf("\r\nFAIL: Mem test did not complete successfully.");
0800059E  4879 0800  960          pea       @mupde1_18.L
080005A2  1214      
080005A4  4E92       961          jsr       (A2)
080005A6  584F       962          addq.w    #4,A7
                     963   ; break;
080005A8  6004       964          bra.s     main_32
                     965   main_35:
                     966   ; }
                     967   ; // counter++;
                     968   ; // // Dont check every time, just check some time incl first time
                     969   ; // if (counter == 0x8cc){
                     970   ; //     printf("\r\nRead: Address 0x%x data is 0x%x", ramptr, *ramptr);
                     971   ; //     counter = 1;
                     972   ; // }
                     973   ; ramptr++;
080005AA  5883       974          addq.l    #4,D3
080005AC  60BA       975          bra       main_30
                     976   main_32:
                     977   ; }
                     978   ; while(1)
                     979   main_37:
080005AE  60FE       980          bra       main_37
                     981   ; ;
                     982   ; // programs should NOT exit as there is nothing to Exit TO !!!!!!
                     983   ; // There is no OS - just press the reset button to end program and call debug
                     984   ; }
                     985   _toupper:
080005B0  4E56 0000  986          link      A6,#0
080005B4  48E7 2000  987          movem.l   D2,-(A7)
080005B8  242E 0008  988          move.l    8(A6),D2
080005BC  0C82 0000  989          cmp.l     #97,D2
080005C0  0061      
080005C2  6D0E       990          blt.s     toupper_1
080005C4  0C82 0000  991          cmp.l     #122,D2
080005C8  007A      
080005CA  6E06       992          bgt.s     toupper_1
080005CC  C4BC 0000  993          and.l     #95,D2
080005D0  005F      
                     994   toupper_1:
080005D2  2002       995          move.l    D2,D0
080005D4  4CDF 0004  996          movem.l   (A7)+,D2
080005D8  4E5E       997          unlk      A6
080005DA  4E75       998          rts
                     999   _printf:
080005DC  4E56 FFFC 1000          link      A6,#-4
080005E0  48E7 2000 1001          movem.l   D2,-(A7)
080005E4  41EE 0008 1002          lea       8(A6),A0
080005E8  5848      1003          addq.w    #4,A0
080005EA  2408      1004          move.l    A0,D2
080005EC  2F02      1005          move.l    D2,-(A7)
080005EE  2F2E 0008 1006          move.l    8(A6),-(A7)
080005F2  42A7      1007          clr.l     -(A7)
080005F4  6100 00CA 1008          bsr       _vsprintf
080005F8  DEFC 000C 1009          add.w     #12,A7
080005FC  2D40 FFFC 1010          move.l    D0,-4(A6)
08000600  4282      1011          clr.l     D2
08000602  202E FFFC 1012          move.l    -4(A6),D0
08000606  4CDF 0004 1013          movem.l   (A7)+,D2
0800060A  4E5E      1014          unlk      A6
0800060C  4E75      1015          rts
                    1016   @vsprintf_copy:
0800060E  4E56 0000 1017          link      A6,#0
08000612  206E 0008 1018          move.l    8(A6),A0
08000616  4A90      1019          tst.l     (A0)
08000618  6710      1020          beq.s     @vsprintf_copy_1
0800061A  202E 000C 1021          move.l    12(A6),D0
0800061E  206E 0008 1022          move.l    8(A6),A0
08000622  2250      1023          move.l    (A0),A1
08000624  5290      1024          addq.l    #1,(A0)
08000626  1280      1025          move.b    D0,(A1)
08000628  600A      1026          bra.s     @vsprintf_copy_2
                    1027   @vsprintf_copy_1:
0800062A  2F2E 000C 1028          move.l    12(A6),-(A7)
0800062E  6100 08FE 1029          bsr       _putch
08000632  584F      1030          addq.w    #4,A7
                    1031   @vsprintf_copy_2:
08000634  4E5E      1032          unlk      A6
08000636  4E75      1033          rts
                    1034   @vsprintf_getval:
08000638  4E56 0000 1035          link      A6,#0
0800063C  48E7 3000 1036          movem.l   D2/D3,-(A7)
08000640  242E 0008 1037          move.l    8(A6),D2
08000644  4283      1038          clr.l     D3
08000646  2042      1039          move.l    D2,A0
08000648  2050      1040          move.l    (A0),A0
0800064A  1010      1041          move.b    (A0),D0
0800064C  4880      1042          ext.w     D0
0800064E  48C0      1043          ext.l     D0
08000650  0C80 0000 1044          cmp.l     #42,D0
08000654  002A      
08000656  6612      1045          bne.s     @vsprintf_getval_1
08000658  206E 000C 1046          move.l    12(A6),A0
0800065C  2250      1047          move.l    (A0),A1
0800065E  5890      1048          addq.l    #4,(A0)
08000660  2611      1049          move.l    (A1),D3
08000662  2042      1050          move.l    D2,A0
08000664  5290      1051          addq.l    #1,(A0)
08000666  6000 004E 1052          bra       @vsprintf_getval_5
                    1053   @vsprintf_getval_1:
0800066A  2042      1054          move.l    D2,A0
0800066C  2050      1055          move.l    (A0),A0
0800066E  1010      1056          move.b    (A0),D0
08000670  4880      1057          ext.w     D0
08000672  48C0      1058          ext.l     D0
08000674  0C80 0000 1059          cmp.l     #48,D0
08000678  0030      
0800067A  6D00 003A 1060          blt       @vsprintf_getval_5
0800067E  2042      1061          move.l    D2,A0
08000680  2050      1062          move.l    (A0),A0
08000682  1010      1063          move.b    (A0),D0
08000684  4880      1064          ext.w     D0
08000686  48C0      1065          ext.l     D0
08000688  0C80 0000 1066          cmp.l     #57,D0
0800068C  0039      
0800068E  6E26      1067          bgt.s     @vsprintf_getval_5
08000690  2F03      1068          move.l    D3,-(A7)
08000692  4878 000A 1069          pea       10
08000696  6100 07F6 1070          bsr       LMUL
0800069A  2017      1071          move.l    (A7),D0
0800069C  504F      1072          addq.w    #8,A7
0800069E  2042      1073          move.l    D2,A0
080006A0  2250      1074          move.l    (A0),A1
080006A2  5290      1075          addq.l    #1,(A0)
080006A4  1211      1076          move.b    (A1),D1
080006A6  4881      1077          ext.w     D1
080006A8  48C1      1078          ext.l     D1
080006AA  D081      1079          add.l     D1,D0
080006AC  0480 0000 1080          sub.l     #48,D0
080006B0  0030      
080006B2  2600      1081          move.l    D0,D3
080006B4  60B4      1082          bra       @vsprintf_getval_1
                    1083   @vsprintf_getval_5:
080006B6  2003      1084          move.l    D3,D0
080006B8  4CDF 000C 1085          movem.l   (A7)+,D2/D3
080006BC  4E5E      1086          unlk      A6
080006BE  4E75      1087          rts
                    1088   _vsprintf:
080006C0  4E56 FFCC 1089          link      A6,#-52
080006C4  48E7 3F3C 1090          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
080006C8  45EE 0008 1091          lea       8(A6),A2
080006CC  47F9 0800 1092          lea       @vsprintf_copy,A3
080006D0  060E      
080006D2  49F9 0800 1093          lea       _ultoa,A4
080006D6  0E1A      
080006D8  4286      1094          clr.l     D6
                    1095   vsprintf_1:
080006DA  206E 000C 1096          move.l    12(A6),A0
080006DE  4A10      1097          tst.b     (A0)
080006E0  6700 0624 1098          beq       vsprintf_3
080006E4  206E 000C 1099          move.l    12(A6),A0
080006E8  1010      1100          move.b    (A0),D0
080006EA  4880      1101          ext.w     D0
080006EC  48C0      1102          ext.l     D0
080006EE  0C80 0000 1103          cmp.l     #37,D0
080006F2  0025      
080006F4  671C      1104          beq.s     vsprintf_4
080006F6  206E 000C 1105          move.l    12(A6),A0
080006FA  52AE 000C 1106          addq.l    #1,12(A6)
080006FE  1210      1107          move.b    (A0),D1
08000700  4881      1108          ext.w     D1
08000702  48C1      1109          ext.l     D1
08000704  2F01      1110          move.l    D1,-(A7)
08000706  2F0A      1111          move.l    A2,-(A7)
08000708  4E93      1112          jsr       (A3)
0800070A  504F      1113          addq.w    #8,A7
0800070C  5286      1114          addq.l    #1,D6
0800070E  6000 05F2 1115          bra       vsprintf_2
                    1116   vsprintf_4:
08000712  52AE 000C 1117          addq.l    #1,12(A6)
08000716  422E FFD3 1118          clr.b     -45(A6)
0800071A  422E FFD2 1119          clr.b     -46(A6)
0800071E  422E FFD0 1120          clr.b     -48(A6)
08000722  422E FFCF 1121          clr.b     -49(A6)
08000726  422E FFCE 1122          clr.b     -50(A6)
0800072A  422E FFCD 1123          clr.b     -51(A6)
0800072E  42AE FFFC 1124          clr.l     -4(A6)
08000732  7AFF      1125          moveq     #-1,D5
08000734  41EE FFDC 1126          lea       -36(A6),A0
08000738  2608      1127          move.l    A0,D3
0800073A  2408      1128          move.l    A0,D2
                    1129   vsprintf_6:
0800073C  206E 000C 1130          move.l    12(A6),A0
08000740  1010      1131          move.b    (A0),D0
08000742  4880      1132          ext.w     D0
08000744  48C0      1133          ext.l     D0
08000746  0C80 0000 1134          cmp.l     #43,D0
0800074A  002B      
0800074C  6730      1135          beq.s     vsprintf_12
0800074E  6E18      1136          bgt.s     vsprintf_15
08000750  0C80 0000 1137          cmp.l     #35,D0
08000754  0023      
08000756  6700 003E 1138          beq       vsprintf_14
0800075A  6E00 0046 1139          bgt       vsprintf_9
0800075E  0C80 0000 1140          cmp.l     #32,D0
08000762  0020      
08000764  6724      1141          beq.s     vsprintf_13
08000766  603A      1142          bra.s     vsprintf_9
                    1143   vsprintf_15:
08000768  0C80 0000 1144          cmp.l     #45,D0
0800076C  002D      
0800076E  6702      1145          beq.s     vsprintf_11
08000770  6030      1146          bra.s     vsprintf_9
                    1147   vsprintf_11:
08000772  1D7C 0001 1148          move.b    #1,-51(A6)
08000776  FFCD      
08000778  52AE 000C 1149          addq.l    #1,12(A6)
0800077C  6026      1150          bra.s     vsprintf_7
                    1151   vsprintf_12:
0800077E  1D7C 0001 1152          move.b    #1,-50(A6)
08000782  FFCE      
08000784  52AE 000C 1153          addq.l    #1,12(A6)
08000788  601A      1154          bra.s     vsprintf_7
                    1155   vsprintf_13:
0800078A  1D7C 0001 1156          move.b    #1,-49(A6)
0800078E  FFCF      
08000790  52AE 000C 1157          addq.l    #1,12(A6)
08000794  600E      1158          bra.s     vsprintf_7
                    1159   vsprintf_14:
08000796  1D7C 0001 1160          move.b    #1,-48(A6)
0800079A  FFD0      
0800079C  52AE 000C 1161          addq.l    #1,12(A6)
080007A0  6002      1162          bra.s     vsprintf_7
                    1163   vsprintf_9:
080007A2  6002      1164          bra.s     vsprintf_8
                    1165   vsprintf_7:
080007A4  6096      1166          bra       vsprintf_6
                    1167   vsprintf_8:
080007A6  206E 000C 1168          move.l    12(A6),A0
080007AA  1010      1169          move.b    (A0),D0
080007AC  4880      1170          ext.w     D0
080007AE  48C0      1171          ext.l     D0
080007B0  0C80 0000 1172          cmp.l     #48,D0
080007B4  0030      
080007B6  660A      1173          bne.s     vsprintf_16
080007B8  52AE 000C 1174          addq.l    #1,12(A6)
080007BC  1D7C 0001 1175          move.b    #1,-46(A6)
080007C0  FFD2      
                    1176   vsprintf_16:
080007C2  486E 0010 1177          pea       16(A6)
080007C6  486E 000C 1178          pea       12(A6)
080007CA  6100 FE6C 1179          bsr       @vsprintf_getval
080007CE  504F      1180          addq.w    #8,A7
080007D0  2A40      1181          move.l    D0,A5
080007D2  206E 000C 1182          move.l    12(A6),A0
080007D6  1010      1183          move.b    (A0),D0
080007D8  4880      1184          ext.w     D0
080007DA  48C0      1185          ext.l     D0
080007DC  0C80 0000 1186          cmp.l     #46,D0
080007E0  002E      
080007E2  6614      1187          bne.s     vsprintf_18
080007E4  52AE 000C 1188          addq.l    #1,12(A6)
080007E8  486E 0010 1189          pea       16(A6)
080007EC  486E 000C 1190          pea       12(A6)
080007F0  6100 FE46 1191          bsr       @vsprintf_getval
080007F4  504F      1192          addq.w    #8,A7
080007F6  2A00      1193          move.l    D0,D5
                    1194   vsprintf_18:
080007F8  206E 000C 1195          move.l    12(A6),A0
080007FC  1010      1196          move.b    (A0),D0
080007FE  4880      1197          ext.w     D0
08000800  48C0      1198          ext.l     D0
08000802  0C80 0000 1199          cmp.l     #108,D0
08000806  006C      
08000808  660A      1200          bne.s     vsprintf_20
0800080A  52AE 000C 1201          addq.l    #1,12(A6)
0800080E  1D7C 0001 1202          move.b    #1,-45(A6)
08000812  FFD3      
                    1203   vsprintf_20:
08000814  206E 000C 1204          move.l    12(A6),A0
08000818  1010      1205          move.b    (A0),D0
0800081A  4880      1206          ext.w     D0
0800081C  48C0      1207          ext.l     D0
0800081E  0C80 0000 1208          cmp.l     #111,D0
08000822  006F      
08000824  6700 00D4 1209          beq       vsprintf_27
08000828  6E34      1210          bgt.s     vsprintf_33
0800082A  0C80 0000 1211          cmp.l     #100,D0
0800082E  0064      
08000830  6700 0054 1212          beq       vsprintf_24
08000834  6E1C      1213          bgt.s     vsprintf_34
08000836  0C80 0000 1214          cmp.l     #99,D0
0800083A  0063      
0800083C  6700 012C 1215          beq       vsprintf_30
08000840  6E00 016A 1216          bgt       vsprintf_22
08000844  0C80 0000 1217          cmp.l     #88,D0
08000848  0058      
0800084A  6700 00E6 1218          beq       vsprintf_28
0800084E  6000 015C 1219          bra       vsprintf_22
                    1220   vsprintf_34:
08000852  0C80 0000 1221          cmp.l     #105,D0
08000856  0069      
08000858  672C      1222          beq.s     vsprintf_24
0800085A  6000 0150 1223          bra       vsprintf_22
                    1224   vsprintf_33:
0800085E  0C80 0000 1225          cmp.l     #117,D0
08000862  0075      
08000864  6700 005C 1226          beq       vsprintf_26
08000868  6E0E      1227          bgt.s     vsprintf_35
0800086A  0C80 0000 1228          cmp.l     #115,D0
0800086E  0073      
08000870  6700 011C 1229          beq       vsprintf_31
08000874  6000 0136 1230          bra       vsprintf_22
                    1231   vsprintf_35:
08000878  0C80 0000 1232          cmp.l     #120,D0
0800087C  0078      
0800087E  6700 00B2 1233          beq       vsprintf_28
08000882  6000 0128 1234          bra       vsprintf_22
                    1235   vsprintf_24:
08000886  4A2E FFD3 1236          tst.b     -45(A6)
0800088A  671A      1237          beq.s     vsprintf_36
0800088C  4878 000A 1238          pea       10
08000890  2F03      1239          move.l    D3,-(A7)
08000892  206E 0010 1240          move.l    16(A6),A0
08000896  58AE 0010 1241          addq.l    #4,16(A6)
0800089A  2F10      1242          move.l    (A0),-(A7)
0800089C  6100 04F8 1243          bsr       _ltoa
080008A0  DEFC 000C 1244          add.w     #12,A7
080008A4  6018      1245          bra.s     vsprintf_37
                    1246   vsprintf_36:
080008A6  4878 000A 1247          pea       10
080008AA  2F03      1248          move.l    D3,-(A7)
080008AC  206E 0010 1249          move.l    16(A6),A0
080008B0  58AE 0010 1250          addq.l    #4,16(A6)
080008B4  2F10      1251          move.l    (A0),-(A7)
080008B6  6100 04DE 1252          bsr       _ltoa
080008BA  DEFC 000C 1253          add.w     #12,A7
                    1254   vsprintf_37:
080008BE  6000 00FA 1255          bra       vsprintf_23
                    1256   vsprintf_26:
080008C2  4A2E FFD3 1257          tst.b     -45(A6)
080008C6  6718      1258          beq.s     vsprintf_38
080008C8  4878 000A 1259          pea       10
080008CC  2F03      1260          move.l    D3,-(A7)
080008CE  206E 0010 1261          move.l    16(A6),A0
080008D2  58AE 0010 1262          addq.l    #4,16(A6)
080008D6  2F10      1263          move.l    (A0),-(A7)
080008D8  4E94      1264          jsr       (A4)
080008DA  DEFC 000C 1265          add.w     #12,A7
080008DE  6016      1266          bra.s     vsprintf_39
                    1267   vsprintf_38:
080008E0  4878 000A 1268          pea       10
080008E4  2F03      1269          move.l    D3,-(A7)
080008E6  206E 0010 1270          move.l    16(A6),A0
080008EA  58AE 0010 1271          addq.l    #4,16(A6)
080008EE  2F10      1272          move.l    (A0),-(A7)
080008F0  4E94      1273          jsr       (A4)
080008F2  DEFC 000C 1274          add.w     #12,A7
                    1275   vsprintf_39:
080008F6  6000 00C2 1276          bra       vsprintf_23
                    1277   vsprintf_27:
080008FA  4A2E FFD3 1278          tst.b     -45(A6)
080008FE  6718      1279          beq.s     vsprintf_40
08000900  4878 0008 1280          pea       8
08000904  2F03      1281          move.l    D3,-(A7)
08000906  206E 0010 1282          move.l    16(A6),A0
0800090A  58AE 0010 1283          addq.l    #4,16(A6)
0800090E  2F10      1284          move.l    (A0),-(A7)
08000910  4E94      1285          jsr       (A4)
08000912  DEFC 000C 1286          add.w     #12,A7
08000916  6016      1287          bra.s     vsprintf_41
                    1288   vsprintf_40:
08000918  4878 0008 1289          pea       8
0800091C  2F03      1290          move.l    D3,-(A7)
0800091E  206E 0010 1291          move.l    16(A6),A0
08000922  58AE 0010 1292          addq.l    #4,16(A6)
08000926  2F10      1293          move.l    (A0),-(A7)
08000928  4E94      1294          jsr       (A4)
0800092A  DEFC 000C 1295          add.w     #12,A7
                    1296   vsprintf_41:
0800092E  6000 008A 1297          bra       vsprintf_23
                    1298   vsprintf_28:
08000932  4A2E FFD3 1299          tst.b     -45(A6)
08000936  6718      1300          beq.s     vsprintf_42
08000938  4878 0010 1301          pea       16
0800093C  2F03      1302          move.l    D3,-(A7)
0800093E  206E 0010 1303          move.l    16(A6),A0
08000942  58AE 0010 1304          addq.l    #4,16(A6)
08000946  2F10      1305          move.l    (A0),-(A7)
08000948  4E94      1306          jsr       (A4)
0800094A  DEFC 000C 1307          add.w     #12,A7
0800094E  6016      1308          bra.s     vsprintf_43
                    1309   vsprintf_42:
08000950  4878 0010 1310          pea       16
08000954  2F03      1311          move.l    D3,-(A7)
08000956  206E 0010 1312          move.l    16(A6),A0
0800095A  58AE 0010 1313          addq.l    #4,16(A6)
0800095E  2F10      1314          move.l    (A0),-(A7)
08000960  4E94      1315          jsr       (A4)
08000962  DEFC 000C 1316          add.w     #12,A7
                    1317   vsprintf_43:
08000966  6000 0052 1318          bra       vsprintf_23
                    1319   vsprintf_30:
0800096A  206E 0010 1320          move.l    16(A6),A0
0800096E  58AE 0010 1321          addq.l    #4,16(A6)
08000972  2010      1322          move.l    (A0),D0
08000974  2042      1323          move.l    D2,A0
08000976  5282      1324          addq.l    #1,D2
08000978  1080      1325          move.b    D0,(A0)
0800097A  2042      1326          move.l    D2,A0
0800097C  4210      1327          clr.b     (A0)
0800097E  200D      1328          move.l    A5,D0
08000980  6704      1329          beq.s     vsprintf_44
08000982  200D      1330          move.l    A5,D0
08000984  6002      1331          bra.s     vsprintf_45
                    1332   vsprintf_44:
08000986  7001      1333          moveq     #1,D0
                    1334   vsprintf_45:
08000988  2A00      1335          move.l    D0,D5
0800098A  6000 002E 1336          bra       vsprintf_23
                    1337   vsprintf_31:
0800098E  206E 0010 1338          move.l    16(A6),A0
08000992  58AE 0010 1339          addq.l    #4,16(A6)
08000996  2610      1340          move.l    (A0),D3
08000998  0C85 FFFF 1341          cmp.l     #-1,D5
0800099C  FFFF      
0800099E  660A      1342          bne.s     vsprintf_46
080009A0  2F03      1343          move.l    D3,-(A7)
080009A2  6100 0578 1344          bsr       _strlen
080009A6  584F      1345          addq.w    #4,A7
080009A8  2A00      1346          move.l    D0,D5
                    1347   vsprintf_46:
080009AA  600E      1348          bra.s     vsprintf_23
                    1349   vsprintf_22:
080009AC  206E 000C 1350          move.l    12(A6),A0
080009B0  2242      1351          move.l    D2,A1
080009B2  5282      1352          addq.l    #1,D2
080009B4  1290      1353          move.b    (A0),(A1)
080009B6  2042      1354          move.l    D2,A0
080009B8  4210      1355          clr.b     (A0)
                    1356   vsprintf_23:
080009BA  2F03      1357          move.l    D3,-(A7)
080009BC  6100 055E 1358          bsr       _strlen
080009C0  584F      1359          addq.w    #4,A7
080009C2  1800      1360          move.b    D0,D4
080009C4  206E 000C 1361          move.l    12(A6),A0
080009C8  1010      1362          move.b    (A0),D0
080009CA  4880      1363          ext.w     D0
080009CC  48C0      1364          ext.l     D0
080009CE  0C80 0000 1365          cmp.l     #115,D0
080009D2  0073      
080009D4  6618      1366          bne.s     vsprintf_48
080009D6  0C85 0000 1367          cmp.l     #0,D5
080009DA  0000      
080009DC  6D10      1368          blt.s     vsprintf_48
080009DE  4884      1369          ext.w     D4
080009E0  48C4      1370          ext.l     D4
080009E2  B885      1371          cmp.l     D5,D4
080009E4  6F04      1372          ble.s     vsprintf_50
080009E6  1005      1373          move.b    D5,D0
080009E8  6002      1374          bra.s     vsprintf_51
                    1375   vsprintf_50:
080009EA  1004      1376          move.b    D4,D0
                    1377   vsprintf_51:
080009EC  1800      1378          move.b    D0,D4
                    1379   vsprintf_48:
080009EE  206E 000C 1380          move.l    12(A6),A0
080009F2  1010      1381          move.b    (A0),D0
080009F4  4880      1382          ext.w     D0
080009F6  48C0      1383          ext.l     D0
080009F8  0C80 0000 1384          cmp.l     #88,D0
080009FC  0058      
080009FE  6600 0026 1385          bne       vsprintf_56
08000A02  41EE FFDC 1386          lea       -36(A6),A0
08000A06  2408      1387          move.l    A0,D2
                    1388   vsprintf_54:
08000A08  2042      1389          move.l    D2,A0
08000A0A  4A10      1390          tst.b     (A0)
08000A0C  6718      1391          beq.s     vsprintf_56
08000A0E  2042      1392          move.l    D2,A0
08000A10  1210      1393          move.b    (A0),D1
08000A12  4881      1394          ext.w     D1
08000A14  48C1      1395          ext.l     D1
08000A16  2F01      1396          move.l    D1,-(A7)
08000A18  6100 FB96 1397          bsr       _toupper
08000A1C  584F      1398          addq.w    #4,A7
08000A1E  2042      1399          move.l    D2,A0
08000A20  1080      1400          move.b    D0,(A0)
08000A22  5282      1401          addq.l    #1,D2
08000A24  60E2      1402          bra       vsprintf_54
                    1403   vsprintf_56:
08000A26  7E00      1404          moveq     #0,D7
08000A28  41EE FFD4 1405          lea       -44(A6),A0
08000A2C  2408      1406          move.l    A0,D2
08000A2E  206E 000C 1407          move.l    12(A6),A0
08000A32  1010      1408          move.b    (A0),D0
08000A34  4880      1409          ext.w     D0
08000A36  48C0      1410          ext.l     D0
08000A38  0C80 0000 1411          cmp.l     #100,D0
08000A3C  0064      
08000A3E  6714      1412          beq.s     vsprintf_59
08000A40  206E 000C 1413          move.l    12(A6),A0
08000A44  1010      1414          move.b    (A0),D0
08000A46  4880      1415          ext.w     D0
08000A48  48C0      1416          ext.l     D0
08000A4A  0C80 0000 1417          cmp.l     #105,D0
08000A4E  0069      
08000A50  6600 0076 1418          bne       vsprintf_65
                    1419   vsprintf_59:
08000A54  4A2E FFCE 1420          tst.b     -50(A6)
08000A58  6612      1421          bne.s     vsprintf_62
08000A5A  2043      1422          move.l    D3,A0
08000A5C  1010      1423          move.b    (A0),D0
08000A5E  4880      1424          ext.w     D0
08000A60  48C0      1425          ext.l     D0
08000A62  0C80 0000 1426          cmp.l     #45,D0
08000A66  002D      
08000A68  6600 002E 1427          bne       vsprintf_60
                    1428   vsprintf_62:
08000A6C  2043      1429          move.l    D3,A0
08000A6E  1010      1430          move.b    (A0),D0
08000A70  4880      1431          ext.w     D0
08000A72  48C0      1432          ext.l     D0
08000A74  0C80 0000 1433          cmp.l     #45,D0
08000A78  002D      
08000A7A  660E      1434          bne.s     vsprintf_63
08000A7C  2043      1435          move.l    D3,A0
08000A7E  5283      1436          addq.l    #1,D3
08000A80  2242      1437          move.l    D2,A1
08000A82  5282      1438          addq.l    #1,D2
08000A84  1290      1439          move.b    (A0),(A1)
08000A86  5304      1440          subq.b    #1,D4
08000A88  6008      1441          bra.s     vsprintf_64
                    1442   vsprintf_63:
08000A8A  2042      1443          move.l    D2,A0
08000A8C  5282      1444          addq.l    #1,D2
08000A8E  10BC 002B 1445          move.b    #43,(A0)
                    1446   vsprintf_64:
08000A92  5287      1447          addq.l    #1,D7
08000A94  6000 0032 1448          bra       vsprintf_65
                    1449   vsprintf_60:
08000A98  4A2E FFCF 1450          tst.b     -49(A6)
08000A9C  6700 002A 1451          beq       vsprintf_65
08000AA0  2043      1452          move.l    D3,A0
08000AA2  1010      1453          move.b    (A0),D0
08000AA4  4880      1454          ext.w     D0
08000AA6  48C0      1455          ext.l     D0
08000AA8  0C80 0000 1456          cmp.l     #45,D0
08000AAC  002D      
08000AAE  660E      1457          bne.s     vsprintf_67
08000AB0  2043      1458          move.l    D3,A0
08000AB2  5283      1459          addq.l    #1,D3
08000AB4  2242      1460          move.l    D2,A1
08000AB6  5282      1461          addq.l    #1,D2
08000AB8  1290      1462          move.b    (A0),(A1)
08000ABA  5304      1463          subq.b    #1,D4
08000ABC  6008      1464          bra.s     vsprintf_68
                    1465   vsprintf_67:
08000ABE  2042      1466          move.l    D2,A0
08000AC0  5282      1467          addq.l    #1,D2
08000AC2  10BC 0020 1468          move.b    #32,(A0)
                    1469   vsprintf_68:
08000AC6  5287      1470          addq.l    #1,D7
                    1471   vsprintf_65:
08000AC8  4A2E FFD0 1472          tst.b     -48(A6)
08000ACC  6700 0066 1473          beq       vsprintf_77
08000AD0  206E 000C 1474          move.l    12(A6),A0
08000AD4  1010      1475          move.b    (A0),D0
08000AD6  4880      1476          ext.w     D0
08000AD8  48C0      1477          ext.l     D0
08000ADA  0C80 0000 1478          cmp.l     #111,D0
08000ADE  006F      
08000AE0  671A      1479          beq.s     vsprintf_73
08000AE2  6E0C      1480          bgt.s     vsprintf_76
08000AE4  0C80 0000 1481          cmp.l     #88,D0
08000AE8  0058      
08000AEA  6710      1482          beq.s     vsprintf_73
08000AEC  6000 0046 1483          bra       vsprintf_77
                    1484   vsprintf_76:
08000AF0  0C80 0000 1485          cmp.l     #120,D0
08000AF4  0078      
08000AF6  6704      1486          beq.s     vsprintf_73
08000AF8  6000 003A 1487          bra       vsprintf_77
                    1488   vsprintf_73:
08000AFC  2042      1489          move.l    D2,A0
08000AFE  5282      1490          addq.l    #1,D2
08000B00  10BC 0030 1491          move.b    #48,(A0)
08000B04  5287      1492          addq.l    #1,D7
08000B06  206E 000C 1493          move.l    12(A6),A0
08000B0A  1010      1494          move.b    (A0),D0
08000B0C  4880      1495          ext.w     D0
08000B0E  48C0      1496          ext.l     D0
08000B10  0C80 0000 1497          cmp.l     #120,D0
08000B14  0078      
08000B16  6712      1498          beq.s     vsprintf_79
08000B18  206E 000C 1499          move.l    12(A6),A0
08000B1C  1010      1500          move.b    (A0),D0
08000B1E  4880      1501          ext.w     D0
08000B20  48C0      1502          ext.l     D0
08000B22  0C80 0000 1503          cmp.l     #88,D0
08000B26  0058      
08000B28  660A      1504          bne.s     vsprintf_77
                    1505   vsprintf_79:
08000B2A  2042      1506          move.l    D2,A0
08000B2C  5282      1507          addq.l    #1,D2
08000B2E  10BC 0078 1508          move.b    #120,(A0)
08000B32  5287      1509          addq.l    #1,D7
                    1510   vsprintf_77:
08000B34  2042      1511          move.l    D2,A0
08000B36  4210      1512          clr.b     (A0)
08000B38  206E 000C 1513          move.l    12(A6),A0
08000B3C  1010      1514          move.b    (A0),D0
08000B3E  4880      1515          ext.w     D0
08000B40  48C0      1516          ext.l     D0
08000B42  0C80 0000 1517          cmp.l     #105,D0
08000B46  0069      
08000B48  6700 0076 1518          beq       vsprintf_82
08000B4C  6E42      1519          bgt.s     vsprintf_93
08000B4E  0C80 0000 1520          cmp.l     #99,D0
08000B52  0063      
08000B54  6700 0084 1521          beq       vsprintf_96
08000B58  6E1C      1522          bgt.s     vsprintf_94
08000B5A  0C80 0000 1523          cmp.l     #88,D0
08000B5E  0058      
08000B60  6700 005E 1524          beq       vsprintf_82
08000B64  6E00 0184 1525          bgt       vsprintf_80
08000B68  0C80 0000 1526          cmp.l     #69,D0
08000B6C  0045      
08000B6E  6700 0050 1527          beq       vsprintf_82
08000B72  6000 0176 1528          bra       vsprintf_80
                    1529   vsprintf_94:
08000B76  0C80 0000 1530          cmp.l     #101,D0
08000B7A  0065      
08000B7C  6700 0042 1531          beq       vsprintf_82
08000B80  6E00 0168 1532          bgt       vsprintf_80
08000B84  0C80 0000 1533          cmp.l     #100,D0
08000B88  0064      
08000B8A  6734      1534          beq.s     vsprintf_82
08000B8C  6000 015C 1535          bra       vsprintf_80
                    1536   vsprintf_93:
08000B90  0C80 0000 1537          cmp.l     #117,D0
08000B94  0075      
08000B96  6728      1538          beq.s     vsprintf_82
08000B98  6E1A      1539          bgt.s     vsprintf_95
08000B9A  0C80 0000 1540          cmp.l     #115,D0
08000B9E  0073      
08000BA0  6700 0038 1541          beq       vsprintf_96
08000BA4  6E00 0144 1542          bgt       vsprintf_80
08000BA8  0C80 0000 1543          cmp.l     #111,D0
08000BAC  006F      
08000BAE  6710      1544          beq.s     vsprintf_82
08000BB0  6000 0138 1545          bra       vsprintf_80
                    1546   vsprintf_95:
08000BB4  0C80 0000 1547          cmp.l     #120,D0
08000BB8  0078      
08000BBA  6704      1548          beq.s     vsprintf_82
08000BBC  6000 012C 1549          bra       vsprintf_80
                    1550   vsprintf_82:
08000BC0  4A2E FFD2 1551          tst.b     -46(A6)
08000BC4  6714      1552          beq.s     vsprintf_96
08000BC6  4A2E FFCD 1553          tst.b     -51(A6)
08000BCA  660E      1554          bne.s     vsprintf_96
08000BCC  200D      1555          move.l    A5,D0
08000BCE  9087      1556          sub.l     D7,D0
08000BD0  4884      1557          ext.w     D4
08000BD2  48C4      1558          ext.l     D4
08000BD4  9084      1559          sub.l     D4,D0
08000BD6  2D40 FFFC 1560          move.l    D0,-4(A6)
                    1561   vsprintf_96:
08000BDA  202E FFFC 1562          move.l    -4(A6),D0
08000BDE  0C80 0000 1563          cmp.l     #0,D0
08000BE2  0000      
08000BE4  6C04      1564          bge.s     vsprintf_98
08000BE6  42AE FFFC 1565          clr.l     -4(A6)
                    1566   vsprintf_98:
08000BEA  4A2E FFCD 1567          tst.b     -51(A6)
08000BEE  6600 0030 1568          bne       vsprintf_104
08000BF2  4884      1569          ext.w     D4
08000BF4  48C4      1570          ext.l     D4
08000BF6  2004      1571          move.l    D4,D0
08000BF8  D0AE FFFC 1572          add.l     -4(A6),D0
08000BFC  D087      1573          add.l     D7,D0
08000BFE  1D40 FFD1 1574          move.b    D0,-47(A6)
                    1575   vsprintf_102:
08000C02  102E FFD1 1576          move.b    -47(A6),D0
08000C06  4880      1577          ext.w     D0
08000C08  48C0      1578          ext.l     D0
08000C0A  220D      1579          move.l    A5,D1
08000C0C  534D      1580          subq.w    #1,A5
08000C0E  B081      1581          cmp.l     D1,D0
08000C10  6C0E      1582          bge.s     vsprintf_104
08000C12  4878 0020 1583          pea       32
08000C16  2F0A      1584          move.l    A2,-(A7)
08000C18  4E93      1585          jsr       (A3)
08000C1A  504F      1586          addq.w    #8,A7
08000C1C  5286      1587          addq.l    #1,D6
08000C1E  60E2      1588          bra       vsprintf_102
                    1589   vsprintf_104:
08000C20  41EE FFD4 1590          lea       -44(A6),A0
08000C24  2408      1591          move.l    A0,D2
                    1592   vsprintf_105:
08000C26  2042      1593          move.l    D2,A0
08000C28  4A10      1594          tst.b     (A0)
08000C2A  6716      1595          beq.s     vsprintf_107
08000C2C  2042      1596          move.l    D2,A0
08000C2E  5282      1597          addq.l    #1,D2
08000C30  1210      1598          move.b    (A0),D1
08000C32  4881      1599          ext.w     D1
08000C34  48C1      1600          ext.l     D1
08000C36  2F01      1601          move.l    D1,-(A7)
08000C38  2F0A      1602          move.l    A2,-(A7)
08000C3A  4E93      1603          jsr       (A3)
08000C3C  504F      1604          addq.w    #8,A7
08000C3E  5286      1605          addq.l    #1,D6
08000C40  60E4      1606          bra       vsprintf_105
                    1607   vsprintf_107:
08000C42  202E FFFC 1608          move.l    -4(A6),D0
08000C46  1D40 FFD1 1609          move.b    D0,-47(A6)
                    1610   vsprintf_108:
08000C4A  102E FFD1 1611          move.b    -47(A6),D0
08000C4E  532E FFD1 1612          subq.b    #1,-47(A6)
08000C52  4A00      1613          tst.b     D0
08000C54  670E      1614          beq.s     vsprintf_110
08000C56  4878 0030 1615          pea       48
08000C5A  2F0A      1616          move.l    A2,-(A7)
08000C5C  4E93      1617          jsr       (A3)
08000C5E  504F      1618          addq.w    #8,A7
08000C60  5286      1619          addq.l    #1,D6
08000C62  60E6      1620          bra       vsprintf_108
                    1621   vsprintf_110:
08000C64  2043      1622          move.l    D3,A0
08000C66  4A10      1623          tst.b     (A0)
08000C68  6700 0048 1624          beq       vsprintf_113
08000C6C  206E 000C 1625          move.l    12(A6),A0
08000C70  1010      1626          move.b    (A0),D0
08000C72  4880      1627          ext.w     D0
08000C74  48C0      1628          ext.l     D0
08000C76  0C80 0000 1629          cmp.l     #115,D0
08000C7A  0073      
08000C7C  670C      1630          beq.s     vsprintf_116
08000C7E  6E18      1631          bgt.s     vsprintf_119
08000C80  0C80 0000 1632          cmp.l     #99,D0
08000C84  0063      
08000C86  6702      1633          beq.s     vsprintf_116
08000C88  600E      1634          bra.s     vsprintf_119
                    1635   vsprintf_116:
08000C8A  2005      1636          move.l    D5,D0
08000C8C  5385      1637          subq.l    #1,D5
08000C8E  0C80 0000 1638          cmp.l     #0,D0
08000C92  0000      
08000C94  6E02      1639          bgt.s     vsprintf_119
08000C96  6016      1640          bra.s     vsprintf_115
                    1641   vsprintf_119:
08000C98  2043      1642          move.l    D3,A0
08000C9A  5283      1643          addq.l    #1,D3
08000C9C  1210      1644          move.b    (A0),D1
08000C9E  4881      1645          ext.w     D1
08000CA0  48C1      1646          ext.l     D1
08000CA2  2F01      1647          move.l    D1,-(A7)
08000CA4  2F0A      1648          move.l    A2,-(A7)
08000CA6  4E93      1649          jsr       (A3)
08000CA8  504F      1650          addq.w    #8,A7
08000CAA  5286      1651          addq.l    #1,D6
08000CAC  6002      1652          bra.s     vsprintf_112
                    1653   vsprintf_115:
08000CAE  6002      1654          bra.s     vsprintf_113
                    1655   vsprintf_112:
08000CB0  60B2      1656          bra       vsprintf_110
                    1657   vsprintf_113:
08000CB2  4A2E FFCD 1658          tst.b     -51(A6)
08000CB6  6700 0030 1659          beq       vsprintf_125
08000CBA  4884      1660          ext.w     D4
08000CBC  48C4      1661          ext.l     D4
08000CBE  2004      1662          move.l    D4,D0
08000CC0  D0AE FFFC 1663          add.l     -4(A6),D0
08000CC4  D087      1664          add.l     D7,D0
08000CC6  1D40 FFD1 1665          move.b    D0,-47(A6)
                    1666   vsprintf_123:
08000CCA  102E FFD1 1667          move.b    -47(A6),D0
08000CCE  4880      1668          ext.w     D0
08000CD0  48C0      1669          ext.l     D0
08000CD2  220D      1670          move.l    A5,D1
08000CD4  534D      1671          subq.w    #1,A5
08000CD6  B081      1672          cmp.l     D1,D0
08000CD8  6C0E      1673          bge.s     vsprintf_125
08000CDA  4878 0020 1674          pea       32
08000CDE  2F0A      1675          move.l    A2,-(A7)
08000CE0  4E93      1676          jsr       (A3)
08000CE2  504F      1677          addq.w    #8,A7
08000CE4  5386      1678          subq.l    #1,D6
08000CE6  60E2      1679          bra       vsprintf_123
                    1680   vsprintf_125:
08000CE8  6014      1681          bra.s     vsprintf_81
                    1682   vsprintf_80:
08000CEA  206E 000C 1683          move.l    12(A6),A0
08000CEE  1210      1684          move.b    (A0),D1
08000CF0  4881      1685          ext.w     D1
08000CF2  48C1      1686          ext.l     D1
08000CF4  2F01      1687          move.l    D1,-(A7)
08000CF6  2F0A      1688          move.l    A2,-(A7)
08000CF8  4E93      1689          jsr       (A3)
08000CFA  504F      1690          addq.w    #8,A7
08000CFC  5286      1691          addq.l    #1,D6
                    1692   vsprintf_81:
08000CFE  52AE 000C 1693          addq.l    #1,12(A6)
                    1694   vsprintf_2:
08000D02  6000 F9D6 1695          bra       vsprintf_1
                    1696   vsprintf_3:
08000D06  4A92      1697          tst.l     (A2)
08000D08  6710      1698          beq.s     vsprintf_126
08000D0A  4201      1699          clr.b     D1
08000D0C  C2BC 0000 1700          and.l     #255,D1
08000D10  00FF      
08000D12  2F01      1701          move.l    D1,-(A7)
08000D14  2F0A      1702          move.l    A2,-(A7)
08000D16  4E93      1703          jsr       (A3)
08000D18  504F      1704          addq.w    #8,A7
                    1705   vsprintf_126:
08000D1A  2006      1706          move.l    D6,D0
08000D1C  4CDF 3CFC 1707          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000D20  4E5E      1708          unlk      A6
08000D22  4E75      1709          rts
                    1710   @itoa_convert:
08000D24  4E56 0000 1711          link      A6,#0
08000D28  48E7 3C00 1712          movem.l   D2/D3/D4/D5,-(A7)
08000D2C  242E 0008 1713          move.l    8(A6),D2
08000D30  262E 0010 1714          move.l    16(A6),D3
08000D34  2A2E 000C 1715          move.l    12(A6),D5
08000D38  2F05      1716          move.l    D5,-(A7)
08000D3A  2F03      1717          move.l    D3,-(A7)
08000D3C  6100 0230 1718          bsr       ULDIV
08000D40  202F 0004 1719          move.l    4(A7),D0
08000D44  504F      1720          addq.w    #8,A7
08000D46  2800      1721          move.l    D0,D4
08000D48  BA83      1722          cmp.l     D3,D5
08000D4A  651A      1723          blo.s     @itoa_convert_1
08000D4C  2F03      1724          move.l    D3,-(A7)
08000D4E  2F05      1725          move.l    D5,-(A7)
08000D50  2F03      1726          move.l    D3,-(A7)
08000D52  6100 021A 1727          bsr       ULDIV
08000D56  2217      1728          move.l    (A7),D1
08000D58  504F      1729          addq.w    #8,A7
08000D5A  2F01      1730          move.l    D1,-(A7)
08000D5C  2F02      1731          move.l    D2,-(A7)
08000D5E  61C4      1732          bsr       @itoa_convert
08000D60  DEFC 000C 1733          add.w     #12,A7
08000D64  2400      1734          move.l    D0,D2
                    1735   @itoa_convert_1:
08000D66  0C84 0000 1736          cmp.l     #9,D4
08000D6A  0009      
08000D6C  6E0A      1737          bgt.s     @itoa_convert_3
08000D6E  2004      1738          move.l    D4,D0
08000D70  0680 0000 1739          add.l     #48,D0
08000D74  0030      
08000D76  600E      1740          bra.s     @itoa_convert_4
                    1741   @itoa_convert_3:
08000D78  2004      1742          move.l    D4,D0
08000D7A  0680 0000 1743          add.l     #97,D0
08000D7E  0061      
08000D80  0480 0000 1744          sub.l     #10,D0
08000D84  000A      
                    1745   @itoa_convert_4:
08000D86  2042      1746          move.l    D2,A0
08000D88  1080      1747          move.b    D0,(A0)
08000D8A  2002      1748          move.l    D2,D0
08000D8C  5280      1749          addq.l    #1,D0
08000D8E  4CDF 003C 1750          movem.l   (A7)+,D2/D3/D4/D5
08000D92  4E5E      1751          unlk      A6
08000D94  4E75      1752          rts
                    1753   _ltoa:
08000D96  4E56 0000 1754          link      A6,#0
08000D9A  48E7 3C00 1755          movem.l   D2/D3/D4/D5,-(A7)
08000D9E  242E 0008 1756          move.l    8(A6),D2
08000DA2  262E 000C 1757          move.l    12(A6),D3
08000DA6  2A2E 0010 1758          move.l    16(A6),D5
08000DAA  2803      1759          move.l    D3,D4
08000DAC  0C85 0000 1760          cmp.l     #2,D5
08000DB0  0002      
08000DB2  6D08      1761          blt.s     ltoa_3
08000DB4  0C85 0000 1762          cmp.l     #36,D5
08000DB8  0024      
08000DBA  6F06      1763          ble.s     ltoa_1
                    1764   ltoa_3:
08000DBC  2003      1765          move.l    D3,D0
08000DBE  6000 0052 1766          bra       ltoa_4
                    1767   ltoa_1:
08000DC2  0C85 0000 1768          cmp.l     #10,D5
08000DC6  000A      
08000DC8  6600 0032 1769          bne       ltoa_5
08000DCC  0C82 0000 1770          cmp.l     #0,D2
08000DD0  0000      
08000DD2  6C28      1771          bge.s     ltoa_5
08000DD4  2002      1772          move.l    D2,D0
08000DD6  4480      1773          neg.l     D0
08000DD8  2400      1774          move.l    D0,D2
08000DDA  0C82 0000 1775          cmp.l     #0,D2
08000DDE  0000      
08000DE0  6C12      1776          bge.s     ltoa_7
08000DE2  4879 0800 1777          pea       @itoa_1
08000DE6  1250      
08000DE8  2F03      1778          move.l    D3,-(A7)
08000DEA  6100 0172 1779          bsr       _strcpy
08000DEE  504F      1780          addq.w    #8,A7
08000DF0  2003      1781          move.l    D3,D0
08000DF2  601E      1782          bra.s     ltoa_4
                    1783   ltoa_7:
08000DF4  2044      1784          move.l    D4,A0
08000DF6  5284      1785          addq.l    #1,D4
08000DF8  10BC 002D 1786          move.b    #45,(A0)
                    1787   ltoa_5:
08000DFC  2F05      1788          move.l    D5,-(A7)
08000DFE  2F02      1789          move.l    D2,-(A7)
08000E00  2F04      1790          move.l    D4,-(A7)
08000E02  6100 FF20 1791          bsr       @itoa_convert
08000E06  DEFC 000C 1792          add.w     #12,A7
08000E0A  2800      1793          move.l    D0,D4
08000E0C  2044      1794          move.l    D4,A0
08000E0E  4210      1795          clr.b     (A0)
08000E10  2003      1796          move.l    D3,D0
                    1797   ltoa_4:
08000E12  4CDF 003C 1798          movem.l   (A7)+,D2/D3/D4/D5
08000E16  4E5E      1799          unlk      A6
08000E18  4E75      1800          rts
                    1801   _ultoa:
08000E1A  4E56 0000 1802          link      A6,#0
08000E1E  48E7 3800 1803          movem.l   D2/D3/D4,-(A7)
08000E22  262E 0010 1804          move.l    16(A6),D3
08000E26  282E 000C 1805          move.l    12(A6),D4
08000E2A  2404      1806          move.l    D4,D2
08000E2C  0C83 0000 1807          cmp.l     #2,D3
08000E30  0002      
08000E32  6D08      1808          blt.s     ultoa_3
08000E34  0C83 0000 1809          cmp.l     #36,D3
08000E38  0024      
08000E3A  6F04      1810          ble.s     ultoa_1
                    1811   ultoa_3:
08000E3C  2004      1812          move.l    D4,D0
08000E3E  6018      1813          bra.s     ultoa_4
                    1814   ultoa_1:
08000E40  2F03      1815          move.l    D3,-(A7)
08000E42  2F2E 0008 1816          move.l    8(A6),-(A7)
08000E46  2F02      1817          move.l    D2,-(A7)
08000E48  6100 FEDA 1818          bsr       @itoa_convert
08000E4C  DEFC 000C 1819          add.w     #12,A7
08000E50  2400      1820          move.l    D0,D2
08000E52  2042      1821          move.l    D2,A0
08000E54  4210      1822          clr.b     (A0)
08000E56  2004      1823          move.l    D4,D0
                    1824   ultoa_4:
08000E58  4CDF 001C 1825          movem.l   (A7)+,D2/D3/D4
08000E5C  4E5E      1826          unlk      A6
08000E5E  4E75      1827          rts
                    1828   _itoa:
08000E60  4E56 0000 1829          link      A6,#0
08000E64  2F2E 0010 1830          move.l    16(A6),-(A7)
08000E68  2F2E 000C 1831          move.l    12(A6),-(A7)
08000E6C  2F2E 0008 1832          move.l    8(A6),-(A7)
08000E70  6100 FF24 1833          bsr       _ltoa
08000E74  DEFC 000C 1834          add.w     #12,A7
08000E78  4E5E      1835          unlk      A6
08000E7A  4E75      1836          rts
                    1837   ULMUL:
08000E7C  4E56 0000 1838          link    A6,#0
08000E80  48E7 C000 1839          movem.l D0/D1,-(A7)
08000E84  222E 0008 1840          move.l  8(A6),D1
08000E88  202E 000C 1841          move.l  12(A6),D0
08000E8C  602C      1842          bra.s   lmul_3
                    1843   LMUL:
08000E8E  4E56 0000 1844          link    A6,#0
08000E92  48E7 C000 1845          movem.l D0/D1,-(A7)
08000E96  222E 0008 1846          move.l  8(A6),D1
08000E9A  202E 000C 1847          move.l  12(A6),D0
08000E9E  4A80      1848          tst.l   D0
08000EA0  6A0A      1849          bpl.s   lmul_1
08000EA2  4480      1850          neg.l   D0
08000EA4  4A81      1851          tst.l   D1
08000EA6  6A0A      1852          bpl.s   lmul_2
08000EA8  4481      1853          neg.l   D1
08000EAA  600E      1854          bra.s   lmul_3
                    1855   lmul_1:
08000EAC  4A81      1856          tst.l   D1
08000EAE  6A0A      1857          bpl.s   lmul_3
08000EB0  4481      1858          neg.l   D1
                    1859   lmul_2:
08000EB2  6114      1860          bsr.s   domul
08000EB4  4481      1861          neg.l   D1
08000EB6  4080      1862          negx.l  D0
08000EB8  6002      1863          bra.s   lmul_4
                    1864   lmul_3:
08000EBA  610C      1865          bsr.s   domul
                    1866   lmul_4:
08000EBC  2D41 0008 1867          move.l  D1,8(A6)
08000EC0  4CDF 0003 1868          movem.l (A7)+,D0/D1
08000EC4  4E5E      1869          unlk    A6
08000EC6  4E75      1870          rts
                    1871   domul:
08000EC8  0C81 0000 1872          cmpi.l  #$FFFF,D1
08000ECC  FFFF      
08000ECE  620C      1873          bhi.s   domul_1
08000ED0  0C80 0000 1874          cmpi.l  #$FFFF,D0
08000ED4  FFFF      
08000ED6  620E      1875          bhi.s   domul_2
08000ED8  C2C0      1876          mulu    D0,D1
08000EDA  4E75      1877          rts
                    1878   domul_1:
08000EDC  0C80 0000 1879          cmpi.l  #$FFFF,D0
08000EE0  FFFF      
08000EE2  6218      1880          bhi.s   domul_4
08000EE4  6002      1881          bra.s   domul_3
                    1882   domul_2
08000EE6  C141      1883          exg     D0,D1
                    1884   domul_3:
08000EE8  2F02      1885          move.l  D2,-(A7)
08000EEA  2401      1886          move.l  D1,D2
08000EEC  4842      1887          swap    D2
08000EEE  C2C0      1888          mulu    D0,D1
08000EF0  C4C0      1889          mulu    D0,D2
08000EF2  4842      1890          swap    D2
08000EF4  4242      1891          clr.w   D2
08000EF6  D282      1892          add.l   D2,D1
08000EF8  241F      1893          move.l  (A7)+,D2
08000EFA  4E75      1894          rts
                    1895   domul_4:
08000EFC  48E7 3000 1896          movem.l D2/D3,-(A7)
08000F00  2401      1897          move.l  D1,D2
08000F02  2601      1898          move.l  D1,D3
08000F04  C2C0      1899          mulu    D0,D1
08000F06  4842      1900          swap    D2
08000F08  C4C0      1901          mulu    D0,D2
08000F0A  4840      1902          swap    D0
08000F0C  C6C0      1903          mulu    D0,D3
08000F0E  D483      1904          add.l   D3,D2
08000F10  4842      1905          swap    D2
08000F12  4242      1906          clr.w   D2
08000F14  D282      1907          add.l   D2,D1
08000F16  4CDF 000C 1908          movem.l (A7)+,D2/D3
08000F1A  4E75      1909          rts
                    1910   _strlen:
08000F1C  206F 0004 1911          move.l    (4,A7),A0
08000F20  2248      1912          move.l    A0,A1
                    1913   strlen_1:
08000F22  4A19      1914          tst.b     (A1)+
08000F24  66FC      1915          bne       strlen_1
08000F26  2009      1916          move.l    A1,D0
08000F28  9088      1917          sub.l     A0,D0
08000F2A  5380      1918          subq.l    #1,D0
08000F2C  4E75      1919          rts
                    1920   _putch:
08000F2E  4E56 0000 1921          link      A6,#0
08000F32  48E7 2000 1922          movem.l   D2,-(A7)
08000F36  242E 0008 1923          move.l    8(A6),D2
08000F3A  0C82 0000 1924          cmp.l     #10,D2
08000F3E  000A      
08000F40  660A      1925          bne.s     putch_1
08000F42  4878 000D 1926          pea       13
08000F46  6100 F330 1927          bsr       __putch
08000F4A  584F      1928          addq.w    #4,A7
                    1929   putch_1:
08000F4C  2F02      1930          move.l    D2,-(A7)
08000F4E  6100 F328 1931          bsr       __putch
08000F52  584F      1932          addq.w    #4,A7
08000F54  2002      1933          move.l    D2,D0
08000F56  4CDF 0004 1934          movem.l   (A7)+,D2
08000F5A  4E5E      1935          unlk      A6
08000F5C  4E75      1936          rts
                    1937   _strcpy:
08000F5E  206F 0004 1938          move.l    (4,A7),A0
08000F62  226F 0008 1939          move.l    (8,A7),A1
08000F66  2008      1940          move.l    A0,D0
                    1941   strcpy_1:
08000F68  10D9      1942          move.b    (A1)+,(A0)+
08000F6A  66FC      1943          bne       strcpy_1
08000F6C  4E75      1944          rts
                    1945   ULDIV:
08000F6E  4E56 0000 1946          link    A6,#0
08000F72  48E7 C000 1947          movem.l D0/D1,-(A7)
08000F76  222E 0008 1948          move.l  8(A6),D1
08000F7A  202E 000C 1949          move.l  12(A6),D0
08000F7E  6036      1950          bra.s   ldiv_3
                    1951   LDIV:
08000F80  4E56 0000 1952          link    A6,#0
08000F84  48E7 C000 1953          movem.l D0/D1,-(A7)
08000F88  222E 0008 1954          move.l  8(A6),D1
08000F8C  202E 000C 1955          move.l  12(A6),D0
08000F90  4A80      1956          tst.l   D0
08000F92  6A0E      1957          bpl.s   ldiv_1
08000F94  4480      1958          neg.l   D0
08000F96  4A81      1959          tst.l   D1
08000F98  6A14      1960          bpl.s   ldiv_2
08000F9A  4481      1961          neg.l   D1
08000F9C  612A      1962          bsr.s   dodiv
08000F9E  4481      1963          neg.l   D1
08000FA0  6016      1964          bra.s   ldiv_4
                    1965   ldiv_1:
08000FA2  4A81      1966          tst.l   D1
08000FA4  6A10      1967          bpl.s   ldiv_3
08000FA6  4481      1968          neg.l   D1
08000FA8  611E      1969          bsr.s   dodiv
08000FAA  4480      1970          neg.l   D0
08000FAC  600A      1971          bra.s   ldiv_4
                    1972   ldiv_2:
08000FAE  6118      1973          bsr.s   dodiv
08000FB0  4480      1974          neg.l   D0
08000FB2  4481      1975          neg.l   D1
08000FB4  6002      1976          bra.s   ldiv_4
                    1977   ldiv_3:
08000FB6  6110      1978          bsr.s   dodiv
                    1979   ldiv_4:
08000FB8  2D40 0008 1980          move.l  D0,8(A6)
08000FBC  2D41 000C 1981          move.l  D1,12(A6)
08000FC0  4CDF 0003 1982          movem.l (A7)+,D0/D1
08000FC4  4E5E      1983          unlk    A6
08000FC6  4E75      1984          rts
                    1985   dodiv:
08000FC8  0C81 0000 1986          cmpi.l  #$FFFF,D1
08000FCC  FFFF      
08000FCE  6236      1987          bhi.s   dodiv_2
08000FD0  0C80 0000 1988          cmpi.l  #$FFFF,D0
08000FD4  FFFF      
08000FD6  6210      1989          bhi.s   dodiv_1
08000FD8  80C1      1990          divu    D1,D0
08000FDA  2200      1991          move.l  D0,D1
08000FDC  4241      1992          clr.w   D1
08000FDE  4841      1993          swap    D1
08000FE0  0280 0000 1994          andi.l  #$FFFF,D0
08000FE4  FFFF      
08000FE6  4E75      1995          rts
                    1996   dodiv_1:
08000FE8  48A7 A000 1997          movem.w D0/D2,-(A7)
08000FEC  4240      1998          clr.w   D0
08000FEE  4840      1999          swap    D0
08000FF0  80C1      2000          divu    D1,D0
08000FF2  3400      2001          move.w  D0,D2
08000FF4  301F      2002          move.w  (A7)+,D0
08000FF6  80C1      2003          divu    D1,D0
08000FF8  4840      2004          swap    D0
08000FFA  4281      2005          clr.l   D1
08000FFC  3200      2006          move.w  D0,D1
08000FFE  3002      2007          move.w  D2,D0
08001000  4840      2008          swap    D0
08001002  341F      2009          move.w  (A7)+,D2
08001004  4E75      2010          rts
                    2011   dodiv_2:
08001006  48E7 3800 2012          movem.l D2/D3/D4,-(A7)
0800100A  2401      2013          move.l  D1,D2
0800100C  4242      2014          clr.w   D2
0800100E  4842      2015          swap    D2
08001010  5282      2016          addq.l  #1,D2
08001012  2600      2017          move.l  D0,D3
08001014  2801      2018          move.l  D1,D4
08001016  2202      2019          move.l  D2,D1
08001018  61CE      2020          bsr.s   dodiv_1
0800101A  2204      2021          move.l  D4,D1
0800101C  82C2      2022          divu    D2,D1
0800101E  80C1      2023          divu    D1,D0
08001020  0280 0000 2024          andi.l  #$FFFF,D0
08001024  FFFF      
                    2025   dodiv_3:
08001026  2204      2026          move.l  D4,D1
08001028  2404      2027          move.l  D4,D2
0800102A  4842      2028          swap    D2
0800102C  C2C0      2029          mulu    D0,D1
0800102E  C4C0      2030          mulu    D0,D2
08001030  4842      2031          swap    D2
08001032  D282      2032          add.l   D2,D1
08001034  9283      2033          sub.l   D3,D1
08001036  620A      2034          bhi.s   dodiv_4
08001038  4481      2035          neg.l   D1
0800103A  B881      2036          cmp.l   D1,D4
0800103C  6208      2037          bhi.s   dodiv_5
0800103E  5280      2038          addq.l  #1,D0
08001040  60E4      2039          bra.s   dodiv_3
                    2040   dodiv_4:
08001042  5380      2041          subq.l  #1,D0
08001044  60E0      2042          bra.s   dodiv_3
                    2043   dodiv_5:
08001046  4CDF 001C 2044          movem.l (A7)+,D2/D3/D4
0800104A  4E75      2045          rts
                    2046          section   const
0800104C            2047                   align
                    2048   
                    2049   
                    2050   @mupde1_1:
0800104C  0D0A 7374 2051          dc.b      13,10,115,116,97,114,116,32,65,100,100,114,101
08001050  6172 7420 
08001054  4164 6472 
08001058  65        
08001059  7373 2066 2052          dc.b      115,115,32,102,114,111,109,32,48,120,48,56,48
0800105D  726F 6D20 
08001061  3078 3038 
08001065  30        
08001066  3230 3030 2053          dc.b      50,48,48,48,48,32,116,111,32,48,120,48,56,48
0800106A  3020 746F 
0800106E  2030 7830 
08001072  3830      
08001074  3330 3030 2054          dc.b      51,48,48,48,48,41,58,32,0
08001078  3029 3A20 
0800107C  00        
                    2055   @mupde1_2:
0800107E  0D0A 656E 2056          dc.b      13,10,101,110,100,32,65,100,100,114,101,115
08001082  6420 4164 
08001086  6472 6573 
0800108A  7320 6672 2057          dc.b      115,32,102,114,111,109,32,48,120,48,56,48,50
0800108E  6F6D 2030 
08001092  7830 3830 
08001096  32        
08001097  3030 3030 2058          dc.b      48,48,48,48,32,116,111,32,48,120,48,56,48,51
0800109B  2074 6F20 
0800109F  3078 3038 
080010A3  3033      
080010A5  3030 3030 2059          dc.b      48,48,48,48,41,58,32,0
080010A9  293A 2000 
                    2060   @mupde1_3:
080010AE  0D0A 4368 2061          dc.b      13,10,67,104,111,111,115,101,32,116,101,115
080010B2  6F6F 7365 
080010B6  2074 6573 
080010BA  7420 7061 2062          dc.b      116,32,112,97,116,116,101,114,110,58,32,13,10
080010BE  7474 6572 
080010C2  6E3A 200D 
080010C6  0A        
080010C7  613A 2035 2063          dc.b      97,58,32,53,53,13,10,98,58,32,65,65,13,10,99
080010CB  350D 0A62 
080010CF  3A20 4141 
080010D3  0D0A 63   
080010D6  3A20 4646 2064          dc.b      58,32,70,70,13,10,100,58,32,48,48,0
080010DA  0D0A 643A 
080010DE  2030 3000 
                    2065   @mupde1_4:
080010E2  0D0A 2300 2066          dc.b      13,10,35,0
                    2067   @mupde1_5:
080010E6  0D0A 4461 2068          dc.b      13,10,68,97,116,97,58,32,48,120,37,120,0
080010EA  7461 3A20 
080010EE  3078 2578 
080010F2  00        
                    2069   @mupde1_6:
080010F4  0D0A 4461 2070          dc.b      13,10,68,97,116,97,58,32,48,120,37,120,0
080010F8  7461 3A20 
080010FC  3078 2578 
08001100  00        
                    2071   @mupde1_7:
08001102  0D0A 4461 2072          dc.b      13,10,68,97,116,97,58,32,48,120,37,120,0
08001106  7461 3A20 
0800110A  3078 2578 
0800110E  00        
                    2073   @mupde1_8:
08001110  0D0A 4461 2074          dc.b      13,10,68,97,116,97,58,32,48,120,37,120,0
08001114  7461 3A20 
08001118  3078 2578 
0800111C  00        
                    2075   @mupde1_9:
0800111E  0D0A 456E 2076          dc.b      13,10,69,110,116,101,114,32,39,66,39,44,32,102
08001122  7465 7220 
08001126  2742 272C 
0800112A  2066      
0800112C  6F72 2062 2077          dc.b      111,114,32,98,121,116,101,115,44,32,39,87,39
08001130  7974 6573 
08001134  2C20 2757 
08001138  27        
08001139  2066 6F72 2078          dc.b      32,102,111,114,32,119,111,114,100,115,44,32
0800113D  2077 6F72 
08001141  6473 2C20 
08001145  6F72 2027 2079          dc.b      111,114,32,39,76,39,32,102,111,114,32,108,111
08001149  4C27 2066 
0800114D  6F72 206C 
08001151  6F        
08001152  6E67 2077 2080          dc.b      110,103,32,119,111,114,100,115,58,32,0
08001156  6F72 6473 
0800115A  3A20 00   
                    2081   @mupde1_10:
0800115E  0D0A 2300 2082          dc.b      13,10,35,0
                    2083   @mupde1_11:
08001162  0D0A 4279 2084          dc.b      13,10,66,121,116,101,115,0
08001166  7465 7300 
                    2085   @mupde1_12:
0800116A  0D0A 576F 2086          dc.b      13,10,87,111,114,100,115,0
0800116E  7264 7300 
                    2087   @mupde1_13:
08001172  0D0A 4C6F 2088          dc.b      13,10,76,111,110,103,32,87,111,114,100,115,0
08001176  6E67 2057 
0800117A  6F72 6473 
0800117E  00        
                    2089   @mupde1_14:
08001180  0D0A 5772 2090          dc.b      13,10,87,114,105,116,101,32,70,105,110,105,115
08001184  6974 6520 
08001188  4669 6E69 
0800118C  73        
0800118D  6865 642E 2091          dc.b      104,101,100,46,32,82,101,97,100,32,115,116,97
08001191  2052 6561 
08001195  6420 7374 
08001199  61        
0800119A  7274 732E 2092          dc.b      114,116,115,46,0
0800119E  00        
                    2093   @mupde1_15:
080011A0  0D0A 5265 2094          dc.b      13,10,82,101,97,100,32,99,111,109,112,108,101
080011A4  6164 2063 
080011A8  6F6D 706C 
080011AC  65        
080011AD  7465 2E00 2095          dc.b      116,101,46,0
                    2096   @mupde1_16:
080011B2  0D0A 5041 2097          dc.b      13,10,80,65,83,83,58,32,77,101,109,32,116,101
080011B6  5353 3A20 
080011BA  4D65 6D20 
080011BE  7465      
080011C0  7374 2063 2098          dc.b      115,116,32,99,111,109,112,108,101,116,101,100
080011C4  6F6D 706C 
080011C8  6574 6564 
080011CC  2077 6974 2099          dc.b      32,119,105,116,104,32,110,111,32,101,114,114
080011D0  6820 6E6F 
080011D4  2065 7272 
080011D8  6F72 732E 2100          dc.b      111,114,115,46,0
080011DC  00        
                    2101   @mupde1_17:
080011DE  0D0A 4552 2102          dc.b      13,10,69,82,82,79,82,58,32,65,100,100,114,101
080011E2  524F 523A 
080011E6  2041 6464 
080011EA  7265      
080011EC  7373 2030 2103          dc.b      115,115,32,48,120,37,120,32,100,97,116,97,32
080011F0  7825 7820 
080011F4  6461 7461 
080011F8  20        
080011F9  6973 2030 2104          dc.b      105,115,32,48,120,37,120,32,98,117,116,32,115
080011FD  7825 7820 
08001201  6275 7420 
08001205  73        
08001206  686F 756C 2105          dc.b      104,111,117,108,100,32,98,101,32,48,120,37,120
0800120A  6420 6265 
0800120E  2030 7825 
08001212  78        
08001213  00        2106          dc.b      0
                    2107   @mupde1_18:
08001214  0D0A 4641 2108          dc.b      13,10,70,65,73,76,58,32,77,101,109,32,116,101
08001218  494C 3A20 
0800121C  4D65 6D20 
08001220  7465      
08001222  7374 2064 2109          dc.b      115,116,32,100,105,100,32,110,111,116,32,99
08001226  6964 206E 
0800122A  6F74 2063 
0800122E  6F6D 706C 2110          dc.b      111,109,112,108,101,116,101,32,115,117,99,99
08001232  6574 6520 
08001236  7375 6363 
0800123A  6573 7366 2111          dc.b      101,115,115,102,117,108,108,121,46,0
0800123E  756C 6C79 
08001242  2E00      
                    2112          section   data
08001244            2113                   align
                    2114   
                    2115   *********************************************************************************************************************************************************
                    2116   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    2117   ********************************************************************************************************************************************************
                    2118   
          0800 1244 2119   DataStart       equ       *
08001244            2120   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08001248            2121   __allocp:       ds.l      1                    start of free memory block list
0800124C            2122   __heap:         ds.l      1                    begin of free memory
                    2123   
                    2124   
                    2125   @itoa_1:
08001250  2D32 3134 2126          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08001254  3734 3833 
08001258  3634 3800 
                    2127          section   bss
0800125C            2128                   align
                    2129   
          0800 125C 2130   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0018 2131   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    2132   
                    2133   *********************************************************************************************************
                    2134   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    2135   *********************************************************************************************************
          0800 125C 2136   BssStart       equ       *
                    2137   
                    2138   _i:
0800125C            2139          ds.b      4
                    2140   _x:
08001260            2141          ds.b      4
                    2142   _y:
08001264            2143          ds.b      4
                    2144   _z:
08001268            2145          ds.b      4
                    2146   _PortA_Count:
0800126C            2147          ds.b      4
                    2148   _Timer1Count:
08001270            2149          ds.b      1
                    2150   _Timer2Count:
08001272            2151          ds.b      1
                    2152   _Timer3Count:
08001274            2153          ds.b      1
                    2154   _Timer4Count:
08001276            2155          ds.b      1
                    2156          section   heap
08001278            2157                  align
                    2158   
          0800 1278 2159   BssEnd         equ       *
          0000 001C 2160   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    2161   
                    2162   *********************************************************************************************************
                    2163   * Section for Heap
                    2164   *********************************************************************************************************
                    2165   
          0800 1278 2166   heap           equ       *
08001278            2167                  align
          0800 0000

Assembly errors: 0
