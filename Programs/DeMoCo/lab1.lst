680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Jan 2024      Time: 21:56:02          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB1.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  293C      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\MDNOD.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DM.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  672          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  2DE8      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @mdnod_1.L
00000AB4  3738      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @mdnod_2.L
00000ADC  373C      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @mdnod_3.L
00000AFA  3752      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @mdnod_4.L
00000B06  3754      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0803  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  2DE8      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2CDA      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @mdnod_5.L
00000CE0  3756      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @mdnod_6.L
00000CEA  3790      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @mdnod_7.L
00000D0C  37A8      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @mdnod_8.L
00000D2E  37B0      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @mdnod_9.L
00000D44  37B6      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @mdnod_1.L
00000D9E  3738      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  2DE8      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @mdnod_10.L
00000DCA  37BA      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @mdnod_6.L
00000DD4  3790      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @mdnod_11.L
00000DE8  37CE      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @mdnod_12.L
00000DFC  37E4      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @mdnod_13.L
00000E1C  37F8      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  2DE8      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0803 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @mdnod_14.L
00000E64  3828      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  2DBC      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2C0E      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2CDA      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @mdnod_15.L
00000F8C  3858      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @mdnod_16.L
00000F9A  387E      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0803 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  2DE8      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @mdnod_17.L
00000FD2  38A0      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @mdnod_18.L
00000FDC  38BC      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @mdnod_19.L
00000FE6  3902      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @mdnod_20.L
00001008  3914      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2D46      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @mdnod_21.L
000010A6  3926      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @mdnod_22.L
000010CA  395A      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  2DE8      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  2CDA      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  2DE8      
000010E6  49F9 0803 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0803 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0803 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0803 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @mdnod_23.L
0000112A  3980      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  2D72      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0803 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @mdnod_8.L
00001186  37B0      
00001188  4879 0803 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  2D72      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0803 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  2DA6      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @mdnod_24.L
000011C0  3988      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  2DA6      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @mdnod_9.L
000011E6  37B6      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  2DA6      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0803 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @mdnod_25.L
0000123A  398A      
0000123C  4879 0803 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  2D72      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @mdnod_26.L
00001260  398C      
00001262  4879 0803 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  2D72      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0803 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  2DA6      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @mdnod_27.L
0000129E  3990      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  2BEC      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0803 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0803 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @mdnod_28.L
000012D0  3992      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0803 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0803 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @mdnod_29.L
000012E8  39AE      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0803 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0803 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @mdnod_30.L
00001300  39C8      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0803 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0803 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @mdnod_31.L
00001318  39E2      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0803 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0803 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @mdnod_32.L
00001330  39FC      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0803 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0803 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @mdnod_33.L
00001348  3A16      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0803 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0803 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @mdnod_34.L
00001360  3A30      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0803 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0803 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0803 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @mdnod_35.L
0000138E  3A4A      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0803 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @mdnod_36.L
000013A0  3A64      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0803 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @mdnod_37.L
000013B0  3A82      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @mdnod_38.L
000013C4  3AA4      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @mdnod_39.L
000013CE  3AB6      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0803 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @mdnod_40.L
00001512  3ABC      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0803 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @mdnod_41.L
0000152C  3ACC      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @mdnod_1.L
00001536  3738      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0803 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @mdnod_42.L
00001578  3ADC      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  2DE8      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @mdnod_43.L
00001596  3AE8      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @mdnod_44.L
000015A0  3B08      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @mdnod_45.L
000015AE  3B24      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @mdnod_46.L
000015B8  3B50      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  2DE8      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  2D46      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  2D46      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @mdnod_47.L
00001630  3B70      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @mdnod_48.L
00001644  3B9C      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0803 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0803 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0803 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0803 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0803 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0803 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0803 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0803 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @mdnod_49.L
000016DE  3BA6      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @mdnod_50.L
000016F2  3BD4      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0803 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0803 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0803 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0803 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0803 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0803 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0803 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0803 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  2D46      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @mdnod_51.L
000017A2  3BDE      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0803 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @mdnod_52.L
000017BA  3BEC      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  2D46      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @mdnod_53.L
000017F8  3C04      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0803 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @mdnod_52.L
00001810  3BEC      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @mdnod_54.L
00001830  3C14      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0803 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @mdnod_55.L
00001858  3C1C      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0803 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @mdnod_56.L
00001872  3C24      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  2DE8      
0000188E  47F9 0803 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0803 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @mdnod_57.L
000018C8  3C60      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @mdnod_58.L
000018D2  3C86      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @mdnod_59.L
000018DE  3CAA      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0803 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0803 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @mdnod_60.L
0000193C  3CC0      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @mdnod_1.L
0000194C  3738      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  2DE8      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0803 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @mdnod_61.L
00001996  3CD0      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @mdnod_62.L
000019A0  3CE2      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @mdnod_63.L
000019AC  3CF6      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0803 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0803 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @mdnod_60.L
000019E8  3CC0      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @mdnod_1.L
000019F8  3738      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  2DE8      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @mdnod_64.L
00001A1A  3D0C      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @mdnod_65.L
00001A4E  3D2A      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0803 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0803 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0803 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0803 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0803 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0803 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @mdnod_66.L
00001AC0  3D46      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @mdnod_67.L
00001ACC  3D64      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  2DE8      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @mdnod_68.L
00001AF0  3D82      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @mdnod_65.L
00001B24  3D2A      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0803 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0803 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0803 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @mdnod_69.L
00001B64  3DA0      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @mdnod_70.L
00001B70  3DBE      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0803 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0803 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0803 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0803 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0803 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0803 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0803 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0803 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0803 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0803 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0803 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0803 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  2DE8      
00001CC2  47F9 0803 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @mdnod_71.L
00001CEE  3DDE      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @mdnod_72.L
00001CFC  3DFA      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @mdnod_73.L
00001D22  3E12      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @mdnod_74.L
00001D38  3E48      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0803 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @mdnod_75.L
00001D64  3E90      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0803 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @mdnod_76.L
00001D9C  3EC8      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0803 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @mdnod_1.L
00001DBA  3738      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  2DE8      
00001DE2  47F9 0803 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @mdnod_77.L
00001E0E  3EEE      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @mdnod_78.L
00001E1C  3F0A      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0803 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @mdnod_79.L
00001E52  3F22      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @mdnod_80.L
00001E7A  3F58      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0803 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @mdnod_1.L
00001E92  3738      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0803 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  2DE8      
00001EBE  49F9 0803 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @mdnod_81.L
00001ECA  3F7E      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @mdnod_82.L
00001ED4  3F92      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @mdnod_83.L
00001EDE  3FA8      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0803 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0803 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0803 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0803 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0803 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @mdnod_45.L
00001F52  3B24      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @mdnod_84.L
00001F5C  3FC2      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @mdnod_85.L
00001F74  3FEA      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  2DE8      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @mdnod_86.L
00001F8A  4004      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  2DE8      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  2DBC      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @mdnod_87.L
00001FCC  4024      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  2DE8      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  2DBC      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  2DBC      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @mdnod_88.L
00002048  4046      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  2DE8      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  2DBC      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  2DE8      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @mdnod_89.L,A0
000020A2  4068      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @mdnod_90.L
000020B0  40AC      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @mdnod_91.L
000020C0  40CA      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @mdnod_92.L
000020CA  410E      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @mdnod_93.L
000020D4  4146      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @mdnod_94.L
000020DE  4180      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @mdnod_95.L
000020E8  41B2      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @mdnod_96.L
000020F2  41DE      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0803 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @mdnod_97.L
00002102  4208      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @mdnod_98.L
0000210C  4242      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @mdnod_99.L
00002116  427A      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @mdnod_100.L
00002120  42A8      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @mdnod_101.L
0000212A  42E2      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @mdnod_102.L
00002134  430E      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @mdnod_103.L
0000213E  4340      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @mdnod_104.L
00002148  4360      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @mdnod_105.L
00002152  4388      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @mdnod_106.L
0000215C  43BE      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  2DE8      
00002178  47F9 0803 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0803 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0803 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @mdnod_107.L
00002192  43F6      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  2DBC      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @mdnod_108.L
000021F2  43FA      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @mdnod_109.L
000021FC  4412      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0803 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  2DBC      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2570      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0803 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @mdnod_110.L
000022E6  4440      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @mdnod_111.L
00002306  446A      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @mdnod_44.L
00002310  3B08      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000231A  2F39 0803 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @mdnod_112.L
00002324  4480      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @mdnod_113.L
0000232E  44B4      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @mdnod_114.L
00002364  44D8      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @mdnod_115.L
0000236E  44EE      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @mdnod_116.L
00002378  4508      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @mdnod_117.L
000023A2  4532      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @mdnod_115.L
000023AC  44EE      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @mdnod_108.L
000023B6  43FA      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @mdnod_109.L
000023C0  4412      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @mdnod_118.L
000023EA  4548      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  2DE8      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @mdnod_119.L
000023FC  4564      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  2DE8      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @mdnod_120.L
00002416  456A      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  2DE8      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @mdnod_121.L
00002428  4582      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  2DE8      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @mdnod_122.L
0000247A  45A6      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @mdnod_123.L
00002498  45E6      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @mdnod_124.L
000024A6  45FC      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @mdnod_125.L
000024B4  4608      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @mdnod_126.L
000024C2  4618      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @mdnod_127.L
000024D0  462C      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @mdnod_128.L
000024DE  463C      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @mdnod_129.L
000024EC  464E      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @mdnod_130.L
000024FA  4660      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @mdnod_131.L
00002508  4674      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @mdnod_132.L
00002516  4686      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @mdnod_133.L
0000252A  4694      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  2DE8      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @mdnod_134.L
00002542  46B0      
00002544  4EB9 0000 4009          jsr       _printf
00002548  2DE8      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  2D0A      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; void MemoryTest(void)
                    4031   ; {
                    4032   _MemoryTest:
00002570  4E56 FFF4 4033          link      A6,#-12
00002574  48E7 3F3C 4034          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002578  45F9 0000 4035          lea       _printf.L,A2
0000257C  2DE8      
0000257E  4BF8 0BA6 4036          lea       _FlushKeyboard.L,A5
                    4037   ; register unsigned int i ;
                    4038   ; unsigned int start ;
                    4039   ; unsigned int end ;
                    4040   ; char input_char;
                    4041   ; int data;
                    4042   ; unsigned char *byteptr;
                    4043   ; unsigned short int *wordptr;
                    4044   ; unsigned int *longptr;
                    4045   ; unsigned int counter = 2000;
00002582  263C 0000 4046          move.l    #2000,D3
00002586  07D0      
                    4047   ; unsigned char bytedata;
                    4048   ; unsigned short int worddata;
                    4049   ; unsigned char *mem_byteptr;
                    4050   ; // TODO
                    4051   ; // test data pattern
                    4052   ; // for (mem_byteptr = 0x08020000; mem_byteptr < 0x08030000; mem_byteptr++) // populating every two addresses for test purposes
                    4053   ; // {
                    4054   ; //     *mem_byteptr = 0; // set every byte in memory to zero
                    4055   ; // }
                    4056   ; // printf("Cleared memory\n");
                    4057   ; FlushKeyboard();
00002588  4E95      4058          jsr       (A5)
                    4059   ; do{
                    4060   MemoryTest_1:
                    4061   ; printf("\r\nstart Address from 0x08020000 to 0x08030000): ");
0000258A  4879 0000 4062          pea       @mdnod_135.L
0000258E  46CE      
00002590  4E92      4063          jsr       (A2)
00002592  584F      4064          addq.w    #4,A7
                    4065   ; start = Get8HexDigits(0);
00002594  42A7      4066          clr.l     -(A7)
00002596  4EB8 0CA4 4067          jsr       _Get8HexDigits
0000259A  584F      4068          addq.w    #4,A7
0000259C  2840      4069          move.l    D0,A4
0000259E  200C      4070          move.l    A4,D0
000025A0  0C80 0802 4071          cmp.l     #134348800,D0
000025A4  0000      
000025A6  65E2      4072          blo       MemoryTest_1
000025A8  200C      4073          move.l    A4,D0
000025AA  0C80 0803 4074          cmp.l     #134414336,D0
000025AE  0000      
000025B0  62D8      4075          bhi       MemoryTest_1
                    4076   ; } while (0x08020000 > start || 0x08030000 < start);
                    4077   ; do{
                    4078   MemoryTest_3:
                    4079   ; printf("\r\nend Address from 0x08020000 to 0x08030000): ");
000025B2  4879 0000 4080          pea       @mdnod_136.L
000025B6  4700      
000025B8  4E92      4081          jsr       (A2)
000025BA  584F      4082          addq.w    #4,A7
                    4083   ; end = Get8HexDigits(0);
000025BC  42A7      4084          clr.l     -(A7)
000025BE  4EB8 0CA4 4085          jsr       _Get8HexDigits
000025C2  584F      4086          addq.w    #4,A7
000025C4  2640      4087          move.l    D0,A3
000025C6  200C      4088          move.l    A4,D0
000025C8  B08B      4089          cmp.l     A3,D0
000025CA  62E6      4090          bhi       MemoryTest_3
000025CC  200B      4091          move.l    A3,D0
000025CE  0C80 0803 4092          cmp.l     #134414336,D0
000025D2  0000      
000025D4  62DC      4093          bhi       MemoryTest_3
                    4094   ; } while (start > end || end > 0x08030000);
                    4095   ; while(1){
                    4096   MemoryTest_5:
                    4097   ; input_char = ' ';
000025D6  7820      4098          moveq     #32,D4
                    4099   ; FlushKeyboard();
000025D8  4E95      4100          jsr       (A5)
                    4101   ; printf("\r\nChoose data pattern: \r\n1: 55\r\n2: AA\r\n3: FF\r\n4: 00");
000025DA  4879 0000 4102          pea       @mdnod_137.L
000025DE  4730      
000025E0  4E92      4103          jsr       (A2)
000025E2  584F      4104          addq.w    #4,A7
                    4105   ; printf("\r\n#");
000025E4  4879 0000 4106          pea       @mdnod_107.L
000025E8  43F6      
000025EA  4E92      4107          jsr       (A2)
000025EC  584F      4108          addq.w    #4,A7
                    4109   ; input_char = (char) _getch();
000025EE  4EB8 0B68 4110          jsr       __getch
000025F2  1800      4111          move.b    D0,D4
                    4112   ; if(input_char == (char)('1')){
000025F4  0C04 0031 4113          cmp.b     #49,D4
000025F8  6604      4114          bne.s     MemoryTest_8
                    4115   ; data = 0x55;
000025FA  7455      4116          moveq     #85,D2
                    4117   ; break;
000025FC  6028      4118          bra.s     MemoryTest_7
                    4119   MemoryTest_8:
                    4120   ; }
                    4121   ; else if(input_char == (char)('2')){
000025FE  0C04 0032 4122          cmp.b     #50,D4
00002602  6608      4123          bne.s     MemoryTest_10
                    4124   ; data = 0xAA;
00002604  243C 0000 4125          move.l    #170,D2
00002608  00AA      
                    4126   ; break;
0000260A  601A      4127          bra.s     MemoryTest_7
                    4128   MemoryTest_10:
                    4129   ; }
                    4130   ; else if(input_char == (char)('3')){
0000260C  0C04 0033 4131          cmp.b     #51,D4
00002610  6608      4132          bne.s     MemoryTest_12
                    4133   ; data = 0xFF;
00002612  243C 0000 4134          move.l    #255,D2
00002616  00FF      
                    4135   ; break;
00002618  600C      4136          bra.s     MemoryTest_7
                    4137   MemoryTest_12:
                    4138   ; }
                    4139   ; else if(input_char == (char)('4')){
0000261A  0C04 0034 4140          cmp.b     #52,D4
0000261E  6604      4141          bne.s     MemoryTest_14
                    4142   ; data = 0x00;
00002620  4282      4143          clr.l     D2
                    4144   ; break;
00002622  6002      4145          bra.s     MemoryTest_7
                    4146   MemoryTest_14:
00002624  60B0      4147          bra       MemoryTest_5
                    4148   MemoryTest_7:
                    4149   ; }
                    4150   ; }
                    4151   ; printf("\r\ndata: %x", data);
00002626  2F02      4152          move.l    D2,-(A7)
00002628  4879 0000 4153          pea       @mdnod_138.L
0000262C  4764      
0000262E  4E92      4154          jsr       (A2)
00002630  504F      4155          addq.w    #8,A7
                    4156   ; // test data size selection
                    4157   ; while(1)    {
                    4158   MemoryTest_16:
                    4159   ; input_char = ' ';
00002632  7820      4160          moveq     #32,D4
                    4161   ; FlushKeyboard();
00002634  4E95      4162          jsr       (A5)
                    4163   ; printf("\r\nEnter 'B', for bytes, 'W' for words, or 'L' for long words: ");
00002636  4879 0000 4164          pea       @mdnod_139.L
0000263A  4770      
0000263C  4E92      4165          jsr       (A2)
0000263E  584F      4166          addq.w    #4,A7
                    4167   ; printf("\r\n#");
00002640  4879 0000 4168          pea       @mdnod_107.L
00002644  43F6      
00002646  4E92      4169          jsr       (A2)
00002648  584F      4170          addq.w    #4,A7
                    4171   ; input_char = (char) _getch();
0000264A  4EB8 0B68 4172          jsr       __getch
0000264E  1800      4173          move.b    D0,D4
                    4174   ; if(input_char == 'B'){
00002650  0C04 0042 4175          cmp.b     #66,D4
00002654  660E      4176          bne.s     MemoryTest_19
                    4177   ; printf("\r\nBytes");
00002656  4879 0000 4178          pea       @mdnod_140.L
0000265A  47B0      
0000265C  4E92      4179          jsr       (A2)
0000265E  584F      4180          addq.w    #4,A7
                    4181   ; break;
00002660  6000 004E 4182          bra       MemoryTest_18
                    4183   MemoryTest_19:
                    4184   ; }
                    4185   ; else if(input_char == 'W'){
00002664  0C04 0057 4186          cmp.b     #87,D4
00002668  6614      4187          bne.s     MemoryTest_21
                    4188   ; printf("\r\nWords");
0000266A  4879 0000 4189          pea       @mdnod_141.L
0000266E  47B8      
00002670  4E92      4190          jsr       (A2)
00002672  584F      4191          addq.w    #4,A7
                    4192   ; data = data | data << 8;
00002674  2002      4193          move.l    D2,D0
00002676  E180      4194          asl.l     #8,D0
00002678  8480      4195          or.l      D0,D2
                    4196   ; break;
0000267A  6000 0034 4197          bra       MemoryTest_18
                    4198   MemoryTest_21:
                    4199   ; }
                    4200   ; else if(input_char == 'L'){
0000267E  0C04 004C 4201          cmp.b     #76,D4
00002682  6600 002A 4202          bne       MemoryTest_23
                    4203   ; printf("\r\nLong Words");
00002686  4879 0000 4204          pea       @mdnod_142.L
0000268A  47C0      
0000268C  4E92      4205          jsr       (A2)
0000268E  584F      4206          addq.w    #4,A7
                    4207   ; data = data | data << 8 | data << 16 | data << 24;
00002690  2002      4208          move.l    D2,D0
00002692  2202      4209          move.l    D2,D1
00002694  E181      4210          asl.l     #8,D1
00002696  8081      4211          or.l      D1,D0
00002698  2202      4212          move.l    D2,D1
0000269A  E181      4213          asl.l     #8,D1
0000269C  E181      4214          asl.l     #8,D1
0000269E  8081      4215          or.l      D1,D0
000026A0  2202      4216          move.l    D2,D1
000026A2  E181      4217          asl.l     #8,D1
000026A4  E181      4218          asl.l     #8,D1
000026A6  E181      4219          asl.l     #8,D1
000026A8  8081      4220          or.l      D1,D0
000026AA  2400      4221          move.l    D0,D2
                    4222   ; break;
000026AC  6002      4223          bra.s     MemoryTest_18
                    4224   MemoryTest_23:
000026AE  6082      4225          bra       MemoryTest_16
                    4226   MemoryTest_18:
                    4227   ; }
                    4228   ; }
                    4229   ; // start writing
                    4230   ; if(input_char == 'B'){
000026B0  0C04 0042 4231          cmp.b     #66,D4
000026B4  6600 0054 4232          bne       MemoryTest_25
                    4233   ; byteptr = start;
000026B8  2E0C      4234          move.l    A4,D7
                    4235   ; while(1){
                    4236   MemoryTest_27:
                    4237   ; if (byteptr > end){
000026BA  BE8B      4238          cmp.l     A3,D7
000026BC  630E      4239          bls.s     MemoryTest_30
                    4240   ; printf("\r\nByte Write Finished. Read starts.");
000026BE  4879 0000 4241          pea       @mdnod_143.L
000026C2  47CE      
000026C4  4E92      4242          jsr       (A2)
000026C6  584F      4243          addq.w    #4,A7
                    4244   ; break;
000026C8  6000 003C 4245          bra       MemoryTest_29
                    4246   MemoryTest_30:
                    4247   ; }
                    4248   ; *byteptr = data;
000026CC  2047      4249          move.l    D7,A0
000026CE  1082      4250          move.b    D2,(A0)
                    4251   ; counter++;
000026D0  5283      4252          addq.l    #1,D3
                    4253   ; if (counter == 2001){
000026D2  0C83 0000 4254          cmp.l     #2001,D3
000026D6  07D1      
000026D8  6628      4255          bne.s     MemoryTest_32
                    4256   ; printf("\r\nbytedata: %x", data);
000026DA  2F02      4257          move.l    D2,-(A7)
000026DC  4879 0000 4258          pea       @mdnod_144.L
000026E0  47F2      
000026E2  4E92      4259          jsr       (A2)
000026E4  504F      4260          addq.w    #8,A7
                    4261   ; printf("\r\nWrite: %x to addr %x", *byteptr, byteptr);
000026E6  2F07      4262          move.l    D7,-(A7)
000026E8  2047      4263          move.l    D7,A0
000026EA  1210      4264          move.b    (A0),D1
000026EC  C2BC 0000 4265          and.l     #255,D1
000026F0  00FF      
000026F2  2F01      4266          move.l    D1,-(A7)
000026F4  4879 0000 4267          pea       @mdnod_145.L
000026F8  4802      
000026FA  4E92      4268          jsr       (A2)
000026FC  DEFC 000C 4269          add.w     #12,A7
                    4270   ; counter = 0;
00002700  4283      4271          clr.l     D3
                    4272   MemoryTest_32:
                    4273   ; }
                    4274   ; byteptr++;
00002702  5287      4275          addq.l    #1,D7
00002704  60B4      4276          bra       MemoryTest_27
                    4277   MemoryTest_29:
00002706  6000 00AA 4278          bra       MemoryTest_47
                    4279   MemoryTest_25:
                    4280   ; }
                    4281   ; }
                    4282   ; else if(input_char == 'W'){
0000270A  0C04 0057 4283          cmp.b     #87,D4
0000270E  6600 0054 4284          bne       MemoryTest_34
                    4285   ; wordptr = start;
00002712  2C0C      4286          move.l    A4,D6
                    4287   ; while(1){
                    4288   MemoryTest_36:
                    4289   ; if (wordptr > end){
00002714  BC8B      4290          cmp.l     A3,D6
00002716  630E      4291          bls.s     MemoryTest_39
                    4292   ; printf("\r\nWord Write Finished. Read starts.");
00002718  4879 0000 4293          pea       @mdnod_146.L
0000271C  481A      
0000271E  4E92      4294          jsr       (A2)
00002720  584F      4295          addq.w    #4,A7
                    4296   ; break;
00002722  6000 003C 4297          bra       MemoryTest_38
                    4298   MemoryTest_39:
                    4299   ; }
                    4300   ; *wordptr = data;
00002726  2046      4301          move.l    D6,A0
00002728  3082      4302          move.w    D2,(A0)
                    4303   ; counter++;
0000272A  5283      4304          addq.l    #1,D3
                    4305   ; if (counter == 2001){
0000272C  0C83 0000 4306          cmp.l     #2001,D3
00002730  07D1      
00002732  6628      4307          bne.s     MemoryTest_41
                    4308   ; printf("\r\nworddata: %x", data);
00002734  2F02      4309          move.l    D2,-(A7)
00002736  4879 0000 4310          pea       @mdnod_147.L
0000273A  483E      
0000273C  4E92      4311          jsr       (A2)
0000273E  504F      4312          addq.w    #8,A7
                    4313   ; printf("\r\nWrite: %x to addr %x", *wordptr, wordptr);
00002740  2F06      4314          move.l    D6,-(A7)
00002742  2046      4315          move.l    D6,A0
00002744  3210      4316          move.w    (A0),D1
00002746  C2BC 0000 4317          and.l     #65535,D1
0000274A  FFFF      
0000274C  2F01      4318          move.l    D1,-(A7)
0000274E  4879 0000 4319          pea       @mdnod_145.L
00002752  4802      
00002754  4E92      4320          jsr       (A2)
00002756  DEFC 000C 4321          add.w     #12,A7
                    4322   ; counter = 0;
0000275A  4283      4323          clr.l     D3
                    4324   MemoryTest_41:
                    4325   ; }
                    4326   ; wordptr++;
0000275C  5486      4327          addq.l    #2,D6
0000275E  60B4      4328          bra       MemoryTest_36
                    4329   MemoryTest_38:
00002760  6000 0050 4330          bra       MemoryTest_47
                    4331   MemoryTest_34:
                    4332   ; }
                    4333   ; }
                    4334   ; else if(input_char == 'L'){
00002764  0C04 004C 4335          cmp.b     #76,D4
00002768  6600 0048 4336          bne       MemoryTest_47
                    4337   ; longptr = start;
0000276C  2A0C      4338          move.l    A4,D5
                    4339   ; while(1){
                    4340   MemoryTest_45:
                    4341   ; if (longptr > end){
0000276E  BA8B      4342          cmp.l     A3,D5
00002770  630E      4343          bls.s     MemoryTest_48
                    4344   ; printf("\r\nLong Word Write Finished. Read starts.");
00002772  4879 0000 4345          pea       @mdnod_148.L
00002776  484E      
00002778  4E92      4346          jsr       (A2)
0000277A  584F      4347          addq.w    #4,A7
                    4348   ; break;
0000277C  6000 0034 4349          bra       MemoryTest_47
                    4350   MemoryTest_48:
                    4351   ; }
                    4352   ; *longptr = data;
00002780  2045      4353          move.l    D5,A0
00002782  2082      4354          move.l    D2,(A0)
                    4355   ; counter++;
00002784  5283      4356          addq.l    #1,D3
                    4357   ; if (counter == 2001){
00002786  0C83 0000 4358          cmp.l     #2001,D3
0000278A  07D1      
0000278C  6620      4359          bne.s     MemoryTest_50
                    4360   ; printf("\r\nlongdata: %x", data);
0000278E  2F02      4361          move.l    D2,-(A7)
00002790  4879 0000 4362          pea       @mdnod_149.L
00002794  4878      
00002796  4E92      4363          jsr       (A2)
00002798  504F      4364          addq.w    #8,A7
                    4365   ; printf("\r\nWrite: %x to addr %x", *longptr, longptr);
0000279A  2F05      4366          move.l    D5,-(A7)
0000279C  2045      4367          move.l    D5,A0
0000279E  2F10      4368          move.l    (A0),-(A7)
000027A0  4879 0000 4369          pea       @mdnod_145.L
000027A4  4802      
000027A6  4E92      4370          jsr       (A2)
000027A8  DEFC 000C 4371          add.w     #12,A7
                    4372   ; counter = 0;
000027AC  4283      4373          clr.l     D3
                    4374   MemoryTest_50:
                    4375   ; }
                    4376   ; longptr++;
000027AE  5885      4377          addq.l    #4,D5
000027B0  60BC      4378          bra       MemoryTest_45
                    4379   MemoryTest_47:
                    4380   ; }
                    4381   ; }
                    4382   ; // start reading
                    4383   ; counter = 2000;
000027B2  263C 0000 4384          move.l    #2000,D3
000027B6  07D0      
                    4385   ; if(input_char == 'B'){
000027B8  0C04 0042 4386          cmp.b     #66,D4
000027BC  6600 0082 4387          bne       MemoryTest_52
                    4388   ; while(1){
                    4389   MemoryTest_54:
                    4390   ; if (byteptr > end){
000027C0  BE8B      4391          cmp.l     A3,D7
000027C2  6318      4392          bls.s     MemoryTest_57
                    4393   ; printf("\r\nByte Read complete.");
000027C4  4879 0000 4394          pea       @mdnod_150.L
000027C8  4888      
000027CA  4E92      4395          jsr       (A2)
000027CC  584F      4396          addq.w    #4,A7
                    4397   ; printf("\r\nPASS.");
000027CE  4879 0000 4398          pea       @mdnod_151.L
000027D2  489E      
000027D4  4E92      4399          jsr       (A2)
000027D6  584F      4400          addq.w    #4,A7
                    4401   ; break;
000027D8  6000 0062 4402          bra       MemoryTest_56
                    4403   MemoryTest_57:
                    4404   ; }
                    4405   ; if (*byteptr != data){
000027DC  2047      4406          move.l    D7,A0
000027DE  1010      4407          move.b    (A0),D0
000027E0  C0BC 0000 4408          and.l     #255,D0
000027E4  00FF      
000027E6  B082      4409          cmp.l     D2,D0
000027E8  6728      4410          beq.s     MemoryTest_59
                    4411   ; printf("\r\nERROR: Address %x data is %x but should be %x", byteptr, *byteptr, data);
000027EA  2F02      4412          move.l    D2,-(A7)
000027EC  2047      4413          move.l    D7,A0
000027EE  1210      4414          move.b    (A0),D1
000027F0  C2BC 0000 4415          and.l     #255,D1
000027F4  00FF      
000027F6  2F01      4416          move.l    D1,-(A7)
000027F8  2F07      4417          move.l    D7,-(A7)
000027FA  4879 0000 4418          pea       @mdnod_152.L
000027FE  48A6      
00002800  4E92      4419          jsr       (A2)
00002802  DEFC 0010 4420          add.w     #16,A7
                    4421   ; printf("\r\nFAIL.");
00002806  4879 0000 4422          pea       @mdnod_153.L
0000280A  48D6      
0000280C  4E92      4423          jsr       (A2)
0000280E  584F      4424          addq.w    #4,A7
                    4425   ; break;
00002810  602A      4426          bra.s     MemoryTest_56
                    4427   MemoryTest_59:
                    4428   ; }
                    4429   ; counter++;
00002812  5283      4430          addq.l    #1,D3
                    4431   ; if (counter == 2001){
00002814  0C83 0000 4432          cmp.l     #2001,D3
00002818  07D1      
0000281A  661C      4433          bne.s     MemoryTest_61
                    4434   ; printf("\r\nRead: Address %x data is %x", byteptr, *byteptr);
0000281C  2047      4435          move.l    D7,A0
0000281E  1210      4436          move.b    (A0),D1
00002820  C2BC 0000 4437          and.l     #255,D1
00002824  00FF      
00002826  2F01      4438          move.l    D1,-(A7)
00002828  2F07      4439          move.l    D7,-(A7)
0000282A  4879 0000 4440          pea       @mdnod_154.L
0000282E  48DE      
00002830  4E92      4441          jsr       (A2)
00002832  DEFC 000C 4442          add.w     #12,A7
                    4443   ; counter = 0;
00002836  4283      4444          clr.l     D3
                    4445   MemoryTest_61:
                    4446   ; }
                    4447   ; byteptr++;
00002838  5287      4448          addq.l    #1,D7
0000283A  6084      4449          bra       MemoryTest_54
                    4450   MemoryTest_56:
0000283C  6000 00F6 4451          bra       MemoryTest_78
                    4452   MemoryTest_52:
                    4453   ; }
                    4454   ; }
                    4455   ; else if(input_char == 'W'){
00002840  0C04 0057 4456          cmp.b     #87,D4
00002844  6600 0082 4457          bne       MemoryTest_63
                    4458   ; while(1){
                    4459   MemoryTest_65:
                    4460   ; if (wordptr > end){
00002848  BC8B      4461          cmp.l     A3,D6
0000284A  6318      4462          bls.s     MemoryTest_68
                    4463   ; printf("\r\nWord Read complete.");
0000284C  4879 0000 4464          pea       @mdnod_155.L
00002850  48FC      
00002852  4E92      4465          jsr       (A2)
00002854  584F      4466          addq.w    #4,A7
                    4467   ; printf("\r\nPASS.");
00002856  4879 0000 4468          pea       @mdnod_151.L
0000285A  489E      
0000285C  4E92      4469          jsr       (A2)
0000285E  584F      4470          addq.w    #4,A7
                    4471   ; break;
00002860  6000 0062 4472          bra       MemoryTest_67
                    4473   MemoryTest_68:
                    4474   ; }
                    4475   ; if (*wordptr != data){
00002864  2046      4476          move.l    D6,A0
00002866  3010      4477          move.w    (A0),D0
00002868  C0BC 0000 4478          and.l     #65535,D0
0000286C  FFFF      
0000286E  B082      4479          cmp.l     D2,D0
00002870  6728      4480          beq.s     MemoryTest_70
                    4481   ; printf("\r\nERROR: Address %x data is %x but should be %x", wordptr, *wordptr, data);
00002872  2F02      4482          move.l    D2,-(A7)
00002874  2046      4483          move.l    D6,A0
00002876  3210      4484          move.w    (A0),D1
00002878  C2BC 0000 4485          and.l     #65535,D1
0000287C  FFFF      
0000287E  2F01      4486          move.l    D1,-(A7)
00002880  2F06      4487          move.l    D6,-(A7)
00002882  4879 0000 4488          pea       @mdnod_152.L
00002886  48A6      
00002888  4E92      4489          jsr       (A2)
0000288A  DEFC 0010 4490          add.w     #16,A7
                    4491   ; printf("\r\nFAIL.");
0000288E  4879 0000 4492          pea       @mdnod_153.L
00002892  48D6      
00002894  4E92      4493          jsr       (A2)
00002896  584F      4494          addq.w    #4,A7
                    4495   ; break;
00002898  602A      4496          bra.s     MemoryTest_67
                    4497   MemoryTest_70:
                    4498   ; }
                    4499   ; counter++;
0000289A  5283      4500          addq.l    #1,D3
                    4501   ; if (counter == 2001){
0000289C  0C83 0000 4502          cmp.l     #2001,D3
000028A0  07D1      
000028A2  661C      4503          bne.s     MemoryTest_72
                    4504   ; printf("\r\nRead: Address %x data is %x", wordptr, *wordptr);
000028A4  2046      4505          move.l    D6,A0
000028A6  3210      4506          move.w    (A0),D1
000028A8  C2BC 0000 4507          and.l     #65535,D1
000028AC  FFFF      
000028AE  2F01      4508          move.l    D1,-(A7)
000028B0  2F06      4509          move.l    D6,-(A7)
000028B2  4879 0000 4510          pea       @mdnod_154.L
000028B6  48DE      
000028B8  4E92      4511          jsr       (A2)
000028BA  DEFC 000C 4512          add.w     #12,A7
                    4513   ; counter = 0;
000028BE  4283      4514          clr.l     D3
                    4515   MemoryTest_72:
                    4516   ; }
                    4517   ; wordptr++;
000028C0  5486      4518          addq.l    #2,D6
000028C2  6084      4519          bra       MemoryTest_65
                    4520   MemoryTest_67:
000028C4  6000 006E 4521          bra       MemoryTest_78
                    4522   MemoryTest_63:
                    4523   ; }
                    4524   ; }
                    4525   ; else if(input_char == 'L'){
000028C8  0C04 004C 4526          cmp.b     #76,D4
000028CC  6600 0066 4527          bne       MemoryTest_78
                    4528   ; while(1){
                    4529   MemoryTest_76:
                    4530   ; if (longptr > end){
000028D0  BA8B      4531          cmp.l     A3,D5
000028D2  6318      4532          bls.s     MemoryTest_79
                    4533   ; printf("\r\nLong Word Read complete.");
000028D4  4879 0000 4534          pea       @mdnod_156.L
000028D8  4912      
000028DA  4E92      4535          jsr       (A2)
000028DC  584F      4536          addq.w    #4,A7
                    4537   ; printf("\r\nPASS.");
000028DE  4879 0000 4538          pea       @mdnod_151.L
000028E2  489E      
000028E4  4E92      4539          jsr       (A2)
000028E6  584F      4540          addq.w    #4,A7
                    4541   ; break;
000028E8  6000 004A 4542          bra       MemoryTest_78
                    4543   MemoryTest_79:
                    4544   ; }
                    4545   ; if (*longptr != data){
000028EC  2045      4546          move.l    D5,A0
000028EE  B490      4547          cmp.l     (A0),D2
000028F0  6720      4548          beq.s     MemoryTest_81
                    4549   ; printf("\r\nERROR: Address %x data is %x but should be %x", longptr, *longptr, data);
000028F2  2F02      4550          move.l    D2,-(A7)
000028F4  2045      4551          move.l    D5,A0
000028F6  2F10      4552          move.l    (A0),-(A7)
000028F8  2F05      4553          move.l    D5,-(A7)
000028FA  4879 0000 4554          pea       @mdnod_152.L
000028FE  48A6      
00002900  4E92      4555          jsr       (A2)
00002902  DEFC 0010 4556          add.w     #16,A7
                    4557   ; printf("\r\nFAIL.");
00002906  4879 0000 4558          pea       @mdnod_153.L
0000290A  48D6      
0000290C  4E92      4559          jsr       (A2)
0000290E  584F      4560          addq.w    #4,A7
                    4561   ; break;
00002910  6022      4562          bra.s     MemoryTest_78
                    4563   MemoryTest_81:
                    4564   ; }
                    4565   ; counter++;
00002912  5283      4566          addq.l    #1,D3
                    4567   ; if (counter == 2001){
00002914  0C83 0000 4568          cmp.l     #2001,D3
00002918  07D1      
0000291A  6614      4569          bne.s     MemoryTest_83
                    4570   ; printf("\r\nRead: Address %x data is %x", longptr, *longptr);
0000291C  2045      4571          move.l    D5,A0
0000291E  2F10      4572          move.l    (A0),-(A7)
00002920  2F05      4573          move.l    D5,-(A7)
00002922  4879 0000 4574          pea       @mdnod_154.L
00002926  48DE      
00002928  4E92      4575          jsr       (A2)
0000292A  DEFC 000C 4576          add.w     #12,A7
                    4577   ; counter = 0;
0000292E  4283      4578          clr.l     D3
                    4579   MemoryTest_83:
                    4580   ; }
                    4581   ; longptr++;
00002930  5885      4582          addq.l    #4,D5
00002932  609C      4583          bra       MemoryTest_76
                    4584   MemoryTest_78:
00002934  4CDF 3CFC 4585          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002938  4E5E      4586          unlk      A6
0000293A  4E75      4587          rts
                    4588   ; }
                    4589   ; }
                    4590   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4591   ; }
                    4592   ; void main(void)
                    4593   ; {
                    4594   _main:
0000293C  4E56 FFF4 4595          link      A6,#-12
00002940  48E7 3030 4596          movem.l   D2/D3/A2/A3,-(A7)
00002944  45F8 0A30 4597          lea       _InstallExceptionHandler.L,A2
00002948  47F9 0000 4598          lea       _printf.L,A3
0000294C  2DE8      
                    4599   ; char c ;
                    4600   ; int i, j ;
                    4601   ; char *BugMessage = "DE1-68k Bug V1.77";
0000294E  41F9 0000 4602          lea       @mdnod_157.L,A0
00002952  492E      
00002954  2608      4603          move.l    A0,D3
                    4604   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002956  41F9 0000 4605          lea       @mdnod_158.L,A0
0000295A  4940      
0000295C  2D48 FFFC 4606          move.l    A0,-4(A6)
                    4607   ; KillAllBreakPoints() ;
00002960  4EB8 1C1C 4608          jsr       _KillAllBreakPoints
                    4609   ; i = x = y = z = PortA_Count = 0;
00002964  42B9 0803 4610          clr.l     _PortA_Count.L
00002968  00D4      
0000296A  42B9 0803 4611          clr.l     _z.L
0000296E  00D0      
00002970  42B9 0803 4612          clr.l     _y.L
00002974  00CC      
00002976  42B9 0803 4613          clr.l     _x.L
0000297A  00C8      
0000297C  4282      4614          clr.l     D2
                    4615   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
0000297E  42B9 0803 4616          clr.l     _GoFlag.L
00002982  00DC      
00002984  42B9 0803 4617          clr.l     _Trace.L
00002988  00D8      
                    4618   ; Echo = 1 ;
0000298A  23FC 0000 4619          move.l    #1,_Echo.L
0000298E  0001 0803 
00002992  00E0      
                    4620   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002994  42B9 0803 4621          clr.l     _d7.L
00002998  0100      
0000299A  42B9 0803 4622          clr.l     _d6.L
0000299E  00FC      
000029A0  42B9 0803 4623          clr.l     _d5.L
000029A4  00F8      
000029A6  42B9 0803 4624          clr.l     _d4.L
000029AA  00F4      
000029AC  42B9 0803 4625          clr.l     _d3.L
000029B0  00F0      
000029B2  42B9 0803 4626          clr.l     _d2.L
000029B6  00EC      
000029B8  42B9 0803 4627          clr.l     _d1.L
000029BC  00E8      
000029BE  42B9 0803 4628          clr.l     _d0.L
000029C2  00E4      
                    4629   ; a0=a1=a2=a3=a4=a5=a6=0 ;
000029C4  42B9 0803 4630          clr.l     _a6.L
000029C8  011C      
000029CA  42B9 0803 4631          clr.l     _a5.L
000029CE  0118      
000029D0  42B9 0803 4632          clr.l     _a4.L
000029D4  0114      
000029D6  42B9 0803 4633          clr.l     _a3.L
000029DA  0110      
000029DC  42B9 0803 4634          clr.l     _a2.L
000029E0  010C      
000029E2  42B9 0803 4635          clr.l     _a1.L
000029E6  0108      
000029E8  42B9 0803 4636          clr.l     _a0.L
000029EC  0104      
                    4637   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000029EE  23FC 0800 4638          move.l    #134217728,_PC.L
000029F2  0000 0803 
000029F6  0120      
000029F8  23FC 0804 4639          move.l    #134479872,_SSP.L
000029FC  0000 0803 
00002A00  0124      
00002A02  23FC 0804 4640          move.l    #134479872,_USP.L
00002A06  0000 0803 
00002A0A  0128      
                    4641   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002A0C  33FC 2000 4642          move.w    #8192,_SR.L
00002A10  0803 012C 
                    4643   ; // Initialise Breakpoint variables
                    4644   ; for(i = 0; i < 8; i++)  {
00002A14  4282      4645          clr.l     D2
                    4646   main_1:
00002A16  0C82 0000 4647          cmp.l     #8,D2
00002A1A  0008      
00002A1C  6C00 004C 4648          bge       main_3
                    4649   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002A20  2002      4650          move.l    D2,D0
00002A22  E588      4651          lsl.l     #2,D0
00002A24  41F9 0803 4652          lea       _BreakPointAddress.L,A0
00002A28  012E      
00002A2A  42B0 0800 4653          clr.l     0(A0,D0.L)
                    4654   ; WatchPointAddress[i] = 0 ;
00002A2E  2002      4655          move.l    D2,D0
00002A30  E588      4656          lsl.l     #2,D0
00002A32  41F9 0803 4657          lea       _WatchPointAddress.L,A0
00002A36  0182      
00002A38  42B0 0800 4658          clr.l     0(A0,D0.L)
                    4659   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002A3C  2002      4660          move.l    D2,D0
00002A3E  E388      4661          lsl.l     #1,D0
00002A40  41F9 0803 4662          lea       _BreakPointInstruction.L,A0
00002A44  014E      
00002A46  4270 0800 4663          clr.w     0(A0,D0.L)
                    4664   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002A4A  2002      4665          move.l    D2,D0
00002A4C  E588      4666          lsl.l     #2,D0
00002A4E  41F9 0803 4667          lea       _BreakPointSetOrCleared.L,A0
00002A52  015E      
00002A54  42B0 0800 4668          clr.l     0(A0,D0.L)
                    4669   ; WatchPointSetOrCleared[i] = 0;
00002A58  2002      4670          move.l    D2,D0
00002A5A  E588      4671          lsl.l     #2,D0
00002A5C  41F9 0803 4672          lea       _WatchPointSetOrCleared.L,A0
00002A60  01A2      
00002A62  42B0 0800 4673          clr.l     0(A0,D0.L)
00002A66  5282      4674          addq.l    #1,D2
00002A68  60AC      4675          bra       main_1
                    4676   main_3:
                    4677   ; }
                    4678   ; Init_RS232() ;     // initialise the RS232 port
00002A6A  4EB8 0B12 4679          jsr       _Init_RS232
                    4680   ; Init_LCD() ;
00002A6E  4EB8 095E 4681          jsr       _Init_LCD
                    4682   ; for( i = 32; i < 48; i++)
00002A72  7420      4683          moveq     #32,D2
                    4684   main_4:
00002A74  0C82 0000 4685          cmp.l     #48,D2
00002A78  0030      
00002A7A  6C0E      4686          bge.s     main_6
                    4687   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002A7C  2F02      4688          move.l    D2,-(A7)
00002A7E  4878 2494 4689          pea       _UnhandledTrap.L
00002A82  4E92      4690          jsr       (A2)
00002A84  504F      4691          addq.w    #8,A7
00002A86  5282      4692          addq.l    #1,D2
00002A88  60EA      4693          bra       main_4
                    4694   main_6:
                    4695   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002A8A  4878 002F 4696          pea       47
00002A8E  4878 216E 4697          pea       _menu.L
00002A92  4E92      4698          jsr       (A2)
00002A94  504F      4699          addq.w    #8,A7
                    4700   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002A96  4878 0019 4701          pea       25
00002A9A  4878 243A 4702          pea       _UnhandledIRQ1.L
00002A9E  4E92      4703          jsr       (A2)
00002AA0  504F      4704          addq.w    #8,A7
                    4705   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002AA2  4878 001A 4706          pea       26
00002AA6  4878 2446 4707          pea       _UnhandledIRQ2.L
00002AAA  4E92      4708          jsr       (A2)
00002AAC  504F      4709          addq.w    #8,A7
                    4710   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002AAE  4878 001B 4711          pea       27
00002AB2  4878 2452 4712          pea       _UnhandledIRQ3.L
00002AB6  4E92      4713          jsr       (A2)
00002AB8  504F      4714          addq.w    #8,A7
                    4715   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002ABA  4878 001C 4716          pea       28
00002ABE  4878 245E 4717          pea       _UnhandledIRQ4.L
00002AC2  4E92      4718          jsr       (A2)
00002AC4  504F      4719          addq.w    #8,A7
                    4720   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002AC6  4878 001D 4721          pea       29
00002ACA  4878 246A 4722          pea       _UnhandledIRQ5.L
00002ACE  4E92      4723          jsr       (A2)
00002AD0  504F      4724          addq.w    #8,A7
                    4725   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002AD2  4878 001E 4726          pea       30
00002AD6  4878 2476 4727          pea       _UnhandledIRQ6.L
00002ADA  4E92      4728          jsr       (A2)
00002ADC  504F      4729          addq.w    #8,A7
                    4730   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002ADE  4878 001F 4731          pea       31
00002AE2  4878 2488 4732          pea       _UnhandledIRQ7.L
00002AE6  4E92      4733          jsr       (A2)
00002AE8  504F      4734          addq.w    #8,A7
                    4735   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002AEA  4878 002E 4736          pea       46
00002AEE  4878 1EAA 4737          pea       _HandleBreakPoint.L
00002AF2  4E92      4738          jsr       (A2)
00002AF4  504F      4739          addq.w    #8,A7
                    4740   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002AF6  4878 001D 4741          pea       29
00002AFA  4878 158A 4742          pea       _DumpRegistersandPause.L
00002AFE  4E92      4743          jsr       (A2)
00002B00  504F      4744          addq.w    #8,A7
                    4745   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002B02  4878 0002 4746          pea       2
00002B06  4878 24A2 4747          pea       _BusError.L
00002B0A  4E92      4748          jsr       (A2)
00002B0C  504F      4749          addq.w    #8,A7
                    4750   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002B0E  4878 0003 4751          pea       3
00002B12  4878 24B0 4752          pea       _AddressError.L
00002B16  4E92      4753          jsr       (A2)
00002B18  504F      4754          addq.w    #8,A7
                    4755   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002B1A  4878 0004 4756          pea       4
00002B1E  4878 24BE 4757          pea       _IllegalInstruction.L
00002B22  4E92      4758          jsr       (A2)
00002B24  504F      4759          addq.w    #8,A7
                    4760   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002B26  4878 0005 4761          pea       5
00002B2A  4878 24CC 4762          pea       _Dividebyzero.L
00002B2E  4E92      4763          jsr       (A2)
00002B30  504F      4764          addq.w    #8,A7
                    4765   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002B32  4878 0006 4766          pea       6
00002B36  4878 24DA 4767          pea       _Check.L
00002B3A  4E92      4768          jsr       (A2)
00002B3C  504F      4769          addq.w    #8,A7
                    4770   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002B3E  4878 0007 4771          pea       7
00002B42  4878 24E8 4772          pea       _Trapv.L
00002B46  4E92      4773          jsr       (A2)
00002B48  504F      4774          addq.w    #8,A7
                    4775   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002B4A  4878 0008 4776          pea       8
00002B4E  4878 24F6 4777          pea       _PrivError.L
00002B52  4E92      4778          jsr       (A2)
00002B54  504F      4779          addq.w    #8,A7
                    4780   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002B56  4878 000F 4781          pea       15
00002B5A  4878 2504 4782          pea       _UnitIRQ.L
00002B5E  4E92      4783          jsr       (A2)
00002B60  504F      4784          addq.w    #8,A7
                    4785   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002B62  4878 0018 4786          pea       24
00002B66  4878 24DA 4787          pea       _Check.L
00002B6A  4E92      4788          jsr       (A2)
00002B6C  504F      4789          addq.w    #8,A7
                    4790   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002B6E  4EB8 0BA6 4791          jsr       _FlushKeyboard
                    4792   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002B72  4239 0040 4793          clr.b     4194314
00002B76  000A      
                    4794   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4795   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4796   main_7:
00002B78  1039 0040 4797          move.b    4194306,D0
00002B7C  0002      
00002B7E  C03C 0002 4798          and.b     #2,D0
00002B82  0C00 0002 4799          cmp.b     #2,D0
00002B86  662A      4800          bne.s     main_9
                    4801   ; LoadFromFlashChip();
00002B88  4EB8 10C6 4802          jsr       _LoadFromFlashChip
                    4803   ; printf("\r\nRunning.....") ;
00002B8C  4879 0000 4804          pea       @mdnod_159.L
00002B90  495E      
00002B92  4E93      4805          jsr       (A3)
00002B94  584F      4806          addq.w    #4,A7
                    4807   ; Oline1("Running.....") ;
00002B96  4879 0000 4808          pea       @mdnod_160.L
00002B9A  496E      
00002B9C  4EB8 0A02 4809          jsr       _Oline1
00002BA0  584F      4810          addq.w    #4,A7
                    4811   ; GoFlag = 1;
00002BA2  23FC 0000 4812          move.l    #1,_GoFlag.L
00002BA6  0001 0803 
00002BAA  00DC      
                    4813   ; go() ;
00002BAC  4EB8 08B8 4814          jsr       _go
00002BB0  60C6      4815          bra       main_7
                    4816   main_9:
                    4817   ; }
                    4818   ; // otherwise start the debug monitor
                    4819   ; Oline0(BugMessage) ;
00002BB2  2F03      4820          move.l    D3,-(A7)
00002BB4  4EB8 09D4 4821          jsr       _Oline0
00002BB8  584F      4822          addq.w    #4,A7
                    4823   ; Oline1("By: PJ Davies") ;
00002BBA  4879 0000 4824          pea       @mdnod_161.L
00002BBE  497C      
00002BC0  4EB8 0A02 4825          jsr       _Oline1
00002BC4  584F      4826          addq.w    #4,A7
                    4827   ; printf("\r\n%s", BugMessage) ;
00002BC6  2F03      4828          move.l    D3,-(A7)
00002BC8  4879 0000 4829          pea       @mdnod_162.L
00002BCC  498A      
00002BCE  4E93      4830          jsr       (A3)
00002BD0  504F      4831          addq.w    #8,A7
                    4832   ; printf("\r\n%s", CopyrightMessage) ;
00002BD2  2F2E FFFC 4833          move.l    -4(A6),-(A7)
00002BD6  4879 0000 4834          pea       @mdnod_162.L
00002BDA  498A      
00002BDC  4E93      4835          jsr       (A3)
00002BDE  504F      4836          addq.w    #8,A7
                    4837   ; menu();
00002BE0  4EB8 216E 4838          jsr       _menu
00002BE4  4CDF 0C0C 4839          movem.l   (A7)+,D2/D3/A2/A3
00002BE8  4E5E      4840          unlk      A6
00002BEA  4E75      4841          rts
                    4842   ; }
                    4843   _strcpy:
00002BEC  206F 0004 4844          move.l    (4,A7),A0
00002BF0  226F 0008 4845          move.l    (8,A7),A1
00002BF4  2008      4846          move.l    A0,D0
                    4847   strcpy_1:
00002BF6  10D9      4848          move.b    (A1)+,(A0)+
00002BF8  66FC      4849          bne       strcpy_1
00002BFA  4E75      4850          rts
                    4851   ULDIV:
00002BFC  4E56 0000 4852          link    A6,#0
00002C00  48E7 C000 4853          movem.l D0/D1,-(A7)
00002C04  222E 0008 4854          move.l  8(A6),D1
00002C08  202E 000C 4855          move.l  12(A6),D0
00002C0C  6036      4856          bra.s   ldiv_3
                    4857   LDIV:
00002C0E  4E56 0000 4858          link    A6,#0
00002C12  48E7 C000 4859          movem.l D0/D1,-(A7)
00002C16  222E 0008 4860          move.l  8(A6),D1
00002C1A  202E 000C 4861          move.l  12(A6),D0
00002C1E  4A80      4862          tst.l   D0
00002C20  6A0E      4863          bpl.s   ldiv_1
00002C22  4480      4864          neg.l   D0
00002C24  4A81      4865          tst.l   D1
00002C26  6A14      4866          bpl.s   ldiv_2
00002C28  4481      4867          neg.l   D1
00002C2A  612A      4868          bsr.s   dodiv
00002C2C  4481      4869          neg.l   D1
00002C2E  6016      4870          bra.s   ldiv_4
                    4871   ldiv_1:
00002C30  4A81      4872          tst.l   D1
00002C32  6A10      4873          bpl.s   ldiv_3
00002C34  4481      4874          neg.l   D1
00002C36  611E      4875          bsr.s   dodiv
00002C38  4480      4876          neg.l   D0
00002C3A  600A      4877          bra.s   ldiv_4
                    4878   ldiv_2:
00002C3C  6118      4879          bsr.s   dodiv
00002C3E  4480      4880          neg.l   D0
00002C40  4481      4881          neg.l   D1
00002C42  6002      4882          bra.s   ldiv_4
                    4883   ldiv_3:
00002C44  6110      4884          bsr.s   dodiv
                    4885   ldiv_4:
00002C46  2D40 0008 4886          move.l  D0,8(A6)
00002C4A  2D41 000C 4887          move.l  D1,12(A6)
00002C4E  4CDF 0003 4888          movem.l (A7)+,D0/D1
00002C52  4E5E      4889          unlk    A6
00002C54  4E75      4890          rts
                    4891   dodiv:
00002C56  0C81 0000 4892          cmpi.l  #$FFFF,D1
00002C5A  FFFF      
00002C5C  6236      4893          bhi.s   dodiv_2
00002C5E  0C80 0000 4894          cmpi.l  #$FFFF,D0
00002C62  FFFF      
00002C64  6210      4895          bhi.s   dodiv_1
00002C66  80C1      4896          divu    D1,D0
00002C68  2200      4897          move.l  D0,D1
00002C6A  4241      4898          clr.w   D1
00002C6C  4841      4899          swap    D1
00002C6E  0280 0000 4900          andi.l  #$FFFF,D0
00002C72  FFFF      
00002C74  4E75      4901          rts
                    4902   dodiv_1:
00002C76  48A7 A000 4903          movem.w D0/D2,-(A7)
00002C7A  4240      4904          clr.w   D0
00002C7C  4840      4905          swap    D0
00002C7E  80C1      4906          divu    D1,D0
00002C80  3400      4907          move.w  D0,D2
00002C82  301F      4908          move.w  (A7)+,D0
00002C84  80C1      4909          divu    D1,D0
00002C86  4840      4910          swap    D0
00002C88  4281      4911          clr.l   D1
00002C8A  3200      4912          move.w  D0,D1
00002C8C  3002      4913          move.w  D2,D0
00002C8E  4840      4914          swap    D0
00002C90  341F      4915          move.w  (A7)+,D2
00002C92  4E75      4916          rts
                    4917   dodiv_2:
00002C94  48E7 3800 4918          movem.l D2/D3/D4,-(A7)
00002C98  2401      4919          move.l  D1,D2
00002C9A  4242      4920          clr.w   D2
00002C9C  4842      4921          swap    D2
00002C9E  5282      4922          addq.l  #1,D2
00002CA0  2600      4923          move.l  D0,D3
00002CA2  2801      4924          move.l  D1,D4
00002CA4  2202      4925          move.l  D2,D1
00002CA6  61CE      4926          bsr.s   dodiv_1
00002CA8  2204      4927          move.l  D4,D1
00002CAA  82C2      4928          divu    D2,D1
00002CAC  80C1      4929          divu    D1,D0
00002CAE  0280 0000 4930          andi.l  #$FFFF,D0
00002CB2  FFFF      
                    4931   dodiv_3:
00002CB4  2204      4932          move.l  D4,D1
00002CB6  2404      4933          move.l  D4,D2
00002CB8  4842      4934          swap    D2
00002CBA  C2C0      4935          mulu    D0,D1
00002CBC  C4C0      4936          mulu    D0,D2
00002CBE  4842      4937          swap    D2
00002CC0  D282      4938          add.l   D2,D1
00002CC2  9283      4939          sub.l   D3,D1
00002CC4  620A      4940          bhi.s   dodiv_4
00002CC6  4481      4941          neg.l   D1
00002CC8  B881      4942          cmp.l   D1,D4
00002CCA  6208      4943          bhi.s   dodiv_5
00002CCC  5280      4944          addq.l  #1,D0
00002CCE  60E4      4945          bra.s   dodiv_3
                    4946   dodiv_4:
00002CD0  5380      4947          subq.l  #1,D0
00002CD2  60E0      4948          bra.s   dodiv_3
                    4949   dodiv_5:
00002CD4  4CDF 001C 4950          movem.l (A7)+,D2/D3/D4
00002CD8  4E75      4951          rts
                    4952   _putch:
00002CDA  4E56 0000 4953          link      A6,#0
00002CDE  48E7 2000 4954          movem.l   D2,-(A7)
00002CE2  242E 0008 4955          move.l    8(A6),D2
00002CE6  0C82 0000 4956          cmp.l     #10,D2
00002CEA  000A      
00002CEC  660A      4957          bne.s     putch_1
00002CEE  4878 000D 4958          pea       13
00002CF2  6100 DE48 4959          bsr       __putch
00002CF6  584F      4960          addq.w    #4,A7
                    4961   putch_1:
00002CF8  2F02      4962          move.l    D2,-(A7)
00002CFA  6100 DE40 4963          bsr       __putch
00002CFE  584F      4964          addq.w    #4,A7
00002D00  2002      4965          move.l    D2,D0
00002D02  4CDF 0004 4966          movem.l   (A7)+,D2
00002D06  4E5E      4967          unlk      A6
00002D08  4E75      4968          rts
                    4969   _getch:
00002D0A  48E7 2000 4970          movem.l   D2,-(A7)
00002D0E  2439 0803 4971          move.l    __ungetbuf,D2
00002D12  00C0      
00002D14  2039 0803 4972          move.l    __ungetbuf,D0
00002D18  00C0      
00002D1A  0C80 FFFF 4973          cmp.l     #-1,D0
00002D1E  FFFF      
00002D20  670C      4974          beq.s     getch_1
00002D22  23FC FFFF 4975          move.l    #-1,__ungetbuf
00002D26  FFFF 0803 
00002D2A  00C0      
00002D2C  6010      4976          bra.s     getch_3
                    4977   getch_1:
00002D2E  6100 DE38 4978          bsr       __getch
00002D32  2400      4979          move.l    D0,D2
00002D34  0C80 0000 4980          cmp.l     #13,D0
00002D38  000D      
00002D3A  6602      4981          bne.s     getch_3
00002D3C  740A      4982          moveq     #10,D2
                    4983   getch_3:
00002D3E  2002      4984          move.l    D2,D0
00002D40  4CDF 0004 4985          movem.l   (A7)+,D2
00002D44  4E75      4986          rts
                    4987   _tolower:
00002D46  4E56 0000 4988          link      A6,#0
00002D4A  48E7 2000 4989          movem.l   D2,-(A7)
00002D4E  242E 0008 4990          move.l    8(A6),D2
00002D52  0C82 0000 4991          cmp.l     #65,D2
00002D56  0041      
00002D58  6D0E      4992          blt.s     tolower_1
00002D5A  0C82 0000 4993          cmp.l     #90,D2
00002D5E  005A      
00002D60  6E06      4994          bgt.s     tolower_1
00002D62  84BC 0000 4995          or.l      #32,D2
00002D66  0020      
                    4996   tolower_1:
00002D68  2002      4997          move.l    D2,D0
00002D6A  4CDF 0004 4998          movem.l   (A7)+,D2
00002D6E  4E5E      4999          unlk      A6
00002D70  4E75      5000          rts
                    5001   _sprintf:
00002D72  4E56 FFFC 5002          link      A6,#-4
00002D76  48E7 2000 5003          movem.l   D2,-(A7)
00002D7A  41EE 000C 5004          lea       12(A6),A0
00002D7E  5848      5005          addq.w    #4,A0
00002D80  2408      5006          move.l    A0,D2
00002D82  2F02      5007          move.l    D2,-(A7)
00002D84  2F2E 000C 5008          move.l    12(A6),-(A7)
00002D88  2F2E 0008 5009          move.l    8(A6),-(A7)
00002D8C  6100 013E 5010          bsr       _vsprintf
00002D90  DEFC 000C 5011          add.w     #12,A7
00002D94  2D40 FFFC 5012          move.l    D0,-4(A6)
00002D98  4282      5013          clr.l     D2
00002D9A  202E FFFC 5014          move.l    -4(A6),D0
00002D9E  4CDF 0004 5015          movem.l   (A7)+,D2
00002DA2  4E5E      5016          unlk      A6
00002DA4  4E75      5017          rts
                    5018   _strcat:
00002DA6  206F 0004 5019          move.l    (4,A7),A0	
00002DAA  226F 0008 5020          move.l    (8,A7),A1	
00002DAE  2008      5021          move.l    A0,D0		
                    5022   strcat_0:
00002DB0  4A18      5023          tst.b     (A0)+
00002DB2  66FC      5024          bne       strcat_0
00002DB4  5348      5025          subq      #1,A0
                    5026   strcat_1:
00002DB6  10D9      5027          move.b    (A1)+,(A0)+
00002DB8  66FC      5028          bne       strcat_1
00002DBA  4E75      5029          rts
                    5030   _toupper:
00002DBC  4E56 0000 5031          link      A6,#0
00002DC0  48E7 2000 5032          movem.l   D2,-(A7)
00002DC4  242E 0008 5033          move.l    8(A6),D2
00002DC8  0C82 0000 5034          cmp.l     #97,D2
00002DCC  0061      
00002DCE  6D0E      5035          blt.s     toupper_1
00002DD0  0C82 0000 5036          cmp.l     #122,D2
00002DD4  007A      
00002DD6  6E06      5037          bgt.s     toupper_1
00002DD8  C4BC 0000 5038          and.l     #95,D2
00002DDC  005F      
                    5039   toupper_1:
00002DDE  2002      5040          move.l    D2,D0
00002DE0  4CDF 0004 5041          movem.l   (A7)+,D2
00002DE4  4E5E      5042          unlk      A6
00002DE6  4E75      5043          rts
                    5044   _printf:
00002DE8  4E56 FFFC 5045          link      A6,#-4
00002DEC  48E7 2000 5046          movem.l   D2,-(A7)
00002DF0  41EE 0008 5047          lea       8(A6),A0
00002DF4  5848      5048          addq.w    #4,A0
00002DF6  2408      5049          move.l    A0,D2
00002DF8  2F02      5050          move.l    D2,-(A7)
00002DFA  2F2E 0008 5051          move.l    8(A6),-(A7)
00002DFE  42A7      5052          clr.l     -(A7)
00002E00  6100 00CA 5053          bsr       _vsprintf
00002E04  DEFC 000C 5054          add.w     #12,A7
00002E08  2D40 FFFC 5055          move.l    D0,-4(A6)
00002E0C  4282      5056          clr.l     D2
00002E0E  202E FFFC 5057          move.l    -4(A6),D0
00002E12  4CDF 0004 5058          movem.l   (A7)+,D2
00002E16  4E5E      5059          unlk      A6
00002E18  4E75      5060          rts
                    5061   @vsprintf_copy:
00002E1A  4E56 0000 5062          link      A6,#0
00002E1E  206E 0008 5063          move.l    8(A6),A0
00002E22  4A90      5064          tst.l     (A0)
00002E24  6710      5065          beq.s     @vsprintf_copy_1
00002E26  202E 000C 5066          move.l    12(A6),D0
00002E2A  206E 0008 5067          move.l    8(A6),A0
00002E2E  2250      5068          move.l    (A0),A1
00002E30  5290      5069          addq.l    #1,(A0)
00002E32  1280      5070          move.b    D0,(A1)
00002E34  600A      5071          bra.s     @vsprintf_copy_2
                    5072   @vsprintf_copy_1:
00002E36  2F2E 000C 5073          move.l    12(A6),-(A7)
00002E3A  6100 FE9E 5074          bsr       _putch
00002E3E  584F      5075          addq.w    #4,A7
                    5076   @vsprintf_copy_2:
00002E40  4E5E      5077          unlk      A6
00002E42  4E75      5078          rts
                    5079   @vsprintf_getval:
00002E44  4E56 0000 5080          link      A6,#0
00002E48  48E7 3000 5081          movem.l   D2/D3,-(A7)
00002E4C  242E 0008 5082          move.l    8(A6),D2
00002E50  4283      5083          clr.l     D3
00002E52  2042      5084          move.l    D2,A0
00002E54  2050      5085          move.l    (A0),A0
00002E56  1010      5086          move.b    (A0),D0
00002E58  4880      5087          ext.w     D0
00002E5A  48C0      5088          ext.l     D0
00002E5C  0C80 0000 5089          cmp.l     #42,D0
00002E60  002A      
00002E62  6612      5090          bne.s     @vsprintf_getval_1
00002E64  206E 000C 5091          move.l    12(A6),A0
00002E68  2250      5092          move.l    (A0),A1
00002E6A  5890      5093          addq.l    #4,(A0)
00002E6C  2611      5094          move.l    (A1),D3
00002E6E  2042      5095          move.l    D2,A0
00002E70  5290      5096          addq.l    #1,(A0)
00002E72  6000 004E 5097          bra       @vsprintf_getval_5
                    5098   @vsprintf_getval_1:
00002E76  2042      5099          move.l    D2,A0
00002E78  2050      5100          move.l    (A0),A0
00002E7A  1010      5101          move.b    (A0),D0
00002E7C  4880      5102          ext.w     D0
00002E7E  48C0      5103          ext.l     D0
00002E80  0C80 0000 5104          cmp.l     #48,D0
00002E84  0030      
00002E86  6D00 003A 5105          blt       @vsprintf_getval_5
00002E8A  2042      5106          move.l    D2,A0
00002E8C  2050      5107          move.l    (A0),A0
00002E8E  1010      5108          move.b    (A0),D0
00002E90  4880      5109          ext.w     D0
00002E92  48C0      5110          ext.l     D0
00002E94  0C80 0000 5111          cmp.l     #57,D0
00002E98  0039      
00002E9A  6E26      5112          bgt.s     @vsprintf_getval_5
00002E9C  2F03      5113          move.l    D3,-(A7)
00002E9E  4878 000A 5114          pea       10
00002EA2  6100 07F4 5115          bsr       LMUL
00002EA6  2017      5116          move.l    (A7),D0
00002EA8  504F      5117          addq.w    #8,A7
00002EAA  2042      5118          move.l    D2,A0
00002EAC  2250      5119          move.l    (A0),A1
00002EAE  5290      5120          addq.l    #1,(A0)
00002EB0  1211      5121          move.b    (A1),D1
00002EB2  4881      5122          ext.w     D1
00002EB4  48C1      5123          ext.l     D1
00002EB6  D081      5124          add.l     D1,D0
00002EB8  0480 0000 5125          sub.l     #48,D0
00002EBC  0030      
00002EBE  2600      5126          move.l    D0,D3
00002EC0  60B4      5127          bra       @vsprintf_getval_1
                    5128   @vsprintf_getval_5:
00002EC2  2003      5129          move.l    D3,D0
00002EC4  4CDF 000C 5130          movem.l   (A7)+,D2/D3
00002EC8  4E5E      5131          unlk      A6
00002ECA  4E75      5132          rts
                    5133   _vsprintf:
00002ECC  4E56 FFCC 5134          link      A6,#-52
00002ED0  48E7 3F3C 5135          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002ED4  45EE 0008 5136          lea       8(A6),A2
00002ED8  47F8 2E1A 5137          lea       @vsprintf_copy,A3
00002EDC  49F9 0000 5138          lea       _ultoa,A4
00002EE0  3624      
00002EE2  4286      5139          clr.l     D6
                    5140   vsprintf_1:
00002EE4  206E 000C 5141          move.l    12(A6),A0
00002EE8  4A10      5142          tst.b     (A0)
00002EEA  6700 0624 5143          beq       vsprintf_3
00002EEE  206E 000C 5144          move.l    12(A6),A0
00002EF2  1010      5145          move.b    (A0),D0
00002EF4  4880      5146          ext.w     D0
00002EF6  48C0      5147          ext.l     D0
00002EF8  0C80 0000 5148          cmp.l     #37,D0
00002EFC  0025      
00002EFE  671C      5149          beq.s     vsprintf_4
00002F00  206E 000C 5150          move.l    12(A6),A0
00002F04  52AE 000C 5151          addq.l    #1,12(A6)
00002F08  1210      5152          move.b    (A0),D1
00002F0A  4881      5153          ext.w     D1
00002F0C  48C1      5154          ext.l     D1
00002F0E  2F01      5155          move.l    D1,-(A7)
00002F10  2F0A      5156          move.l    A2,-(A7)
00002F12  4E93      5157          jsr       (A3)
00002F14  504F      5158          addq.w    #8,A7
00002F16  5286      5159          addq.l    #1,D6
00002F18  6000 05F2 5160          bra       vsprintf_2
                    5161   vsprintf_4:
00002F1C  52AE 000C 5162          addq.l    #1,12(A6)
00002F20  422E FFD3 5163          clr.b     -45(A6)
00002F24  422E FFD2 5164          clr.b     -46(A6)
00002F28  422E FFD0 5165          clr.b     -48(A6)
00002F2C  422E FFCF 5166          clr.b     -49(A6)
00002F30  422E FFCE 5167          clr.b     -50(A6)
00002F34  422E FFCD 5168          clr.b     -51(A6)
00002F38  42AE FFFC 5169          clr.l     -4(A6)
00002F3C  7AFF      5170          moveq     #-1,D5
00002F3E  41EE FFDC 5171          lea       -36(A6),A0
00002F42  2608      5172          move.l    A0,D3
00002F44  2408      5173          move.l    A0,D2
                    5174   vsprintf_6:
00002F46  206E 000C 5175          move.l    12(A6),A0
00002F4A  1010      5176          move.b    (A0),D0
00002F4C  4880      5177          ext.w     D0
00002F4E  48C0      5178          ext.l     D0
00002F50  0C80 0000 5179          cmp.l     #43,D0
00002F54  002B      
00002F56  6730      5180          beq.s     vsprintf_12
00002F58  6E18      5181          bgt.s     vsprintf_15
00002F5A  0C80 0000 5182          cmp.l     #35,D0
00002F5E  0023      
00002F60  6700 003E 5183          beq       vsprintf_14
00002F64  6E00 0046 5184          bgt       vsprintf_9
00002F68  0C80 0000 5185          cmp.l     #32,D0
00002F6C  0020      
00002F6E  6724      5186          beq.s     vsprintf_13
00002F70  603A      5187          bra.s     vsprintf_9
                    5188   vsprintf_15:
00002F72  0C80 0000 5189          cmp.l     #45,D0
00002F76  002D      
00002F78  6702      5190          beq.s     vsprintf_11
00002F7A  6030      5191          bra.s     vsprintf_9
                    5192   vsprintf_11:
00002F7C  1D7C 0001 5193          move.b    #1,-51(A6)
00002F80  FFCD      
00002F82  52AE 000C 5194          addq.l    #1,12(A6)
00002F86  6026      5195          bra.s     vsprintf_7
                    5196   vsprintf_12:
00002F88  1D7C 0001 5197          move.b    #1,-50(A6)
00002F8C  FFCE      
00002F8E  52AE 000C 5198          addq.l    #1,12(A6)
00002F92  601A      5199          bra.s     vsprintf_7
                    5200   vsprintf_13:
00002F94  1D7C 0001 5201          move.b    #1,-49(A6)
00002F98  FFCF      
00002F9A  52AE 000C 5202          addq.l    #1,12(A6)
00002F9E  600E      5203          bra.s     vsprintf_7
                    5204   vsprintf_14:
00002FA0  1D7C 0001 5205          move.b    #1,-48(A6)
00002FA4  FFD0      
00002FA6  52AE 000C 5206          addq.l    #1,12(A6)
00002FAA  6002      5207          bra.s     vsprintf_7
                    5208   vsprintf_9:
00002FAC  6002      5209          bra.s     vsprintf_8
                    5210   vsprintf_7:
00002FAE  6096      5211          bra       vsprintf_6
                    5212   vsprintf_8:
00002FB0  206E 000C 5213          move.l    12(A6),A0
00002FB4  1010      5214          move.b    (A0),D0
00002FB6  4880      5215          ext.w     D0
00002FB8  48C0      5216          ext.l     D0
00002FBA  0C80 0000 5217          cmp.l     #48,D0
00002FBE  0030      
00002FC0  660A      5218          bne.s     vsprintf_16
00002FC2  52AE 000C 5219          addq.l    #1,12(A6)
00002FC6  1D7C 0001 5220          move.b    #1,-46(A6)
00002FCA  FFD2      
                    5221   vsprintf_16:
00002FCC  486E 0010 5222          pea       16(A6)
00002FD0  486E 000C 5223          pea       12(A6)
00002FD4  6100 FE6E 5224          bsr       @vsprintf_getval
00002FD8  504F      5225          addq.w    #8,A7
00002FDA  2A40      5226          move.l    D0,A5
00002FDC  206E 000C 5227          move.l    12(A6),A0
00002FE0  1010      5228          move.b    (A0),D0
00002FE2  4880      5229          ext.w     D0
00002FE4  48C0      5230          ext.l     D0
00002FE6  0C80 0000 5231          cmp.l     #46,D0
00002FEA  002E      
00002FEC  6614      5232          bne.s     vsprintf_18
00002FEE  52AE 000C 5233          addq.l    #1,12(A6)
00002FF2  486E 0010 5234          pea       16(A6)
00002FF6  486E 000C 5235          pea       12(A6)
00002FFA  6100 FE48 5236          bsr       @vsprintf_getval
00002FFE  504F      5237          addq.w    #8,A7
00003000  2A00      5238          move.l    D0,D5
                    5239   vsprintf_18:
00003002  206E 000C 5240          move.l    12(A6),A0
00003006  1010      5241          move.b    (A0),D0
00003008  4880      5242          ext.w     D0
0000300A  48C0      5243          ext.l     D0
0000300C  0C80 0000 5244          cmp.l     #108,D0
00003010  006C      
00003012  660A      5245          bne.s     vsprintf_20
00003014  52AE 000C 5246          addq.l    #1,12(A6)
00003018  1D7C 0001 5247          move.b    #1,-45(A6)
0000301C  FFD3      
                    5248   vsprintf_20:
0000301E  206E 000C 5249          move.l    12(A6),A0
00003022  1010      5250          move.b    (A0),D0
00003024  4880      5251          ext.w     D0
00003026  48C0      5252          ext.l     D0
00003028  0C80 0000 5253          cmp.l     #111,D0
0000302C  006F      
0000302E  6700 00D4 5254          beq       vsprintf_27
00003032  6E34      5255          bgt.s     vsprintf_33
00003034  0C80 0000 5256          cmp.l     #100,D0
00003038  0064      
0000303A  6700 0054 5257          beq       vsprintf_24
0000303E  6E1C      5258          bgt.s     vsprintf_34
00003040  0C80 0000 5259          cmp.l     #99,D0
00003044  0063      
00003046  6700 012C 5260          beq       vsprintf_30
0000304A  6E00 016A 5261          bgt       vsprintf_22
0000304E  0C80 0000 5262          cmp.l     #88,D0
00003052  0058      
00003054  6700 00E6 5263          beq       vsprintf_28
00003058  6000 015C 5264          bra       vsprintf_22
                    5265   vsprintf_34:
0000305C  0C80 0000 5266          cmp.l     #105,D0
00003060  0069      
00003062  672C      5267          beq.s     vsprintf_24
00003064  6000 0150 5268          bra       vsprintf_22
                    5269   vsprintf_33:
00003068  0C80 0000 5270          cmp.l     #117,D0
0000306C  0075      
0000306E  6700 005C 5271          beq       vsprintf_26
00003072  6E0E      5272          bgt.s     vsprintf_35
00003074  0C80 0000 5273          cmp.l     #115,D0
00003078  0073      
0000307A  6700 011C 5274          beq       vsprintf_31
0000307E  6000 0136 5275          bra       vsprintf_22
                    5276   vsprintf_35:
00003082  0C80 0000 5277          cmp.l     #120,D0
00003086  0078      
00003088  6700 00B2 5278          beq       vsprintf_28
0000308C  6000 0128 5279          bra       vsprintf_22
                    5280   vsprintf_24:
00003090  4A2E FFD3 5281          tst.b     -45(A6)
00003094  671A      5282          beq.s     vsprintf_36
00003096  4878 000A 5283          pea       10
0000309A  2F03      5284          move.l    D3,-(A7)
0000309C  206E 0010 5285          move.l    16(A6),A0
000030A0  58AE 0010 5286          addq.l    #4,16(A6)
000030A4  2F10      5287          move.l    (A0),-(A7)
000030A6  6100 04F8 5288          bsr       _ltoa
000030AA  DEFC 000C 5289          add.w     #12,A7
000030AE  6018      5290          bra.s     vsprintf_37
                    5291   vsprintf_36:
000030B0  4878 000A 5292          pea       10
000030B4  2F03      5293          move.l    D3,-(A7)
000030B6  206E 0010 5294          move.l    16(A6),A0
000030BA  58AE 0010 5295          addq.l    #4,16(A6)
000030BE  2F10      5296          move.l    (A0),-(A7)
000030C0  6100 04DE 5297          bsr       _ltoa
000030C4  DEFC 000C 5298          add.w     #12,A7
                    5299   vsprintf_37:
000030C8  6000 00FA 5300          bra       vsprintf_23
                    5301   vsprintf_26:
000030CC  4A2E FFD3 5302          tst.b     -45(A6)
000030D0  6718      5303          beq.s     vsprintf_38
000030D2  4878 000A 5304          pea       10
000030D6  2F03      5305          move.l    D3,-(A7)
000030D8  206E 0010 5306          move.l    16(A6),A0
000030DC  58AE 0010 5307          addq.l    #4,16(A6)
000030E0  2F10      5308          move.l    (A0),-(A7)
000030E2  4E94      5309          jsr       (A4)
000030E4  DEFC 000C 5310          add.w     #12,A7
000030E8  6016      5311          bra.s     vsprintf_39
                    5312   vsprintf_38:
000030EA  4878 000A 5313          pea       10
000030EE  2F03      5314          move.l    D3,-(A7)
000030F0  206E 0010 5315          move.l    16(A6),A0
000030F4  58AE 0010 5316          addq.l    #4,16(A6)
000030F8  2F10      5317          move.l    (A0),-(A7)
000030FA  4E94      5318          jsr       (A4)
000030FC  DEFC 000C 5319          add.w     #12,A7
                    5320   vsprintf_39:
00003100  6000 00C2 5321          bra       vsprintf_23
                    5322   vsprintf_27:
00003104  4A2E FFD3 5323          tst.b     -45(A6)
00003108  6718      5324          beq.s     vsprintf_40
0000310A  4878 0008 5325          pea       8
0000310E  2F03      5326          move.l    D3,-(A7)
00003110  206E 0010 5327          move.l    16(A6),A0
00003114  58AE 0010 5328          addq.l    #4,16(A6)
00003118  2F10      5329          move.l    (A0),-(A7)
0000311A  4E94      5330          jsr       (A4)
0000311C  DEFC 000C 5331          add.w     #12,A7
00003120  6016      5332          bra.s     vsprintf_41
                    5333   vsprintf_40:
00003122  4878 0008 5334          pea       8
00003126  2F03      5335          move.l    D3,-(A7)
00003128  206E 0010 5336          move.l    16(A6),A0
0000312C  58AE 0010 5337          addq.l    #4,16(A6)
00003130  2F10      5338          move.l    (A0),-(A7)
00003132  4E94      5339          jsr       (A4)
00003134  DEFC 000C 5340          add.w     #12,A7
                    5341   vsprintf_41:
00003138  6000 008A 5342          bra       vsprintf_23
                    5343   vsprintf_28:
0000313C  4A2E FFD3 5344          tst.b     -45(A6)
00003140  6718      5345          beq.s     vsprintf_42
00003142  4878 0010 5346          pea       16
00003146  2F03      5347          move.l    D3,-(A7)
00003148  206E 0010 5348          move.l    16(A6),A0
0000314C  58AE 0010 5349          addq.l    #4,16(A6)
00003150  2F10      5350          move.l    (A0),-(A7)
00003152  4E94      5351          jsr       (A4)
00003154  DEFC 000C 5352          add.w     #12,A7
00003158  6016      5353          bra.s     vsprintf_43
                    5354   vsprintf_42:
0000315A  4878 0010 5355          pea       16
0000315E  2F03      5356          move.l    D3,-(A7)
00003160  206E 0010 5357          move.l    16(A6),A0
00003164  58AE 0010 5358          addq.l    #4,16(A6)
00003168  2F10      5359          move.l    (A0),-(A7)
0000316A  4E94      5360          jsr       (A4)
0000316C  DEFC 000C 5361          add.w     #12,A7
                    5362   vsprintf_43:
00003170  6000 0052 5363          bra       vsprintf_23
                    5364   vsprintf_30:
00003174  206E 0010 5365          move.l    16(A6),A0
00003178  58AE 0010 5366          addq.l    #4,16(A6)
0000317C  2010      5367          move.l    (A0),D0
0000317E  2042      5368          move.l    D2,A0
00003180  5282      5369          addq.l    #1,D2
00003182  1080      5370          move.b    D0,(A0)
00003184  2042      5371          move.l    D2,A0
00003186  4210      5372          clr.b     (A0)
00003188  200D      5373          move.l    A5,D0
0000318A  6704      5374          beq.s     vsprintf_44
0000318C  200D      5375          move.l    A5,D0
0000318E  6002      5376          bra.s     vsprintf_45
                    5377   vsprintf_44:
00003190  7001      5378          moveq     #1,D0
                    5379   vsprintf_45:
00003192  2A00      5380          move.l    D0,D5
00003194  6000 002E 5381          bra       vsprintf_23
                    5382   vsprintf_31:
00003198  206E 0010 5383          move.l    16(A6),A0
0000319C  58AE 0010 5384          addq.l    #4,16(A6)
000031A0  2610      5385          move.l    (A0),D3
000031A2  0C85 FFFF 5386          cmp.l     #-1,D5
000031A6  FFFF      
000031A8  660A      5387          bne.s     vsprintf_46
000031AA  2F03      5388          move.l    D3,-(A7)
000031AC  6100 0578 5389          bsr       _strlen
000031B0  584F      5390          addq.w    #4,A7
000031B2  2A00      5391          move.l    D0,D5
                    5392   vsprintf_46:
000031B4  600E      5393          bra.s     vsprintf_23
                    5394   vsprintf_22:
000031B6  206E 000C 5395          move.l    12(A6),A0
000031BA  2242      5396          move.l    D2,A1
000031BC  5282      5397          addq.l    #1,D2
000031BE  1290      5398          move.b    (A0),(A1)
000031C0  2042      5399          move.l    D2,A0
000031C2  4210      5400          clr.b     (A0)
                    5401   vsprintf_23:
000031C4  2F03      5402          move.l    D3,-(A7)
000031C6  6100 055E 5403          bsr       _strlen
000031CA  584F      5404          addq.w    #4,A7
000031CC  1800      5405          move.b    D0,D4
000031CE  206E 000C 5406          move.l    12(A6),A0
000031D2  1010      5407          move.b    (A0),D0
000031D4  4880      5408          ext.w     D0
000031D6  48C0      5409          ext.l     D0
000031D8  0C80 0000 5410          cmp.l     #115,D0
000031DC  0073      
000031DE  6618      5411          bne.s     vsprintf_48
000031E0  0C85 0000 5412          cmp.l     #0,D5
000031E4  0000      
000031E6  6D10      5413          blt.s     vsprintf_48
000031E8  4884      5414          ext.w     D4
000031EA  48C4      5415          ext.l     D4
000031EC  B885      5416          cmp.l     D5,D4
000031EE  6F04      5417          ble.s     vsprintf_50
000031F0  1005      5418          move.b    D5,D0
000031F2  6002      5419          bra.s     vsprintf_51
                    5420   vsprintf_50:
000031F4  1004      5421          move.b    D4,D0
                    5422   vsprintf_51:
000031F6  1800      5423          move.b    D0,D4
                    5424   vsprintf_48:
000031F8  206E 000C 5425          move.l    12(A6),A0
000031FC  1010      5426          move.b    (A0),D0
000031FE  4880      5427          ext.w     D0
00003200  48C0      5428          ext.l     D0
00003202  0C80 0000 5429          cmp.l     #88,D0
00003206  0058      
00003208  6600 0026 5430          bne       vsprintf_56
0000320C  41EE FFDC 5431          lea       -36(A6),A0
00003210  2408      5432          move.l    A0,D2
                    5433   vsprintf_54:
00003212  2042      5434          move.l    D2,A0
00003214  4A10      5435          tst.b     (A0)
00003216  6718      5436          beq.s     vsprintf_56
00003218  2042      5437          move.l    D2,A0
0000321A  1210      5438          move.b    (A0),D1
0000321C  4881      5439          ext.w     D1
0000321E  48C1      5440          ext.l     D1
00003220  2F01      5441          move.l    D1,-(A7)
00003222  6100 FB98 5442          bsr       _toupper
00003226  584F      5443          addq.w    #4,A7
00003228  2042      5444          move.l    D2,A0
0000322A  1080      5445          move.b    D0,(A0)
0000322C  5282      5446          addq.l    #1,D2
0000322E  60E2      5447          bra       vsprintf_54
                    5448   vsprintf_56:
00003230  7E00      5449          moveq     #0,D7
00003232  41EE FFD4 5450          lea       -44(A6),A0
00003236  2408      5451          move.l    A0,D2
00003238  206E 000C 5452          move.l    12(A6),A0
0000323C  1010      5453          move.b    (A0),D0
0000323E  4880      5454          ext.w     D0
00003240  48C0      5455          ext.l     D0
00003242  0C80 0000 5456          cmp.l     #100,D0
00003246  0064      
00003248  6714      5457          beq.s     vsprintf_59
0000324A  206E 000C 5458          move.l    12(A6),A0
0000324E  1010      5459          move.b    (A0),D0
00003250  4880      5460          ext.w     D0
00003252  48C0      5461          ext.l     D0
00003254  0C80 0000 5462          cmp.l     #105,D0
00003258  0069      
0000325A  6600 0076 5463          bne       vsprintf_65
                    5464   vsprintf_59:
0000325E  4A2E FFCE 5465          tst.b     -50(A6)
00003262  6612      5466          bne.s     vsprintf_62
00003264  2043      5467          move.l    D3,A0
00003266  1010      5468          move.b    (A0),D0
00003268  4880      5469          ext.w     D0
0000326A  48C0      5470          ext.l     D0
0000326C  0C80 0000 5471          cmp.l     #45,D0
00003270  002D      
00003272  6600 002E 5472          bne       vsprintf_60
                    5473   vsprintf_62:
00003276  2043      5474          move.l    D3,A0
00003278  1010      5475          move.b    (A0),D0
0000327A  4880      5476          ext.w     D0
0000327C  48C0      5477          ext.l     D0
0000327E  0C80 0000 5478          cmp.l     #45,D0
00003282  002D      
00003284  660E      5479          bne.s     vsprintf_63
00003286  2043      5480          move.l    D3,A0
00003288  5283      5481          addq.l    #1,D3
0000328A  2242      5482          move.l    D2,A1
0000328C  5282      5483          addq.l    #1,D2
0000328E  1290      5484          move.b    (A0),(A1)
00003290  5304      5485          subq.b    #1,D4
00003292  6008      5486          bra.s     vsprintf_64
                    5487   vsprintf_63:
00003294  2042      5488          move.l    D2,A0
00003296  5282      5489          addq.l    #1,D2
00003298  10BC 002B 5490          move.b    #43,(A0)
                    5491   vsprintf_64:
0000329C  5287      5492          addq.l    #1,D7
0000329E  6000 0032 5493          bra       vsprintf_65
                    5494   vsprintf_60:
000032A2  4A2E FFCF 5495          tst.b     -49(A6)
000032A6  6700 002A 5496          beq       vsprintf_65
000032AA  2043      5497          move.l    D3,A0
000032AC  1010      5498          move.b    (A0),D0
000032AE  4880      5499          ext.w     D0
000032B0  48C0      5500          ext.l     D0
000032B2  0C80 0000 5501          cmp.l     #45,D0
000032B6  002D      
000032B8  660E      5502          bne.s     vsprintf_67
000032BA  2043      5503          move.l    D3,A0
000032BC  5283      5504          addq.l    #1,D3
000032BE  2242      5505          move.l    D2,A1
000032C0  5282      5506          addq.l    #1,D2
000032C2  1290      5507          move.b    (A0),(A1)
000032C4  5304      5508          subq.b    #1,D4
000032C6  6008      5509          bra.s     vsprintf_68
                    5510   vsprintf_67:
000032C8  2042      5511          move.l    D2,A0
000032CA  5282      5512          addq.l    #1,D2
000032CC  10BC 0020 5513          move.b    #32,(A0)
                    5514   vsprintf_68:
000032D0  5287      5515          addq.l    #1,D7
                    5516   vsprintf_65:
000032D2  4A2E FFD0 5517          tst.b     -48(A6)
000032D6  6700 0066 5518          beq       vsprintf_77
000032DA  206E 000C 5519          move.l    12(A6),A0
000032DE  1010      5520          move.b    (A0),D0
000032E0  4880      5521          ext.w     D0
000032E2  48C0      5522          ext.l     D0
000032E4  0C80 0000 5523          cmp.l     #111,D0
000032E8  006F      
000032EA  671A      5524          beq.s     vsprintf_73
000032EC  6E0C      5525          bgt.s     vsprintf_76
000032EE  0C80 0000 5526          cmp.l     #88,D0
000032F2  0058      
000032F4  6710      5527          beq.s     vsprintf_73
000032F6  6000 0046 5528          bra       vsprintf_77
                    5529   vsprintf_76:
000032FA  0C80 0000 5530          cmp.l     #120,D0
000032FE  0078      
00003300  6704      5531          beq.s     vsprintf_73
00003302  6000 003A 5532          bra       vsprintf_77
                    5533   vsprintf_73:
00003306  2042      5534          move.l    D2,A0
00003308  5282      5535          addq.l    #1,D2
0000330A  10BC 0030 5536          move.b    #48,(A0)
0000330E  5287      5537          addq.l    #1,D7
00003310  206E 000C 5538          move.l    12(A6),A0
00003314  1010      5539          move.b    (A0),D0
00003316  4880      5540          ext.w     D0
00003318  48C0      5541          ext.l     D0
0000331A  0C80 0000 5542          cmp.l     #120,D0
0000331E  0078      
00003320  6712      5543          beq.s     vsprintf_79
00003322  206E 000C 5544          move.l    12(A6),A0
00003326  1010      5545          move.b    (A0),D0
00003328  4880      5546          ext.w     D0
0000332A  48C0      5547          ext.l     D0
0000332C  0C80 0000 5548          cmp.l     #88,D0
00003330  0058      
00003332  660A      5549          bne.s     vsprintf_77
                    5550   vsprintf_79:
00003334  2042      5551          move.l    D2,A0
00003336  5282      5552          addq.l    #1,D2
00003338  10BC 0078 5553          move.b    #120,(A0)
0000333C  5287      5554          addq.l    #1,D7
                    5555   vsprintf_77:
0000333E  2042      5556          move.l    D2,A0
00003340  4210      5557          clr.b     (A0)
00003342  206E 000C 5558          move.l    12(A6),A0
00003346  1010      5559          move.b    (A0),D0
00003348  4880      5560          ext.w     D0
0000334A  48C0      5561          ext.l     D0
0000334C  0C80 0000 5562          cmp.l     #105,D0
00003350  0069      
00003352  6700 0076 5563          beq       vsprintf_82
00003356  6E42      5564          bgt.s     vsprintf_93
00003358  0C80 0000 5565          cmp.l     #99,D0
0000335C  0063      
0000335E  6700 0084 5566          beq       vsprintf_96
00003362  6E1C      5567          bgt.s     vsprintf_94
00003364  0C80 0000 5568          cmp.l     #88,D0
00003368  0058      
0000336A  6700 005E 5569          beq       vsprintf_82
0000336E  6E00 0184 5570          bgt       vsprintf_80
00003372  0C80 0000 5571          cmp.l     #69,D0
00003376  0045      
00003378  6700 0050 5572          beq       vsprintf_82
0000337C  6000 0176 5573          bra       vsprintf_80
                    5574   vsprintf_94:
00003380  0C80 0000 5575          cmp.l     #101,D0
00003384  0065      
00003386  6700 0042 5576          beq       vsprintf_82
0000338A  6E00 0168 5577          bgt       vsprintf_80
0000338E  0C80 0000 5578          cmp.l     #100,D0
00003392  0064      
00003394  6734      5579          beq.s     vsprintf_82
00003396  6000 015C 5580          bra       vsprintf_80
                    5581   vsprintf_93:
0000339A  0C80 0000 5582          cmp.l     #117,D0
0000339E  0075      
000033A0  6728      5583          beq.s     vsprintf_82
000033A2  6E1A      5584          bgt.s     vsprintf_95
000033A4  0C80 0000 5585          cmp.l     #115,D0
000033A8  0073      
000033AA  6700 0038 5586          beq       vsprintf_96
000033AE  6E00 0144 5587          bgt       vsprintf_80
000033B2  0C80 0000 5588          cmp.l     #111,D0
000033B6  006F      
000033B8  6710      5589          beq.s     vsprintf_82
000033BA  6000 0138 5590          bra       vsprintf_80
                    5591   vsprintf_95:
000033BE  0C80 0000 5592          cmp.l     #120,D0
000033C2  0078      
000033C4  6704      5593          beq.s     vsprintf_82
000033C6  6000 012C 5594          bra       vsprintf_80
                    5595   vsprintf_82:
000033CA  4A2E FFD2 5596          tst.b     -46(A6)
000033CE  6714      5597          beq.s     vsprintf_96
000033D0  4A2E FFCD 5598          tst.b     -51(A6)
000033D4  660E      5599          bne.s     vsprintf_96
000033D6  200D      5600          move.l    A5,D0
000033D8  9087      5601          sub.l     D7,D0
000033DA  4884      5602          ext.w     D4
000033DC  48C4      5603          ext.l     D4
000033DE  9084      5604          sub.l     D4,D0
000033E0  2D40 FFFC 5605          move.l    D0,-4(A6)
                    5606   vsprintf_96:
000033E4  202E FFFC 5607          move.l    -4(A6),D0
000033E8  0C80 0000 5608          cmp.l     #0,D0
000033EC  0000      
000033EE  6C04      5609          bge.s     vsprintf_98
000033F0  42AE FFFC 5610          clr.l     -4(A6)
                    5611   vsprintf_98:
000033F4  4A2E FFCD 5612          tst.b     -51(A6)
000033F8  6600 0030 5613          bne       vsprintf_104
000033FC  4884      5614          ext.w     D4
000033FE  48C4      5615          ext.l     D4
00003400  2004      5616          move.l    D4,D0
00003402  D0AE FFFC 5617          add.l     -4(A6),D0
00003406  D087      5618          add.l     D7,D0
00003408  1D40 FFD1 5619          move.b    D0,-47(A6)
                    5620   vsprintf_102:
0000340C  102E FFD1 5621          move.b    -47(A6),D0
00003410  4880      5622          ext.w     D0
00003412  48C0      5623          ext.l     D0
00003414  220D      5624          move.l    A5,D1
00003416  534D      5625          subq.w    #1,A5
00003418  B081      5626          cmp.l     D1,D0
0000341A  6C0E      5627          bge.s     vsprintf_104
0000341C  4878 0020 5628          pea       32
00003420  2F0A      5629          move.l    A2,-(A7)
00003422  4E93      5630          jsr       (A3)
00003424  504F      5631          addq.w    #8,A7
00003426  5286      5632          addq.l    #1,D6
00003428  60E2      5633          bra       vsprintf_102
                    5634   vsprintf_104:
0000342A  41EE FFD4 5635          lea       -44(A6),A0
0000342E  2408      5636          move.l    A0,D2
                    5637   vsprintf_105:
00003430  2042      5638          move.l    D2,A0
00003432  4A10      5639          tst.b     (A0)
00003434  6716      5640          beq.s     vsprintf_107
00003436  2042      5641          move.l    D2,A0
00003438  5282      5642          addq.l    #1,D2
0000343A  1210      5643          move.b    (A0),D1
0000343C  4881      5644          ext.w     D1
0000343E  48C1      5645          ext.l     D1
00003440  2F01      5646          move.l    D1,-(A7)
00003442  2F0A      5647          move.l    A2,-(A7)
00003444  4E93      5648          jsr       (A3)
00003446  504F      5649          addq.w    #8,A7
00003448  5286      5650          addq.l    #1,D6
0000344A  60E4      5651          bra       vsprintf_105
                    5652   vsprintf_107:
0000344C  202E FFFC 5653          move.l    -4(A6),D0
00003450  1D40 FFD1 5654          move.b    D0,-47(A6)
                    5655   vsprintf_108:
00003454  102E FFD1 5656          move.b    -47(A6),D0
00003458  532E FFD1 5657          subq.b    #1,-47(A6)
0000345C  4A00      5658          tst.b     D0
0000345E  670E      5659          beq.s     vsprintf_110
00003460  4878 0030 5660          pea       48
00003464  2F0A      5661          move.l    A2,-(A7)
00003466  4E93      5662          jsr       (A3)
00003468  504F      5663          addq.w    #8,A7
0000346A  5286      5664          addq.l    #1,D6
0000346C  60E6      5665          bra       vsprintf_108
                    5666   vsprintf_110:
0000346E  2043      5667          move.l    D3,A0
00003470  4A10      5668          tst.b     (A0)
00003472  6700 0048 5669          beq       vsprintf_113
00003476  206E 000C 5670          move.l    12(A6),A0
0000347A  1010      5671          move.b    (A0),D0
0000347C  4880      5672          ext.w     D0
0000347E  48C0      5673          ext.l     D0
00003480  0C80 0000 5674          cmp.l     #115,D0
00003484  0073      
00003486  670C      5675          beq.s     vsprintf_116
00003488  6E18      5676          bgt.s     vsprintf_119
0000348A  0C80 0000 5677          cmp.l     #99,D0
0000348E  0063      
00003490  6702      5678          beq.s     vsprintf_116
00003492  600E      5679          bra.s     vsprintf_119
                    5680   vsprintf_116:
00003494  2005      5681          move.l    D5,D0
00003496  5385      5682          subq.l    #1,D5
00003498  0C80 0000 5683          cmp.l     #0,D0
0000349C  0000      
0000349E  6E02      5684          bgt.s     vsprintf_119
000034A0  6016      5685          bra.s     vsprintf_115
                    5686   vsprintf_119:
000034A2  2043      5687          move.l    D3,A0
000034A4  5283      5688          addq.l    #1,D3
000034A6  1210      5689          move.b    (A0),D1
000034A8  4881      5690          ext.w     D1
000034AA  48C1      5691          ext.l     D1
000034AC  2F01      5692          move.l    D1,-(A7)
000034AE  2F0A      5693          move.l    A2,-(A7)
000034B0  4E93      5694          jsr       (A3)
000034B2  504F      5695          addq.w    #8,A7
000034B4  5286      5696          addq.l    #1,D6
000034B6  6002      5697          bra.s     vsprintf_112
                    5698   vsprintf_115:
000034B8  6002      5699          bra.s     vsprintf_113
                    5700   vsprintf_112:
000034BA  60B2      5701          bra       vsprintf_110
                    5702   vsprintf_113:
000034BC  4A2E FFCD 5703          tst.b     -51(A6)
000034C0  6700 0030 5704          beq       vsprintf_125
000034C4  4884      5705          ext.w     D4
000034C6  48C4      5706          ext.l     D4
000034C8  2004      5707          move.l    D4,D0
000034CA  D0AE FFFC 5708          add.l     -4(A6),D0
000034CE  D087      5709          add.l     D7,D0
000034D0  1D40 FFD1 5710          move.b    D0,-47(A6)
                    5711   vsprintf_123:
000034D4  102E FFD1 5712          move.b    -47(A6),D0
000034D8  4880      5713          ext.w     D0
000034DA  48C0      5714          ext.l     D0
000034DC  220D      5715          move.l    A5,D1
000034DE  534D      5716          subq.w    #1,A5
000034E0  B081      5717          cmp.l     D1,D0
000034E2  6C0E      5718          bge.s     vsprintf_125
000034E4  4878 0020 5719          pea       32
000034E8  2F0A      5720          move.l    A2,-(A7)
000034EA  4E93      5721          jsr       (A3)
000034EC  504F      5722          addq.w    #8,A7
000034EE  5386      5723          subq.l    #1,D6
000034F0  60E2      5724          bra       vsprintf_123
                    5725   vsprintf_125:
000034F2  6014      5726          bra.s     vsprintf_81
                    5727   vsprintf_80:
000034F4  206E 000C 5728          move.l    12(A6),A0
000034F8  1210      5729          move.b    (A0),D1
000034FA  4881      5730          ext.w     D1
000034FC  48C1      5731          ext.l     D1
000034FE  2F01      5732          move.l    D1,-(A7)
00003500  2F0A      5733          move.l    A2,-(A7)
00003502  4E93      5734          jsr       (A3)
00003504  504F      5735          addq.w    #8,A7
00003506  5286      5736          addq.l    #1,D6
                    5737   vsprintf_81:
00003508  52AE 000C 5738          addq.l    #1,12(A6)
                    5739   vsprintf_2:
0000350C  6000 F9D6 5740          bra       vsprintf_1
                    5741   vsprintf_3:
00003510  4A92      5742          tst.l     (A2)
00003512  6710      5743          beq.s     vsprintf_126
00003514  4201      5744          clr.b     D1
00003516  C2BC 0000 5745          and.l     #255,D1
0000351A  00FF      
0000351C  2F01      5746          move.l    D1,-(A7)
0000351E  2F0A      5747          move.l    A2,-(A7)
00003520  4E93      5748          jsr       (A3)
00003522  504F      5749          addq.w    #8,A7
                    5750   vsprintf_126:
00003524  2006      5751          move.l    D6,D0
00003526  4CDF 3CFC 5752          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000352A  4E5E      5753          unlk      A6
0000352C  4E75      5754          rts
                    5755   @itoa_convert:
0000352E  4E56 0000 5756          link      A6,#0
00003532  48E7 3C00 5757          movem.l   D2/D3/D4/D5,-(A7)
00003536  242E 0008 5758          move.l    8(A6),D2
0000353A  262E 0010 5759          move.l    16(A6),D3
0000353E  2A2E 000C 5760          move.l    12(A6),D5
00003542  2F05      5761          move.l    D5,-(A7)
00003544  2F03      5762          move.l    D3,-(A7)
00003546  6100 F6B4 5763          bsr       ULDIV
0000354A  202F 0004 5764          move.l    4(A7),D0
0000354E  504F      5765          addq.w    #8,A7
00003550  2800      5766          move.l    D0,D4
00003552  BA83      5767          cmp.l     D3,D5
00003554  651A      5768          blo.s     @itoa_convert_1
00003556  2F03      5769          move.l    D3,-(A7)
00003558  2F05      5770          move.l    D5,-(A7)
0000355A  2F03      5771          move.l    D3,-(A7)
0000355C  6100 F69E 5772          bsr       ULDIV
00003560  2217      5773          move.l    (A7),D1
00003562  504F      5774          addq.w    #8,A7
00003564  2F01      5775          move.l    D1,-(A7)
00003566  2F02      5776          move.l    D2,-(A7)
00003568  61C4      5777          bsr       @itoa_convert
0000356A  DEFC 000C 5778          add.w     #12,A7
0000356E  2400      5779          move.l    D0,D2
                    5780   @itoa_convert_1:
00003570  0C84 0000 5781          cmp.l     #9,D4
00003574  0009      
00003576  6E0A      5782          bgt.s     @itoa_convert_3
00003578  2004      5783          move.l    D4,D0
0000357A  0680 0000 5784          add.l     #48,D0
0000357E  0030      
00003580  600E      5785          bra.s     @itoa_convert_4
                    5786   @itoa_convert_3:
00003582  2004      5787          move.l    D4,D0
00003584  0680 0000 5788          add.l     #97,D0
00003588  0061      
0000358A  0480 0000 5789          sub.l     #10,D0
0000358E  000A      
                    5790   @itoa_convert_4:
00003590  2042      5791          move.l    D2,A0
00003592  1080      5792          move.b    D0,(A0)
00003594  2002      5793          move.l    D2,D0
00003596  5280      5794          addq.l    #1,D0
00003598  4CDF 003C 5795          movem.l   (A7)+,D2/D3/D4/D5
0000359C  4E5E      5796          unlk      A6
0000359E  4E75      5797          rts
                    5798   _ltoa:
000035A0  4E56 0000 5799          link      A6,#0
000035A4  48E7 3C00 5800          movem.l   D2/D3/D4/D5,-(A7)
000035A8  242E 0008 5801          move.l    8(A6),D2
000035AC  262E 000C 5802          move.l    12(A6),D3
000035B0  2A2E 0010 5803          move.l    16(A6),D5
000035B4  2803      5804          move.l    D3,D4
000035B6  0C85 0000 5805          cmp.l     #2,D5
000035BA  0002      
000035BC  6D08      5806          blt.s     ltoa_3
000035BE  0C85 0000 5807          cmp.l     #36,D5
000035C2  0024      
000035C4  6F06      5808          ble.s     ltoa_1
                    5809   ltoa_3:
000035C6  2003      5810          move.l    D3,D0
000035C8  6000 0052 5811          bra       ltoa_4
                    5812   ltoa_1:
000035CC  0C85 0000 5813          cmp.l     #10,D5
000035D0  000A      
000035D2  6600 0032 5814          bne       ltoa_5
000035D6  0C82 0000 5815          cmp.l     #0,D2
000035DA  0000      
000035DC  6C28      5816          bge.s     ltoa_5
000035DE  2002      5817          move.l    D2,D0
000035E0  4480      5818          neg.l     D0
000035E2  2400      5819          move.l    D0,D2
000035E4  0C82 0000 5820          cmp.l     #0,D2
000035E8  0000      
000035EA  6C12      5821          bge.s     ltoa_7
000035EC  4879 0000 5822          pea       @itoa_1
000035F0  4990      
000035F2  2F03      5823          move.l    D3,-(A7)
000035F4  6100 F5F6 5824          bsr       _strcpy
000035F8  504F      5825          addq.w    #8,A7
000035FA  2003      5826          move.l    D3,D0
000035FC  601E      5827          bra.s     ltoa_4
                    5828   ltoa_7:
000035FE  2044      5829          move.l    D4,A0
00003600  5284      5830          addq.l    #1,D4
00003602  10BC 002D 5831          move.b    #45,(A0)
                    5832   ltoa_5:
00003606  2F05      5833          move.l    D5,-(A7)
00003608  2F02      5834          move.l    D2,-(A7)
0000360A  2F04      5835          move.l    D4,-(A7)
0000360C  6100 FF20 5836          bsr       @itoa_convert
00003610  DEFC 000C 5837          add.w     #12,A7
00003614  2800      5838          move.l    D0,D4
00003616  2044      5839          move.l    D4,A0
00003618  4210      5840          clr.b     (A0)
0000361A  2003      5841          move.l    D3,D0
                    5842   ltoa_4:
0000361C  4CDF 003C 5843          movem.l   (A7)+,D2/D3/D4/D5
00003620  4E5E      5844          unlk      A6
00003622  4E75      5845          rts
                    5846   _ultoa:
00003624  4E56 0000 5847          link      A6,#0
00003628  48E7 3800 5848          movem.l   D2/D3/D4,-(A7)
0000362C  262E 0010 5849          move.l    16(A6),D3
00003630  282E 000C 5850          move.l    12(A6),D4
00003634  2404      5851          move.l    D4,D2
00003636  0C83 0000 5852          cmp.l     #2,D3
0000363A  0002      
0000363C  6D08      5853          blt.s     ultoa_3
0000363E  0C83 0000 5854          cmp.l     #36,D3
00003642  0024      
00003644  6F04      5855          ble.s     ultoa_1
                    5856   ultoa_3:
00003646  2004      5857          move.l    D4,D0
00003648  6018      5858          bra.s     ultoa_4
                    5859   ultoa_1:
0000364A  2F03      5860          move.l    D3,-(A7)
0000364C  2F2E 0008 5861          move.l    8(A6),-(A7)
00003650  2F02      5862          move.l    D2,-(A7)
00003652  6100 FEDA 5863          bsr       @itoa_convert
00003656  DEFC 000C 5864          add.w     #12,A7
0000365A  2400      5865          move.l    D0,D2
0000365C  2042      5866          move.l    D2,A0
0000365E  4210      5867          clr.b     (A0)
00003660  2004      5868          move.l    D4,D0
                    5869   ultoa_4:
00003662  4CDF 001C 5870          movem.l   (A7)+,D2/D3/D4
00003666  4E5E      5871          unlk      A6
00003668  4E75      5872          rts
                    5873   _itoa:
0000366A  4E56 0000 5874          link      A6,#0
0000366E  2F2E 0010 5875          move.l    16(A6),-(A7)
00003672  2F2E 000C 5876          move.l    12(A6),-(A7)
00003676  2F2E 0008 5877          move.l    8(A6),-(A7)
0000367A  6100 FF24 5878          bsr       _ltoa
0000367E  DEFC 000C 5879          add.w     #12,A7
00003682  4E5E      5880          unlk      A6
00003684  4E75      5881          rts
                    5882   ULMUL:
00003686  4E56 0000 5883          link    A6,#0
0000368A  48E7 C000 5884          movem.l D0/D1,-(A7)
0000368E  222E 0008 5885          move.l  8(A6),D1
00003692  202E 000C 5886          move.l  12(A6),D0
00003696  602C      5887          bra.s   lmul_3
                    5888   LMUL:
00003698  4E56 0000 5889          link    A6,#0
0000369C  48E7 C000 5890          movem.l D0/D1,-(A7)
000036A0  222E 0008 5891          move.l  8(A6),D1
000036A4  202E 000C 5892          move.l  12(A6),D0
000036A8  4A80      5893          tst.l   D0
000036AA  6A0A      5894          bpl.s   lmul_1
000036AC  4480      5895          neg.l   D0
000036AE  4A81      5896          tst.l   D1
000036B0  6A0A      5897          bpl.s   lmul_2
000036B2  4481      5898          neg.l   D1
000036B4  600E      5899          bra.s   lmul_3
                    5900   lmul_1:
000036B6  4A81      5901          tst.l   D1
000036B8  6A0A      5902          bpl.s   lmul_3
000036BA  4481      5903          neg.l   D1
                    5904   lmul_2:
000036BC  6114      5905          bsr.s   domul
000036BE  4481      5906          neg.l   D1
000036C0  4080      5907          negx.l  D0
000036C2  6002      5908          bra.s   lmul_4
                    5909   lmul_3:
000036C4  610C      5910          bsr.s   domul
                    5911   lmul_4:
000036C6  2D41 0008 5912          move.l  D1,8(A6)
000036CA  4CDF 0003 5913          movem.l (A7)+,D0/D1
000036CE  4E5E      5914          unlk    A6
000036D0  4E75      5915          rts
                    5916   domul:
000036D2  0C81 0000 5917          cmpi.l  #$FFFF,D1
000036D6  FFFF      
000036D8  620C      5918          bhi.s   domul_1
000036DA  0C80 0000 5919          cmpi.l  #$FFFF,D0
000036DE  FFFF      
000036E0  620E      5920          bhi.s   domul_2
000036E2  C2C0      5921          mulu    D0,D1
000036E4  4E75      5922          rts
                    5923   domul_1:
000036E6  0C80 0000 5924          cmpi.l  #$FFFF,D0
000036EA  FFFF      
000036EC  6218      5925          bhi.s   domul_4
000036EE  6002      5926          bra.s   domul_3
                    5927   domul_2
000036F0  C141      5928          exg     D0,D1
                    5929   domul_3:
000036F2  2F02      5930          move.l  D2,-(A7)
000036F4  2401      5931          move.l  D1,D2
000036F6  4842      5932          swap    D2
000036F8  C2C0      5933          mulu    D0,D1
000036FA  C4C0      5934          mulu    D0,D2
000036FC  4842      5935          swap    D2
000036FE  4242      5936          clr.w   D2
00003700  D282      5937          add.l   D2,D1
00003702  241F      5938          move.l  (A7)+,D2
00003704  4E75      5939          rts
                    5940   domul_4:
00003706  48E7 3000 5941          movem.l D2/D3,-(A7)
0000370A  2401      5942          move.l  D1,D2
0000370C  2601      5943          move.l  D1,D3
0000370E  C2C0      5944          mulu    D0,D1
00003710  4842      5945          swap    D2
00003712  C4C0      5946          mulu    D0,D2
00003714  4840      5947          swap    D0
00003716  C6C0      5948          mulu    D0,D3
00003718  D483      5949          add.l   D3,D2
0000371A  4842      5950          swap    D2
0000371C  4242      5951          clr.w   D2
0000371E  D282      5952          add.l   D2,D1
00003720  4CDF 000C 5953          movem.l (A7)+,D2/D3
00003724  4E75      5954          rts
                    5955   _strlen:
00003726  206F 0004 5956          move.l    (4,A7),A0
0000372A  2248      5957          move.l    A0,A1
                    5958   strlen_1:
0000372C  4A19      5959          tst.b     (A1)+
0000372E  66FC      5960          bne       strlen_1
00003730  2009      5961          move.l    A1,D0
00003732  9088      5962          sub.l     A0,D0
00003734  5380      5963          subq.l    #1,D0
00003736  4E75      5964          rts
                    5965          section   const
                    5966   
                    5967   @mdnod_1:
00003738  0D0A 00   5968          dc.b      13,10,0
                    5969   @mdnod_2:
0000373C  0D53 7769 5970          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003740  7463 6865 
00003744  7320 5357 
00003748  5B        
00003749  372D 305D 5971          dc.b      55,45,48,93,32,61,32,0
0000374D  203D 2000 
                    5972   @mdnod_3:
00003752  3000      5973          dc.b      48,0
                    5974   @mdnod_4:
00003754  3100      5975          dc.b      49,0
                    5976   @mdnod_5:
00003756  0D0A 4475 5977          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
0000375A  6D70 204D 
0000375E  656D 6F72 
00003762  79        
00003763  2042 6C6F 5978          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003767  636B 3A20 
0000376B  3C45 5343 
0000376F  3E20      
00003771  746F 2041 5979          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003775  626F 7274 
00003779  2C20 3C53 
0000377D  50        
0000377E  4143 453E 5980          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003782  2074 6F20 
00003786  436F 6E74 
0000378A  69        
0000378B  6E75 6500 5981          dc.b      110,117,101,0
                    5982   @mdnod_6:
00003790  0D0A 456E 5983          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003794  7465 7220 
00003798  5374 6172 
0000379C  74        
0000379D  2041 6464 5984          dc.b      32,65,100,100,114,101,115,115,58,32,0
000037A1  7265 7373 
000037A5  3A20 00   
                    5985   @mdnod_7:
000037A8  0D0A 2530 5986          dc.b      13,10,37,48,56,120,32,0
000037AC  3878 2000 
                    5987   @mdnod_8:
000037B0  2530 3258 5988          dc.b      37,48,50,88,0
000037B4  00        
                    5989   @mdnod_9:
000037B6  2020 00   5990          dc.b      32,32,0
                    5991   @mdnod_10:
000037BA  0D0A 4669 5992          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
000037BE  6C6C 204D 
000037C2  656D 6F72 
000037C6  79        
000037C7  2042 6C6F 5993          dc.b      32,66,108,111,99,107,0
000037CB  636B 00   
                    5994   @mdnod_11:
000037CE  0D0A 456E 5995          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
000037D2  7465 7220 
000037D6  456E 6420 
000037DA  41        
000037DB  6464 7265 5996          dc.b      100,100,114,101,115,115,58,32,0
000037DF  7373 3A20 
000037E3  00        
                    5997   @mdnod_12:
000037E4  0D0A 456E 5998          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
000037E8  7465 7220 
000037EC  4669 6C6C 
000037F0  20        
000037F1  4461 7461 5999          dc.b      68,97,116,97,58,32,0
000037F5  3A20 00   
                    6000   @mdnod_13:
000037F8  0D0A 4669 6001          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000037FC  6C6C 696E 
00003800  6720 4164 
00003804  64        
00003805  7265 7373 6002          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003809  6573 205B 
0000380D  2425 3038 
00003811  58        
00003812  202D 2024 6003          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003816  2530 3858 
0000381A  5D20 7769 
0000381E  7468      
00003820  2024 2530 6004          dc.b      32,36,37,48,50,88,0
00003824  3258 00   
                    6005   @mdnod_14:
00003828  0D0A 5573 6006          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
0000382C  6520 4879 
00003830  7065 7254 
00003834  65        
00003835  726D 696E 6007          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003839  616C 2074 
0000383D  6F20 5365 
00003841  6E64 2054 6008          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003845  6578 7420 
00003849  4669 6C65 
0000384D  2028 2E68 6009          dc.b      32,40,46,104,101,120,41,13,10,0
00003851  6578 290D 
00003855  0A00      
                    6010   @mdnod_15:
00003858  0D0A 4C6F 6011          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
0000385C  6164 2046 
00003860  6169 6C65 
00003864  64        
00003865  2061 7420 6012          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003869  4164 6472 
0000386D  6573 7320 
00003871  3D        
00003872  205B 2425 6013          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003876  3038 585D 
0000387A  0D0A 00   
                    6014   @mdnod_16:
0000387E  0D0A 5375 6015          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003882  6363 6573 
00003886  733A 2044 
0000388A  6F        
0000388B  776E 6C6F 6016          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000388F  6164 6564 
00003893  2025 6420 
00003897  6279 7465 6017          dc.b      98,121,116,101,115,13,10,0
0000389B  730D 0A00 
                    6018   @mdnod_17:
000038A0  0D0A 4578 6019          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
000038A4  616D 696E 
000038A8  6520 616E 
000038AC  64        
000038AD  2043 6861 6020          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
000038B1  6E67 6520 
000038B5  4D65 6D6F 
000038B9  72        
000038BA  7900      6021          dc.b      121,0
                    6022   @mdnod_18:
000038BC  0D0A 3C45 6023          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
000038C0  5343 3E20 
000038C4  746F 2053 
000038C8  746F      
000038CA  702C 203C 6024          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
000038CE  5350 4143 
000038D2  453E 2074 
000038D6  6F20      
000038D8  4164 7661 6025          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
000038DC  6E63 652C 
000038E0  2027 2D27 
000038E4  2074      
000038E6  6F20 476F 6026          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000038EA  2042 6163 
000038EE  6B2C 203C 
000038F2  4441      
000038F4  5441 3E20 6027          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000038F8  746F 2063 
000038FC  6861 6E67 
00003900  65        
00003901  00        6028          dc.b      0
                    6029   @mdnod_19:
00003902  0D0A 456E 6030          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003906  7465 7220 
0000390A  4164 6472 
0000390E  65        
0000390F  7373 3A20 6031          dc.b      115,115,58,32,0
00003913  00        
                    6032   @mdnod_20:
00003914  0D0A 5B25 6033          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003918  3038 785D 
0000391C  203A 2025 
00003920  3032 78   
00003923  2020 00   6034          dc.b      32,32,0
                    6035   @mdnod_21:
00003926  0D0A 5761 6036          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000392A  726E 696E 
0000392E  6720 4368 
00003932  61        
00003933  6E67 6520 6037          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003937  4661 696C 
0000393B  6564 3A20 
0000393F  57        
00003940  726F 7465 6038          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003944  205B 2530 
00003948  3278 5D2C 
0000394C  20        
0000394D  5265 6164 6039          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003951  205B 2530 
00003955  3278 5D00 
                    6040   @mdnod_22:
0000395A  0D0A 4C6F 6041          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
0000395E  6164 696E 
00003962  6720 5072 
00003966  6F        
00003967  6772 616D 6042          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000396B  2046 726F 
0000396F  6D20 5350 
00003973  49        
00003974  2046 6C61 6043          dc.b      32,70,108,97,115,104,46,46,46,46,0
00003978  7368 2E2E 
0000397C  2E2E 00   
                    6044   @mdnod_23:
00003980  2425 3038 6045          dc.b      36,37,48,56,88,32,32,0
00003984  5820 2000 
                    6046   @mdnod_24:
00003988  2000      6047          dc.b      32,0
                    6048   @mdnod_25:
0000398A  2E00      6049          dc.b      46,0
                    6050   @mdnod_26:
0000398C  2563 00   6051          dc.b      37,99,0
                    6052   @mdnod_27:
00003990  00        6053          dc.b      0
                    6054   @mdnod_28:
00003992  0D0A 0D0A 6055          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003996  2044 3020 
0000399A  3D20 2425 
0000399E  3038 58   
000039A1  2020 4130 6056          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000039A5  203D 2024 
000039A9  2530 3858 
000039AD  00        
                    6057   @mdnod_29:
000039AE  0D0A 2044 6058          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000039B2  3120 3D20 
000039B6  2425 3038 
000039BA  5820 20   
000039BD  4131 203D 6059          dc.b      65,49,32,61,32,36,37,48,56,88,0
000039C1  2024 2530 
000039C5  3858 00   
                    6060   @mdnod_30:
000039C8  0D0A 2044 6061          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000039CC  3220 3D20 
000039D0  2425 3038 
000039D4  5820 20   
000039D7  4132 203D 6062          dc.b      65,50,32,61,32,36,37,48,56,88,0
000039DB  2024 2530 
000039DF  3858 00   
                    6063   @mdnod_31:
000039E2  0D0A 2044 6064          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
000039E6  3320 3D20 
000039EA  2425 3038 
000039EE  5820 20   
000039F1  4133 203D 6065          dc.b      65,51,32,61,32,36,37,48,56,88,0
000039F5  2024 2530 
000039F9  3858 00   
                    6066   @mdnod_32:
000039FC  0D0A 2044 6067          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003A00  3420 3D20 
00003A04  2425 3038 
00003A08  5820 20   
00003A0B  4134 203D 6068          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003A0F  2024 2530 
00003A13  3858 00   
                    6069   @mdnod_33:
00003A16  0D0A 2044 6070          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003A1A  3520 3D20 
00003A1E  2425 3038 
00003A22  5820 20   
00003A25  4135 203D 6071          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003A29  2024 2530 
00003A2D  3858 00   
                    6072   @mdnod_34:
00003A30  0D0A 2044 6073          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003A34  3620 3D20 
00003A38  2425 3038 
00003A3C  5820 20   
00003A3F  4136 203D 6074          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003A43  2024 2530 
00003A47  3858 00   
                    6075   @mdnod_35:
00003A4A  0D0A 2044 6076          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003A4E  3720 3D20 
00003A52  2425 3038 
00003A56  5820 20   
00003A59  4137 203D 6077          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003A5D  2024 2530 
00003A61  3858 00   
                    6078   @mdnod_36:
00003A64  0D0A 0D0A 6079          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003A68  5553 5020 
00003A6C  3D20 2425 
00003A70  3038 58   
00003A73  2020 2841 6080          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003A77  3729 2055 
00003A7B  7365 7220 
00003A7F  5350      
00003A81  00        6081          dc.b      0
                    6082   @mdnod_37:
00003A82  0D0A 5353 6083          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003A86  5020 3D20 
00003A8A  2425 3038 
00003A8E  5820 20   
00003A91  2841 3729 6084          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003A95  2053 7570 
00003A99  6572 7669 
00003A9D  73        
00003A9E  6F72 2053 6085          dc.b      111,114,32,83,80,0
00003AA2  5000      
                    6086   @mdnod_38:
00003AA4  0D0A 2053 6087          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003AA8  5220 3D20 
00003AAC  2425 3034 
00003AB0  5820 20   
00003AB3  2000      6088          dc.b      32,0
                    6089   @mdnod_39:
00003AB6  2020 205B 6090          dc.b      32,32,32,91,0
00003ABA  00        
                    6091   @mdnod_40:
00003ABC  0D0A 2050 6092          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003AC0  4320 3D20 
00003AC4  2425 3038 
00003AC8  5820 20   
00003ACB  00        6093          dc.b      0
                    6094   @mdnod_41:
00003ACC  5B40 2042 6095          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003AD0  5245 414B 
00003AD4  504F 494E 
00003AD8  545D 00   
                    6096   @mdnod_42:
00003ADC  0D0A 5750 6097          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003AE0  2564 203D 
00003AE4  2025 7300 
                    6098   @mdnod_43:
00003AE8  0D0A 0D0A 6099          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003AEC  0D0A 0D0A 
00003AF0  0D0A 0D0A 
00003AF4  5369 6E   
00003AF7  676C 6520 6100          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003AFB  5374 6570 
00003AFF  2020 3A5B 
00003B03  4F        
00003B04  4E5D 00   6101          dc.b      78,93,0
                    6102   @mdnod_44:
00003B08  0D0A 4272 6103          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003B0C  6561 6B20 
00003B10  506F 696E 
00003B14  74        
00003B15  7320 3A5B 6104          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003B19  4469 7361 
00003B1D  626C 6564 
00003B21  5D        
00003B22  00        6105          dc.b      0
                    6106   @mdnod_45:
00003B24  0D0A 5072 6107          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00003B28  6573 7320 
00003B2C  3C53 5041 
00003B30  4345      
00003B32  3E20 746F 6108          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00003B36  2045 7865 
00003B3A  6375 7465 
00003B3E  20        
00003B3F  4E65 7874 6109          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00003B43  2049 6E73 
00003B47  7472 7563 
00003B4B  7469 6F6E 6110          dc.b      116,105,111,110,0
00003B4F  00        
                    6111   @mdnod_46:
00003B50  0D0A 5072 6112          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003B54  6573 7320 
00003B58  3C45 5343 
00003B5C  3E20      
00003B5E  746F 2052 6113          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00003B62  6573 756D 
00003B66  6520 5072 
00003B6A  6F67 7261 6114          dc.b      111,103,114,97,109,0
00003B6E  6D00      
                    6115   @mdnod_47:
00003B70  0D0A 496C 6116          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00003B74  6C65 6761 
00003B78  6C20 4461 
00003B7C  74        
00003B7D  6120 5265 6117          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00003B81  6769 7374 
00003B85  6572 203A 
00003B89  20        
00003B8A  5573 6520 6118          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00003B8E  4430 2D44 
00003B92  372E 2E2E 
00003B96  2E2E      
00003B98  0D0A 00   6119          dc.b      13,10,0
                    6120   @mdnod_48:
00003B9C  0D0A 4425 6121          dc.b      13,10,68,37,99,32,61,32,0
00003BA0  6320 3D20 
00003BA4  00        
                    6122   @mdnod_49:
00003BA6  0D0A 496C 6123          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00003BAA  6C65 6761 
00003BAE  6C20 4164 
00003BB2  64        
00003BB3  7265 7373 6124          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00003BB7  2052 6567 
00003BBB  6973 7465 
00003BBF  7220 3A20 6125          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00003BC3  5573 6520 
00003BC7  4130 2D41 
00003BCB  372E      
00003BCD  2E2E 2E2E 6126          dc.b      46,46,46,46,13,10,0
00003BD1  0D0A 00   
                    6127   @mdnod_50:
00003BD4  0D0A 4125 6128          dc.b      13,10,65,37,99,32,61,32,0
00003BD8  6320 3D20 
00003BDC  00        
                    6129   @mdnod_51:
00003BDE  0D0A 5573 6130          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00003BE2  6572 2053 
00003BE6  5020 3D20 
00003BEA  00        
                    6131   @mdnod_52:
00003BEC  0D0A 496C 6132          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003BF0  6C65 6761 
00003BF4  6C20 5265 
00003BF8  67        
00003BF9  6973 7465 6133          dc.b      105,115,116,101,114,46,46,46,46,0
00003BFD  722E 2E2E 
00003C01  2E00      
                    6134   @mdnod_53:
00003C04  0D0A 5379 6135          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00003C08  7374 656D 
00003C0C  2053 5020 
00003C10  3D        
00003C11  2000      6136          dc.b      32,0
                    6137   @mdnod_54:
00003C14  0D0A 5043 6138          dc.b      13,10,80,67,32,61,32,0
00003C18  203D 2000 
                    6139   @mdnod_55:
00003C1C  0D0A 5352 6140          dc.b      13,10,83,82,32,61,32,0
00003C20  203D 2000 
                    6141   @mdnod_56:
00003C24  0D0A 496C 6142          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003C28  6C65 6761 
00003C2C  6C20 5265 
00003C30  67        
00003C31  6973 7465 6143          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00003C35  723A 2055 
00003C39  7365 2041 
00003C3D  30        
00003C3E  2D41 372C 6144          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00003C42  2044 302D 
00003C46  4437 2C20 
00003C4A  5353 50   
00003C4D  2C20 5553 6145          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00003C51  502C 2050 
00003C55  4320 6F72 
00003C59  2053      
00003C5B  520D 0A00 6146          dc.b      82,13,10,0
                    6147   @mdnod_57:
00003C60  0D0A 0D0A 6148          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00003C64  4E75 6D20 
00003C68  2020 2020 
00003C6C  4164      
00003C6E  6472 6573 6149          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00003C72  7320 2020 
00003C76  2020 2049 
00003C7A  6E        
00003C7B  7374 7275 6150          dc.b      115,116,114,117,99,116,105,111,110,0
00003C7F  6374 696F 
00003C83  6E00      
                    6151   @mdnod_58:
00003C86  0D0A 2D2D 6152          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003C8A  2D20 2020 
00003C8E  2020 2D2D 
00003C92  2D2D 2D   
00003C95  2D2D 2D2D 6153          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00003C99  2020 2020 
00003C9D  2D2D 2D2D 
00003CA1  2D2D 2D   
00003CA4  2D2D 2D2D 6154          dc.b      45,45,45,45,0
00003CA8  00        
                    6155   @mdnod_59:
00003CAA  0D0A 4E6F 6156          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00003CAE  2042 7265 
00003CB2  616B 506F 
00003CB6  69        
00003CB7  6E74 7320 6157          dc.b      110,116,115,32,83,101,116,0
00003CBB  5365 7400 
                    6158   @mdnod_60:
00003CC0  0D0A 2533 6159          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00003CC4  6420 2020 
00003CC8  2020 2425 
00003CCC  3038 78   
00003CCF  00        6160          dc.b      0
                    6161   @mdnod_61:
00003CD0  0D0A 4E75 6162          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00003CD4  6D20 2020 
00003CD8  2020 4164 
00003CDC  6472      
00003CDE  6573 7300 6163          dc.b      101,115,115,0
                    6164   @mdnod_62:
00003CE2  0D0A 2D2D 6165          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003CE6  2D20 2020 
00003CEA  2020 2D2D 
00003CEE  2D2D 2D   
00003CF1  2D2D 2D2D 6166          dc.b      45,45,45,45,0
00003CF5  00        
                    6167   @mdnod_63:
00003CF6  0D0A 4E6F 6168          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00003CFA  2057 6174 
00003CFE  6368 506F 
00003D02  69        
00003D03  6E74 7320 6169          dc.b      110,116,115,32,83,101,116,0
00003D07  5365 7400 
                    6170   @mdnod_64:
00003D0C  0D0A 456E 6171          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00003D10  7465 7220 
00003D14  4272 6561 
00003D18  6B        
00003D19  2050 6F69 6172          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00003D1D  6E74 204E 
00003D21  756D 6265 
00003D25  72        
00003D26  3A20 00   6173          dc.b      58,32,0
                    6174   @mdnod_65:
00003D2A  0D0A 496C 6175          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00003D2E  6C65 6761 
00003D32  6C20 5261 
00003D36  6E        
00003D37  6765 203A 6176          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00003D3B  2055 7365 
00003D3F  2030 202D 
00003D43  2037      
00003D45  00        6177          dc.b      0
                    6178   @mdnod_66:
00003D46  0D0A 4272 6179          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003D4A  6561 6B20 
00003D4E  506F 696E 
00003D52  74        
00003D53  2043 6C65 6180          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00003D57  6172 6564 
00003D5B  2E2E 2E2E 
00003D5F  2E        
00003D60  0D0A 00   6181          dc.b      13,10,0
                    6182   @mdnod_67:
00003D64  0D0A 4272 6183          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003D68  6561 6B20 
00003D6C  506F 696E 
00003D70  74        
00003D71  2077 6173 6184          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00003D75  6E27 7420 
00003D79  5365 742E 
00003D7D  2E        
00003D7E  2E2E 2E00 6185          dc.b      46,46,46,0
                    6186   @mdnod_68:
00003D82  0D0A 456E 6187          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00003D86  7465 7220 
00003D8A  5761 7463 
00003D8E  68        
00003D8F  2050 6F69 6188          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00003D93  6E74 204E 
00003D97  756D 6265 
00003D9B  72        
00003D9C  3A20 00   6189          dc.b      58,32,0
                    6190   @mdnod_69:
00003DA0  0D0A 5761 6191          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003DA4  7463 6820 
00003DA8  506F 696E 
00003DAC  74        
00003DAD  2043 6C65 6192          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00003DB1  6172 6564 
00003DB5  2E2E 2E2E 
00003DB9  2E        
00003DBA  0D0A 00   6193          dc.b      13,10,0
                    6194   @mdnod_70:
00003DBE  0D0A 5761 6195          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003DC2  7463 6820 
00003DC6  506F 696E 
00003DCA  74        
00003DCB  2057 6173 6196          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00003DCF  206E 6F74 
00003DD3  2053 6574 
00003DD7  2E        
00003DD8  2E2E 2E2E 6197          dc.b      46,46,46,46,0
00003DDC  00        
                    6198   @mdnod_71:
00003DDE  0D0A 4E6F 6199          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00003DE2  2046 5245 
00003DE6  4520 4272 
00003DEA  6561      
00003DEC  6B20 506F 6200          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00003DF0  696E 7473 
00003DF4  2E2E 2E2E 
00003DF8  2E        
00003DF9  00        6201          dc.b      0
                    6202   @mdnod_72:
00003DFA  0D0A 4272 6203          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003DFE  6561 6B20 
00003E02  506F 696E 
00003E06  74        
00003E07  2041 6464 6204          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003E0B  7265 7373 
00003E0F  3A20 00   
                    6205   @mdnod_73:
00003E12  0D0A 4572 6206          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00003E16  726F 7220 
00003E1A  3A20 4272 
00003E1E  65        
00003E1F  616B 2050 6207          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00003E23  6F69 6E74 
00003E27  7320 4341 
00003E2B  4E        
00003E2C  4E4F 5420 6208          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00003E30  6265 2073 
00003E34  6574 2061 
00003E38  74        
00003E39  204F 4444 6209          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00003E3D  2061 6464 
00003E41  7265 7373 
00003E45  65        
00003E46  7300      6210          dc.b      115,0
                    6211   @mdnod_74:
00003E48  0D0A 4572 6212          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00003E4C  726F 7220 
00003E50  3A20 4272 
00003E54  65        
00003E55  616B 2050 6213          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00003E59  6F69 6E74 
00003E5D  7320 4341 
00003E61  4E        
00003E62  4E4F 5420 6214          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00003E66  6265 2073 
00003E6A  6574 2066 
00003E6E  6F        
00003E6F  7220 524F 6215          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00003E73  4D20 696E 
00003E77  2052 616E 
00003E7B  67        
00003E7C  6520 3A20 6216          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00003E80  5B24 302D 
00003E84  2430 3030 
00003E88  3037 46   
00003E8B  4646 5D00 6217          dc.b      70,70,93,0
                    6218   @mdnod_75:
00003E90  0D0A 4572 6219          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00003E94  726F 723A 
00003E98  2042 7265 
00003E9C  61        
00003E9D  6B20 506F 6220          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00003EA1  696E 7420 
00003EA5  416C 7265 
00003EA9  6164 7920 6221          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00003EAD  4578 6973 
00003EB1  7473 2061 
00003EB5  74        
00003EB6  2041 6464 6222          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00003EBA  7265 7373 
00003EBE  203A 2025 
00003EC2  30        
00003EC3  3878 0D0A 6223          dc.b      56,120,13,10,0
00003EC7  00        
                    6224   @mdnod_76:
00003EC8  0D0A 4272 6225          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003ECC  6561 6B20 
00003ED0  506F 696E 
00003ED4  74        
00003ED5  2053 6574 6226          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00003ED9  2061 7420 
00003EDD  4164 6472 
00003EE1  65        
00003EE2  7373 3A20 6227          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00003EE6  5B24 2530 
00003EEA  3878 5D00 
                    6228   @mdnod_77:
00003EEE  0D0A 4E6F 6229          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00003EF2  2046 5245 
00003EF6  4520 5761 
00003EFA  7463      
00003EFC  6820 506F 6230          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00003F00  696E 7473 
00003F04  2E2E 2E2E 
00003F08  2E        
00003F09  00        6231          dc.b      0
                    6232   @mdnod_78:
00003F0A  0D0A 5761 6233          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003F0E  7463 6820 
00003F12  506F 696E 
00003F16  74        
00003F17  2041 6464 6234          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003F1B  7265 7373 
00003F1F  3A20 00   
                    6235   @mdnod_79:
00003F22  0D0A 4572 6236          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00003F26  726F 723A 
00003F2A  2057 6174 
00003F2E  63        
00003F2F  6820 506F 6237          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00003F33  696E 7420 
00003F37  416C 7265 
00003F3B  6164 7920 6238          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00003F3F  5365 7420 
00003F43  6174 2041 
00003F47  64        
00003F48  6472 6573 6239          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00003F4C  7320 3A20 
00003F50  2530 3878 
00003F54  0D        
00003F55  0A00      6240          dc.b      10,0
                    6241   @mdnod_80:
00003F58  0D0A 5761 6242          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003F5C  7463 6820 
00003F60  506F 696E 
00003F64  74        
00003F65  2053 6574 6243          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00003F69  2061 7420 
00003F6D  4164 6472 
00003F71  65        
00003F72  7373 3A20 6244          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00003F76  5B24 2530 
00003F7A  3878 5D00 
                    6245   @mdnod_81:
00003F7E  0D0A 0D0A 6246          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00003F82  0D0A 0D0A 
00003F86  4042 5245 
00003F8A  414B 50   
00003F8D  4F49 4E54 6247          dc.b      79,73,78,84,0
00003F91  00        
                    6248   @mdnod_82:
00003F92  0D0A 5369 6249          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00003F96  6E67 6C65 
00003F9A  2053 7465 
00003F9E  70        
00003F9F  203A 205B 6250          dc.b      32,58,32,91,79,78,93,0
00003FA3  4F4E 5D00 
                    6251   @mdnod_83:
00003FA8  0D0A 4272 6252          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00003FAC  6561 6B50 
00003FB0  6F69 6E74 
00003FB4  73        
00003FB5  203A 205B 6253          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00003FB9  456E 6162 
00003FBD  6C65 645D 
00003FC1  00        
                    6254   @mdnod_84:
00003FC2  0D0A 5072 6255          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003FC6  6573 7320 
00003FCA  3C45 5343 
00003FCE  3E20      
00003FD0  746F 2052 6256          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00003FD4  6573 756D 
00003FD8  6520 5573 
00003FDC  6572 2050 6257          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00003FE0  726F 6772 
00003FE4  616D 0D0A 
00003FE8  00        
                    6258   @mdnod_85:
00003FEA  0D0A 556E 6259          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00003FEE  6B6E 6F77 
00003FF2  6E20 436F 
00003FF6  6D        
00003FF7  6D61 6E64 6260          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00003FFB  2E2E 2E2E 
00003FFF  2E0D 0A00 
                    6261   @mdnod_86:
00004004  0D0A 5072 6262          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004008  6F67 7261 
0000400C  6D20 456E 
00004010  64        
00004011  6564 2028 6263          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004015  5452 4150 
00004019  2023 3135 
0000401D  292E      
0000401F  2E2E 2E00 6264          dc.b      46,46,46,0
                    6265   @mdnod_87:
00004024  0D0A 4B69 6266          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004028  6C6C 2041 
0000402C  6C6C 2042 
00004030  72        
00004031  6561 6B20 6267          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004035  506F 696E 
00004039  7473 2E2E 
0000403D  2E        
0000403E  2879 2F6E 6268          dc.b      40,121,47,110,41,63,0
00004042  293F 00   
                    6269   @mdnod_88:
00004046  0D0A 4B69 6270          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000404A  6C6C 2041 
0000404E  6C6C 2057 
00004052  61        
00004053  7463 6820 6271          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004057  506F 696E 
0000405B  7473 2E2E 
0000405F  2E        
00004060  2879 2F6E 6272          dc.b      40,121,47,110,41,63,0
00004064  293F 00   
                    6273   @mdnod_89:
00004068  0D0A 2D2D 6274          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000406C  2D2D 2D2D 
00004070  2D2D 2D2D 
00004074  2D2D 2D   
00004077  2D2D 2D2D 6275          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000407B  2D2D 2D2D 
0000407F  2D2D 2D2D 
00004083  2D2D 2D   
00004086  2D2D 2D2D 6276          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000408A  2D2D 2D2D 
0000408E  2D2D 2D2D 
00004092  2D2D 2D   
00004095  2D2D 2D2D 6277          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004099  2D2D 2D2D 
0000409D  2D2D 2D2D 
000040A1  2D2D 2D   
000040A4  2D2D 2D2D 6278          dc.b      45,45,45,45,45,45,0
000040A8  2D2D 00   
                    6279   @mdnod_90:
000040AC  0D0A 2020 6280          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000040B0  4465 6275 
000040B4  6767 6572 
000040B8  20        
000040B9  436F 6D6D 6281          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000040BD  616E 6420 
000040C1  5375 6D6D 
000040C5  6172 7900 6282          dc.b      97,114,121,0
                    6283   @mdnod_91:
000040CA  0D0A 2020 6284          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000040CE  2E28 7265 
000040D2  6729 2020 
000040D6  2020      
000040D8  2020 202D 6285          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000040DC  2043 6861 
000040E0  6E67 6520 
000040E4  5265      
000040E6  6769 7374 6286          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000040EA  6572 733A 
000040EE  2065 2E67 
000040F2  2041 302D 6287          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000040F6  4137 2C44 
000040FA  302D 4437 
000040FE  2C50 43   
00004101  2C53 5350 6288          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004105  2C55 5350 
00004109  2C53 5200 
                    6289   @mdnod_92:
0000410E  0D0A 2020 6290          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004112  4244 2F42 
00004116  532F 4243 
0000411A  2F42 4B   
0000411D  2020 2D20 6291          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004121  4272 6561 
00004125  6B20 506F 
00004129  69        
0000412A  6E74 3A20 6292          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
0000412E  4469 7370 
00004132  6C61 792F 
00004136  53        
00004137  6574 2F43 6293          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
0000413B  6C65 6172 
0000413F  2F4B 696C 
00004143  6C        
00004144  00        6294          dc.b      0
                    6295   @mdnod_93:
00004146  0D0A 2020 6296          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
0000414A  4320 2020 
0000414E  2020 2020 
00004152  2020 20   
00004155  2020 2D20 6297          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004159  436F 7079 
0000415D  2050 726F 
00004161  67        
00004162  7261 6D20 6298          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004166  6672 6F6D 
0000416A  2046 6C61 
0000416E  73        
0000416F  6820 746F 6299          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004173  204D 6169 
00004177  6E20 4D65 
0000417B  6D        
0000417C  6F72 7900 6300          dc.b      111,114,121,0
                    6301   @mdnod_94:
00004180  0D0A 2020 6302          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004184  4420 2020 
00004188  2020 2020 
0000418C  2020 20   
0000418F  2020 2D20 6303          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004193  4475 6D70 
00004197  204D 656D 
0000419B  6F        
0000419C  7279 2043 6304          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000041A0  6F6E 7465 
000041A4  6E74 7320 
000041A8  746F 2053 6305          dc.b      116,111,32,83,99,114,101,101,110,0
000041AC  6372 6565 
000041B0  6E00      
                    6306   @mdnod_95:
000041B2  0D0A 2020 6307          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000041B6  4520 2020 
000041BA  2020 2020 
000041BE  2020 20   
000041C1  2020 2D20 6308          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000041C5  456E 7465 
000041C9  7220 5374 
000041CD  72        
000041CE  696E 6720 6309          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000041D2  696E 746F 
000041D6  204D 656D 
000041DA  6F72 7900 6310          dc.b      111,114,121,0
                    6311   @mdnod_96:
000041DE  0D0A 2020 6312          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000041E2  4620 2020 
000041E6  2020 2020 
000041EA  2020 20   
000041ED  2020 2D20 6313          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000041F1  4669 6C6C 
000041F5  204D 656D 
000041F9  6F        
000041FA  7279 2077 6314          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
000041FE  6974 6820 
00004202  4461 7461 
00004206  00        
                    6315   @mdnod_97:
00004208  0D0A 2020 6316          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000420C  4720 2020 
00004210  2020 2020 
00004214  2020 20   
00004217  2020 2D20 6317          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
0000421B  476F 2050 
0000421F  726F 6772 
00004223  61        
00004224  6D20 5374 6318          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004228  6172 7469 
0000422C  6E67 2061 
00004230  74        
00004231  2041 6464 6319          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004235  7265 7373 
00004239  3A20 2425 
0000423D  30        
0000423E  3858 00   6320          dc.b      56,88,0
                    6321   @mdnod_98:
00004242  0D0A 2020 6322          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004246  4C20 2020 
0000424A  2020 2020 
0000424E  2020 20   
00004251  2020 2D20 6323          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004255  4C6F 6164 
00004259  2050 726F 
0000425D  67        
0000425E  7261 6D20 6324          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004262  282E 4845 
00004266  5820 6669 
0000426A  6C        
0000426B  6529 2066 6325          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000426F  726F 6D20 
00004273  4C61 7074 
00004277  6F        
00004278  7000      6326          dc.b      112,0
                    6327   @mdnod_99:
0000427A  0D0A 2020 6328          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000427E  4D20 2020 
00004282  2020 2020 
00004286  2020 20   
00004289  2020 2D20 6329          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000428D  4D65 6D6F 
00004291  7279 2045 
00004295  78        
00004296  616D 696E 6330          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000429A  6520 616E 
0000429E  6420 4368 
000042A2  61        
000042A3  6E67 6500 6331          dc.b      110,103,101,0
                    6332   @mdnod_100:
000042A8  0D0A 2020 6333          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000042AC  5020 2020 
000042B0  2020 2020 
000042B4  2020 20   
000042B7  2020 2D20 6334          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000042BB  5072 6F67 
000042BF  7261 6D20 
000042C3  46        
000042C4  6C61 7368 6335          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000042C8  204D 656D 
000042CC  6F72 7920 
000042D0  7769 7468 6336          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000042D4  2055 7365 
000042D8  7220 5072 
000042DC  6F67 7261 6337          dc.b      111,103,114,97,109,0
000042E0  6D00      
                    6338   @mdnod_101:
000042E2  0D0A 2020 6339          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000042E6  5220 2020 
000042EA  2020 2020 
000042EE  2020 20   
000042F1  2020 2D20 6340          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000042F5  4469 7370 
000042F9  6C61 7920 
000042FD  36        
000042FE  3830 3030 6341          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004302  2052 6567 
00004306  6973 7465 
0000430A  72        
0000430B  7300      6342          dc.b      115,0
                    6343   @mdnod_102:
0000430E  0D0A 2020 6344          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004312  5320 2020 
00004316  2020 2020 
0000431A  2020 20   
0000431D  2020 2D20 6345          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004321  546F 6767 
00004325  6C65 204F 
00004329  4E        
0000432A  2F4F 4646 6346          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
0000432E  2053 696E 
00004332  676C 6520 
00004336  53        
00004337  7465 7020 6347          dc.b      116,101,112,32,77,111,100,101,0
0000433B  4D6F 6465 
0000433F  00        
                    6348   @mdnod_103:
00004340  0D0A 2020 6349          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004344  544D 2020 
00004348  2020 2020 
0000434C  2020 20   
0000434F  2020 2D20 6350          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004353  5465 7374 
00004357  204D 656D 
0000435B  6F        
0000435C  7279 00   6351          dc.b      114,121,0
                    6352   @mdnod_104:
00004360  0D0A 2020 6353          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004364  5453 2020 
00004368  2020 2020 
0000436C  2020 20   
0000436F  2020 2D20 6354          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004373  5465 7374 
00004377  2053 7769 
0000437B  74        
0000437C  6368 6573 6355          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004380  3A20 5357 
00004384  372D 3000 
                    6356   @mdnod_105:
00004388  0D0A 2020 6357          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000438C  5444 2020 
00004390  2020 2020 
00004394  2020 20   
00004397  2020 2D20 6358          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000439B  5465 7374 
0000439F  2044 6973 
000043A3  70        
000043A4  6C61 7973 6359          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000043A8  3A20 4C45 
000043AC  4473 2061 
000043B0  6E        
000043B1  6420 372D 6360          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000043B5  5365 676D 
000043B9  656E 7400 
                    6361   @mdnod_106:
000043BE  0D0A 2020 6362          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000043C2  5744 2F57 
000043C6  532F 5743 
000043CA  2F57 4B   
000043CD  2020 2D20 6363          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000043D1  5761 7463 
000043D5  6820 506F 
000043D9  696E      
000043DB  743A 2044 6364          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000043DF  6973 706C 
000043E3  6179 2F53 
000043E7  65        
000043E8  742F 436C 6365          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000043EC  6561 722F 
000043F0  4B69 6C6C 
000043F4  00        
                    6366   @mdnod_107:
000043F6  0D0A 2300 6367          dc.b      13,10,35,0
                    6368   @mdnod_108:
000043FA  0D0A 5072 6369          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000043FE  6F67 7261 
00004402  6D20 5275 
00004406  6E        
00004407  6E69 6E67 6370          dc.b      110,105,110,103,46,46,46,46,46,0
0000440B  2E2E 2E2E 
0000440F  2E00      
                    6371   @mdnod_109:
00004412  0D0A 5072 6372          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004416  6573 7320 
0000441A  3C52 4553 
0000441E  4554      
00004420  3E20 6275 6373          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004424  7474 6F6E 
00004428  203C 4B65 
0000442C  79        
0000442D  303E 206F 6374          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004431  6E20 4445 
00004435  3120 746F 
00004439  2073      
0000443B  746F 7000 6375          dc.b      116,111,112,0
                    6376   @mdnod_110:
00004440  0D0A 4572 6377          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004444  726F 723A 
00004448  2050 7265 
0000444C  73        
0000444D  7320 2747 6378          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004451  2720 6669 
00004455  7273 7420 
00004459  74        
0000445A  6F20 7374 6379          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000445E  6172 7420 
00004462  7072 6F67 
00004466  7261 6D00 6380          dc.b      114,97,109,0
                    6381   @mdnod_111:
0000446A  0D0A 5369 6382          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000446E  6E67 6C65 
00004472  2053 7465 
00004476  70        
00004477  2020 3A5B 6383          dc.b      32,32,58,91,79,78,93,0
0000447B  4F4E 5D00 
                    6384   @mdnod_112:
00004480  0D0A 5072 6385          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004484  6573 7320 
00004488  2747 2720 
0000448C  74        
0000448D  6F20 5472 6386          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004491  6163 6520 
00004495  5072 6F67 
00004499  72        
0000449A  616D 2066 6387          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000449E  726F 6D20 
000044A2  6164 6472 
000044A6  6573 7320 6388          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000044AA  2425 582E 
000044AE  2E2E 2E2E 
000044B2  00        
                    6389   @mdnod_113:
000044B4  0D0A 5075 6390          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000044B8  7368 203C 
000044BC  5245 5345 
000044C0  5420      
000044C2  4275 7474 6391          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000044C6  6F6E 3E20 
000044CA  746F 2053 
000044CE  74        
000044CF  6F70 2E2E 6392          dc.b      111,112,46,46,46,46,46,0
000044D3  2E2E 2E00 
                    6393   @mdnod_114:
000044D8  0D0A 5369 6394          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000044DC  6E67 6C65 
000044E0  2053 7465 
000044E4  70        
000044E5  203A 205B 6395          dc.b      32,58,32,91,79,70,70,93,0
000044E9  4F46 465D 
000044ED  00        
                    6396   @mdnod_115:
000044EE  0D0A 4272 6397          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000044F2  6561 6B20 
000044F6  506F 696E 
000044FA  74        
000044FB  7320 3A5B 6398          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000044FF  456E 6162 
00004503  6C65 645D 
00004507  00        
                    6399   @mdnod_116:
00004508  0D0A 5072 6400          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000450C  6573 7320 
00004510  3C45 5343 
00004514  3E20      
00004516  746F 2052 6401          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000451A  6573 756D 
0000451E  6520 5573 
00004522  6572 2050 6402          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004526  726F 6772 
0000452A  616D 2E2E 
0000452E  2E        
0000452F  2E2E 00   6403          dc.b      46,46,0
                    6404   @mdnod_117:
00004532  0D0A 5369 6405          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004536  6E67 6C65 
0000453A  2053 7465 
0000453E  70        
0000453F  2020 3A5B 6406          dc.b      32,32,58,91,79,70,70,93,0
00004543  4F46 465D 
00004547  00        
                    6407   @mdnod_118:
00004548  0D0A 0D0A 6408          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000454C  5072 6F67 
00004550  7261 6D20 
00004554  41        
00004555  424F 5254 6409          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004559  2021 2121 
0000455D  2121 210D 
00004561  0A00      
                    6410   @mdnod_119:
00004564  2573 0D0A 6411          dc.b      37,115,13,10,0
00004568  00        
                    6412   @mdnod_120:
0000456A  0D0A 0D0A 6413          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000456E  5072 6F67 
00004572  7261 6D20 
00004576  41        
00004577  424F 5254 6414          dc.b      66,79,82,84,32,33,33,33,33,33,0
0000457B  2021 2121 
0000457F  2121 00   
                    6415   @mdnod_121:
00004582  0D0A 556E 6416          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004586  6861 6E64 
0000458A  6C65 6420 
0000458E  49        
0000458F  6E74 6572 6417          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004593  7275 7074 
00004597  3A20 4952 
0000459B  5125 6420 6418          dc.b      81,37,100,32,33,33,33,33,33,0
0000459F  2121 2121 
000045A3  2100      
                    6419   @mdnod_122:
000045A6  4144 4452 6420          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
000045AA  4553 5320 
000045AE  4552 524F 
000045B2  523A 20   
000045B5  3136 206F 6421          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
000045B9  7220 3332 
000045BD  2042 6974 
000045C1  2054      
000045C3  7261 6E73 6422          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
000045C7  6665 7220 
000045CB  746F 2F66 
000045CF  726F 6D20 6423          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000045D3  616E 204F 
000045D7  4444 2041 
000045DB  64        
000045DC  6472 6573 6424          dc.b      100,114,101,115,115,46,46,46,46,0
000045E0  732E 2E2E 
000045E4  2E00      
                    6425   @mdnod_123:
000045E6  556E 6861 6426          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000045EA  6E64 6C65 
000045EE  6420 5472 
000045F2  6170 2021 6427          dc.b      97,112,32,33,33,33,33,33,0
000045F6  2121 2121 
000045FA  00        
                    6428   @mdnod_124:
000045FC  4255 5320 6429          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004600  4572 726F 
00004604  7221 00   
                    6430   @mdnod_125:
00004608  4144 4452 6431          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000460C  4553 5320 
00004610  4572 726F 
00004614  7221      
00004616  00        6432          dc.b      0
                    6433   @mdnod_126:
00004618  494C 4C45 6434          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
0000461C  4741 4C20 
00004620  494E 5354 
00004624  5255 43   
00004627  5449 4F4E 6435          dc.b      84,73,79,78,0
0000462B  00        
                    6436   @mdnod_127:
0000462C  4449 5649 6437          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004630  4445 2042 
00004634  5920 5A45 
00004638  524F 00   
                    6438   @mdnod_128:
0000463C  2743 484B 6439          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004640  2720 494E 
00004644  5354 5255 
00004648  4354 49   
0000464B  4F4E 00   6440          dc.b      79,78,0
                    6441   @mdnod_129:
0000464E  5452 4150 6442          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004652  5620 494E 
00004656  5354 5255 
0000465A  4354 49   
0000465D  4F4E 00   6443          dc.b      79,78,0
                    6444   @mdnod_130:
00004660  5052 4956 6445          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004664  494C 4547 
00004668  4520 5649 
0000466C  4F4C 41   
0000466F  5449 4F4E 6446          dc.b      84,73,79,78,0
00004673  00        
                    6447   @mdnod_131:
00004674  554E 494E 6448          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004678  4954 4941 
0000467C  4C49 5345 
00004680  4420 49   
00004683  5251 00   6449          dc.b      82,81,0
                    6450   @mdnod_132:
00004686  5350 5552 6451          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000468A  494F 5553 
0000468E  2049 5251 
00004692  00        
                    6452   @mdnod_133:
00004694  0D0A 5374 6453          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004698  6172 7420 
0000469C  4164 6472 
000046A0  65        
000046A1  7373 2069 6454          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
000046A5  6E20 4D65 
000046A9  6D6F 7279 
000046AD  3A20 00   6455          dc.b      58,32,0
                    6456   @mdnod_134:
000046B0  0D0A 456E 6457          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000046B4  7465 7220 
000046B8  5374 7269 
000046BC  6E        
000046BD  6720 2845 6458          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000046C1  5343 2074 
000046C5  6F20 656E 
000046C9  64        
000046CA  2920 3A00 6459          dc.b      41,32,58,0
                    6460   @mdnod_135:
000046CE  0D0A 7374 6461          dc.b      13,10,115,116,97,114,116,32,65,100,100,114,101
000046D2  6172 7420 
000046D6  4164 6472 
000046DA  65        
000046DB  7373 2066 6462          dc.b      115,115,32,102,114,111,109,32,48,120,48,56,48
000046DF  726F 6D20 
000046E3  3078 3038 
000046E7  30        
000046E8  3230 3030 6463          dc.b      50,48,48,48,48,32,116,111,32,48,120,48,56,48
000046EC  3020 746F 
000046F0  2030 7830 
000046F4  3830      
000046F6  3330 3030 6464          dc.b      51,48,48,48,48,41,58,32,0
000046FA  3029 3A20 
000046FE  00        
                    6465   @mdnod_136:
00004700  0D0A 656E 6466          dc.b      13,10,101,110,100,32,65,100,100,114,101,115
00004704  6420 4164 
00004708  6472 6573 
0000470C  7320 6672 6467          dc.b      115,32,102,114,111,109,32,48,120,48,56,48,50
00004710  6F6D 2030 
00004714  7830 3830 
00004718  32        
00004719  3030 3030 6468          dc.b      48,48,48,48,32,116,111,32,48,120,48,56,48,51
0000471D  2074 6F20 
00004721  3078 3038 
00004725  3033      
00004727  3030 3030 6469          dc.b      48,48,48,48,41,58,32,0
0000472B  293A 2000 
                    6470   @mdnod_137:
00004730  0D0A 4368 6471          dc.b      13,10,67,104,111,111,115,101,32,100,97,116,97
00004734  6F6F 7365 
00004738  2064 6174 
0000473C  61        
0000473D  2070 6174 6472          dc.b      32,112,97,116,116,101,114,110,58,32,13,10,49
00004741  7465 726E 
00004745  3A20 0D0A 
00004749  31        
0000474A  3A20 3535 6473          dc.b      58,32,53,53,13,10,50,58,32,65,65,13,10,51,58
0000474E  0D0A 323A 
00004752  2041 410D 
00004756  0A33 3A   
00004759  2046 460D 6474          dc.b      32,70,70,13,10,52,58,32,48,48,0
0000475D  0A34 3A20 
00004761  3030 00   
                    6475   @mdnod_138:
00004764  0D0A 6461 6476          dc.b      13,10,100,97,116,97,58,32,37,120,0
00004768  7461 3A20 
0000476C  2578 00   
                    6477   @mdnod_139:
00004770  0D0A 456E 6478          dc.b      13,10,69,110,116,101,114,32,39,66,39,44,32,102
00004774  7465 7220 
00004778  2742 272C 
0000477C  2066      
0000477E  6F72 2062 6479          dc.b      111,114,32,98,121,116,101,115,44,32,39,87,39
00004782  7974 6573 
00004786  2C20 2757 
0000478A  27        
0000478B  2066 6F72 6480          dc.b      32,102,111,114,32,119,111,114,100,115,44,32
0000478F  2077 6F72 
00004793  6473 2C20 
00004797  6F72 2027 6481          dc.b      111,114,32,39,76,39,32,102,111,114,32,108,111
0000479B  4C27 2066 
0000479F  6F72 206C 
000047A3  6F        
000047A4  6E67 2077 6482          dc.b      110,103,32,119,111,114,100,115,58,32,0
000047A8  6F72 6473 
000047AC  3A20 00   
                    6483   @mdnod_140:
000047B0  0D0A 4279 6484          dc.b      13,10,66,121,116,101,115,0
000047B4  7465 7300 
                    6485   @mdnod_141:
000047B8  0D0A 576F 6486          dc.b      13,10,87,111,114,100,115,0
000047BC  7264 7300 
                    6487   @mdnod_142:
000047C0  0D0A 4C6F 6488          dc.b      13,10,76,111,110,103,32,87,111,114,100,115,0
000047C4  6E67 2057 
000047C8  6F72 6473 
000047CC  00        
                    6489   @mdnod_143:
000047CE  0D0A 4279 6490          dc.b      13,10,66,121,116,101,32,87,114,105,116,101,32
000047D2  7465 2057 
000047D6  7269 7465 
000047DA  20        
000047DB  4669 6E69 6491          dc.b      70,105,110,105,115,104,101,100,46,32,82,101
000047DF  7368 6564 
000047E3  2E20 5265 
000047E7  6164 2073 6492          dc.b      97,100,32,115,116,97,114,116,115,46,0
000047EB  7461 7274 
000047EF  732E 00   
                    6493   @mdnod_144:
000047F2  0D0A 6279 6494          dc.b      13,10,98,121,116,101,100,97,116,97,58,32,37
000047F6  7465 6461 
000047FA  7461 3A20 
000047FE  25        
000047FF  7800      6495          dc.b      120,0
                    6496   @mdnod_145:
00004802  0D0A 5772 6497          dc.b      13,10,87,114,105,116,101,58,32,37,120,32,116
00004806  6974 653A 
0000480A  2025 7820 
0000480E  74        
0000480F  6F20 6164 6498          dc.b      111,32,97,100,100,114,32,37,120,0
00004813  6472 2025 
00004817  7800      
                    6499   @mdnod_146:
0000481A  0D0A 576F 6500          dc.b      13,10,87,111,114,100,32,87,114,105,116,101,32
0000481E  7264 2057 
00004822  7269 7465 
00004826  20        
00004827  4669 6E69 6501          dc.b      70,105,110,105,115,104,101,100,46,32,82,101
0000482B  7368 6564 
0000482F  2E20 5265 
00004833  6164 2073 6502          dc.b      97,100,32,115,116,97,114,116,115,46,0
00004837  7461 7274 
0000483B  732E 00   
                    6503   @mdnod_147:
0000483E  0D0A 776F 6504          dc.b      13,10,119,111,114,100,100,97,116,97,58,32,37
00004842  7264 6461 
00004846  7461 3A20 
0000484A  25        
0000484B  7800      6505          dc.b      120,0
                    6506   @mdnod_148:
0000484E  0D0A 4C6F 6507          dc.b      13,10,76,111,110,103,32,87,111,114,100,32,87
00004852  6E67 2057 
00004856  6F72 6420 
0000485A  57        
0000485B  7269 7465 6508          dc.b      114,105,116,101,32,70,105,110,105,115,104,101
0000485F  2046 696E 
00004863  6973 6865 
00004867  642E 2052 6509          dc.b      100,46,32,82,101,97,100,32,115,116,97,114,116
0000486B  6561 6420 
0000486F  7374 6172 
00004873  74        
00004874  732E 00   6510          dc.b      115,46,0
                    6511   @mdnod_149:
00004878  0D0A 6C6F 6512          dc.b      13,10,108,111,110,103,100,97,116,97,58,32,37
0000487C  6E67 6461 
00004880  7461 3A20 
00004884  25        
00004885  7800      6513          dc.b      120,0
                    6514   @mdnod_150:
00004888  0D0A 4279 6515          dc.b      13,10,66,121,116,101,32,82,101,97,100,32,99
0000488C  7465 2052 
00004890  6561 6420 
00004894  63        
00004895  6F6D 706C 6516          dc.b      111,109,112,108,101,116,101,46,0
00004899  6574 652E 
0000489D  00        
                    6517   @mdnod_151:
0000489E  0D0A 5041 6518          dc.b      13,10,80,65,83,83,46,0
000048A2  5353 2E00 
                    6519   @mdnod_152:
000048A6  0D0A 4552 6520          dc.b      13,10,69,82,82,79,82,58,32,65,100,100,114,101
000048AA  524F 523A 
000048AE  2041 6464 
000048B2  7265      
000048B4  7373 2025 6521          dc.b      115,115,32,37,120,32,100,97,116,97,32,105,115
000048B8  7820 6461 
000048BC  7461 2069 
000048C0  73        
000048C1  2025 7820 6522          dc.b      32,37,120,32,98,117,116,32,115,104,111,117,108
000048C5  6275 7420 
000048C9  7368 6F75 
000048CD  6C        
000048CE  6420 6265 6523          dc.b      100,32,98,101,32,37,120,0
000048D2  2025 7800 
                    6524   @mdnod_153:
000048D6  0D0A 4641 6525          dc.b      13,10,70,65,73,76,46,0
000048DA  494C 2E00 
                    6526   @mdnod_154:
000048DE  0D0A 5265 6527          dc.b      13,10,82,101,97,100,58,32,65,100,100,114,101
000048E2  6164 3A20 
000048E6  4164 6472 
000048EA  65        
000048EB  7373 2025 6528          dc.b      115,115,32,37,120,32,100,97,116,97,32,105,115
000048EF  7820 6461 
000048F3  7461 2069 
000048F7  73        
000048F8  2025 7800 6529          dc.b      32,37,120,0
                    6530   @mdnod_155:
000048FC  0D0A 576F 6531          dc.b      13,10,87,111,114,100,32,82,101,97,100,32,99
00004900  7264 2052 
00004904  6561 6420 
00004908  63        
00004909  6F6D 706C 6532          dc.b      111,109,112,108,101,116,101,46,0
0000490D  6574 652E 
00004911  00        
                    6533   @mdnod_156:
00004912  0D0A 4C6F 6534          dc.b      13,10,76,111,110,103,32,87,111,114,100,32,82
00004916  6E67 2057 
0000491A  6F72 6420 
0000491E  52        
0000491F  6561 6420 6535          dc.b      101,97,100,32,99,111,109,112,108,101,116,101
00004923  636F 6D70 
00004927  6C65 7465 
0000492B  2E00      6536          dc.b      46,0
                    6537   @mdnod_157:
0000492E  4445 312D 6538          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00004932  3638 6B20 
00004936  4275 6720 
0000493A  5631      
0000493C  2E37 3700 6539          dc.b      46,55,55,0
                    6540   @mdnod_158:
00004940  436F 7079 6541          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00004944  7269 6768 
00004948  7420 2843 
0000494C  2920 504A 6542          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00004950  2044 6176 
00004954  6965 7320 
00004958  3230      
0000495A  3136 00   6543          dc.b      49,54,0
                    6544   @mdnod_159:
0000495E  0D0A 5275 6545          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00004962  6E6E 696E 
00004966  672E 2E2E 
0000496A  2E        
0000496B  2E00      6546          dc.b      46,0
                    6547   @mdnod_160:
0000496E  5275 6E6E 6548          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00004972  696E 672E 
00004976  2E2E 2E2E 
0000497A  00        
                    6549   @mdnod_161:
0000497C  4279 3A20 6550          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00004980  504A 2044 
00004984  6176 6965 
00004988  73        
00004989  00        6551          dc.b      0
                    6552   @mdnod_162:
0000498A  0D0A 2573 6553          dc.b      13,10,37,115,0
0000498E  00        
                    6554          section   data
00004990            6555                   align
          0000 4990 6556   DataStart       equ       *
                    6557   
                    6558   *********************************************************************************************************
                    6559   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6560   * to ram as part of the CStart routine in this file
                    6561   *********************************************************************************************************
                    6562   
                    6563   @itoa_1:
00004990  2D32 3134 6564          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004994  3734 3833 
00004998  3634 3800 
                    6565          section   bss
0000499C            6566                   align
          0000 499C 6567   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6568   
                    6569   *********************************************************************************************************
                    6570   * Section for Uninitialised Data held in ROM as constants
                    6571   *********************************************************************************************************
                    6572   
08030000            6573                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 6574   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6575   
                    6576   
08030000            6577   bss             org       bss
                    6578   
                    6579   *********************************************************************************************************
                    6580   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6581   * install the exception handler using the C function InstallExceptionHandler()
                    6582   *********************************************************************************************************
                    6583   
                    6584   
                    6585   
08030000            6586   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            6587   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            6588   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            6589   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            6590   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            6591   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            6592   VCheck           ds.l    1      ditto
0803001C            6593   VTrapV           ds.l    1      ditto
08030020            6594   VPrivilege       ds.l    1      ditto
08030024            6595   VTrace           ds.l    1
08030028            6596   VLine1010emul    ds.l    1
0803002C            6597   VLine1111emul    ds.l    1
08030030            6598   VUnassigned1     ds.l    1
08030034            6599   VUnassigned2     ds.l    1
08030038            6600   VUnassigned3     ds.l    1
0803003C            6601   VUninit_IRQ      ds.l    1
08030040            6602   VUnassigned4     ds.l    1
08030044            6603   VUnassigned5     ds.l    1
08030048            6604   VUnassigned6     ds.l    1
0803004C            6605   VUnassigned7     ds.l    1
08030050            6606   VUnassigned8     ds.l    1
08030054            6607   VUnassigned9     ds.l    1
08030058            6608   VUnassigned10    ds.l    1
0803005C            6609   VUnassigned11    ds.l    1
08030060            6610   VSpuriousIRQ     ds.l    1
                    6611   
                    6612   * Interrupt handlers Vector 25-31
08030064            6613   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            6614   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            6615   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            6616   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            6617   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            6618   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            6619   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6620   
                    6621   * Trap Handler vectors 32-47
08030080            6622   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            6623   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            6624   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            6625   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            6626   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            6627   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            6628   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            6629   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            6630   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            6631   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            6632   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            6633   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            6634   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            6635   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            6636   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            6637   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6638   
                    6639   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6640   
                    6641   ***********************************************************************************************************
                    6642   * Other Variables
                    6643   ***********************************************************************************************************
                    6644   *__DebugA5       ds.l    1
                    6645   *__UserA5        ds.l    1
                    6646   
                    6647   ***********************************************************************************************************
080300C0            6648   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            6649   __allocp:       ds.l    0       ; start of allocation units
080300C4            6650   __heap:         ds.l    0       ; pointers for malloc functions
                    6651   
                    6652   *__himem:       ds.l    himem            ; highest memory location + 1
                    6653   *__stklen:      ds.l    stklen           ; default stack size
                    6654   
                    6655   *********************************************************************************************************
                    6656   * Section for Heap
                    6657   *********************************************************************************************************
                    6658   
                    6659   _i:
080300C4            6660          ds.b      4
                    6661   _x:
080300C8            6662          ds.b      4
                    6663   _y:
080300CC            6664          ds.b      4
                    6665   _z:
080300D0            6666          ds.b      4
                    6667   _PortA_Count:
080300D4            6668          ds.b      4
                    6669   _Trace:
080300D8            6670          ds.b      4
                    6671   _GoFlag:
080300DC            6672          ds.b      4
                    6673   _Echo:
080300E0            6674          ds.b      4
                    6675   _d0:
080300E4            6676          ds.b      4
                    6677   _d1:
080300E8            6678          ds.b      4
                    6679   _d2:
080300EC            6680          ds.b      4
                    6681   _d3:
080300F0            6682          ds.b      4
                    6683   _d4:
080300F4            6684          ds.b      4
                    6685   _d5:
080300F8            6686          ds.b      4
                    6687   _d6:
080300FC            6688          ds.b      4
                    6689   _d7:
08030100            6690          ds.b      4
                    6691   _a0:
08030104            6692          ds.b      4
                    6693   _a1:
08030108            6694          ds.b      4
                    6695   _a2:
0803010C            6696          ds.b      4
                    6697   _a3:
08030110            6698          ds.b      4
                    6699   _a4:
08030114            6700          ds.b      4
                    6701   _a5:
08030118            6702          ds.b      4
                    6703   _a6:
0803011C            6704          ds.b      4
                    6705   _PC:
08030120            6706          ds.b      4
                    6707   _SSP:
08030124            6708          ds.b      4
                    6709   _USP:
08030128            6710          ds.b      4
                    6711   _SR:
0803012C            6712          ds.b      2
                    6713   _BreakPointAddress:
0803012E            6714          ds.b      32
                    6715   _BreakPointInstruction:
0803014E            6716          ds.b      16
                    6717   _BreakPointSetOrCleared:
0803015E            6718          ds.b      32
                    6719   _InstructionSize:
0803017E            6720          ds.b      4
                    6721   _WatchPointAddress:
08030182            6722          ds.b      32
                    6723   _WatchPointSetOrCleared:
080301A2            6724          ds.b      32
                    6725   _WatchPointString:
080301C2            6726          ds.b      800
                    6727   _TempString:
080304E2            6728          ds.b      100
                    6729          section   heap
08030546            6730                   align
          0803 0546 6731   bssEnd          equ *                   end of storage space for unitialised variables
                    6732   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0546 6733   heap   equ       *
08030546            6734                    align
          0000 0000

Assembly errors: 0
