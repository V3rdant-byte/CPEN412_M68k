680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 28 Mar 2024      Time: 21:59:12          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB5K.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  3BAA      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2B40      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\I2C.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include <stdio.h>
                     471   ; //////////////////////////////
                     472   ; // I2C Controller Registers //
                     473   ; //////////////////////////////
                     474   ; #define I2C_CLK_PRESCALE_LOW (*(volatile unsigned char *)(0x00408000))
                     475   ; #define I2C_CLK_PRESCALE_HIGH (*(volatile unsigned char *)(0x00408002))
                     476   ; #define I2C_CTRL (*(volatile unsigned char *)(0x00408004))
                     477   ; #define I2C_TX (*(volatile unsigned char *)(0x00408006))
                     478   ; #define I2C_RX (*(volatile unsigned char *)(0x00408006))
                     479   ; #define I2C_CMD (*(volatile unsigned char *)(0x00408008))
                     480   ; #define I2C_STAT (*(volatile unsigned char *)(0x00408008))
                     481   ; //////////////////
                     482   ; // I2C Commands //
                     483   ; //////////////////
                     484   ; #define I2C_CMD_Slave_Write_With_Start 0x91 // 1001 0001
                     485   ; #define I2C_CMD_Slave_Read_With_Start 0xA9  // 1010 1001
                     486   ; #define I2C_CMD_Slave_Write 0x11            // 0001 0001
                     487   ; #define I2C_CMD_Slave_Read 0x21             // 0010 0001
                     488   ; #define I2C_CMD_Slave_Read_Ack 0x29         // 0010 1001
                     489   ; #define I2C_CMD_Slave_Write_Stop 0x51       // 0101 0001
                     490   ; #define I2C_CMD_Slave_Read_Stop 0x49        // 0100 1001
                     491   ; /////////////////////
                     492   ; // EEPROM Commands //
                     493   ; /////////////////////
                     494   ; #define EEPROM_Write_Block_1 0xA2           // 1010 0010
                     495   ; #define EEPROM_Read_Block_1 0xA3            // 1010 0011
                     496   ; #define EEPROM_Write_Block_0 0xA0           // 1010 0000
                     497   ; #define EEPROM_Read_Block_0 0xA1            // 1010 0001
                     498   ; //////////////////////
                     499   ; // ADC/DAC Commands //
                     500   ; //////////////////////
                     501   ; #define ADC_DAC_Write_Address 0x90          // 1001 0000
                     502   ; #define ADC_Read_Address 0x91               // 1001 0001
                     503   ; #define ADC_CMD_Enable 0x44                 // 0100 0100
                     504   ; #define DAC_CMD_Enable 0x40                 // 0100 0000
                     505   ; #define Enable_I2C_Controller() I2C_CTRL = 0x80     // 1000 0000
                     506   ; void Enable_SCL(void){
                     507   _Enable_SCL:
                     508   ; I2C_CLK_PRESCALE_LOW = 0x31;
00000932  13FC 0031  509          move.b    #49,4227072
00000936  0040 8000 
                     510   ; I2C_CLK_PRESCALE_HIGH = 0x00;
0000093A  4239 0040  511          clr.b     4227074
0000093E  8002      
00000940  4E75       512          rts
                     513   ; }
                     514   ; void WaitTIP(void){
                     515   _WaitTIP:
00000942  4E56 FFFC  516          link      A6,#-4
                     517   ; int TIP_bit;
                     518   ; do{
                     519   WaitTIP_1:
                     520   ; TIP_bit = (I2C_STAT >> 1) & 0x01; // this flag represents acknowledge from the addressed slave | ‘1’ = No acknowledge received | ‘0’ = Acknowledge received
00000946  1039 0040  521          move.b    4227080,D0
0000094A  8008      
0000094C  C0BC 0000  522          and.l     #255,D0
00000950  00FF      
00000952  E288       523          lsr.l     #1,D0
00000954  C0BC 0000  524          and.l     #1,D0
00000958  0001      
0000095A  2D40 FFFC  525          move.l    D0,-4(A6)
0000095E  202E FFFC  526          move.l    -4(A6),D0
00000962  66E2       527          bne       WaitTIP_1
00000964  4E5E       528          unlk      A6
00000966  4E75       529          rts
                     530   ; }while(TIP_bit != 0);
                     531   ; }
                     532   ; void WaitACK(void){
                     533   _WaitACK:
00000968  4E56 FFFC  534          link      A6,#-4
                     535   ; int ACK;
                     536   ; do{
                     537   WaitACK_1:
                     538   ; ACK = (I2C_STAT >> 7) & 0x01;
0000096C  1039 0040  539          move.b    4227080,D0
00000970  8008      
00000972  C0BC 0000  540          and.l     #255,D0
00000976  00FF      
00000978  EE88       541          lsr.l     #7,D0
0000097A  C0BC 0000  542          and.l     #1,D0
0000097E  0001      
00000980  2D40 FFFC  543          move.l    D0,-4(A6)
00000984  202E FFFC  544          move.l    -4(A6),D0
00000988  66E2       545          bne       WaitACK_1
0000098A  4E5E       546          unlk      A6
0000098C  4E75       547          rts
                     548   ; }while(ACK != 0);
                     549   ; }
                     550   ; ///////////////////////////////////
                     551   ; // I2C controller initialization //
                     552   ; ///////////////////////////////////
                     553   ; void I2C_Init(void){
                     554   _I2C_Init:
                     555   ; Enable_SCL();
0000098E  4EB8 0932  556          jsr       _Enable_SCL
                     557   ; Enable_I2C_Controller();
00000992  13FC 0080  558          move.b    #128,4227076
00000996  0040 8004 
0000099A  4E75       559          rts
                     560   ; }
                     561   ; ///////////////////////////////////////////////
                     562   ; // write a single byte to the EEPROM via I2C //
                     563   ; ///////////////////////////////////////////////
                     564   ; void WriteI2CInteraction(int block, unsigned int Address, unsigned char AddressMSB, unsigned char AddressLSB, unsigned char data, int flag){
                     565   _WriteI2CInteraction:
0000099C  4E56 0000  566          link      A6,#0
000009A0  48E7 2030  567          movem.l   D2/A2/A3,-(A7)
000009A4  45F8 0942  568          lea       _WaitTIP.L,A2
000009A8  47F8 0968  569          lea       _WaitACK.L,A3
                     570   ; unsigned char controlByte;
                     571   ; // determine the block of interest 
                     572   ; if (block == 1) {
000009AC  202E 0008  573          move.l    8(A6),D0
000009B0  0C80 0000  574          cmp.l     #1,D0
000009B4  0001      
000009B6  6606       575          bne.s     WriteI2CInteraction_1
                     576   ; controlByte = EEPROM_Write_Block_1;
000009B8  143C 00A2  577          move.b    #162,D2
000009BC  6004       578          bra.s     WriteI2CInteraction_2
                     579   WriteI2CInteraction_1:
                     580   ; } 
                     581   ; else {
                     582   ; controlByte = EEPROM_Write_Block_0;
000009BE  143C 00A0  583          move.b    #160,D2
                     584   WriteI2CInteraction_2:
                     585   ; }
                     586   ; // wait for TIP
                     587   ; WaitTIP();
000009C2  4E92       588          jsr       (A2)
                     589   ; // store the data to TX register
                     590   ; I2C_TX = controlByte;
000009C4  13C2 0040  591          move.b    D2,4227078
000009C8  8006      
                     592   ; // command to generate start condition, write, and clear pending interrupt 
                     593   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
000009CA  13FC 0091  594          move.b    #145,4227080
000009CE  0040 8008 
                     595   ; //Wait for TIP bit in Status Register
                     596   ; WaitTIP();
000009D2  4E92       597          jsr       (A2)
                     598   ; //Wait RxACK bit in Status Register
                     599   ; WaitACK();
000009D4  4E93       600          jsr       (A3)
                     601   ; // send the most significant byte of the address
                     602   ; I2C_TX = AddressMSB;
000009D6  13EE 0013  603          move.b    19(A6),4227078
000009DA  0040 8006 
                     604   ; // command to write and clear pending interrupt 
                     605   ; I2C_CMD = I2C_CMD_Slave_Write;
000009DE  13FC 0011  606          move.b    #17,4227080
000009E2  0040 8008 
                     607   ; WaitTIP();
000009E6  4E92       608          jsr       (A2)
                     609   ; WaitACK();
000009E8  4E93       610          jsr       (A3)
                     611   ; // send the least significant byte of the address
                     612   ; I2C_TX = AddressLSB;
000009EA  13EE 0017  613          move.b    23(A6),4227078
000009EE  0040 8006 
                     614   ; I2C_CMD = I2C_CMD_Slave_Write;
000009F2  13FC 0011  615          move.b    #17,4227080
000009F6  0040 8008 
                     616   ; WaitTIP();
000009FA  4E92       617          jsr       (A2)
                     618   ; WaitACK();
000009FC  4E93       619          jsr       (A3)
                     620   ; // send data
                     621   ; I2C_TX = data;
000009FE  13EE 001B  622          move.b    27(A6),4227078
00000A02  0040 8006 
                     623   ; I2C_CMD = I2C_CMD_Slave_Write_Stop;
00000A06  13FC 0051  624          move.b    #81,4227080
00000A0A  0040 8008 
                     625   ; WaitTIP();
00000A0E  4E92       626          jsr       (A2)
                     627   ; WaitACK();
00000A10  4E93       628          jsr       (A3)
                     629   ; if(flag == 0){
00000A12  202E 001C  630          move.l    28(A6),D0
00000A16  6620       631          bne.s     WriteI2CInteraction_3
                     632   ; printf("\r\nWrote [%x] to Address[%x]", data, Address);
00000A18  2F2E 000C  633          move.l    12(A6),-(A7)
00000A1C  122E 001B  634          move.b    27(A6),D1
00000A20  C2BC 0000  635          and.l     #255,D1
00000A24  00FF      
00000A26  2F01       636          move.l    D1,-(A7)
00000A28  4879 0000  637          pea       @i2c_1.L
00000A2C  49C2      
00000A2E  4EB9 0000  638          jsr       _printf
00000A32  3F54      
00000A34  DEFC 000C  639          add.w     #12,A7
                     640   WriteI2CInteraction_3:
00000A38  4CDF 0C04  641          movem.l   (A7)+,D2/A2/A3
00000A3C  4E5E       642          unlk      A6
00000A3E  4E75       643          rts
                     644   ; }
                     645   ; }
                     646   ; //////////////////////////////////////////////////
                     647   ; // write up to 128k bytes to the EEPROM via I2C //
                     648   ; //////////////////////////////////////////////////
                     649   ; void PageWriteI2CInteraction(unsigned int AddressFrom, unsigned int AddressTo, unsigned char data){
                     650   _PageWriteI2CInteraction:
00000A40  4E56 FFF4  651          link      A6,#-12
00000A44  48E7 3F3C  652          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000A48  242E 0008  653          move.l    8(A6),D2
00000A4C  45F8 0942  654          lea       _WaitTIP.L,A2
00000A50  47F8 0968  655          lea       _WaitACK.L,A3
00000A54  1E2E 0013  656          move.b    19(A6),D7
00000A58  CEBC 0000  657          and.l     #255,D7
00000A5C  00FF      
00000A5E  286E 000C  658          move.l    12(A6),A4
                     659   ; int flag = 0;
00000A62  3A7C 0000  660          move.w    #0,A5
                     661   ; int flag_special = 0;
00000A66  42AE FFF6  662          clr.l     -10(A6)
                     663   ; int i = 0;
00000A6A  4283       664          clr.l     D3
                     665   ; unsigned char controlByte;
                     666   ; unsigned char AddressFromMSB;
                     667   ; unsigned char AddressFromLSB;
                     668   ; unsigned char AddressRange;
                     669   ; unsigned int AddressFrom_Initial;
                     670   ; AddressFrom_Initial = AddressFrom;
00000A6C  2D42 FFFC  671          move.l    D2,-4(A6)
                     672   ; while(AddressFrom < AddressTo){
                     673   PageWriteI2CInteraction_1:
00000A70  B48C       674          cmp.l     A4,D2
00000A72  6400 0178  675          bhs       PageWriteI2CInteraction_3
                     676   ; if (AddressFrom + 128 > AddressTo) {
00000A76  2002       677          move.l    D2,D0
00000A78  0680 0000  678          add.l     #128,D0
00000A7C  0080      
00000A7E  B08C       679          cmp.l     A4,D0
00000A80  6304       680          bls.s     PageWriteI2CInteraction_4
                     681   ; flag = 1;
00000A82  3A7C 0001  682          move.w    #1,A5
                     683   PageWriteI2CInteraction_4:
                     684   ; }
                     685   ; if (AddressFrom > 0xFFFF) {
00000A86  0C82 0000  686          cmp.l     #65535,D2
00000A8A  FFFF      
00000A8C  6328       687          bls.s     PageWriteI2CInteraction_6
                     688   ; controlByte = EEPROM_Write_Block_1;
00000A8E  1C3C 00A2  689          move.b    #162,D6
                     690   ; AddressFromMSB = ((AddressFrom - 0x10000) >> 8) & 0xFF;
00000A92  2002       691          move.l    D2,D0
00000A94  0480 0001  692          sub.l     #65536,D0
00000A98  0000      
00000A9A  E088       693          lsr.l     #8,D0
00000A9C  C0BC 0000  694          and.l     #255,D0
00000AA0  00FF      
00000AA2  1A00       695          move.b    D0,D5
                     696   ; AddressFromLSB = (AddressFrom - 0x10000) & 0xFF;
00000AA4  2002       697          move.l    D2,D0
00000AA6  0480 0001  698          sub.l     #65536,D0
00000AAA  0000      
00000AAC  C0BC 0000  699          and.l     #255,D0
00000AB0  00FF      
00000AB2  1800       700          move.b    D0,D4
00000AB4  601A       701          bra.s     PageWriteI2CInteraction_7
                     702   PageWriteI2CInteraction_6:
                     703   ; }
                     704   ; else {
                     705   ; controlByte = EEPROM_Write_Block_0;
00000AB6  1C3C 00A0  706          move.b    #160,D6
                     707   ; AddressFromMSB = (AddressFrom >> 8) & 0xFF;
00000ABA  2002       708          move.l    D2,D0
00000ABC  E088       709          lsr.l     #8,D0
00000ABE  C0BC 0000  710          and.l     #255,D0
00000AC2  00FF      
00000AC4  1A00       711          move.b    D0,D5
                     712   ; AddressFromLSB = AddressFrom & 0xFF;
00000AC6  2002       713          move.l    D2,D0
00000AC8  C0BC 0000  714          and.l     #255,D0
00000ACC  00FF      
00000ACE  1800       715          move.b    D0,D4
                     716   PageWriteI2CInteraction_7:
                     717   ; }
                     718   ; WaitTIP();
00000AD0  4E92       719          jsr       (A2)
                     720   ; I2C_TX = controlByte;
00000AD2  13C6 0040  721          move.b    D6,4227078
00000AD6  8006      
                     722   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00000AD8  13FC 0091  723          move.b    #145,4227080
00000ADC  0040 8008 
                     724   ; WaitTIP();
00000AE0  4E92       725          jsr       (A2)
                     726   ; WaitACK();
00000AE2  4E93       727          jsr       (A3)
                     728   ; I2C_TX = AddressFromMSB;
00000AE4  13C5 0040  729          move.b    D5,4227078
00000AE8  8006      
                     730   ; I2C_CMD = I2C_CMD_Slave_Write;
00000AEA  13FC 0011  731          move.b    #17,4227080
00000AEE  0040 8008 
                     732   ; WaitTIP();
00000AF2  4E92       733          jsr       (A2)
                     734   ; WaitACK();
00000AF4  4E93       735          jsr       (A3)
                     736   ; I2C_TX = AddressFromLSB;
00000AF6  13C4 0040  737          move.b    D4,4227078
00000AFA  8006      
                     738   ; I2C_CMD = I2C_CMD_Slave_Write;
00000AFC  13FC 0011  739          move.b    #17,4227080
00000B00  0040 8008 
                     740   ; WaitTIP();
00000B04  4E92       741          jsr       (A2)
                     742   ; WaitACK();
00000B06  4E93       743          jsr       (A3)
                     744   ; if(flag == 0){
00000B08  200D       745          move.l    A5,D0
00000B0A  6600 0052  746          bne       PageWriteI2CInteraction_8
                     747   ; for (i = 0; i < 128; i++){  // limit write to 128 bytes
00000B0E  4283       748          clr.l     D3
                     749   PageWriteI2CInteraction_10:
00000B10  0C83 0000  750          cmp.l     #128,D3
00000B14  0080      
00000B16  6C00 0042  751          bge       PageWriteI2CInteraction_12
                     752   ; I2C_TX = data;
00000B1A  13C7 0040  753          move.b    D7,4227078
00000B1E  8006      
                     754   ; I2C_CMD = I2C_CMD_Slave_Write;
00000B20  13FC 0011  755          move.b    #17,4227080
00000B24  0040 8008 
                     756   ; WaitTIP();
00000B28  4E92       757          jsr       (A2)
                     758   ; WaitACK();
00000B2A  4E93       759          jsr       (A3)
                     760   ; if((AddressFrom + i) % 128 == 0){
00000B2C  2002       761          move.l    D2,D0
00000B2E  D083       762          add.l     D3,D0
00000B30  2F00       763          move.l    D0,-(A7)
00000B32  4878 0080  764          pea       128
00000B36  4EB9 0000  765          jsr       ULDIV
00000B3A  3E76      
00000B3C  202F 0004  766          move.l    4(A7),D0
00000B40  504F       767          addq.w    #8,A7
00000B42  4A80       768          tst.l     D0
00000B44  6602       769          bne.s     PageWriteI2CInteraction_13
                     770   ; break;
00000B46  6012       771          bra.s     PageWriteI2CInteraction_12
                     772   PageWriteI2CInteraction_13:
                     773   ; }
                     774   ; // check if need to switch blocks
                     775   ; if(AddressFrom + i == 0xFFFF){
00000B48  2002       776          move.l    D2,D0
00000B4A  D083       777          add.l     D3,D0
00000B4C  0C80 0000  778          cmp.l     #65535,D0
00000B50  FFFF      
00000B52  6602       779          bne.s     PageWriteI2CInteraction_15
                     780   ; break;
00000B54  6004       781          bra.s     PageWriteI2CInteraction_12
                     782   PageWriteI2CInteraction_15:
00000B56  5283       783          addq.l    #1,D3
00000B58  60B6       784          bra       PageWriteI2CInteraction_10
                     785   PageWriteI2CInteraction_12:
00000B5A  6000 005C  786          bra       PageWriteI2CInteraction_19
                     787   PageWriteI2CInteraction_8:
                     788   ; }
                     789   ; }
                     790   ; }
                     791   ; else {
                     792   ; AddressRange = AddressTo - AddressFrom;
00000B5E  200C       793          move.l    A4,D0
00000B60  9082       794          sub.l     D2,D0
00000B62  1D40 FFFB  795          move.b    D0,-5(A6)
                     796   ; for(i = 0; i < AddressRange; i++){                
00000B66  4283       797          clr.l     D3
                     798   PageWriteI2CInteraction_17:
00000B68  102E FFFB  799          move.b    -5(A6),D0
00000B6C  C0BC 0000  800          and.l     #255,D0
00000B70  00FF      
00000B72  B680       801          cmp.l     D0,D3
00000B74  6400 0042  802          bhs       PageWriteI2CInteraction_19
                     803   ; I2C_TX = data;
00000B78  13C7 0040  804          move.b    D7,4227078
00000B7C  8006      
                     805   ; I2C_CMD = I2C_CMD_Slave_Write;
00000B7E  13FC 0011  806          move.b    #17,4227080
00000B82  0040 8008 
                     807   ; WaitTIP();
00000B86  4E92       808          jsr       (A2)
                     809   ; WaitACK();
00000B88  4E93       810          jsr       (A3)
                     811   ; if((AddressFrom + i) % 128 == 0){
00000B8A  2002       812          move.l    D2,D0
00000B8C  D083       813          add.l     D3,D0
00000B8E  2F00       814          move.l    D0,-(A7)
00000B90  4878 0080  815          pea       128
00000B94  4EB9 0000  816          jsr       ULDIV
00000B98  3E76      
00000B9A  202F 0004  817          move.l    4(A7),D0
00000B9E  504F       818          addq.w    #8,A7
00000BA0  4A80       819          tst.l     D0
00000BA2  6602       820          bne.s     PageWriteI2CInteraction_20
                     821   ; break;
00000BA4  6012       822          bra.s     PageWriteI2CInteraction_19
                     823   PageWriteI2CInteraction_20:
                     824   ; }
                     825   ; // check if need to switch blocks
                     826   ; if(AddressFrom + i == 0xFFFF){
00000BA6  2002       827          move.l    D2,D0
00000BA8  D083       828          add.l     D3,D0
00000BAA  0C80 0000  829          cmp.l     #65535,D0
00000BAE  FFFF      
00000BB0  6602       830          bne.s     PageWriteI2CInteraction_22
                     831   ; break;
00000BB2  6004       832          bra.s     PageWriteI2CInteraction_19
                     833   PageWriteI2CInteraction_22:
00000BB4  5283       834          addq.l    #1,D3
00000BB6  60B0       835          bra       PageWriteI2CInteraction_17
                     836   PageWriteI2CInteraction_19:
                     837   ; }
                     838   ; }
                     839   ; }
                     840   ; I2C_CMD = I2C_CMD_Slave_Write_Stop;
00000BB8  13FC 0051  841          move.b    #81,4227080
00000BBC  0040 8008 
                     842   ; WaitTIP();
00000BC0  4E92       843          jsr       (A2)
                     844   ; WaitACK();
00000BC2  4E93       845          jsr       (A3)
                     846   ; do {
                     847   PageWriteI2CInteraction_24:
                     848   ; I2C_TX = controlByte;
00000BC4  13C6 0040  849          move.b    D6,4227078
00000BC8  8006      
                     850   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00000BCA  13FC 0091  851          move.b    #145,4227080
00000BCE  0040 8008 
                     852   ; WaitTIP();
00000BD2  4E92       853          jsr       (A2)
00000BD4  1039 0040  854          move.b    4227080,D0
00000BD8  8008      
00000BDA  EE08       855          lsr.b     #7,D0
00000BDC  C03C 0001  856          and.b     #1,D0
00000BE0  66E2       857          bne       PageWriteI2CInteraction_24
                     858   ; } while (((I2C_STAT >> 7) & 0x01) != 0); // wait for acknowledgement from the slave
                     859   ; AddressFrom += (i + 1);
00000BE2  2003       860          move.l    D3,D0
00000BE4  5280       861          addq.l    #1,D0
00000BE6  D480       862          add.l     D0,D2
00000BE8  6000 FE86  863          bra       PageWriteI2CInteraction_1
                     864   PageWriteI2CInteraction_3:
                     865   ; }
                     866   ; // special case for end address being the first byte of the next/last page
                     867   ; if (((AddressFrom + i) % 128 == 0) && (flag == 1)) {
00000BEC  2002       868          move.l    D2,D0
00000BEE  D083       869          add.l     D3,D0
00000BF0  2F00       870          move.l    D0,-(A7)
00000BF2  4878 0080  871          pea       128
00000BF6  4EB9 0000  872          jsr       ULDIV
00000BFA  3E76      
00000BFC  202F 0004  873          move.l    4(A7),D0
00000C00  504F       874          addq.w    #8,A7
00000C02  4A80       875          tst.l     D0
00000C04  6600 00C2  876          bne       PageWriteI2CInteraction_29
00000C08  200D       877          move.l    A5,D0
00000C0A  0C80 0000  878          cmp.l     #1,D0
00000C0E  0001      
00000C10  6600 00B6  879          bne       PageWriteI2CInteraction_29
                     880   ; if((AddressFrom + i) > 0xFFFF){
00000C14  2002       881          move.l    D2,D0
00000C16  D083       882          add.l     D3,D0
00000C18  0C80 0000  883          cmp.l     #65535,D0
00000C1C  FFFF      
00000C1E  6300 005E  884          bls       PageWriteI2CInteraction_28
                     885   ; controlByte = EEPROM_Write_Block_1;
00000C22  1C3C 00A2  886          move.b    #162,D6
                     887   ; AddressFromMSB = (((AddressFrom + i) - 0x10000) >> 8) & 0xFF;
00000C26  2002       888          move.l    D2,D0
00000C28  D083       889          add.l     D3,D0
00000C2A  0480 0001  890          sub.l     #65536,D0
00000C2E  0000      
00000C30  E088       891          lsr.l     #8,D0
00000C32  C0BC 0000  892          and.l     #255,D0
00000C36  00FF      
00000C38  1A00       893          move.b    D0,D5
                     894   ; AddressFromLSB = ((AddressFrom + i) - 0x10000) & 0xFF;
00000C3A  2002       895          move.l    D2,D0
00000C3C  D083       896          add.l     D3,D0
00000C3E  0480 0001  897          sub.l     #65536,D0
00000C42  0000      
00000C44  C0BC 0000  898          and.l     #255,D0
00000C48  00FF      
00000C4A  1800       899          move.b    D0,D4
                     900   ; WriteI2CInteraction(1, (AddressFrom + i), AddressFromMSB, AddressFromLSB, data, 1);
00000C4C  4878 0001  901          pea       1
00000C50  CEBC 0000  902          and.l     #255,D7
00000C54  00FF      
00000C56  2F07       903          move.l    D7,-(A7)
00000C58  C8BC 0000  904          and.l     #255,D4
00000C5C  00FF      
00000C5E  2F04       905          move.l    D4,-(A7)
00000C60  CABC 0000  906          and.l     #255,D5
00000C64  00FF      
00000C66  2F05       907          move.l    D5,-(A7)
00000C68  2202       908          move.l    D2,D1
00000C6A  D283       909          add.l     D3,D1
00000C6C  2F01       910          move.l    D1,-(A7)
00000C6E  4878 0001  911          pea       1
00000C72  4EB8 099C  912          jsr       _WriteI2CInteraction
00000C76  DEFC 0018  913          add.w     #24,A7
00000C7A  6000 004C  914          bra       PageWriteI2CInteraction_29
                     915   PageWriteI2CInteraction_28:
                     916   ; }
                     917   ; else {
                     918   ; controlByte = EEPROM_Write_Block_0;
00000C7E  1C3C 00A0  919          move.b    #160,D6
                     920   ; AddressFromMSB = ((AddressFrom + i) >> 8) & 0xFF;
00000C82  2002       921          move.l    D2,D0
00000C84  D083       922          add.l     D3,D0
00000C86  E088       923          lsr.l     #8,D0
00000C88  C0BC 0000  924          and.l     #255,D0
00000C8C  00FF      
00000C8E  1A00       925          move.b    D0,D5
                     926   ; AddressFromLSB = (AddressFrom + i) & 0xFF;
00000C90  2002       927          move.l    D2,D0
00000C92  D083       928          add.l     D3,D0
00000C94  C0BC 0000  929          and.l     #255,D0
00000C98  00FF      
00000C9A  1800       930          move.b    D0,D4
                     931   ; WriteI2CInteraction(0, (AddressFrom + i), AddressFromMSB, AddressFromLSB, data, 1);
00000C9C  4878 0001  932          pea       1
00000CA0  CEBC 0000  933          and.l     #255,D7
00000CA4  00FF      
00000CA6  2F07       934          move.l    D7,-(A7)
00000CA8  C8BC 0000  935          and.l     #255,D4
00000CAC  00FF      
00000CAE  2F04       936          move.l    D4,-(A7)
00000CB0  CABC 0000  937          and.l     #255,D5
00000CB4  00FF      
00000CB6  2F05       938          move.l    D5,-(A7)
00000CB8  2202       939          move.l    D2,D1
00000CBA  D283       940          add.l     D3,D1
00000CBC  2F01       941          move.l    D1,-(A7)
00000CBE  42A7       942          clr.l     -(A7)
00000CC0  4EB8 099C  943          jsr       _WriteI2CInteraction
00000CC4  DEFC 0018  944          add.w     #24,A7
                     945   PageWriteI2CInteraction_29:
                     946   ; }
                     947   ; }
                     948   ; printf("\r\nWrote [%x] from Address[%x] to Address[%x]", data, AddressFrom_Initial, AddressTo);
00000CC8  2F0C       949          move.l    A4,-(A7)
00000CCA  2F2E FFFC  950          move.l    -4(A6),-(A7)
00000CCE  CEBC 0000  951          and.l     #255,D7
00000CD2  00FF      
00000CD4  2F07       952          move.l    D7,-(A7)
00000CD6  4879 0000  953          pea       @i2c_2.L
00000CDA  49DE      
00000CDC  4EB9 0000  954          jsr       _printf
00000CE0  3F54      
00000CE2  DEFC 0010  955          add.w     #16,A7
00000CE6  4CDF 3CFC  956          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000CEA  4E5E       957          unlk      A6
00000CEC  4E75       958          rts
                     959   ; }
                     960   ; ///////////////////////////////////////////////
                     961   ; // read a single byte to the EEPROM via I2C //
                     962   ; ///////////////////////////////////////////////
                     963   ; void ReadI2CByteInteraction(int block, unsigned int Address, unsigned char AddressMSB, unsigned char AddressLSB){
                     964   _ReadI2CByteInteraction:
00000CEE  4E56 FFFC  965          link      A6,#-4
00000CF2  48E7 3030  966          movem.l   D2/D3/A2/A3,-(A7)
00000CF6  45F8 0942  967          lea       _WaitTIP.L,A2
00000CFA  47F8 0968  968          lea       _WaitACK.L,A3
                     969   ; unsigned char controleByte_ForWrite;
                     970   ; unsigned char controlByte_ForRead;
                     971   ; unsigned char readData;
                     972   ; if(block == 1){
00000CFE  202E 0008  973          move.l    8(A6),D0
00000D02  0C80 0000  974          cmp.l     #1,D0
00000D06  0001      
00000D08  660A       975          bne.s     ReadI2CByteInteraction_1
                     976   ; controleByte_ForWrite= 162;
00000D0A  163C 00A2  977          move.b    #162,D3
                     978   ; controlByte_ForRead = 163;
00000D0E  143C 00A3  979          move.b    #163,D2
00000D12  6008       980          bra.s     ReadI2CByteInteraction_2
                     981   ReadI2CByteInteraction_1:
                     982   ; }else{
                     983   ; controleByte_ForWrite = 160;
00000D14  163C 00A0  984          move.b    #160,D3
                     985   ; controlByte_ForRead = 161;
00000D18  143C 00A1  986          move.b    #161,D2
                     987   ReadI2CByteInteraction_2:
                     988   ; }
                     989   ; WaitTIP();
00000D1C  4E92       990          jsr       (A2)
                     991   ; I2C_TX = controleByte_ForWrite;
00000D1E  13C3 0040  992          move.b    D3,4227078
00000D22  8006      
                     993   ; I2C_CMD = 145;
00000D24  13FC 0091  994          move.b    #145,4227080
00000D28  0040 8008 
                     995   ; WaitTIP();
00000D2C  4E92       996          jsr       (A2)
                     997   ; WaitACK();
00000D2E  4E93       998          jsr       (A3)
                     999   ; I2C_TX = AddressMSB;
00000D30  13EE 0013 1000          move.b    19(A6),4227078
00000D34  0040 8006 
                    1001   ; I2C_CMD = 17;
00000D38  13FC 0011 1002          move.b    #17,4227080
00000D3C  0040 8008 
                    1003   ; WaitTIP();
00000D40  4E92      1004          jsr       (A2)
                    1005   ; WaitACK();
00000D42  4E93      1006          jsr       (A3)
                    1007   ; I2C_TX = AddressLSB;
00000D44  13EE 0017 1008          move.b    23(A6),4227078
00000D48  0040 8006 
                    1009   ; I2C_CMD = 17;
00000D4C  13FC 0011 1010          move.b    #17,4227080
00000D50  0040 8008 
                    1011   ; WaitTIP();
00000D54  4E92      1012          jsr       (A2)
                    1013   ; WaitACK();
00000D56  4E93      1014          jsr       (A3)
                    1015   ; I2C_TX = controlByte_ForRead;
00000D58  13C2 0040 1016          move.b    D2,4227078
00000D5C  8006      
                    1017   ; I2C_CMD = 145;
00000D5E  13FC 0091 1018          move.b    #145,4227080
00000D62  0040 8008 
                    1019   ; WaitTIP();
00000D66  4E92      1020          jsr       (A2)
                    1021   ; WaitACK();
00000D68  4E93      1022          jsr       (A3)
                    1023   ; I2C_CMD = 105;
00000D6A  13FC 0069 1024          move.b    #105,4227080
00000D6E  0040 8008 
                    1025   ; WaitTIP();
00000D72  4E92      1026          jsr       (A2)
                    1027   ; while((I2C_STAT & 0x01) != 0x01) {
                    1028   ReadI2CByteInteraction_3:
00000D74  1039 0040 1029          move.b    4227080,D0
00000D78  8008      
00000D7A  C03C 0001 1030          and.b     #1,D0
00000D7E  0C00 0001 1031          cmp.b     #1,D0
00000D82  6702      1032          beq.s     ReadI2CByteInteraction_5
                    1033   ; }
00000D84  60EE      1034          bra       ReadI2CByteInteraction_3
                    1035   ReadI2CByteInteraction_5:
                    1036   ; I2C_STAT = 0;
00000D86  4239 0040 1037          clr.b     4227080
00000D8A  8008      
                    1038   ; readData = I2C_RX;
00000D8C  1D79 0040 1039          move.b    4227078,-1(A6)
00000D90  8006 FFFF 
                    1040   ; printf("\r\nRead [%x] from Address[%x]", readData, Address);
00000D94  2F2E 000C 1041          move.l    12(A6),-(A7)
00000D98  122E FFFF 1042          move.b    -1(A6),D1
00000D9C  C2BC 0000 1043          and.l     #255,D1
00000DA0  00FF      
00000DA2  2F01      1044          move.l    D1,-(A7)
00000DA4  4879 0000 1045          pea       @i2c_3.L
00000DA8  4A0C      
00000DAA  4EB9 0000 1046          jsr       _printf
00000DAE  3F54      
00000DB0  DEFC 000C 1047          add.w     #12,A7
                    1048   ; return;
00000DB4  4CDF 0C0C 1049          movem.l   (A7)+,D2/D3/A2/A3
00000DB8  4E5E      1050          unlk      A6
00000DBA  4E75      1051          rts
                    1052   ; }
                    1053   ; //////////////////////////////////////////////////
                    1054   ; // read up to 128k bytes to the EEPROM via I2C //
                    1055   ; //////////////////////////////////////////////////
                    1056   ; void ReadI2CSequential(int block, int AddressTo, int AddressFrom,  unsigned int ChipAddress){
                    1057   _ReadI2CSequential:
00000DBC  4E56 FFF8 1058          link      A6,#-8
00000DC0  48E7 3F3C 1059          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000DC4  45F8 0942 1060          lea       _WaitTIP.L,A2
00000DC8  47F8 0968 1061          lea       _WaitACK.L,A3
00000DCC  242E 0014 1062          move.l    20(A6),D2
                    1063   ; unsigned char controleWriteByte;
                    1064   ; unsigned char controlReadByte;
                    1065   ; unsigned char readData;
                    1066   ; unsigned char AddressLSB;
                    1067   ; unsigned char AddressMSB;
                    1068   ; int i;
                    1069   ; int size;
                    1070   ; int block_change_flag = 0;
00000DD0  387C 0000 1071          move.w    #0,A4
                    1072   ; int block_address;
                    1073   ; size = AddressTo - AddressFrom;
00000DD4  202E 000C 1074          move.l    12(A6),D0
00000DD8  90AE 0010 1075          sub.l     16(A6),D0
00000DDC  2D40 FFFC 1076          move.l    D0,-4(A6)
                    1077   ; AddressMSB = (ChipAddress >> 8) & 0xFF;
00000DE0  2002      1078          move.l    D2,D0
00000DE2  E088      1079          lsr.l     #8,D0
00000DE4  C0BC 0000 1080          and.l     #255,D0
00000DE8  00FF      
00000DEA  1C00      1081          move.b    D0,D6
                    1082   ; AddressLSB = ChipAddress & 0xFF;
00000DEC  2002      1083          move.l    D2,D0
00000DEE  C0BC 0000 1084          and.l     #255,D0
00000DF2  00FF      
00000DF4  1A00      1085          move.b    D0,D5
                    1086   ; if(block == 1){
00000DF6  202E 0008 1087          move.l    8(A6),D0
00000DFA  0C80 0000 1088          cmp.l     #1,D0
00000DFE  0001      
00000E00  662C      1089          bne.s     ReadI2CSequential_1
                    1090   ; controleWriteByte = EEPROM_Write_Block_1;
00000E02  183C 00A2 1091          move.b    #162,D4
                    1092   ; controlReadByte = EEPROM_Read_Block_1;
00000E06  163C 00A3 1093          move.b    #163,D3
                    1094   ; AddressMSB = ((ChipAddress-0x10000) >> 8) & 0xFF;
00000E0A  2002      1095          move.l    D2,D0
00000E0C  0480 0001 1096          sub.l     #65536,D0
00000E10  0000      
00000E12  E088      1097          lsr.l     #8,D0
00000E14  C0BC 0000 1098          and.l     #255,D0
00000E18  00FF      
00000E1A  1C00      1099          move.b    D0,D6
                    1100   ; AddressLSB = (ChipAddress-0x10000) & 0xFF;
00000E1C  2002      1101          move.l    D2,D0
00000E1E  0480 0001 1102          sub.l     #65536,D0
00000E22  0000      
00000E24  C0BC 0000 1103          and.l     #255,D0
00000E28  00FF      
00000E2A  1A00      1104          move.b    D0,D5
00000E2C  6008      1105          bra.s     ReadI2CSequential_2
                    1106   ReadI2CSequential_1:
                    1107   ; }else{
                    1108   ; controleWriteByte = EEPROM_Write_Block_0;
00000E2E  183C 00A0 1109          move.b    #160,D4
                    1110   ; controlReadByte = EEPROM_Read_Block_0;
00000E32  163C 00A1 1111          move.b    #161,D3
                    1112   ReadI2CSequential_2:
                    1113   ; }
                    1114   ; WaitTIP();
00000E36  4E92      1115          jsr       (A2)
                    1116   ; I2C_TX = controleWriteByte;
00000E38  13C4 0040 1117          move.b    D4,4227078
00000E3C  8006      
                    1118   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00000E3E  13FC 0091 1119          move.b    #145,4227080
00000E42  0040 8008 
                    1120   ; WaitTIP();
00000E46  4E92      1121          jsr       (A2)
                    1122   ; WaitACK();
00000E48  4E93      1123          jsr       (A3)
                    1124   ; I2C_TX = AddressMSB;
00000E4A  13C6 0040 1125          move.b    D6,4227078
00000E4E  8006      
                    1126   ; I2C_CMD = I2C_CMD_Slave_Write;
00000E50  13FC 0011 1127          move.b    #17,4227080
00000E54  0040 8008 
                    1128   ; WaitTIP();
00000E58  4E92      1129          jsr       (A2)
                    1130   ; WaitACK();
00000E5A  4E93      1131          jsr       (A3)
                    1132   ; I2C_TX = AddressLSB;
00000E5C  13C5 0040 1133          move.b    D5,4227078
00000E60  8006      
                    1134   ; I2C_CMD = I2C_CMD_Slave_Write;
00000E62  13FC 0011 1135          move.b    #17,4227080
00000E66  0040 8008 
                    1136   ; WaitTIP();
00000E6A  4E92      1137          jsr       (A2)
                    1138   ; WaitACK();
00000E6C  4E93      1139          jsr       (A3)
                    1140   ; I2C_TX = controlReadByte;
00000E6E  13C3 0040 1141          move.b    D3,4227078
00000E72  8006      
                    1142   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00000E74  13FC 0091 1143          move.b    #145,4227080
00000E78  0040 8008 
                    1144   ; WaitTIP();
00000E7C  4E92      1145          jsr       (A2)
                    1146   ; WaitACK();
00000E7E  4E93      1147          jsr       (A3)
                    1148   ; block_address = ChipAddress;
00000E80  2E02      1149          move.l    D2,D7
                    1150   ; for (i = 0; i < size; i++){
00000E82  3A7C 0000 1151          move.w    #0,A5
                    1152   ReadI2CSequential_3:
00000E86  200D      1153          move.l    A5,D0
00000E88  B0AE FFFC 1154          cmp.l     -4(A6),D0
00000E8C  6C00 00E2 1155          bge       ReadI2CSequential_5
                    1156   ; if(block_address == 0x10000){ // if need to switch blocks 
00000E90  0C87 0001 1157          cmp.l     #65536,D7
00000E94  0000      
00000E96  6624      1158          bne.s     ReadI2CSequential_6
                    1159   ; I2C_CMD = I2C_CMD_Slave_Read_Ack;
00000E98  13FC 0029 1160          move.b    #41,4227080
00000E9C  0040 8008 
                    1161   ; WaitTIP();
00000EA0  4E92      1162          jsr       (A2)
                    1163   ; while(I2C_STAT & 0x01 == 0x00);
                    1164   ; readData = I2C_RX;
00000EA2  1D79 0040 1165          move.b    4227078,-5(A6)
00000EA6  8006 FFFB 
                    1166   ; I2C_CMD = I2C_CMD_Slave_Read_Stop; // instead of sending a stop command
00000EAA  13FC 0049 1167          move.b    #73,4227080
00000EAE  0040 8008 
                    1168   ; // printf("\r\nADDR: %x, DATA: %x\r\n",ChipAddress,readData);
                    1169   ; WaitTIP();
00000EB2  4E92      1170          jsr       (A2)
                    1171   ; block_change_flag = 1;
00000EB4  387C 0001 1172          move.w    #1,A4
00000EB8  6000 004E 1173          bra       ReadI2CSequential_7
                    1174   ReadI2CSequential_6:
                    1175   ; } else {
                    1176   ; I2C_CMD = I2C_CMD_Slave_Read;
00000EBC  13FC 0021 1177          move.b    #33,4227080
00000EC0  0040 8008 
                    1178   ; WaitTIP();
00000EC4  4E92      1179          jsr       (A2)
                    1180   ; while((I2C_STAT & 0x01) != 0x01) {
                    1181   ReadI2CSequential_11:
00000EC6  1039 0040 1182          move.b    4227080,D0
00000ECA  8008      
00000ECC  C03C 0001 1183          and.b     #1,D0
00000ED0  0C00 0001 1184          cmp.b     #1,D0
00000ED4  6702      1185          beq.s     ReadI2CSequential_13
                    1186   ; }
00000ED6  60EE      1187          bra       ReadI2CSequential_11
                    1188   ReadI2CSequential_13:
                    1189   ; I2C_STAT = 0;
00000ED8  4239 0040 1190          clr.b     4227080
00000EDC  8008      
                    1191   ; readData = I2C_RX;
00000EDE  1D79 0040 1192          move.b    4227078,-5(A6)
00000EE2  8006 FFFB 
                    1193   ; printf("\r\nRead [%x] from Address[%x]", readData, ChipAddress);
00000EE6  2F02      1194          move.l    D2,-(A7)
00000EE8  122E FFFB 1195          move.b    -5(A6),D1
00000EEC  C2BC 0000 1196          and.l     #255,D1
00000EF0  00FF      
00000EF2  2F01      1197          move.l    D1,-(A7)
00000EF4  4879 0000 1198          pea       @i2c_3.L
00000EF8  4A0C      
00000EFA  4EB9 0000 1199          jsr       _printf
00000EFE  3F54      
00000F00  DEFC 000C 1200          add.w     #12,A7
                    1201   ; ChipAddress++;
00000F04  5282      1202          addq.l    #1,D2
                    1203   ; block_address++;
00000F06  5287      1204          addq.l    #1,D7
                    1205   ReadI2CSequential_7:
                    1206   ; }
                    1207   ; if (block_change_flag) {
00000F08  200C      1208          move.l    A4,D0
00000F0A  6700 005E 1209          beq       ReadI2CSequential_14
                    1210   ; controleWriteByte = EEPROM_Write_Block_1;
00000F0E  183C 00A2 1211          move.b    #162,D4
                    1212   ; controlReadByte = EEPROM_Read_Block_1;
00000F12  163C 00A3 1213          move.b    #163,D3
                    1214   ; AddressMSB = 0;
00000F16  4206      1215          clr.b     D6
                    1216   ; AddressLSB = 0;
00000F18  4205      1217          clr.b     D5
                    1218   ; WaitTIP();
00000F1A  4E92      1219          jsr       (A2)
                    1220   ; I2C_TX = controleWriteByte;
00000F1C  13C4 0040 1221          move.b    D4,4227078
00000F20  8006      
                    1222   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00000F22  13FC 0091 1223          move.b    #145,4227080
00000F26  0040 8008 
                    1224   ; WaitTIP();
00000F2A  4E92      1225          jsr       (A2)
                    1226   ; WaitACK();
00000F2C  4E93      1227          jsr       (A3)
                    1228   ; I2C_TX = AddressMSB;
00000F2E  13C6 0040 1229          move.b    D6,4227078
00000F32  8006      
                    1230   ; I2C_CMD = I2C_CMD_Slave_Write;
00000F34  13FC 0011 1231          move.b    #17,4227080
00000F38  0040 8008 
                    1232   ; WaitTIP();
00000F3C  4E92      1233          jsr       (A2)
                    1234   ; WaitACK();
00000F3E  4E93      1235          jsr       (A3)
                    1236   ; I2C_TX = AddressLSB;
00000F40  13C5 0040 1237          move.b    D5,4227078
00000F44  8006      
                    1238   ; I2C_CMD = I2C_CMD_Slave_Write;
00000F46  13FC 0011 1239          move.b    #17,4227080
00000F4A  0040 8008 
                    1240   ; WaitTIP();
00000F4E  4E92      1241          jsr       (A2)
                    1242   ; WaitACK();
00000F50  4E93      1243          jsr       (A3)
                    1244   ; I2C_TX = controlReadByte;
00000F52  13C3 0040 1245          move.b    D3,4227078
00000F56  8006      
                    1246   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00000F58  13FC 0091 1247          move.b    #145,4227080
00000F5C  0040 8008 
                    1248   ; WaitTIP();
00000F60  4E92      1249          jsr       (A2)
                    1250   ; WaitACK();
00000F62  4E93      1251          jsr       (A3)
                    1252   ; block_change_flag = 0;
00000F64  387C 0000 1253          move.w    #0,A4
                    1254   ; block_address = 0;
00000F68  7E00      1255          moveq     #0,D7
                    1256   ReadI2CSequential_14:
00000F6A  524D      1257          addq.w    #1,A5
00000F6C  6000 FF18 1258          bra       ReadI2CSequential_3
                    1259   ReadI2CSequential_5:
                    1260   ; }
                    1261   ; }
                    1262   ; I2C_CMD = I2C_CMD_Slave_Read_Ack;
00000F70  13FC 0029 1263          move.b    #41,4227080
00000F74  0040 8008 
                    1264   ; WaitTIP();
00000F78  4E92      1265          jsr       (A2)
                    1266   ; while(I2C_STAT & 0x01 == 0x00);
                    1267   ; I2C_CMD = I2C_CMD_Slave_Read_Stop;
00000F7A  13FC 0049 1268          move.b    #73,4227080
00000F7E  0040 8008 
                    1269   ; printf("\r\nBlock Read operation complete\r\n");
00000F82  4879 0000 1270          pea       @i2c_4.L
00000F86  4A2A      
00000F88  4EB9 0000 1271          jsr       _printf
00000F8C  3F54      
00000F8E  584F      1272          addq.w    #4,A7
                    1273   ; return;
00000F90  4CDF 3CFC 1274          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000F94  4E5E      1275          unlk      A6
00000F96  4E75      1276          rts
                    1277   ; }
                    1278   ; ///////////////////////////////////////////////
                    1279   ; // generate a waveform (square wave) via DAC //
                    1280   ; ///////////////////////////////////////////////
                    1281   ; void DACWrite(void) {
                    1282   _DACWrite:
00000F98  48E7 3830 1283          movem.l   D2/D3/D4/A2/A3,-(A7)
00000F9C  45F8 0942 1284          lea       _WaitTIP.L,A2
00000FA0  47F8 0968 1285          lea       _WaitACK.L,A3
                    1286   ; int i;
                    1287   ; unsigned int delay = 0xFFFFF;
00000FA4  283C 000F 1288          move.l    #1048575,D4
00000FA8  FFFF      
                    1289   ; printf("\nI2C DAC Write: Please check LED\n");
00000FAA  4879 0000 1290          pea       @i2c_5.L
00000FAE  4A4C      
00000FB0  4EB9 0000 1291          jsr       _printf
00000FB4  3F54      
00000FB6  584F      1292          addq.w    #4,A7
                    1293   ; WaitTIP();
00000FB8  4E92      1294          jsr       (A2)
                    1295   ; I2C_TX = ADC_DAC_Write_Address;
00000FBA  13FC 0090 1296          move.b    #144,4227078
00000FBE  0040 8006 
                    1297   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00000FC2  13FC 0091 1298          move.b    #145,4227080
00000FC6  0040 8008 
                    1299   ; WaitTIP();
00000FCA  4E92      1300          jsr       (A2)
                    1301   ; WaitACK();
00000FCC  4E93      1302          jsr       (A3)
                    1303   ; I2C_TX = DAC_CMD_Enable;
00000FCE  13FC 0040 1304          move.b    #64,4227078
00000FD2  0040 8006 
                    1305   ; I2C_CMD = I2C_CMD_Slave_Write;
00000FD6  13FC 0011 1306          move.b    #17,4227080
00000FDA  0040 8008 
                    1307   ; WaitTIP();
00000FDE  4E92      1308          jsr       (A2)
                    1309   ; WaitACK();
00000FE0  4E93      1310          jsr       (A3)
                    1311   ; I2C_TX = 0xFF; 
00000FE2  13FC 00FF 1312          move.b    #255,4227078
00000FE6  0040 8006 
                    1313   ; I2C_CMD = I2C_CMD_Slave_Write;
00000FEA  13FC 0011 1314          move.b    #17,4227080
00000FEE  0040 8008 
                    1315   ; WaitTIP();
00000FF2  4E92      1316          jsr       (A2)
                    1317   ; WaitACK();
00000FF4  4E93      1318          jsr       (A3)
                    1319   ; while(1) { // keep blinking the LED
                    1320   DACWrite_1:
                    1321   ; unsigned int val = 0xFF; // digital high
00000FF6  263C 0000 1322          move.l    #255,D3
00000FFA  00FF      
                    1323   ; I2C_TX = val; 
00000FFC  13C3 0040 1324          move.b    D3,4227078
00001000  8006      
                    1325   ; I2C_CMD = I2C_CMD_Slave_Write;
00001002  13FC 0011 1326          move.b    #17,4227080
00001006  0040 8008 
                    1327   ; WaitTIP();
0000100A  4E92      1328          jsr       (A2)
                    1329   ; WaitACK();
0000100C  4E93      1330          jsr       (A3)
                    1331   ; for(i = 0; i < delay; i++);
0000100E  4282      1332          clr.l     D2
                    1333   DACWrite_4:
00001010  B484      1334          cmp.l     D4,D2
00001012  6404      1335          bhs.s     DACWrite_6
00001014  5282      1336          addq.l    #1,D2
00001016  60F8      1337          bra       DACWrite_4
                    1338   DACWrite_6:
                    1339   ; val = 0x00; // digital low
00001018  4283      1340          clr.l     D3
                    1341   ; I2C_TX = val;
0000101A  13C3 0040 1342          move.b    D3,4227078
0000101E  8006      
                    1343   ; I2C_CMD = I2C_CMD_Slave_Write;
00001020  13FC 0011 1344          move.b    #17,4227080
00001024  0040 8008 
                    1345   ; WaitTIP();
00001028  4E92      1346          jsr       (A2)
                    1347   ; WaitACK();
0000102A  4E93      1348          jsr       (A3)
                    1349   ; for(i = 0; i < delay; i++);
0000102C  4282      1350          clr.l     D2
                    1351   DACWrite_7:
0000102E  B484      1352          cmp.l     D4,D2
00001030  6404      1353          bhs.s     DACWrite_9
00001032  5282      1354          addq.l    #1,D2
00001034  60F8      1355          bra       DACWrite_7
                    1356   DACWrite_9:
00001036  60BE      1357          bra       DACWrite_1
                    1358   ; }
                    1359   ; }
                    1360   ; ///////////////////////////////////////////////
                    1361   ; // generate a waveform (square wave) via DAC //
                    1362   ; ///////////////////////////////////////////////
                    1363   ; void ADCWrite(void){
                    1364   _ADCWrite:
00001038  4E56 FFF8 1365          link      A6,#-8
0000103C  48E7 0038 1366          movem.l   A2/A3/A4,-(A7)
00001040  45F8 0942 1367          lea       _WaitTIP.L,A2
00001044  47F8 0968 1368          lea       _WaitACK.L,A3
00001048  49F9 0000 1369          lea       _printf.L,A4
0000104C  3F54      
                    1370   ; unsigned char thermistor_value;
                    1371   ; unsigned char potentiometer_value;
                    1372   ; unsigned char photo_resistor_value;
                    1373   ; unsigned int delay = 0xFFFFF;
0000104E  2D7C 000F 1374          move.l    #1048575,-4(A6)
00001052  FFFF FFFC 
                    1375   ; printf("I2C ADC Read:\n");
00001056  4879 0000 1376          pea       @i2c_6.L
0000105A  4A6E      
0000105C  4E94      1377          jsr       (A4)
0000105E  584F      1378          addq.w    #4,A7
                    1379   ; printf("\n==============================Measuring==============================\n");
00001060  4879 0000 1380          pea       @i2c_7.L
00001064  4A7E      
00001066  4E94      1381          jsr       (A4)
00001068  584F      1382          addq.w    #4,A7
                    1383   ; while (1) {
                    1384   ADCWrite_1:
                    1385   ; WaitTIP();
0000106A  4E92      1386          jsr       (A2)
                    1387   ; I2C_TX = ADC_DAC_Write_Address;
0000106C  13FC 0090 1388          move.b    #144,4227078
00001070  0040 8006 
                    1389   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
00001074  13FC 0091 1390          move.b    #145,4227080
00001078  0040 8008 
                    1391   ; WaitTIP();
0000107C  4E92      1392          jsr       (A2)
                    1393   ; WaitACK();
0000107E  4E93      1394          jsr       (A3)
                    1395   ; I2C_TX = ADC_CMD_Enable;
00001080  13FC 0044 1396          move.b    #68,4227078
00001084  0040 8006 
                    1397   ; I2C_CMD = I2C_CMD_Slave_Write;
00001088  13FC 0011 1398          move.b    #17,4227080
0000108C  0040 8008 
                    1399   ; WaitTIP();
00001090  4E92      1400          jsr       (A2)
                    1401   ; WaitACK();
00001092  4E93      1402          jsr       (A3)
                    1403   ; I2C_TX = ADC_Read_Address;
00001094  13FC 0091 1404          move.b    #145,4227078
00001098  0040 8006 
                    1405   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
0000109C  13FC 0091 1406          move.b    #145,4227080
000010A0  0040 8008 
                    1407   ; WaitTIP();
000010A4  4E92      1408          jsr       (A2)
                    1409   ; WaitACK();
000010A6  4E93      1410          jsr       (A3)
                    1411   ; I2C_CMD = I2C_CMD_Slave_Read;
000010A8  13FC 0021 1412          move.b    #33,4227080
000010AC  0040 8008 
                    1413   ; WaitTIP();
000010B0  4E92      1414          jsr       (A2)
                    1415   ; // measure thermistor 
                    1416   ; I2C_CMD = I2C_CMD_Slave_Read;
000010B2  13FC 0021 1417          move.b    #33,4227080
000010B6  0040 8008 
                    1418   ; WaitTIP();
000010BA  4E92      1419          jsr       (A2)
                    1420   ; thermistor_value = I2C_RX;
000010BC  1D79 0040 1421          move.b    4227078,-7(A6)
000010C0  8006 FFF9 
                    1422   ; // measure potentiometer 
                    1423   ; I2C_CMD = I2C_CMD_Slave_Read;
000010C4  13FC 0021 1424          move.b    #33,4227080
000010C8  0040 8008 
                    1425   ; WaitTIP();
000010CC  4E92      1426          jsr       (A2)
                    1427   ; potentiometer_value = I2C_RX;
000010CE  1D79 0040 1428          move.b    4227078,-6(A6)
000010D2  8006 FFFA 
                    1429   ; // measure photo resistor 
                    1430   ; I2C_CMD = I2C_CMD_Slave_Read;
000010D6  13FC 0021 1431          move.b    #33,4227080
000010DA  0040 8008 
                    1432   ; WaitTIP();
000010DE  4E92      1433          jsr       (A2)
                    1434   ; photo_resistor_value = I2C_RX;
000010E0  1D79 0040 1435          move.b    4227078,-5(A6)
000010E4  8006 FFFB 
                    1436   ; printf("Value of Thermistor: %d Potentiometer: %d Photo-resister: %d\n", thermistor_value, potentiometer_value, photo_resistor_value);
000010E8  122E FFFB 1437          move.b    -5(A6),D1
000010EC  C2BC 0000 1438          and.l     #255,D1
000010F0  00FF      
000010F2  2F01      1439          move.l    D1,-(A7)
000010F4  122E FFFA 1440          move.b    -6(A6),D1
000010F8  C2BC 0000 1441          and.l     #255,D1
000010FC  00FF      
000010FE  2F01      1442          move.l    D1,-(A7)
00001100  122E FFF9 1443          move.b    -7(A6),D1
00001104  C2BC 0000 1444          and.l     #255,D1
00001108  00FF      
0000110A  2F01      1445          move.l    D1,-(A7)
0000110C  4879 0000 1446          pea       @i2c_8.L
00001110  4AC6      
00001112  4E94      1447          jsr       (A4)
00001114  DEFC 0010 1448          add.w     #16,A7
00001118  6000 FF50 1449          bra       ADCWrite_1
                    1450   ; }
                    1451   ; }
                    1452   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB5K.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                    1453   ; #include "DM.h"
                    1454   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                    1455   ; //#define StartOfExceptionVectorTable 0x08030000
                    1456   ; #define StartOfExceptionVectorTable 0x0B000000
                    1457   ; // use 0C000000 for dram or hex 08040000 for sram
                    1458   ; //#define TopOfStack 0x08040000
                    1459   ; #define TopOfStack 0x0C000000
                    1460   ; /*************************************************************
                    1461   ; ** SPI Controller registers
                    1462   ; **************************************************************/
                    1463   ; // SPI Registers
                    1464   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                    1465   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                    1466   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                    1467   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                    1468   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                    1469   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                    1470   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                    1471   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                    1472   ; // and write FF to disable it
                    1473   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                    1474   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                    1475   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                    1476   ; unsigned int i, x, y, z, PortA_Count;
                    1477   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                    1478   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                    1479   ; unsigned int d0, d1, d2, d3, d4, d5, d6, d7;
                    1480   ; unsigned int a0, a1, a2, a3, a4, a5, a6;
                    1481   ; unsigned int PC, SSP, USP;
                    1482   ; unsigned short int SR;
                    1483   ; // Breakpoint variables
                    1484   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                    1485   ; unsigned short int BreakPointInstruction[8];           // to hold the instruction opcode at the breakpoint
                    1486   ; unsigned int BreakPointSetOrCleared[8];
                    1487   ; unsigned int InstructionSize;
                    1488   ; // watchpoint variables
                    1489   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                    1490   ; unsigned int WatchPointSetOrCleared[8];
                    1491   ; char WatchPointString[8][100];
                    1492   ; char    TempString[100];
                    1493   ; /************************************************************************************
                    1494   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                    1495   ; ************************************************************************************/
                    1496   ; void Wait1ms(void)
                    1497   ; {
                    1498   _Wait1ms:
0000111C  2F02      1499          move.l    D2,-(A7)
                    1500   ; long int  i;
                    1501   ; for (i = 0; i < 1000; i++)
0000111E  4282      1502          clr.l     D2
                    1503   Wait1ms_1:
00001120  0C82 0000 1504          cmp.l     #1000,D2
00001124  03E8      
00001126  6C04      1505          bge.s     Wait1ms_3
00001128  5282      1506          addq.l    #1,D2
0000112A  60F4      1507          bra       Wait1ms_1
                    1508   Wait1ms_3:
0000112C  241F      1509          move.l    (A7)+,D2
0000112E  4E75      1510          rts
                    1511   ; ;
                    1512   ; }
                    1513   ; /************************************************************************************
                    1514   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                    1515   ; **************************************************************************************/
                    1516   ; void Wait3ms(void)
                    1517   ; {
                    1518   _Wait3ms:
00001130  2F02      1519          move.l    D2,-(A7)
                    1520   ; int i;
                    1521   ; for (i = 0; i < 3; i++)
00001132  4282      1522          clr.l     D2
                    1523   Wait3ms_1:
00001134  0C82 0000 1524          cmp.l     #3,D2
00001138  0003      
0000113A  6C08      1525          bge.s     Wait3ms_3
                    1526   ; Wait1ms();
0000113C  4EB8 111C 1527          jsr       _Wait1ms
00001140  5282      1528          addq.l    #1,D2
00001142  60F0      1529          bra       Wait3ms_1
                    1530   Wait3ms_3:
00001144  241F      1531          move.l    (A7)+,D2
00001146  4E75      1532          rts
                    1533   ; }
                    1534   ; /*********************************************************************************************
                    1535   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                    1536   ; *********************************************************************************************/
                    1537   ; void Init_LCD(void)
                    1538   ; {
                    1539   _Init_LCD:
                    1540   ; LCDcommand = (char)(0x0c);
00001148  13FC 000C 1541          move.b    #12,4194336
0000114C  0040 0020 
                    1542   ; Wait3ms();
00001150  4EB8 1130 1543          jsr       _Wait3ms
                    1544   ; LCDcommand = (char)(0x38);
00001154  13FC 0038 1545          move.b    #56,4194336
00001158  0040 0020 
                    1546   ; Wait3ms();
0000115C  4EB8 1130 1547          jsr       _Wait3ms
00001160  4E75      1548          rts
                    1549   ; }
                    1550   ; /******************************************************************************
                    1551   ; *subroutine to output a single character held in d1 to the LCD display
                    1552   ; *it is assumed the character is an ASCII code and it will be displayed at the
                    1553   ; *current cursor position
                    1554   ; *******************************************************************************/
                    1555   ; void Outchar(int c)
                    1556   ; {
                    1557   _Outchar:
00001162  4E56 0000 1558          link      A6,#0
                    1559   ; LCDdata = (char)(c);
00001166  202E 0008 1560          move.l    8(A6),D0
0000116A  13C0 0040 1561          move.b    D0,4194338
0000116E  0022      
                    1562   ; Wait1ms();
00001170  4EB8 111C 1563          jsr       _Wait1ms
00001174  4E5E      1564          unlk      A6
00001176  4E75      1565          rts
                    1566   ; }
                    1567   ; /**********************************************************************************
                    1568   ; *subroutine to output a message at the current cursor position of the LCD display
                    1569   ; ************************************************************************************/
                    1570   ; void OutMess(char* theMessage)
                    1571   ; {
                    1572   _OutMess:
00001178  4E56 FFFC 1573          link      A6,#-4
                    1574   ; char c;
                    1575   ; while ((c = *theMessage++) != (char)(0))
                    1576   OutMess_1:
0000117C  206E 0008 1577          move.l    8(A6),A0
00001180  52AE 0008 1578          addq.l    #1,8(A6)
00001184  1D50 FFFF 1579          move.b    (A0),-1(A6)
00001188  1010      1580          move.b    (A0),D0
0000118A  6712      1581          beq.s     OutMess_3
                    1582   ; Outchar(c);
0000118C  122E FFFF 1583          move.b    -1(A6),D1
00001190  4881      1584          ext.w     D1
00001192  48C1      1585          ext.l     D1
00001194  2F01      1586          move.l    D1,-(A7)
00001196  4EB8 1162 1587          jsr       _Outchar
0000119A  584F      1588          addq.w    #4,A7
0000119C  60DE      1589          bra       OutMess_1
                    1590   OutMess_3:
0000119E  4E5E      1591          unlk      A6
000011A0  4E75      1592          rts
                    1593   ; }
                    1594   ; /******************************************************************************
                    1595   ; *subroutine to clear the line by issuing 24 space characters
                    1596   ; *******************************************************************************/
                    1597   ; void Clearln(void)
                    1598   ; {
                    1599   _Clearln:
000011A2  2F02      1600          move.l    D2,-(A7)
                    1601   ; unsigned char i;
                    1602   ; for (i = 0; i < 24; i++)
000011A4  4202      1603          clr.b     D2
                    1604   Clearln_1:
000011A6  0C02 0018 1605          cmp.b     #24,D2
000011AA  640E      1606          bhs.s     Clearln_3
                    1607   ; Outchar(' ');  /* write a space char to the LCD display */
000011AC  4878 0020 1608          pea       32
000011B0  4EB8 1162 1609          jsr       _Outchar
000011B4  584F      1610          addq.w    #4,A7
000011B6  5202      1611          addq.b    #1,D2
000011B8  60EC      1612          bra       Clearln_1
                    1613   Clearln_3:
000011BA  241F      1614          move.l    (A7)+,D2
000011BC  4E75      1615          rts
                    1616   ; }
                    1617   ; /******************************************************************************
                    1618   ; *subroutine to move the cursor to the start of line 1 and clear that line
                    1619   ; *******************************************************************************/
                    1620   ; void Oline0(char* theMessage)
                    1621   ; {
                    1622   _Oline0:
000011BE  4E56 0000 1623          link      A6,#0
                    1624   ; LCDcommand = (char)(0x80);
000011C2  13FC 0080 1625          move.b    #128,4194336
000011C6  0040 0020 
                    1626   ; Wait3ms();
000011CA  4EB8 1130 1627          jsr       _Wait3ms
                    1628   ; Clearln();
000011CE  4EB8 11A2 1629          jsr       _Clearln
                    1630   ; LCDcommand = (char)(0x80);
000011D2  13FC 0080 1631          move.b    #128,4194336
000011D6  0040 0020 
                    1632   ; Wait3ms();
000011DA  4EB8 1130 1633          jsr       _Wait3ms
                    1634   ; OutMess(theMessage);
000011DE  2F2E 0008 1635          move.l    8(A6),-(A7)
000011E2  4EB8 1178 1636          jsr       _OutMess
000011E6  584F      1637          addq.w    #4,A7
000011E8  4E5E      1638          unlk      A6
000011EA  4E75      1639          rts
                    1640   ; }
                    1641   ; /******************************************************************************
                    1642   ; *subroutine to move the cursor to the start of line 2 and clear that line
                    1643   ; *******************************************************************************/
                    1644   ; void Oline1(char* theMessage)
                    1645   ; {
                    1646   _Oline1:
000011EC  4E56 0000 1647          link      A6,#0
                    1648   ; LCDcommand = (char)(0xC0);
000011F0  13FC 00C0 1649          move.b    #192,4194336
000011F4  0040 0020 
                    1650   ; Wait3ms();
000011F8  4EB8 1130 1651          jsr       _Wait3ms
                    1652   ; Clearln();
000011FC  4EB8 11A2 1653          jsr       _Clearln
                    1654   ; LCDcommand = (char)(0xC0);
00001200  13FC 00C0 1655          move.b    #192,4194336
00001204  0040 0020 
                    1656   ; Wait3ms();
00001208  4EB8 1130 1657          jsr       _Wait3ms
                    1658   ; OutMess(theMessage);
0000120C  2F2E 0008 1659          move.l    8(A6),-(A7)
00001210  4EB8 1178 1660          jsr       _OutMess
00001214  584F      1661          addq.w    #4,A7
00001216  4E5E      1662          unlk      A6
00001218  4E75      1663          rts
                    1664   ; }
                    1665   ; void InstallExceptionHandler(void (*function_ptr)(), int level)
                    1666   ; {
                    1667   _InstallExceptionHandler:
0000121A  4E56 FFFC 1668          link      A6,#-4
                    1669   ; volatile long int* RamVectorAddress = (volatile long int*)(StartOfExceptionVectorTable);   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
0000121E  2D7C 0B00 1670          move.l    #184549376,-4(A6)
00001222  0000 FFFC 
                    1671   ; RamVectorAddress[level] = (long int*)(function_ptr);
00001226  206E FFFC 1672          move.l    -4(A6),A0
0000122A  202E 000C 1673          move.l    12(A6),D0
0000122E  E588      1674          lsl.l     #2,D0
00001230  21AE 0008 1675          move.l    8(A6),0(A0,D0.L)
00001234  0800      
00001236  4E5E      1676          unlk      A6
00001238  4E75      1677          rts
                    1678   ; }
                    1679   ; void TestLEDS(void)
                    1680   ; {
                    1681   _TestLEDS:
0000123A  48E7 3000 1682          movem.l   D2/D3,-(A7)
                    1683   ; int delay;
                    1684   ; unsigned char count = 0;
0000123E  4202      1685          clr.b     D2
                    1686   ; while (1) {
                    1687   TestLEDS_1:
                    1688   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f));
00001240  1002      1689          move.b    D2,D0
00001242  E908      1690          lsl.b     #4,D0
00001244  1202      1691          move.b    D2,D1
00001246  C23C 000F 1692          and.b     #15,D1
0000124A  D001      1693          add.b     D1,D0
0000124C  13C0 0040 1694          move.b    D0,4194326
00001250  0016      
00001252  13C0 0040 1695          move.b    D0,4194324
00001256  0014      
00001258  13C0 0040 1696          move.b    D0,4194322
0000125C  0012      
0000125E  13C0 0040 1697          move.b    D0,4194320
00001262  0010      
00001264  13C0 0040 1698          move.b    D0,4194310
00001268  0006      
0000126A  13C0 0040 1699          move.b    D0,4194308
0000126E  0004      
00001270  13C0 0040 1700          move.b    D0,4194306
00001274  0002      
00001276  13C0 0040 1701          move.b    D0,4194304
0000127A  0000      
                    1702   ; for (delay = 0; delay < 200000; delay++)
0000127C  4283      1703          clr.l     D3
                    1704   TestLEDS_4:
0000127E  0C83 0003 1705          cmp.l     #200000,D3
00001282  0D40      
00001284  6C04      1706          bge.s     TestLEDS_6
00001286  5283      1707          addq.l    #1,D3
00001288  60F4      1708          bra       TestLEDS_4
                    1709   TestLEDS_6:
                    1710   ; ;
                    1711   ; count++;
0000128A  5202      1712          addq.b    #1,D2
0000128C  60B2      1713          bra       TestLEDS_1
                    1714   ; }
                    1715   ; }
                    1716   ; void SwitchTest(void)
                    1717   ; {
                    1718   _SwitchTest:
0000128E  48E7 3020 1719          movem.l   D2/D3/A2,-(A7)
00001292  45F9 0000 1720          lea       _printf.L,A2
00001296  3F54      
                    1721   ; int i, switches = 0;
00001298  4283      1722          clr.l     D3
                    1723   ; printf("\r\n");
0000129A  4879 0000 1724          pea       @lab5k_1.L
0000129E  4B04      
000012A0  4E92      1725          jsr       (A2)
000012A2  584F      1726          addq.w    #4,A7
                    1727   ; while (1) {
                    1728   SwitchTest_1:
                    1729   ; switches = (PortB << 8) | (PortA);
000012A4  1039 0040 1730          move.b    4194306,D0
000012A8  0002      
000012AA  C0BC 0000 1731          and.l     #255,D0
000012AE  00FF      
000012B0  E188      1732          lsl.l     #8,D0
000012B2  1239 0040 1733          move.b    4194304,D1
000012B6  0000      
000012B8  C2BC 0000 1734          and.l     #255,D1
000012BC  00FF      
000012BE  8081      1735          or.l      D1,D0
000012C0  2600      1736          move.l    D0,D3
                    1737   ; printf("\rSwitches SW[7-0] = ");
000012C2  4879 0000 1738          pea       @lab5k_2.L
000012C6  4B08      
000012C8  4E92      1739          jsr       (A2)
000012CA  584F      1740          addq.w    #4,A7
                    1741   ; for (i = (int)(0x00000080); i > 0; i = i >> 1) {
000012CC  243C 0000 1742          move.l    #128,D2
000012D0  0080      
                    1743   SwitchTest_4:
000012D2  0C82 0000 1744          cmp.l     #0,D2
000012D6  0000      
000012D8  6F20      1745          ble.s     SwitchTest_6
                    1746   ; if ((switches & i) == 0)
000012DA  2003      1747          move.l    D3,D0
000012DC  C082      1748          and.l     D2,D0
000012DE  660C      1749          bne.s     SwitchTest_7
                    1750   ; printf("0");
000012E0  4879 0000 1751          pea       @lab5k_3.L
000012E4  4B1E      
000012E6  4E92      1752          jsr       (A2)
000012E8  584F      1753          addq.w    #4,A7
000012EA  600A      1754          bra.s     SwitchTest_8
                    1755   SwitchTest_7:
                    1756   ; else
                    1757   ; printf("1");
000012EC  4879 0000 1758          pea       @lab5k_4.L
000012F0  4B20      
000012F2  4E92      1759          jsr       (A2)
000012F4  584F      1760          addq.w    #4,A7
                    1761   SwitchTest_8:
000012F6  E282      1762          asr.l     #1,D2
000012F8  60D8      1763          bra       SwitchTest_4
                    1764   SwitchTest_6:
000012FA  60A8      1765          bra       SwitchTest_1
                    1766   ; }
                    1767   ; }
                    1768   ; }
                    1769   ; /*********************************************************************************************
                    1770   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                    1771   ; *********************************************************************************************/
                    1772   ; void Init_RS232(void)
                    1773   ; {
                    1774   _Init_RS232:
                    1775   ; RS232_Control = (char)(0x15); //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
000012FC  13FC 0015 1776          move.b    #21,4194368
00001300  0040 0040 
                    1777   ; RS232_Baud = (char)(0x1);      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00001304  13FC 0001 1778          move.b    #1,4194372
00001308  0040 0044 
0000130C  4E75      1779          rts
                    1780   ; }
                    1781   ; int kbhit(void)
                    1782   ; {
                    1783   _kbhit:
                    1784   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
0000130E  1039 0040 1785          move.b    4194368,D0
00001312  0040      
00001314  C03C 0001 1786          and.b     #1,D0
00001318  0C00 0001 1787          cmp.b     #1,D0
0000131C  6604      1788          bne.s     kbhit_1
                    1789   ; return 1;
0000131E  7001      1790          moveq     #1,D0
00001320  6002      1791          bra.s     kbhit_3
                    1792   kbhit_1:
                    1793   ; else
                    1794   ; return 0;
00001322  4280      1795          clr.l     D0
                    1796   kbhit_3:
00001324  4E75      1797          rts
                    1798   ; }
                    1799   ; /*********************************************************************************************************
                    1800   ; **  Subroutine to provide a low level output function to 6850 ACIA
                    1801   ; **  This routine provides the basic functionality to output a single character to the serial Port
                    1802   ; **  to allow the board to communicate with HyperTerminal Program
                    1803   ; **
                    1804   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                    1805   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                    1806   ; **  call _putch() also
                    1807   ; *********************************************************************************************************/
                    1808   ; int _putch(int c)
                    1809   ; {
                    1810   __putch:
00001326  4E56 0000 1811          link      A6,#0
                    1812   ; while (((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                    1813   _putch_1:
0000132A  1039 0040 1814          move.b    4194368,D0
0000132E  0040      
00001330  C03C 0002 1815          and.b     #2,D0
00001334  0C00 0002 1816          cmp.b     #2,D0
00001338  6702      1817          beq.s     _putch_3
0000133A  60EE      1818          bra       _putch_1
                    1819   _putch_3:
                    1820   ; ;
                    1821   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
0000133C  202E 0008 1822          move.l    8(A6),D0
00001340  C03C 007F 1823          and.b     #127,D0
00001344  13C0 0040 1824          move.b    D0,4194370
00001348  0042      
                    1825   ; return c;                                              // putchar() expects the character to be returned
0000134A  202E 0008 1826          move.l    8(A6),D0
0000134E  4E5E      1827          unlk      A6
00001350  4E75      1828          rts
                    1829   ; }
                    1830   ; /*********************************************************************************************************
                    1831   ; **  Subroutine to provide a low level input function to 6850 ACIA
                    1832   ; **  This routine provides the basic functionality to input a single character from the serial Port
                    1833   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                    1834   ; **
                    1835   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                    1836   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                    1837   ; **  call _getch() also
                    1838   ; *********************************************************************************************************/
                    1839   ; int _getch(void)
                    1840   ; {
                    1841   __getch:
00001352  2F02      1842          move.l    D2,-(A7)
                    1843   ; int c;
                    1844   ; while (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                    1845   _getch_1:
00001354  1039 0040 1846          move.b    4194368,D0
00001358  0040      
0000135A  C03C 0001 1847          and.b     #1,D0
0000135E  0C00 0001 1848          cmp.b     #1,D0
00001362  6702      1849          beq.s     _getch_3
00001364  60EE      1850          bra       _getch_1
                    1851   _getch_3:
                    1852   ; ;
                    1853   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00001366  1039 0040 1854          move.b    4194370,D0
0000136A  0042      
0000136C  C0BC 0000 1855          and.l     #255,D0
00001370  00FF      
00001372  C0BC 0000 1856          and.l     #127,D0
00001376  007F      
00001378  2400      1857          move.l    D0,D2
                    1858   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                    1859   ; if (Echo)
0000137A  4AB9 0B00 1860          tst.l     _Echo.L
0000137E  00E0      
00001380  6708      1861          beq.s     _getch_4
                    1862   ; _putch(c);
00001382  2F02      1863          move.l    D2,-(A7)
00001384  4EB8 1326 1864          jsr       __putch
00001388  584F      1865          addq.w    #4,A7
                    1866   _getch_4:
                    1867   ; return c;
0000138A  2002      1868          move.l    D2,D0
0000138C  241F      1869          move.l    (A7)+,D2
0000138E  4E75      1870          rts
                    1871   ; }
                    1872   ; // flush the input stream for any unread characters
                    1873   ; void FlushKeyboard(void)
                    1874   ; {
                    1875   _FlushKeyboard:
00001390  4E56 FFFC 1876          link      A6,#-4
                    1877   ; char c;
                    1878   ; while (1) {
                    1879   FlushKeyboard_1:
                    1880   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00001394  1039 0040 1881          move.b    4194368,D0
00001398  0040      
0000139A  C03C 0001 1882          and.b     #1,D0
0000139E  0C00 0001 1883          cmp.b     #1,D0
000013A2  6610      1884          bne.s     FlushKeyboard_4
                    1885   ; c = ((char)(RS232_RxData) & (char)(0x7f));
000013A4  1039 0040 1886          move.b    4194370,D0
000013A8  0042      
000013AA  C03C 007F 1887          and.b     #127,D0
000013AE  1D40 FFFF 1888          move.b    D0,-1(A6)
000013B2  6002      1889          bra.s     FlushKeyboard_5
                    1890   FlushKeyboard_4:
                    1891   ; else
                    1892   ; return;
000013B4  6002      1893          bra.s     FlushKeyboard_6
                    1894   FlushKeyboard_5:
000013B6  60DC      1895          bra       FlushKeyboard_1
                    1896   FlushKeyboard_6:
000013B8  4E5E      1897          unlk      A6
000013BA  4E75      1898          rts
                    1899   ; }
                    1900   ; }
                    1901   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                    1902   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                    1903   ; char xtod(int c)
                    1904   ; {
                    1905   _xtod:
000013BC  4E56 0000 1906          link      A6,#0
000013C0  2F02      1907          move.l    D2,-(A7)
000013C2  242E 0008 1908          move.l    8(A6),D2
                    1909   ; if ((char)(c) <= (char)('9'))
000013C6  0C02 0039 1910          cmp.b     #57,D2
000013CA  6E08      1911          bgt.s     xtod_1
                    1912   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
000013CC  1002      1913          move.b    D2,D0
000013CE  0400 0030 1914          sub.b     #48,D0
000013D2  6014      1915          bra.s     xtod_3
                    1916   xtod_1:
                    1917   ; else if ((char)(c) > (char)('F'))    // assume lower case
000013D4  0C02 0046 1918          cmp.b     #70,D2
000013D8  6F08      1919          ble.s     xtod_4
                    1920   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
000013DA  1002      1921          move.b    D2,D0
000013DC  0400 0057 1922          sub.b     #87,D0
000013E0  6006      1923          bra.s     xtod_3
                    1924   xtod_4:
                    1925   ; else
                    1926   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
000013E2  1002      1927          move.b    D2,D0
000013E4  0400 0037 1928          sub.b     #55,D0
                    1929   xtod_3:
000013E8  241F      1930          move.l    (A7)+,D2
000013EA  4E5E      1931          unlk      A6
000013EC  4E75      1932          rts
                    1933   ; }
                    1934   ; int Get2HexDigits(char* CheckSumPtr)
                    1935   ; {
                    1936   _Get2HexDigits:
000013EE  4E56 0000 1937          link      A6,#0
000013F2  2F02      1938          move.l    D2,-(A7)
                    1939   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
000013F4  2F00      1940          move.l    D0,-(A7)
000013F6  4EB8 1352 1941          jsr       __getch
000013FA  2200      1942          move.l    D0,D1
000013FC  201F      1943          move.l    (A7)+,D0
000013FE  2F01      1944          move.l    D1,-(A7)
00001400  4EB8 13BC 1945          jsr       _xtod
00001404  584F      1946          addq.w    #4,A7
00001406  C0BC 0000 1947          and.l     #255,D0
0000140A  00FF      
0000140C  E980      1948          asl.l     #4,D0
0000140E  2F00      1949          move.l    D0,-(A7)
00001410  2F01      1950          move.l    D1,-(A7)
00001412  4EB8 1352 1951          jsr       __getch
00001416  221F      1952          move.l    (A7)+,D1
00001418  2F00      1953          move.l    D0,-(A7)
0000141A  4EB8 13BC 1954          jsr       _xtod
0000141E  584F      1955          addq.w    #4,A7
00001420  2200      1956          move.l    D0,D1
00001422  201F      1957          move.l    (A7)+,D0
00001424  C2BC 0000 1958          and.l     #255,D1
00001428  00FF      
0000142A  8081      1959          or.l      D1,D0
0000142C  2400      1960          move.l    D0,D2
                    1961   ; if (CheckSumPtr)
0000142E  4AAE 0008 1962          tst.l     8(A6)
00001432  6706      1963          beq.s     Get2HexDigits_1
                    1964   ; *CheckSumPtr += i;
00001434  206E 0008 1965          move.l    8(A6),A0
00001438  D510      1966          add.b     D2,(A0)
                    1967   Get2HexDigits_1:
                    1968   ; return i;
0000143A  2002      1969          move.l    D2,D0
0000143C  241F      1970          move.l    (A7)+,D2
0000143E  4E5E      1971          unlk      A6
00001440  4E75      1972          rts
                    1973   ; }
                    1974   ; int Get4HexDigits(char* CheckSumPtr)
                    1975   ; {
                    1976   _Get4HexDigits:
00001442  4E56 0000 1977          link      A6,#0
                    1978   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00001446  2F2E 0008 1979          move.l    8(A6),-(A7)
0000144A  4EB8 13EE 1980          jsr       _Get2HexDigits
0000144E  584F      1981          addq.w    #4,A7
00001450  E180      1982          asl.l     #8,D0
00001452  2F00      1983          move.l    D0,-(A7)
00001454  2F2E 0008 1984          move.l    8(A6),-(A7)
00001458  4EB8 13EE 1985          jsr       _Get2HexDigits
0000145C  584F      1986          addq.w    #4,A7
0000145E  2200      1987          move.l    D0,D1
00001460  201F      1988          move.l    (A7)+,D0
00001462  8081      1989          or.l      D1,D0
00001464  4E5E      1990          unlk      A6
00001466  4E75      1991          rts
                    1992   ; }
                    1993   ; int Get6HexDigits(char* CheckSumPtr)
                    1994   ; {
                    1995   _Get6HexDigits:
00001468  4E56 0000 1996          link      A6,#0
                    1997   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
0000146C  2F2E 0008 1998          move.l    8(A6),-(A7)
00001470  4EB8 1442 1999          jsr       _Get4HexDigits
00001474  584F      2000          addq.w    #4,A7
00001476  E180      2001          asl.l     #8,D0
00001478  2F00      2002          move.l    D0,-(A7)
0000147A  2F2E 0008 2003          move.l    8(A6),-(A7)
0000147E  4EB8 13EE 2004          jsr       _Get2HexDigits
00001482  584F      2005          addq.w    #4,A7
00001484  2200      2006          move.l    D0,D1
00001486  201F      2007          move.l    (A7)+,D0
00001488  8081      2008          or.l      D1,D0
0000148A  4E5E      2009          unlk      A6
0000148C  4E75      2010          rts
                    2011   ; }
                    2012   ; int Get8HexDigits(char* CheckSumPtr)
                    2013   ; {
                    2014   _Get8HexDigits:
0000148E  4E56 0000 2015          link      A6,#0
                    2016   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00001492  2F2E 0008 2017          move.l    8(A6),-(A7)
00001496  4EB8 1442 2018          jsr       _Get4HexDigits
0000149A  584F      2019          addq.w    #4,A7
0000149C  E180      2020          asl.l     #8,D0
0000149E  E180      2021          asl.l     #8,D0
000014A0  2F00      2022          move.l    D0,-(A7)
000014A2  2F2E 0008 2023          move.l    8(A6),-(A7)
000014A6  4EB8 1442 2024          jsr       _Get4HexDigits
000014AA  584F      2025          addq.w    #4,A7
000014AC  2200      2026          move.l    D0,D1
000014AE  201F      2027          move.l    (A7)+,D0
000014B0  8081      2028          or.l      D1,D0
000014B2  4E5E      2029          unlk      A6
000014B4  4E75      2030          rts
                    2031   ; }
                    2032   ; void DumpMemory(void)   // simple dump memory fn
                    2033   ; {
                    2034   _DumpMemory:
000014B6  48E7 3C30 2035          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
000014BA  45F9 0000 2036          lea       _printf.L,A2
000014BE  3F54      
000014C0  47F9 0000 2037          lea       _putch.L,A3
000014C4  3F96      
                    2038   ; int i, j;
                    2039   ; unsigned char* RamPtr, c; // pointer to where the program is download (assumed)
                    2040   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue");
000014C6  4879 0000 2041          pea       @lab5k_5.L
000014CA  4B22      
000014CC  4E92      2042          jsr       (A2)
000014CE  584F      2043          addq.w    #4,A7
                    2044   ; printf("\r\nEnter Start Address: ");
000014D0  4879 0000 2045          pea       @lab5k_6.L
000014D4  4B5C      
000014D6  4E92      2046          jsr       (A2)
000014D8  584F      2047          addq.w    #4,A7
                    2048   ; RamPtr = Get8HexDigits(0);
000014DA  42A7      2049          clr.l     -(A7)
000014DC  4EB8 148E 2050          jsr       _Get8HexDigits
000014E0  584F      2051          addq.w    #4,A7
000014E2  2600      2052          move.l    D0,D3
                    2053   ; while (1) {
                    2054   DumpMemory_1:
                    2055   ; for (i = 0; i < 16; i++) {
000014E4  4285      2056          clr.l     D5
                    2057   DumpMemory_4:
000014E6  0C85 0000 2058          cmp.l     #16,D5
000014EA  0010      
000014EC  6C00 0096 2059          bge       DumpMemory_6
                    2060   ; printf("\r\n%08x ", RamPtr);
000014F0  2F03      2061          move.l    D3,-(A7)
000014F2  4879 0000 2062          pea       @lab5k_7.L
000014F6  4B74      
000014F8  4E92      2063          jsr       (A2)
000014FA  504F      2064          addq.w    #8,A7
                    2065   ; for (j = 0; j < 16; j++) {
000014FC  4282      2066          clr.l     D2
                    2067   DumpMemory_7:
000014FE  0C82 0000 2068          cmp.l     #16,D2
00001502  0010      
00001504  6C24      2069          bge.s     DumpMemory_9
                    2070   ; printf("%02X", RamPtr[j]);
00001506  2043      2071          move.l    D3,A0
00001508  1230 2800 2072          move.b    0(A0,D2.L),D1
0000150C  C2BC 0000 2073          and.l     #255,D1
00001510  00FF      
00001512  2F01      2074          move.l    D1,-(A7)
00001514  4879 0000 2075          pea       @lab5k_8.L
00001518  4B7C      
0000151A  4E92      2076          jsr       (A2)
0000151C  504F      2077          addq.w    #8,A7
                    2078   ; putchar(' ');
0000151E  4878 0020 2079          pea       32
00001522  4E93      2080          jsr       (A3)
00001524  584F      2081          addq.w    #4,A7
00001526  5282      2082          addq.l    #1,D2
00001528  60D4      2083          bra       DumpMemory_7
                    2084   DumpMemory_9:
                    2085   ; }
                    2086   ; // now display the data as ASCII at the end
                    2087   ; printf("  ");
0000152A  4879 0000 2088          pea       @lab5k_9.L
0000152E  4B82      
00001530  4E92      2089          jsr       (A2)
00001532  584F      2090          addq.w    #4,A7
                    2091   ; for (j = 0; j < 16; j++) {
00001534  4282      2092          clr.l     D2
                    2093   DumpMemory_10:
00001536  0C82 0000 2094          cmp.l     #16,D2
0000153A  0010      
0000153C  6C00 003A 2095          bge       DumpMemory_12
                    2096   ; c = ((char)(RamPtr[j]) & 0x7f);
00001540  2043      2097          move.l    D3,A0
00001542  1030 2800 2098          move.b    0(A0,D2.L),D0
00001546  C03C 007F 2099          and.b     #127,D0
0000154A  1800      2100          move.b    D0,D4
                    2101   ; if ((c > (char)(0x7f)) || (c < ' '))
0000154C  0C04 007F 2102          cmp.b     #127,D4
00001550  6206      2103          bhi.s     DumpMemory_15
00001552  0C04 0020 2104          cmp.b     #32,D4
00001556  640A      2105          bhs.s     DumpMemory_13
                    2106   DumpMemory_15:
                    2107   ; putchar('.');
00001558  4878 002E 2108          pea       46
0000155C  4E93      2109          jsr       (A3)
0000155E  584F      2110          addq.w    #4,A7
00001560  6012      2111          bra.s     DumpMemory_14
                    2112   DumpMemory_13:
                    2113   ; else
                    2114   ; putchar(RamPtr[j]);
00001562  2043      2115          move.l    D3,A0
00001564  1230 2800 2116          move.b    0(A0,D2.L),D1
00001568  C2BC 0000 2117          and.l     #255,D1
0000156C  00FF      
0000156E  2F01      2118          move.l    D1,-(A7)
00001570  4E93      2119          jsr       (A3)
00001572  584F      2120          addq.w    #4,A7
                    2121   DumpMemory_14:
00001574  5282      2122          addq.l    #1,D2
00001576  60BE      2123          bra       DumpMemory_10
                    2124   DumpMemory_12:
                    2125   ; }
                    2126   ; RamPtr = RamPtr + 16;
00001578  0683 0000 2127          add.l     #16,D3
0000157C  0010      
0000157E  5285      2128          addq.l    #1,D5
00001580  6000 FF64 2129          bra       DumpMemory_4
                    2130   DumpMemory_6:
                    2131   ; }
                    2132   ; printf("\r\n");
00001584  4879 0000 2133          pea       @lab5k_1.L
00001588  4B04      
0000158A  4E92      2134          jsr       (A2)
0000158C  584F      2135          addq.w    #4,A7
                    2136   ; c = _getch();
0000158E  4EB8 1352 2137          jsr       __getch
00001592  1800      2138          move.b    D0,D4
                    2139   ; if (c == 0x1b)          // break on ESC
00001594  0C04 001B 2140          cmp.b     #27,D4
00001598  6602      2141          bne.s     DumpMemory_16
                    2142   ; break;
0000159A  6004      2143          bra.s     DumpMemory_3
                    2144   DumpMemory_16:
0000159C  6000 FF46 2145          bra       DumpMemory_1
                    2146   DumpMemory_3:
000015A0  4CDF 0C3C 2147          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
000015A4  4E75      2148          rts
                    2149   ; }
                    2150   ; }
                    2151   ; void FillMemory()
                    2152   ; {
                    2153   _FillMemory:
000015A6  48E7 3820 2154          movem.l   D2/D3/D4/A2,-(A7)
000015AA  45F9 0000 2155          lea       _printf.L,A2
000015AE  3F54      
                    2156   ; char* StartRamPtr, * EndRamPtr;
                    2157   ; unsigned char FillData;
                    2158   ; printf("\r\nFill Memory Block");
000015B0  4879 0000 2159          pea       @lab5k_10.L
000015B4  4B86      
000015B6  4E92      2160          jsr       (A2)
000015B8  584F      2161          addq.w    #4,A7
                    2162   ; printf("\r\nEnter Start Address: ");
000015BA  4879 0000 2163          pea       @lab5k_6.L
000015BE  4B5C      
000015C0  4E92      2164          jsr       (A2)
000015C2  584F      2165          addq.w    #4,A7
                    2166   ; StartRamPtr = Get8HexDigits(0);
000015C4  42A7      2167          clr.l     -(A7)
000015C6  4EB8 148E 2168          jsr       _Get8HexDigits
000015CA  584F      2169          addq.w    #4,A7
000015CC  2400      2170          move.l    D0,D2
                    2171   ; printf("\r\nEnter End Address: ");
000015CE  4879 0000 2172          pea       @lab5k_11.L
000015D2  4B9A      
000015D4  4E92      2173          jsr       (A2)
000015D6  584F      2174          addq.w    #4,A7
                    2175   ; EndRamPtr = Get8HexDigits(0);
000015D8  42A7      2176          clr.l     -(A7)
000015DA  4EB8 148E 2177          jsr       _Get8HexDigits
000015DE  584F      2178          addq.w    #4,A7
000015E0  2800      2179          move.l    D0,D4
                    2180   ; printf("\r\nEnter Fill Data: ");
000015E2  4879 0000 2181          pea       @lab5k_12.L
000015E6  4BB0      
000015E8  4E92      2182          jsr       (A2)
000015EA  584F      2183          addq.w    #4,A7
                    2184   ; FillData = Get2HexDigits(0);
000015EC  42A7      2185          clr.l     -(A7)
000015EE  4EB8 13EE 2186          jsr       _Get2HexDigits
000015F2  584F      2187          addq.w    #4,A7
000015F4  1600      2188          move.b    D0,D3
                    2189   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
000015F6  C6BC 0000 2190          and.l     #255,D3
000015FA  00FF      
000015FC  2F03      2191          move.l    D3,-(A7)
000015FE  2F04      2192          move.l    D4,-(A7)
00001600  2F02      2193          move.l    D2,-(A7)
00001602  4879 0000 2194          pea       @lab5k_13.L
00001606  4BC4      
00001608  4E92      2195          jsr       (A2)
0000160A  DEFC 0010 2196          add.w     #16,A7
                    2197   ; while (StartRamPtr < EndRamPtr)
                    2198   FillMemory_1:
0000160E  B484      2199          cmp.l     D4,D2
00001610  6408      2200          bhs.s     FillMemory_3
                    2201   ; *StartRamPtr++ = FillData;
00001612  2042      2202          move.l    D2,A0
00001614  5282      2203          addq.l    #1,D2
00001616  1083      2204          move.b    D3,(A0)
00001618  60F4      2205          bra       FillMemory_1
                    2206   FillMemory_3:
0000161A  4CDF 041C 2207          movem.l   (A7)+,D2/D3/D4/A2
0000161E  4E75      2208          rts
                    2209   ; }
                    2210   ; void Load_SRecordFile()
                    2211   ; {
                    2212   _Load_SRecordFile:
00001620  4E56 FFDC 2213          link      A6,#-36
00001624  48E7 3F3C 2214          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001628  45EE FFFA 2215          lea       -6(A6),A2
0000162C  47F8 13EE 2216          lea       _Get2HexDigits.L,A3
00001630  49F9 0000 2217          lea       _printf.L,A4
00001634  3F54      
                    2218   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0;
00001636  42AE FFEE 2219          clr.l     -18(A6)
0000163A  3A7C 0000 2220          move.w    #0,A5
                    2221   ; int result, ByteCount;
                    2222   ; char c, CheckSum, ReadCheckSum, HeaderType;
                    2223   ; char* RamPtr;                          // pointer to Memory where downloaded program will be stored
                    2224   ; LoadFailed = 0;                        //assume LOAD operation will pass
0000163E  7E00      2225          moveq     #0,D7
                    2226   ; AddressFail = 0;
00001640  42AE FFEA 2227          clr.l     -22(A6)
                    2228   ; Echo = 0;                              // don't echo S records during download
00001644  42B9 0B00 2229          clr.l     _Echo.L
00001648  00E0      
                    2230   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n");
0000164A  4879 0000 2231          pea       @lab5k_14.L
0000164E  4BF4      
00001650  4E94      2232          jsr       (A4)
00001652  584F      2233          addq.w    #4,A7
                    2234   ; while (1) {
                    2235   Load_SRecordFile_1:
                    2236   ; CheckSum = 0;
00001654  4212      2237          clr.b     (A2)
                    2238   ; do {
                    2239   Load_SRecordFile_4:
                    2240   ; c = toupper(_getch());
00001656  2F00      2241          move.l    D0,-(A7)
00001658  4EB8 1352 2242          jsr       __getch
0000165C  2200      2243          move.l    D0,D1
0000165E  201F      2244          move.l    (A7)+,D0
00001660  2F01      2245          move.l    D1,-(A7)
00001662  4EB9 0000 2246          jsr       _toupper
00001666  4078      
00001668  584F      2247          addq.w    #4,A7
0000166A  1C00      2248          move.b    D0,D6
                    2249   ; if (c == 0x1b)      // if break
0000166C  0C06 001B 2250          cmp.b     #27,D6
00001670  6604      2251          bne.s     Load_SRecordFile_6
                    2252   ; return;
00001672  6000 0132 2253          bra       Load_SRecordFile_8
                    2254   Load_SRecordFile_6:
00001676  0C06 0053 2255          cmp.b     #83,D6
0000167A  66DA      2256          bne       Load_SRecordFile_4
                    2257   ; } while (c != (char)('S'));   // wait for S start of header
                    2258   ; HeaderType = _getch();
0000167C  4EB8 1352 2259          jsr       __getch
00001680  1600      2260          move.b    D0,D3
                    2261   ; if (HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00001682  0C03 0030 2262          cmp.b     #48,D3
00001686  6706      2263          beq.s     Load_SRecordFile_11
00001688  0C03 0035 2264          cmp.b     #53,D3
0000168C  6604      2265          bne.s     Load_SRecordFile_9
                    2266   Load_SRecordFile_11:
                    2267   ; continue;
0000168E  6000 00D2 2268          bra       Load_SRecordFile_23
                    2269   Load_SRecordFile_9:
                    2270   ; if (HeaderType >= (char)('7'))
00001692  0C03 0037 2271          cmp.b     #55,D3
00001696  6D04      2272          blt.s     Load_SRecordFile_12
                    2273   ; break;                 // end load on s7,s8,s9 records
00001698  6000 00CC 2274          bra       Load_SRecordFile_3
                    2275   Load_SRecordFile_12:
                    2276   ; // get the bytecount
                    2277   ; ByteCount = Get2HexDigits(&CheckSum);
0000169C  2F0A      2278          move.l    A2,-(A7)
0000169E  4E93      2279          jsr       (A3)
000016A0  584F      2280          addq.w    #4,A7
000016A2  2D40 FFF6 2281          move.l    D0,-10(A6)
                    2282   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    2283   ; if (HeaderType == (char)('1')) {
000016A6  0C03 0031 2284          cmp.b     #49,D3
000016AA  660E      2285          bne.s     Load_SRecordFile_14
                    2286   ; AddressSize = 2;       // 2 byte address
000016AC  7A02      2287          moveq     #2,D5
                    2288   ; Address = Get4HexDigits(&CheckSum);
000016AE  2F0A      2289          move.l    A2,-(A7)
000016B0  4EB8 1442 2290          jsr       _Get4HexDigits
000016B4  584F      2291          addq.w    #4,A7
000016B6  2800      2292          move.l    D0,D4
000016B8  6020      2293          bra.s     Load_SRecordFile_17
                    2294   Load_SRecordFile_14:
                    2295   ; }
                    2296   ; else if (HeaderType == (char)('2')) {
000016BA  0C03 0032 2297          cmp.b     #50,D3
000016BE  660E      2298          bne.s     Load_SRecordFile_16
                    2299   ; AddressSize = 3;       // 3 byte address
000016C0  7A03      2300          moveq     #3,D5
                    2301   ; Address = Get6HexDigits(&CheckSum);
000016C2  2F0A      2302          move.l    A2,-(A7)
000016C4  4EB8 1468 2303          jsr       _Get6HexDigits
000016C8  584F      2304          addq.w    #4,A7
000016CA  2800      2305          move.l    D0,D4
000016CC  600C      2306          bra.s     Load_SRecordFile_17
                    2307   Load_SRecordFile_16:
                    2308   ; }
                    2309   ; else {
                    2310   ; AddressSize = 4;       // 4 byte address
000016CE  7A04      2311          moveq     #4,D5
                    2312   ; Address = Get8HexDigits(&CheckSum);
000016D0  2F0A      2313          move.l    A2,-(A7)
000016D2  4EB8 148E 2314          jsr       _Get8HexDigits
000016D6  584F      2315          addq.w    #4,A7
000016D8  2800      2316          move.l    D0,D4
                    2317   Load_SRecordFile_17:
                    2318   ; }
                    2319   ; RamPtr = (char*)(Address);                            // point to download area
000016DA  2D44 FFFC 2320          move.l    D4,-4(A6)
                    2321   ; NumDataBytesToRead = ByteCount - AddressSize - 1;
000016DE  202E FFF6 2322          move.l    -10(A6),D0
000016E2  9085      2323          sub.l     D5,D0
000016E4  5380      2324          subq.l    #1,D0
000016E6  2D40 FFE2 2325          move.l    D0,-30(A6)
                    2326   ; for (i = 0; i < NumDataBytesToRead; i++) {     // read in remaining data bytes (ignore address and checksum at the end
000016EA  4282      2327          clr.l     D2
                    2328   Load_SRecordFile_18:
000016EC  B4AE FFE2 2329          cmp.l     -30(A6),D2
000016F0  6C1E      2330          bge.s     Load_SRecordFile_20
                    2331   ; DataByte = Get2HexDigits(&CheckSum);
000016F2  2F0A      2332          move.l    A2,-(A7)
000016F4  4E93      2333          jsr       (A3)
000016F6  584F      2334          addq.w    #4,A7
000016F8  2D40 FFDE 2335          move.l    D0,-34(A6)
                    2336   ; *RamPtr++ = DataByte;                      // store downloaded byte in Ram at specified address
000016FC  202E FFDE 2337          move.l    -34(A6),D0
00001700  206E FFFC 2338          move.l    -4(A6),A0
00001704  52AE FFFC 2339          addq.l    #1,-4(A6)
00001708  1080      2340          move.b    D0,(A0)
                    2341   ; ByteTotal++;
0000170A  524D      2342          addq.w    #1,A5
0000170C  5282      2343          addq.l    #1,D2
0000170E  60DC      2344          bra       Load_SRecordFile_18
                    2345   Load_SRecordFile_20:
                    2346   ; }
                    2347   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    2348   ; ReadCheckSum = Get2HexDigits(0);
00001710  42A7      2349          clr.l     -(A7)
00001712  4E93      2350          jsr       (A3)
00001714  584F      2351          addq.w    #4,A7
00001716  1D40 FFFB 2352          move.b    D0,-5(A6)
                    2353   ; if ((~CheckSum & 0Xff) != (ReadCheckSum & 0Xff)) {
0000171A  1012      2354          move.b    (A2),D0
0000171C  4600      2355          not.b     D0
0000171E  4880      2356          ext.w     D0
00001720  C07C 00FF 2357          and.w     #255,D0
00001724  122E FFFB 2358          move.b    -5(A6),D1
00001728  4881      2359          ext.w     D1
0000172A  C27C 00FF 2360          and.w     #255,D1
0000172E  B041      2361          cmp.w     D1,D0
00001730  6708      2362          beq.s     Load_SRecordFile_21
                    2363   ; LoadFailed = 1;
00001732  7E01      2364          moveq     #1,D7
                    2365   ; FailedAddress = Address;
00001734  2D44 FFE6 2366          move.l    D4,-26(A6)
                    2367   ; break;
00001738  602C      2368          bra.s     Load_SRecordFile_3
                    2369   Load_SRecordFile_21:
                    2370   ; }
                    2371   ; SRecordCount++;
0000173A  52AE FFEE 2372          addq.l    #1,-18(A6)
                    2373   ; // display feedback on progress
                    2374   ; if (SRecordCount % 25 == 0)
0000173E  2F2E FFEE 2375          move.l    -18(A6),-(A7)
00001742  4878 0019 2376          pea       25
00001746  4EB9 0000 2377          jsr       LDIV
0000174A  3E88      
0000174C  202F 0004 2378          move.l    4(A7),D0
00001750  504F      2379          addq.w    #8,A7
00001752  4A80      2380          tst.l     D0
00001754  660C      2381          bne.s     Load_SRecordFile_23
                    2382   ; putchar('.');
00001756  4878 002E 2383          pea       46
0000175A  4EB9 0000 2384          jsr       _putch
0000175E  3F96      
00001760  584F      2385          addq.w    #4,A7
                    2386   Load_SRecordFile_23:
00001762  6000 FEF0 2387          bra       Load_SRecordFile_1
                    2388   Load_SRecordFile_3:
                    2389   ; }
                    2390   ; if (LoadFailed == 1) {
00001766  0C87 0000 2391          cmp.l     #1,D7
0000176A  0001      
0000176C  6610      2392          bne.s     Load_SRecordFile_25
                    2393   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress);
0000176E  2F2E FFE6 2394          move.l    -26(A6),-(A7)
00001772  4879 0000 2395          pea       @lab5k_15.L
00001776  4C24      
00001778  4E94      2396          jsr       (A4)
0000177A  504F      2397          addq.w    #8,A7
0000177C  600C      2398          bra.s     Load_SRecordFile_26
                    2399   Load_SRecordFile_25:
                    2400   ; }
                    2401   ; else
                    2402   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal);
0000177E  2F0D      2403          move.l    A5,-(A7)
00001780  4879 0000 2404          pea       @lab5k_16.L
00001784  4C4A      
00001786  4E94      2405          jsr       (A4)
00001788  504F      2406          addq.w    #8,A7
                    2407   Load_SRecordFile_26:
                    2408   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    2409   ; for (i = 0; i < 400000; i++)
0000178A  4282      2410          clr.l     D2
                    2411   Load_SRecordFile_27:
0000178C  0C82 0006 2412          cmp.l     #400000,D2
00001790  1A80      
00001792  6C04      2413          bge.s     Load_SRecordFile_29
00001794  5282      2414          addq.l    #1,D2
00001796  60F4      2415          bra       Load_SRecordFile_27
                    2416   Load_SRecordFile_29:
                    2417   ; ;
                    2418   ; FlushKeyboard();
00001798  4EB8 1390 2419          jsr       _FlushKeyboard
                    2420   ; Echo = 1;
0000179C  23FC 0000 2421          move.l    #1,_Echo.L
000017A0  0001 0B00 
000017A4  00E0      
                    2422   Load_SRecordFile_8:
000017A6  4CDF 3CFC 2423          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000017AA  4E5E      2424          unlk      A6
000017AC  4E75      2425          rts
                    2426   ; }
                    2427   ; void MemoryChange(void)
                    2428   ; {
                    2429   _MemoryChange:
000017AE  48E7 3820 2430          movem.l   D2/D3/D4/A2,-(A7)
000017B2  45F9 0000 2431          lea       _printf.L,A2
000017B6  3F54      
                    2432   ; unsigned char* RamPtr, c; // pointer to memory
                    2433   ; int Data;
                    2434   ; printf("\r\nExamine and Change Memory");
000017B8  4879 0000 2435          pea       @lab5k_17.L
000017BC  4C6C      
000017BE  4E92      2436          jsr       (A2)
000017C0  584F      2437          addq.w    #4,A7
                    2438   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change");
000017C2  4879 0000 2439          pea       @lab5k_18.L
000017C6  4C88      
000017C8  4E92      2440          jsr       (A2)
000017CA  584F      2441          addq.w    #4,A7
                    2442   ; printf("\r\nEnter Address: ");
000017CC  4879 0000 2443          pea       @lab5k_19.L
000017D0  4CCE      
000017D2  4E92      2444          jsr       (A2)
000017D4  584F      2445          addq.w    #4,A7
                    2446   ; RamPtr = Get8HexDigits(0);
000017D6  42A7      2447          clr.l     -(A7)
000017D8  4EB8 148E 2448          jsr       _Get8HexDigits
000017DC  584F      2449          addq.w    #4,A7
000017DE  2600      2450          move.l    D0,D3
                    2451   ; while (1) {
                    2452   MemoryChange_1:
                    2453   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr);
000017E0  2043      2454          move.l    D3,A0
000017E2  1210      2455          move.b    (A0),D1
000017E4  C2BC 0000 2456          and.l     #255,D1
000017E8  00FF      
000017EA  2F01      2457          move.l    D1,-(A7)
000017EC  2F03      2458          move.l    D3,-(A7)
000017EE  4879 0000 2459          pea       @lab5k_20.L
000017F2  4CE0      
000017F4  4E92      2460          jsr       (A2)
000017F6  DEFC 000C 2461          add.w     #12,A7
                    2462   ; c = tolower(_getch());
000017FA  2F00      2463          move.l    D0,-(A7)
000017FC  4EB8 1352 2464          jsr       __getch
00001800  2200      2465          move.l    D0,D1
00001802  201F      2466          move.l    (A7)+,D0
00001804  2F01      2467          move.l    D1,-(A7)
00001806  4EB9 0000 2468          jsr       _tolower
0000180A  4002      
0000180C  584F      2469          addq.w    #4,A7
0000180E  1400      2470          move.b    D0,D2
                    2471   ; if (c == (char)(0x1b))
00001810  0C02 001B 2472          cmp.b     #27,D2
00001814  6604      2473          bne.s     MemoryChange_4
                    2474   ; return;                                // abort on escape
00001816  6000 0090 2475          bra       MemoryChange_6
                    2476   MemoryChange_4:
                    2477   ; else if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
0000181A  0C02 0030 2478          cmp.b     #48,D2
0000181E  6506      2479          blo.s     MemoryChange_10
00001820  0C02 0039 2480          cmp.b     #57,D2
00001824  6310      2481          bls.s     MemoryChange_9
                    2482   MemoryChange_10:
00001826  0C02 0061 2483          cmp.b     #97,D2
0000182A  6500 006E 2484          blo       MemoryChange_7
0000182E  0C02 0066 2485          cmp.b     #102,D2
00001832  6200 0066 2486          bhi       MemoryChange_7
                    2487   MemoryChange_9:
                    2488   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001836  C4BC 0000 2489          and.l     #255,D2
0000183A  00FF      
0000183C  2F02      2490          move.l    D2,-(A7)
0000183E  4EB8 13BC 2491          jsr       _xtod
00001842  584F      2492          addq.w    #4,A7
00001844  C0BC 0000 2493          and.l     #255,D0
00001848  00FF      
0000184A  E980      2494          asl.l     #4,D0
0000184C  2F00      2495          move.l    D0,-(A7)
0000184E  2F01      2496          move.l    D1,-(A7)
00001850  4EB8 1352 2497          jsr       __getch
00001854  221F      2498          move.l    (A7)+,D1
00001856  2F00      2499          move.l    D0,-(A7)
00001858  4EB8 13BC 2500          jsr       _xtod
0000185C  584F      2501          addq.w    #4,A7
0000185E  2200      2502          move.l    D0,D1
00001860  201F      2503          move.l    (A7)+,D0
00001862  C2BC 0000 2504          and.l     #255,D1
00001866  00FF      
00001868  8081      2505          or.l      D1,D0
0000186A  2800      2506          move.l    D0,D4
                    2507   ; *RamPtr = (char)(Data);
0000186C  2043      2508          move.l    D3,A0
0000186E  1084      2509          move.b    D4,(A0)
                    2510   ; if (*RamPtr != Data) {
00001870  2043      2511          move.l    D3,A0
00001872  1010      2512          move.b    (A0),D0
00001874  C0BC 0000 2513          and.l     #255,D0
00001878  00FF      
0000187A  B084      2514          cmp.l     D4,D0
0000187C  671A      2515          beq.s     MemoryChange_11
                    2516   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr);
0000187E  2043      2517          move.l    D3,A0
00001880  1210      2518          move.b    (A0),D1
00001882  C2BC 0000 2519          and.l     #255,D1
00001886  00FF      
00001888  2F01      2520          move.l    D1,-(A7)
0000188A  2F04      2521          move.l    D4,-(A7)
0000188C  4879 0000 2522          pea       @lab5k_21.L
00001890  4CF2      
00001892  4E92      2523          jsr       (A2)
00001894  DEFC 000C 2524          add.w     #12,A7
                    2525   MemoryChange_11:
00001898  6008      2526          bra.s     MemoryChange_13
                    2527   MemoryChange_7:
                    2528   ; }
                    2529   ; }
                    2530   ; else if (c == (char)('-'))
0000189A  0C02 002D 2531          cmp.b     #45,D2
0000189E  6602      2532          bne.s     MemoryChange_13
                    2533   ; RamPtr -= 2; ;
000018A0  5583      2534          subq.l    #2,D3
                    2535   MemoryChange_13:
                    2536   ; RamPtr++;
000018A2  5283      2537          addq.l    #1,D3
000018A4  6000 FF3A 2538          bra       MemoryChange_1
                    2539   MemoryChange_6:
000018A8  4CDF 041C 2540          movem.l   (A7)+,D2/D3/D4/A2
000018AC  4E75      2541          rts
                    2542   ; }
                    2543   ; }
                    2544   ; /******************************************************************************************
                    2545   ; ** The following code is for the SPI controller
                    2546   ; *******************************************************************************************/
                    2547   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    2548   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    2549   ; int TestForSPITransmitDataComplete(void)    {
                    2550   _TestForSPITransmitDataComplete:
000018AE  4E56 FFFC 2551          link      A6,#-4
                    2552   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    2553   ; int SPIF = SPI_Status >> 7;
000018B2  1039 0040 2554          move.b    4227106,D0
000018B6  8022      
000018B8  C0BC 0000 2555          and.l     #255,D0
000018BC  00FF      
000018BE  EE88      2556          lsr.l     #7,D0
000018C0  2D40 FFFC 2557          move.l    D0,-4(A6)
                    2558   ; return SPIF;
000018C4  202E FFFC 2559          move.l    -4(A6),D0
000018C8  4E5E      2560          unlk      A6
000018CA  4E75      2561          rts
                    2562   ; }
                    2563   ; /************************************************************************************
                    2564   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    2565   ; ************************************************************************************/
                    2566   ; void SPI_Init(void)
                    2567   ; {
                    2568   _SPI_Init:
                    2569   ; //TODO
                    2570   ; //
                    2571   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    2572   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    2573   ; //
                    2574   ; // Here are some settings we want to create
                    2575   ; //
                    2576   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    2577   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    2578   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    2579   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    2580   ; SPI_Control = (unsigned char) 0x53; // 0101_0011
000018CC  13FC 0053 2581          move.b    #83,4227104
000018D0  0040 8020 
                    2582   ; SPI_Ext = (unsigned char) 0x00; // 00_0000_00
000018D4  4239 0040 2583          clr.b     4227110
000018D8  8026      
                    2584   ; Disable_SPI_CS();
000018DA  13FC 00FF 2585          move.b    #255,4227112
000018DE  0040 8028 
                    2586   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
000018E2  13FC 00C0 2587          move.b    #192,4227106
000018E6  0040 8022 
000018EA  4E75      2588          rts
                    2589   ; }
                    2590   ; /************************************************************************************
                    2591   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    2592   ; ************************************************************************************/
                    2593   ; void WaitForSPITransmitComplete(void)
                    2594   ; {
                    2595   _WaitForSPITransmitComplete:
                    2596   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    2597   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    2598   ; // just in case they were set
                    2599   ; while(!TestForSPITransmitDataComplete()) {}
                    2600   WaitForSPITransmitComplete_1:
000018EC  4EB8 18AE 2601          jsr       _TestForSPITransmitDataComplete
000018F0  4A80      2602          tst.l     D0
000018F2  6602      2603          bne.s     WaitForSPITransmitComplete_3
000018F4  60F6      2604          bra       WaitForSPITransmitComplete_1
                    2605   WaitForSPITransmitComplete_3:
                    2606   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
000018F6  13FC 00C0 2607          move.b    #192,4227106
000018FA  0040 8022 
000018FE  4E75      2608          rts
                    2609   ; }
                    2610   ; /************************************************************************************
                    2611   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    2612   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    2613   ; ************************************************************************************/
                    2614   ; int WriteSPIChar(int c)
                    2615   ; {
                    2616   _WriteSPIChar:
00001900  4E56 FFFC 2617          link      A6,#-4
                    2618   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    2619   ; // wait for completion of transmission
                    2620   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    2621   ; // by reading fom the SPI controller Data Register.
                    2622   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    2623   ; //
                    2624   ; // modify '0' below to return back read byte from data register
                    2625   ; //
                    2626   ; int read_data;
                    2627   ; SPI_Data = c;
00001904  202E 0008 2628          move.l    8(A6),D0
00001908  13C0 0040 2629          move.b    D0,4227108
0000190C  8024      
                    2630   ; WaitForSPITransmitComplete();
0000190E  4EB8 18EC 2631          jsr       _WaitForSPITransmitComplete
                    2632   ; read_data = SPI_Data;
00001912  1039 0040 2633          move.b    4227108,D0
00001916  8024      
00001918  C0BC 0000 2634          and.l     #255,D0
0000191C  00FF      
0000191E  2D40 FFFC 2635          move.l    D0,-4(A6)
                    2636   ; return read_data;            
00001922  202E FFFC 2637          move.l    -4(A6),D0
00001926  4E5E      2638          unlk      A6
00001928  4E75      2639          rts
                    2640   ; }
                    2641   ; void SendFlashCmd(int cmd)
                    2642   ; {
                    2643   _SendFlashCmd:
0000192A  4E56 0000 2644          link      A6,#0
                    2645   ; Enable_SPI_CS();
0000192E  13FC 00FE 2646          move.b    #254,4227112
00001932  0040 8028 
                    2647   ; WriteSPIChar(cmd); 
00001936  2F2E 0008 2648          move.l    8(A6),-(A7)
0000193A  4EB8 1900 2649          jsr       _WriteSPIChar
0000193E  584F      2650          addq.w    #4,A7
                    2651   ; Disable_SPI_CS();
00001940  13FC 00FF 2652          move.b    #255,4227112
00001944  0040 8028 
00001948  4E5E      2653          unlk      A6
0000194A  4E75      2654          rts
                    2655   ; }
                    2656   ; void SendFlashCmdAndAddr(int cmd, int addr)
                    2657   ; {
                    2658   _SendFlashCmdAndAddr:
0000194C  4E56 0000 2659          link      A6,#0
00001950  48E7 2020 2660          movem.l   D2/A2,-(A7)
00001954  45F8 1900 2661          lea       _WriteSPIChar.L,A2
00001958  242E 000C 2662          move.l    12(A6),D2
                    2663   ; WriteSPIChar(cmd);
0000195C  2F2E 0008 2664          move.l    8(A6),-(A7)
00001960  4E92      2665          jsr       (A2)
00001962  584F      2666          addq.w    #4,A7
                    2667   ; WriteSPIChar(addr >> 16);
00001964  2202      2668          move.l    D2,D1
00001966  E081      2669          asr.l     #8,D1
00001968  E081      2670          asr.l     #8,D1
0000196A  2F01      2671          move.l    D1,-(A7)
0000196C  4E92      2672          jsr       (A2)
0000196E  584F      2673          addq.w    #4,A7
                    2674   ; WriteSPIChar(addr >> 8);
00001970  2202      2675          move.l    D2,D1
00001972  E081      2676          asr.l     #8,D1
00001974  2F01      2677          move.l    D1,-(A7)
00001976  4E92      2678          jsr       (A2)
00001978  584F      2679          addq.w    #4,A7
                    2680   ; WriteSPIChar(addr);
0000197A  2F02      2681          move.l    D2,-(A7)
0000197C  4E92      2682          jsr       (A2)
0000197E  584F      2683          addq.w    #4,A7
00001980  4CDF 0404 2684          movem.l   (A7)+,D2/A2
00001984  4E5E      2685          unlk      A6
00001986  4E75      2686          rts
                    2687   ; }
                    2688   ; void WaitFlashIdle(void)
                    2689   ; {
                    2690   _WaitFlashIdle:
                    2691   ; Enable_SPI_CS();
00001988  13FC 00FE 2692          move.b    #254,4227112
0000198C  0040 8028 
                    2693   ; WriteSPIChar(0x05);  // read status
00001990  4878 0005 2694          pea       5
00001994  4EB8 1900 2695          jsr       _WriteSPIChar
00001998  584F      2696          addq.w    #4,A7
                    2697   ; while(WriteSPIChar(0x00) & 0x01){}; // wait until idle
                    2698   WaitFlashIdle_1:
0000199A  42A7      2699          clr.l     -(A7)
0000199C  4EB8 1900 2700          jsr       _WriteSPIChar
000019A0  584F      2701          addq.w    #4,A7
000019A2  C0BC 0000 2702          and.l     #1,D0
000019A6  0001      
000019A8  6702      2703          beq.s     WaitFlashIdle_3
000019AA  60EE      2704          bra       WaitFlashIdle_1
                    2705   WaitFlashIdle_3:
                    2706   ; Disable_SPI_CS();
000019AC  13FC 00FF 2707          move.b    #255,4227112
000019B0  0040 8028 
000019B4  4E75      2708          rts
                    2709   ; }
                    2710   ; void EraseSPIFlashChip(void)
                    2711   ; {
                    2712   _EraseSPIFlashChip:
                    2713   ; SendFlashCmd(0x06);  // write enable
000019B6  4878 0006 2714          pea       6
000019BA  4EB8 192A 2715          jsr       _SendFlashCmd
000019BE  584F      2716          addq.w    #4,A7
                    2717   ; SendFlashCmd(0xC7);  // erase chip
000019C0  4878 00C7 2718          pea       199
000019C4  4EB8 192A 2719          jsr       _SendFlashCmd
000019C8  584F      2720          addq.w    #4,A7
                    2721   ; WaitFlashIdle();
000019CA  4EB8 1988 2722          jsr       _WaitFlashIdle
000019CE  4E75      2723          rts
                    2724   ; }
                    2725   ; void SPIFlashProgram(int AddressOffset, int ByteData)
                    2726   ; {
                    2727   _SPIFlashProgram:
000019D0  4E56 FFFC 2728          link      A6,#-4
                    2729   ; int readbackdata;
                    2730   ; SendFlashCmd(0x06);  // write enable
000019D4  4878 0006 2731          pea       6
000019D8  4EB8 192A 2732          jsr       _SendFlashCmd
000019DC  584F      2733          addq.w    #4,A7
                    2734   ; Enable_SPI_CS();
000019DE  13FC 00FE 2735          move.b    #254,4227112
000019E2  0040 8028 
                    2736   ; SendFlashCmdAndAddr(0x02, AddressOffset); // page program
000019E6  2F2E 0008 2737          move.l    8(A6),-(A7)
000019EA  4878 0002 2738          pea       2
000019EE  4EB8 194C 2739          jsr       _SendFlashCmdAndAddr
000019F2  504F      2740          addq.w    #8,A7
                    2741   ; // if (AddressOffset == 0) {
                    2742   ; //     printf("ByteData: 0x%08x", ByteData);
                    2743   ; // }
                    2744   ; readbackdata = WriteSPIChar(ByteData); // write byte data
000019F4  2F2E 000C 2745          move.l    12(A6),-(A7)
000019F8  4EB8 1900 2746          jsr       _WriteSPIChar
000019FC  584F      2747          addq.w    #4,A7
000019FE  2D40 FFFC 2748          move.l    D0,-4(A6)
                    2749   ; Disable_SPI_CS();
00001A02  13FC 00FF 2750          move.b    #255,4227112
00001A06  0040 8028 
                    2751   ; WaitFlashIdle();  // wait idle
00001A0A  4EB8 1988 2752          jsr       _WaitFlashIdle
00001A0E  4E5E      2753          unlk      A6
00001A10  4E75      2754          rts
                    2755   ; }
                    2756   ; void WriteSPIFlashData(int FlashAddress, unsigned char *MemoryAddress, int size)
                    2757   ; {
                    2758   _WriteSPIFlashData:
00001A12  4E56 0000 2759          link      A6,#0
00001A16  2F02      2760          move.l    D2,-(A7)
                    2761   ; int addressOffset = 0;
00001A18  4282      2762          clr.l     D2
                    2763   ; for (addressOffset = 0; addressOffset < size; addressOffset++) {
00001A1A  4282      2764          clr.l     D2
                    2765   WriteSPIFlashData_1:
00001A1C  B4AE 0010 2766          cmp.l     16(A6),D2
00001A20  6C00 003C 2767          bge       WriteSPIFlashData_3
                    2768   ; SPIFlashProgram(addressOffset + FlashAddress, MemoryAddress[addressOffset]);
00001A24  206E 000C 2769          move.l    12(A6),A0
00001A28  1230 2800 2770          move.b    0(A0,D2.L),D1
00001A2C  C2BC 0000 2771          and.l     #255,D1
00001A30  00FF      
00001A32  2F01      2772          move.l    D1,-(A7)
00001A34  2202      2773          move.l    D2,D1
00001A36  D2AE 0008 2774          add.l     8(A6),D1
00001A3A  2F01      2775          move.l    D1,-(A7)
00001A3C  4EB8 19D0 2776          jsr       _SPIFlashProgram
00001A40  504F      2777          addq.w    #8,A7
                    2778   ; if (addressOffset % 32768 == 0){
00001A42  2002      2779          move.l    D2,D0
00001A44  C0BC 0000 2780          and.l     #32767,D0
00001A48  7FFF      
00001A4A  660E      2781          bne.s     WriteSPIFlashData_4
                    2782   ; printf(".");
00001A4C  4879 0000 2783          pea       @lab5k_22.L
00001A50  4D26      
00001A52  4EB9 0000 2784          jsr       _printf
00001A56  3F54      
00001A58  584F      2785          addq.w    #4,A7
                    2786   WriteSPIFlashData_4:
00001A5A  5282      2787          addq.l    #1,D2
00001A5C  60BE      2788          bra       WriteSPIFlashData_1
                    2789   WriteSPIFlashData_3:
00001A5E  241F      2790          move.l    (A7)+,D2
00001A60  4E5E      2791          unlk      A6
00001A62  4E75      2792          rts
                    2793   ; }
                    2794   ; }
                    2795   ; }
                    2796   ; int SPIFlashRead(int AddressOffset)
                    2797   ; {
                    2798   _SPIFlashRead:
00001A64  4E56 FFFC 2799          link      A6,#-4
                    2800   ; int data;
                    2801   ; Enable_SPI_CS();
00001A68  13FC 00FE 2802          move.b    #254,4227112
00001A6C  0040 8028 
                    2803   ; SendFlashCmdAndAddr(0x03, AddressOffset); // read
00001A70  2F2E 0008 2804          move.l    8(A6),-(A7)
00001A74  4878 0003 2805          pea       3
00001A78  4EB8 194C 2806          jsr       _SendFlashCmdAndAddr
00001A7C  504F      2807          addq.w    #8,A7
                    2808   ; data = WriteSPIChar(0x00); // dummy
00001A7E  42A7      2809          clr.l     -(A7)
00001A80  4EB8 1900 2810          jsr       _WriteSPIChar
00001A84  584F      2811          addq.w    #4,A7
00001A86  2D40 FFFC 2812          move.l    D0,-4(A6)
                    2813   ; // if (AddressOffset == 0) {
                    2814   ; //     printf("ByteData: 0x%08x", data);
                    2815   ; // }
                    2816   ; Disable_SPI_CS();
00001A8A  13FC 00FF 2817          move.b    #255,4227112
00001A8E  0040 8028 
                    2818   ; return data;
00001A92  202E FFFC 2819          move.l    -4(A6),D0
00001A96  4E5E      2820          unlk      A6
00001A98  4E75      2821          rts
                    2822   ; }
                    2823   ; void ReadSPIFlashData(int FlashAddress, unsigned char *MemoryAddress, int size)
                    2824   ; {
                    2825   _ReadSPIFlashData:
00001A9A  4E56 0000 2826          link      A6,#0
00001A9E  2F02      2827          move.l    D2,-(A7)
                    2828   ; int addressOffset;
                    2829   ; for (addressOffset = 0; addressOffset < size; addressOffset++)
00001AA0  4282      2830          clr.l     D2
                    2831   ReadSPIFlashData_1:
00001AA2  B4AE 0010 2832          cmp.l     16(A6),D2
00001AA6  6C1A      2833          bge.s     ReadSPIFlashData_3
                    2834   ; {
                    2835   ; MemoryAddress[addressOffset] = SPIFlashRead(FlashAddress+addressOffset);
00001AA8  222E 0008 2836          move.l    8(A6),D1
00001AAC  D282      2837          add.l     D2,D1
00001AAE  2F01      2838          move.l    D1,-(A7)
00001AB0  4EB8 1A64 2839          jsr       _SPIFlashRead
00001AB4  584F      2840          addq.w    #4,A7
00001AB6  206E 000C 2841          move.l    12(A6),A0
00001ABA  1180 2800 2842          move.b    D0,0(A0,D2.L)
00001ABE  5282      2843          addq.l    #1,D2
00001AC0  60E0      2844          bra       ReadSPIFlashData_1
                    2845   ReadSPIFlashData_3:
00001AC2  241F      2846          move.l    (A7)+,D2
00001AC4  4E5E      2847          unlk      A6
00001AC6  4E75      2848          rts
                    2849   ; }
                    2850   ; }
                    2851   ; /*******************************************************************
                    2852   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    2853   ; ********************************************************************/
                    2854   ; void ProgramFlashChip(void)
                    2855   ; {
                    2856   _ProgramFlashChip:
00001AC8  4E56 FF00 2857          link      A6,#-256
00001ACC  48E7 3C30 2858          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00001AD0  45F9 0000 2859          lea       _printf.L,A2
00001AD4  3F54      
00001AD6  47EE FF00 2860          lea       -256(A6),A3
                    2861   ; //
                    2862   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    2863   ; // TODO : then verify by reading it back and comparing to memory
                    2864   ; //
                    2865   ; unsigned char * dataPtr = 0x08000000;
00001ADA  263C 0800 2866          move.l    #134217728,D3
00001ADE  0000      
                    2867   ; int flashAddress = 0;
00001AE0  4285      2868          clr.l     D5
                    2869   ; int i = 0;
00001AE2  4284      2870          clr.l     D4
                    2871   ; unsigned char readBuffer[256];
                    2872   ; int bufferOffset = 0;
00001AE4  4282      2873          clr.l     D2
                    2874   ; printf("\n\rErasing\n\r");
00001AE6  4879 0000 2875          pea       @lab5k_23.L
00001AEA  4D28      
00001AEC  4E92      2876          jsr       (A2)
00001AEE  584F      2877          addq.w    #4,A7
                    2878   ; EraseSPIFlashChip();
00001AF0  4EB8 19B6 2879          jsr       _EraseSPIFlashChip
                    2880   ; printf("Writing Program to memory \n\r");
00001AF4  4879 0000 2881          pea       @lab5k_24.L
00001AF8  4D34      
00001AFA  4E92      2882          jsr       (A2)
00001AFC  584F      2883          addq.w    #4,A7
                    2884   ; WriteSPIFlashData(0, dataPtr, 262144); // 256kB = 256 * 1024 = 262144
00001AFE  4879 0004 2885          pea       262144
00001B02  0000      
00001B04  2F03      2886          move.l    D3,-(A7)
00001B06  42A7      2887          clr.l     -(A7)
00001B08  4EB8 1A12 2888          jsr       _WriteSPIFlashData
00001B0C  DEFC 000C 2889          add.w     #12,A7
                    2890   ; printf("Writing Done\n\r");
00001B10  4879 0000 2891          pea       @lab5k_25.L
00001B14  4D52      
00001B16  4E92      2892          jsr       (A2)
00001B18  584F      2893          addq.w    #4,A7
                    2894   ; dataPtr = 0x08000000; // reset address
00001B1A  263C 0800 2895          move.l    #134217728,D3
00001B1E  0000      
                    2896   ; printf("Reading Program from memory\n\r");
00001B20  4879 0000 2897          pea       @lab5k_26.L
00001B24  4D62      
00001B26  4E92      2898          jsr       (A2)
00001B28  584F      2899          addq.w    #4,A7
                    2900   ; for (i = 0; i < 1024; i++) {
00001B2A  4284      2901          clr.l     D4
                    2902   ProgramFlashChip_1:
00001B2C  0C84 0000 2903          cmp.l     #1024,D4
00001B30  0400      
00001B32  6C00 0090 2904          bge       ProgramFlashChip_3
                    2905   ; ReadSPIFlashData(flashAddress, readBuffer, 256);
00001B36  4878 0100 2906          pea       256
00001B3A  2F0B      2907          move.l    A3,-(A7)
00001B3C  2F05      2908          move.l    D5,-(A7)
00001B3E  4EB8 1A9A 2909          jsr       _ReadSPIFlashData
00001B42  DEFC 000C 2910          add.w     #12,A7
                    2911   ; for (bufferOffset = 0; bufferOffset < 256; bufferOffset++){
00001B46  4282      2912          clr.l     D2
                    2913   ProgramFlashChip_4:
00001B48  0C82 0000 2914          cmp.l     #256,D2
00001B4C  0100      
00001B4E  6C00 0042 2915          bge       ProgramFlashChip_6
                    2916   ; if (dataPtr[bufferOffset] != readBuffer[bufferOffset]){
00001B52  2043      2917          move.l    D3,A0
00001B54  1030 2800 2918          move.b    0(A0,D2.L),D0
00001B58  B033 2800 2919          cmp.b     0(A3,D2.L),D0
00001B5C  6730      2920          beq.s     ProgramFlashChip_7
                    2921   ; printf("\r\nERROR: DATA Mismatch at addr 0x%08x. WRITE: 0x%02x READ: 0x%02x\r\n", &dataPtr[bufferOffset], dataPtr[bufferOffset], readBuffer[bufferOffset]);
00001B5E  1233 2800 2922          move.b    0(A3,D2.L),D1
00001B62  C2BC 0000 2923          and.l     #255,D1
00001B66  00FF      
00001B68  2F01      2924          move.l    D1,-(A7)
00001B6A  2043      2925          move.l    D3,A0
00001B6C  1230 2800 2926          move.b    0(A0,D2.L),D1
00001B70  C2BC 0000 2927          and.l     #255,D1
00001B74  00FF      
00001B76  2F01      2928          move.l    D1,-(A7)
00001B78  2203      2929          move.l    D3,D1
00001B7A  D282      2930          add.l     D2,D1
00001B7C  2F01      2931          move.l    D1,-(A7)
00001B7E  4879 0000 2932          pea       @lab5k_27.L
00001B82  4D80      
00001B84  4E92      2933          jsr       (A2)
00001B86  DEFC 0010 2934          add.w     #16,A7
                    2935   ; return;
00001B8A  6000 0042 2936          bra       ProgramFlashChip_9
                    2937   ProgramFlashChip_7:
00001B8E  5282      2938          addq.l    #1,D2
00001B90  60B6      2939          bra       ProgramFlashChip_4
                    2940   ProgramFlashChip_6:
                    2941   ; }
                    2942   ; }
                    2943   ; flashAddress += 256;
00001B92  0685 0000 2944          add.l     #256,D5
00001B96  0100      
                    2945   ; dataPtr += 256;
00001B98  0683 0000 2946          add.l     #256,D3
00001B9C  0100      
                    2947   ; if (i % 128 == 0){
00001B9E  2F04      2948          move.l    D4,-(A7)
00001BA0  4878 0080 2949          pea       128
00001BA4  4EB9 0000 2950          jsr       LDIV
00001BA8  3E88      
00001BAA  202F 0004 2951          move.l    4(A7),D0
00001BAE  504F      2952          addq.w    #8,A7
00001BB0  4A80      2953          tst.l     D0
00001BB2  660A      2954          bne.s     ProgramFlashChip_10
                    2955   ; printf(".");
00001BB4  4879 0000 2956          pea       @lab5k_22.L
00001BB8  4D26      
00001BBA  4E92      2957          jsr       (A2)
00001BBC  584F      2958          addq.w    #4,A7
                    2959   ProgramFlashChip_10:
00001BBE  5284      2960          addq.l    #1,D4
00001BC0  6000 FF6A 2961          bra       ProgramFlashChip_1
                    2962   ProgramFlashChip_3:
                    2963   ; }
                    2964   ; }
                    2965   ; printf("PASS\n\r");
00001BC4  4879 0000 2966          pea       @lab5k_28.L
00001BC8  4DC4      
00001BCA  4E92      2967          jsr       (A2)
00001BCC  584F      2968          addq.w    #4,A7
                    2969   ProgramFlashChip_9:
00001BCE  4CDF 0C3C 2970          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001BD2  4E5E      2971          unlk      A6
00001BD4  4E75      2972          rts
                    2973   ; }
                    2974   ; /*************************************************************************
                    2975   ; ** Load a program from SPI Flash Chip and copy to Dram
                    2976   ; **************************************************************************/
                    2977   ; void LoadFromFlashChip(void)
                    2978   ; {
                    2979   _LoadFromFlashChip:
00001BD6  4E56 FF00 2980          link      A6,#-256
00001BDA  48E7 3C30 2981          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00001BDE  45F9 0000 2982          lea       _printf.L,A2
00001BE2  3F54      
00001BE4  47EE FF00 2983          lea       -256(A6),A3
                    2984   ; unsigned int flashAddress = 0;
00001BE8  4285      2985          clr.l     D5
                    2986   ; unsigned char * dataPtr = 0x08000000;
00001BEA  283C 0800 2987          move.l    #134217728,D4
00001BEE  0000      
                    2988   ; unsigned int i = 0, j = 0;
00001BF0  4283      2989          clr.l     D3
00001BF2  4282      2990          clr.l     D2
                    2991   ; unsigned char readBuffer[256];
                    2992   ; printf("\r\nLoading Program From SPI Flash....");
00001BF4  4879 0000 2993          pea       @lab5k_29.L
00001BF8  4DCC      
00001BFA  4E92      2994          jsr       (A2)
00001BFC  584F      2995          addq.w    #4,A7
                    2996   ; //
                    2997   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2998   ; //
                    2999   ; for (i = 0; i < 1024; i++){
00001BFE  4283      3000          clr.l     D3
                    3001   LoadFromFlashChip_1:
00001C00  0C83 0000 3002          cmp.l     #1024,D3
00001C04  0400      
00001C06  6400 0076 3003          bhs       LoadFromFlashChip_3
                    3004   ; ReadSPIFlashData(flashAddress, readBuffer, 256);
00001C0A  4878 0100 3005          pea       256
00001C0E  2F0B      3006          move.l    A3,-(A7)
00001C10  2F05      3007          move.l    D5,-(A7)
00001C12  4EB8 1A9A 3008          jsr       _ReadSPIFlashData
00001C16  DEFC 000C 3009          add.w     #12,A7
                    3010   ; if (i == 0) {
00001C1A  4A83      3011          tst.l     D3
00001C1C  661A      3012          bne.s     LoadFromFlashChip_6
                    3013   ; if (readBuffer[0] == 0xFF) {
00001C1E  1013      3014          move.b    (A3),D0
00001C20  C07C 00FF 3015          and.w     #255,D0
00001C24  0C40 00FF 3016          cmp.w     #255,D0
00001C28  660E      3017          bne.s     LoadFromFlashChip_6
                    3018   ; printf("garbage value read!\r\n");
00001C2A  4879 0000 3019          pea       @lab5k_30.L
00001C2E  4DF2      
00001C30  4E92      3020          jsr       (A2)
00001C32  584F      3021          addq.w    #4,A7
                    3022   ; return;
00001C34  6000 0052 3023          bra       LoadFromFlashChip_8
                    3024   LoadFromFlashChip_6:
                    3025   ; }
                    3026   ; }
                    3027   ; for (j = 0; j < 256; j++){
00001C38  4282      3028          clr.l     D2
                    3029   LoadFromFlashChip_9:
00001C3A  0C82 0000 3030          cmp.l     #256,D2
00001C3E  0100      
00001C40  640C      3031          bhs.s     LoadFromFlashChip_11
                    3032   ; dataPtr[j] = readBuffer[j];
00001C42  2044      3033          move.l    D4,A0
00001C44  11B3 2800 3034          move.b    0(A3,D2.L),0(A0,D2.L)
00001C48  2800      
00001C4A  5282      3035          addq.l    #1,D2
00001C4C  60EC      3036          bra       LoadFromFlashChip_9
                    3037   LoadFromFlashChip_11:
                    3038   ; }
                    3039   ; dataPtr+=256;
00001C4E  0684 0000 3040          add.l     #256,D4
00001C52  0100      
                    3041   ; flashAddress+=256;
00001C54  0685 0000 3042          add.l     #256,D5
00001C58  0100      
                    3043   ; if (i % 128 == 0){
00001C5A  2F03      3044          move.l    D3,-(A7)
00001C5C  4878 0080 3045          pea       128
00001C60  4EB9 0000 3046          jsr       ULDIV
00001C64  3E76      
00001C66  202F 0004 3047          move.l    4(A7),D0
00001C6A  504F      3048          addq.w    #8,A7
00001C6C  4A80      3049          tst.l     D0
00001C6E  660A      3050          bne.s     LoadFromFlashChip_12
                    3051   ; printf(".");
00001C70  4879 0000 3052          pea       @lab5k_22.L
00001C74  4D26      
00001C76  4E92      3053          jsr       (A2)
00001C78  584F      3054          addq.w    #4,A7
                    3055   LoadFromFlashChip_12:
00001C7A  5283      3056          addq.l    #1,D3
00001C7C  6082      3057          bra       LoadFromFlashChip_1
                    3058   LoadFromFlashChip_3:
                    3059   ; }
                    3060   ; }
                    3061   ; printf("\r\nDone loading.\r\n");
00001C7E  4879 0000 3062          pea       @lab5k_31.L
00001C82  4E08      
00001C84  4E92      3063          jsr       (A2)
00001C86  584F      3064          addq.w    #4,A7
                    3065   LoadFromFlashChip_8:
00001C88  4CDF 0C3C 3066          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001C8C  4E5E      3067          unlk      A6
00001C8E  4E75      3068          rts
                    3069   ; }
                    3070   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    3071   ; // IMPORTANT
                    3072   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    3073   ; // has to be done with an interrupt (IRQ Level 6)
                    3074   ; //
                    3075   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    3076   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    3077   ; //
                    3078   ; // on return from the IRQ service handler, the first access to the user memory program space
                    3079   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    3080   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    3081   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    3082   ; // program area
                    3083   ; //
                    3084   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    3085   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    3086   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    3087   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    3088   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    3089   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    3090   ; void DumpRegisters()
                    3091   ; {
                    3092   _DumpRegisters:
00001C90  48E7 3F3C 3093          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001C94  45F9 0000 3094          lea       _putch.L,A2
00001C98  3F96      
00001C9A  47F9 0000 3095          lea       _printf.L,A3
00001C9E  3F54      
00001CA0  49F9 0B00 3096          lea       _SR.L,A4
00001CA4  012C      
00001CA6  4BF9 0B00 3097          lea       _WatchPointString.L,A5
00001CAA  01C2      
                    3098   ; short i, x, j, k;
                    3099   ; unsigned char c, * BytePointer;
                    3100   ; // buld up strings for displaying watchpoints
                    3101   ; for (x = 0; x < (short)(8); x++)
00001CAC  4242      3102          clr.w     D2
                    3103   DumpRegisters_1:
00001CAE  0C42 0008 3104          cmp.w     #8,D2
00001CB2  6C00 01C6 3105          bge       DumpRegisters_3
                    3106   ; {
                    3107   ; if (WatchPointSetOrCleared[x] == 1)
00001CB6  48C2      3108          ext.l     D2
00001CB8  2002      3109          move.l    D2,D0
00001CBA  E588      3110          lsl.l     #2,D0
00001CBC  41F9 0B00 3111          lea       _WatchPointSetOrCleared.L,A0
00001CC0  01A2      
00001CC2  2030 0800 3112          move.l    0(A0,D0.L),D0
00001CC6  0C80 0000 3113          cmp.l     #1,D0
00001CCA  0001      
00001CCC  6600 0186 3114          bne       DumpRegisters_4
                    3115   ; {
                    3116   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]);
00001CD0  48C2      3117          ext.l     D2
00001CD2  2202      3118          move.l    D2,D1
00001CD4  E589      3119          lsl.l     #2,D1
00001CD6  41F9 0B00 3120          lea       _WatchPointAddress.L,A0
00001CDA  0182      
00001CDC  2F30 1800 3121          move.l    0(A0,D1.L),-(A7)
00001CE0  4879 0000 3122          pea       @lab5k_32.L
00001CE4  4E1A      
00001CE6  220D      3123          move.l    A5,D1
00001CE8  48C2      3124          ext.l     D2
00001CEA  2F00      3125          move.l    D0,-(A7)
00001CEC  2002      3126          move.l    D2,D0
00001CEE  C1FC 0064 3127          muls      #100,D0
00001CF2  D280      3128          add.l     D0,D1
00001CF4  201F      3129          move.l    (A7)+,D0
00001CF6  2F01      3130          move.l    D1,-(A7)
00001CF8  4EB9 0000 3131          jsr       _sprintf
00001CFC  402E      
00001CFE  DEFC 000C 3132          add.w     #12,A7
                    3133   ; BytePointer = (char*)(WatchPointAddress[x]);
00001D02  48C2      3134          ext.l     D2
00001D04  2002      3135          move.l    D2,D0
00001D06  E588      3136          lsl.l     #2,D0
00001D08  41F9 0B00 3137          lea       _WatchPointAddress.L,A0
00001D0C  0182      
00001D0E  2A30 0800 3138          move.l    0(A0,D0.L),D5
                    3139   ; for (j = 0; j < (short)(16); j += 2)
00001D12  4243      3140          clr.w     D3
                    3141   DumpRegisters_6:
00001D14  0C43 0010 3142          cmp.w     #16,D3
00001D18  6C00 0082 3143          bge       DumpRegisters_8
                    3144   ; {
                    3145   ; for (k = 0; k < (short)(2); k++)
00001D1C  4246      3146          clr.w     D6
                    3147   DumpRegisters_9:
00001D1E  0C46 0002 3148          cmp.w     #2,D6
00001D22  6C00 0052 3149          bge       DumpRegisters_11
                    3150   ; {
                    3151   ; sprintf(TempString, "%02X", BytePointer[j + k]);
00001D26  2045      3152          move.l    D5,A0
00001D28  48C3      3153          ext.l     D3
00001D2A  2203      3154          move.l    D3,D1
00001D2C  48C6      3155          ext.l     D6
00001D2E  D286      3156          add.l     D6,D1
00001D30  1230 1800 3157          move.b    0(A0,D1.L),D1
00001D34  C2BC 0000 3158          and.l     #255,D1
00001D38  00FF      
00001D3A  2F01      3159          move.l    D1,-(A7)
00001D3C  4879 0000 3160          pea       @lab5k_8.L
00001D40  4B7C      
00001D42  4879 0B00 3161          pea       _TempString.L
00001D46  04E2      
00001D48  4EB9 0000 3162          jsr       _sprintf
00001D4C  402E      
00001D4E  DEFC 000C 3163          add.w     #12,A7
                    3164   ; strcat(WatchPointString[x], TempString);
00001D52  4879 0B00 3165          pea       _TempString.L
00001D56  04E2      
00001D58  220D      3166          move.l    A5,D1
00001D5A  48C2      3167          ext.l     D2
00001D5C  2F00      3168          move.l    D0,-(A7)
00001D5E  2002      3169          move.l    D2,D0
00001D60  C1FC 0064 3170          muls      #100,D0
00001D64  D280      3171          add.l     D0,D1
00001D66  201F      3172          move.l    (A7)+,D0
00001D68  2F01      3173          move.l    D1,-(A7)
00001D6A  4EB9 0000 3174          jsr       _strcat
00001D6E  4062      
00001D70  504F      3175          addq.w    #8,A7
00001D72  5246      3176          addq.w    #1,D6
00001D74  60A8      3177          bra       DumpRegisters_9
                    3178   DumpRegisters_11:
                    3179   ; }
                    3180   ; strcat(WatchPointString[x], " ");
00001D76  4879 0000 3181          pea       @lab5k_33.L
00001D7A  4E22      
00001D7C  220D      3182          move.l    A5,D1
00001D7E  48C2      3183          ext.l     D2
00001D80  2F00      3184          move.l    D0,-(A7)
00001D82  2002      3185          move.l    D2,D0
00001D84  C1FC 0064 3186          muls      #100,D0
00001D88  D280      3187          add.l     D0,D1
00001D8A  201F      3188          move.l    (A7)+,D0
00001D8C  2F01      3189          move.l    D1,-(A7)
00001D8E  4EB9 0000 3190          jsr       _strcat
00001D92  4062      
00001D94  504F      3191          addq.w    #8,A7
00001D96  5443      3192          addq.w    #2,D3
00001D98  6000 FF7A 3193          bra       DumpRegisters_6
                    3194   DumpRegisters_8:
                    3195   ; }
                    3196   ; strcat(WatchPointString[x], "  ");
00001D9C  4879 0000 3197          pea       @lab5k_9.L
00001DA0  4B82      
00001DA2  220D      3198          move.l    A5,D1
00001DA4  48C2      3199          ext.l     D2
00001DA6  2F00      3200          move.l    D0,-(A7)
00001DA8  2002      3201          move.l    D2,D0
00001DAA  C1FC 0064 3202          muls      #100,D0
00001DAE  D280      3203          add.l     D0,D1
00001DB0  201F      3204          move.l    (A7)+,D0
00001DB2  2F01      3205          move.l    D1,-(A7)
00001DB4  4EB9 0000 3206          jsr       _strcat
00001DB8  4062      
00001DBA  504F      3207          addq.w    #8,A7
                    3208   ; BytePointer = (char*)(WatchPointAddress[x]);
00001DBC  48C2      3209          ext.l     D2
00001DBE  2002      3210          move.l    D2,D0
00001DC0  E588      3211          lsl.l     #2,D0
00001DC2  41F9 0B00 3212          lea       _WatchPointAddress.L,A0
00001DC6  0182      
00001DC8  2A30 0800 3213          move.l    0(A0,D0.L),D5
                    3214   ; for (j = 0; j < (short)(16); j++)
00001DCC  4243      3215          clr.w     D3
                    3216   DumpRegisters_12:
00001DCE  0C43 0010 3217          cmp.w     #16,D3
00001DD2  6C00 007E 3218          bge       DumpRegisters_14
                    3219   ; {
                    3220   ; c = ((char)(BytePointer[j]) & 0x7f);
00001DD6  2045      3221          move.l    D5,A0
00001DD8  48C3      3222          ext.l     D3
00001DDA  1030 3800 3223          move.b    0(A0,D3.L),D0
00001DDE  C03C 007F 3224          and.b     #127,D0
00001DE2  1E00      3225          move.b    D0,D7
                    3226   ; if ((c > (char)(0x7f)) || (c < (char)(' ')))
00001DE4  0C07 007F 3227          cmp.b     #127,D7
00001DE8  6206      3228          bhi.s     DumpRegisters_17
00001DEA  0C07 0020 3229          cmp.b     #32,D7
00001DEE  6416      3230          bhs.s     DumpRegisters_15
                    3231   DumpRegisters_17:
                    3232   ; sprintf(TempString, ".");
00001DF0  4879 0000 3233          pea       @lab5k_22.L
00001DF4  4D26      
00001DF6  4879 0B00 3234          pea       _TempString.L
00001DFA  04E2      
00001DFC  4EB9 0000 3235          jsr       _sprintf
00001E00  402E      
00001E02  504F      3236          addq.w    #8,A7
00001E04  6026      3237          bra.s     DumpRegisters_16
                    3238   DumpRegisters_15:
                    3239   ; else
                    3240   ; sprintf(TempString, "%c", BytePointer[j]);
00001E06  2045      3241          move.l    D5,A0
00001E08  48C3      3242          ext.l     D3
00001E0A  1230 3800 3243          move.b    0(A0,D3.L),D1
00001E0E  C2BC 0000 3244          and.l     #255,D1
00001E12  00FF      
00001E14  2F01      3245          move.l    D1,-(A7)
00001E16  4879 0000 3246          pea       @lab5k_34.L
00001E1A  4E24      
00001E1C  4879 0B00 3247          pea       _TempString.L
00001E20  04E2      
00001E22  4EB9 0000 3248          jsr       _sprintf
00001E26  402E      
00001E28  DEFC 000C 3249          add.w     #12,A7
                    3250   DumpRegisters_16:
                    3251   ; strcat(WatchPointString[x], TempString);
00001E2C  4879 0B00 3252          pea       _TempString.L
00001E30  04E2      
00001E32  220D      3253          move.l    A5,D1
00001E34  48C2      3254          ext.l     D2
00001E36  2F00      3255          move.l    D0,-(A7)
00001E38  2002      3256          move.l    D2,D0
00001E3A  C1FC 0064 3257          muls      #100,D0
00001E3E  D280      3258          add.l     D0,D1
00001E40  201F      3259          move.l    (A7)+,D0
00001E42  2F01      3260          move.l    D1,-(A7)
00001E44  4EB9 0000 3261          jsr       _strcat
00001E48  4062      
00001E4A  504F      3262          addq.w    #8,A7
00001E4C  5243      3263          addq.w    #1,D3
00001E4E  6000 FF7E 3264          bra       DumpRegisters_12
                    3265   DumpRegisters_14:
00001E52  6020      3266          bra.s     DumpRegisters_5
                    3267   DumpRegisters_4:
                    3268   ; }
                    3269   ; }
                    3270   ; else
                    3271   ; strcpy(WatchPointString[x], "");
00001E54  4879 0000 3272          pea       @lab5k_35.L
00001E58  4E28      
00001E5A  220D      3273          move.l    A5,D1
00001E5C  48C2      3274          ext.l     D2
00001E5E  2F00      3275          move.l    D0,-(A7)
00001E60  2002      3276          move.l    D2,D0
00001E62  C1FC 0064 3277          muls      #100,D0
00001E66  D280      3278          add.l     D0,D1
00001E68  201F      3279          move.l    (A7)+,D0
00001E6A  2F01      3280          move.l    D1,-(A7)
00001E6C  4EB9 0000 3281          jsr       _strcpy
00001E70  3F86      
00001E72  504F      3282          addq.w    #8,A7
                    3283   DumpRegisters_5:
00001E74  5242      3284          addq.w    #1,D2
00001E76  6000 FE36 3285          bra       DumpRegisters_1
                    3286   DumpRegisters_3:
                    3287   ; }
                    3288   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X", d0, a0);
00001E7A  2F39 0B00 3289          move.l    _a0.L,-(A7)
00001E7E  0104      
00001E80  2F39 0B00 3290          move.l    _d0.L,-(A7)
00001E84  00E4      
00001E86  4879 0000 3291          pea       @lab5k_36.L
00001E8A  4E2A      
00001E8C  4E93      3292          jsr       (A3)
00001E8E  DEFC 000C 3293          add.w     #12,A7
                    3294   ; printf("\r\n D1 = $%08X  A1 = $%08X", d1, a1);
00001E92  2F39 0B00 3295          move.l    _a1.L,-(A7)
00001E96  0108      
00001E98  2F39 0B00 3296          move.l    _d1.L,-(A7)
00001E9C  00E8      
00001E9E  4879 0000 3297          pea       @lab5k_37.L
00001EA2  4E46      
00001EA4  4E93      3298          jsr       (A3)
00001EA6  DEFC 000C 3299          add.w     #12,A7
                    3300   ; printf("\r\n D2 = $%08X  A2 = $%08X", d2, a2);
00001EAA  2F39 0B00 3301          move.l    _a2.L,-(A7)
00001EAE  010C      
00001EB0  2F39 0B00 3302          move.l    _d2.L,-(A7)
00001EB4  00EC      
00001EB6  4879 0000 3303          pea       @lab5k_38.L
00001EBA  4E60      
00001EBC  4E93      3304          jsr       (A3)
00001EBE  DEFC 000C 3305          add.w     #12,A7
                    3306   ; printf("\r\n D3 = $%08X  A3 = $%08X", d3, a3);
00001EC2  2F39 0B00 3307          move.l    _a3.L,-(A7)
00001EC6  0110      
00001EC8  2F39 0B00 3308          move.l    _d3.L,-(A7)
00001ECC  00F0      
00001ECE  4879 0000 3309          pea       @lab5k_39.L
00001ED2  4E7A      
00001ED4  4E93      3310          jsr       (A3)
00001ED6  DEFC 000C 3311          add.w     #12,A7
                    3312   ; printf("\r\n D4 = $%08X  A4 = $%08X", d4, a4);
00001EDA  2F39 0B00 3313          move.l    _a4.L,-(A7)
00001EDE  0114      
00001EE0  2F39 0B00 3314          move.l    _d4.L,-(A7)
00001EE4  00F4      
00001EE6  4879 0000 3315          pea       @lab5k_40.L
00001EEA  4E94      
00001EEC  4E93      3316          jsr       (A3)
00001EEE  DEFC 000C 3317          add.w     #12,A7
                    3318   ; printf("\r\n D5 = $%08X  A5 = $%08X", d5, a5);
00001EF2  2F39 0B00 3319          move.l    _a5.L,-(A7)
00001EF6  0118      
00001EF8  2F39 0B00 3320          move.l    _d5.L,-(A7)
00001EFC  00F8      
00001EFE  4879 0000 3321          pea       @lab5k_41.L
00001F02  4EAE      
00001F04  4E93      3322          jsr       (A3)
00001F06  DEFC 000C 3323          add.w     #12,A7
                    3324   ; printf("\r\n D6 = $%08X  A6 = $%08X", d6, a6);
00001F0A  2F39 0B00 3325          move.l    _a6.L,-(A7)
00001F0E  011C      
00001F10  2F39 0B00 3326          move.l    _d6.L,-(A7)
00001F14  00FC      
00001F16  4879 0000 3327          pea       @lab5k_42.L
00001F1A  4EC8      
00001F1C  4E93      3328          jsr       (A3)
00001F1E  DEFC 000C 3329          add.w     #12,A7
                    3330   ; printf("\r\n D7 = $%08X  A7 = $%08X", d7, ((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP);
00001F22  3214      3331          move.w    (A4),D1
00001F24  C27C 2000 3332          and.w     #8192,D1
00001F28  0C41 2000 3333          cmp.w     #8192,D1
00001F2C  6608      3334          bne.s     DumpRegisters_18
00001F2E  2239 0B00 3335          move.l    _SSP.L,D1
00001F32  0124      
00001F34  6006      3336          bra.s     DumpRegisters_19
                    3337   DumpRegisters_18:
00001F36  2239 0B00 3338          move.l    _USP.L,D1
00001F3A  0128      
                    3339   DumpRegisters_19:
00001F3C  2F01      3340          move.l    D1,-(A7)
00001F3E  2F39 0B00 3341          move.l    _d7.L,-(A7)
00001F42  0100      
00001F44  4879 0000 3342          pea       @lab5k_43.L
00001F48  4EE2      
00001F4A  4E93      3343          jsr       (A3)
00001F4C  DEFC 000C 3344          add.w     #12,A7
                    3345   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP);
00001F50  2F39 0B00 3346          move.l    _USP.L,-(A7)
00001F54  0128      
00001F56  4879 0000 3347          pea       @lab5k_44.L
00001F5A  4EFC      
00001F5C  4E93      3348          jsr       (A3)
00001F5E  504F      3349          addq.w    #8,A7
                    3350   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP);
00001F60  2F39 0B00 3351          move.l    _SSP.L,-(A7)
00001F64  0124      
00001F66  4879 0000 3352          pea       @lab5k_45.L
00001F6A  4F1A      
00001F6C  4E93      3353          jsr       (A3)
00001F6E  504F      3354          addq.w    #8,A7
                    3355   ; printf("\r\n SR = $%04X   ", SR);
00001F70  3214      3356          move.w    (A4),D1
00001F72  C2BC 0000 3357          and.l     #65535,D1
00001F76  FFFF      
00001F78  2F01      3358          move.l    D1,-(A7)
00001F7A  4879 0000 3359          pea       @lab5k_46.L
00001F7E  4F3C      
00001F80  4E93      3360          jsr       (A3)
00001F82  504F      3361          addq.w    #8,A7
                    3362   ; // display the status word in characters etc.
                    3363   ; printf("   [");
00001F84  4879 0000 3364          pea       @lab5k_47.L
00001F88  4F4E      
00001F8A  4E93      3365          jsr       (A3)
00001F8C  584F      3366          addq.w    #4,A7
                    3367   ; if ((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T'); else putchar('-');      // Trace bit(bit 15)
00001F8E  3014      3368          move.w    (A4),D0
00001F90  C07C 8000 3369          and.w     #32768,D0
00001F94  0C40 8000 3370          cmp.w     #32768,D0
00001F98  660A      3371          bne.s     DumpRegisters_20
00001F9A  4878 0054 3372          pea       84
00001F9E  4E92      3373          jsr       (A2)
00001FA0  584F      3374          addq.w    #4,A7
00001FA2  6008      3375          bra.s     DumpRegisters_21
                    3376   DumpRegisters_20:
00001FA4  4878 002D 3377          pea       45
00001FA8  4E92      3378          jsr       (A2)
00001FAA  584F      3379          addq.w    #4,A7
                    3380   DumpRegisters_21:
                    3381   ; if ((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S'); else putchar('U');      // supervisor bit  (bit 13)
00001FAC  3014      3382          move.w    (A4),D0
00001FAE  C07C 2000 3383          and.w     #8192,D0
00001FB2  0C40 2000 3384          cmp.w     #8192,D0
00001FB6  660A      3385          bne.s     DumpRegisters_22
00001FB8  4878 0053 3386          pea       83
00001FBC  4E92      3387          jsr       (A2)
00001FBE  584F      3388          addq.w    #4,A7
00001FC0  6008      3389          bra.s     DumpRegisters_23
                    3390   DumpRegisters_22:
00001FC2  4878 0055 3391          pea       85
00001FC6  4E92      3392          jsr       (A2)
00001FC8  584F      3393          addq.w    #4,A7
                    3394   DumpRegisters_23:
                    3395   ; if ((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1'); else putchar('0');      // IRQ2 Bit (bit 10)
00001FCA  3014      3396          move.w    (A4),D0
00001FCC  C07C 0400 3397          and.w     #1024,D0
00001FD0  0C40 0400 3398          cmp.w     #1024,D0
00001FD4  660A      3399          bne.s     DumpRegisters_24
00001FD6  4878 0031 3400          pea       49
00001FDA  4E92      3401          jsr       (A2)
00001FDC  584F      3402          addq.w    #4,A7
00001FDE  6008      3403          bra.s     DumpRegisters_25
                    3404   DumpRegisters_24:
00001FE0  4878 0030 3405          pea       48
00001FE4  4E92      3406          jsr       (A2)
00001FE6  584F      3407          addq.w    #4,A7
                    3408   DumpRegisters_25:
                    3409   ; if ((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1'); else putchar('0');      // IRQ1 Bit (bit 9)
00001FE8  3014      3410          move.w    (A4),D0
00001FEA  C07C 0200 3411          and.w     #512,D0
00001FEE  0C40 0200 3412          cmp.w     #512,D0
00001FF2  660A      3413          bne.s     DumpRegisters_26
00001FF4  4878 0031 3414          pea       49
00001FF8  4E92      3415          jsr       (A2)
00001FFA  584F      3416          addq.w    #4,A7
00001FFC  6008      3417          bra.s     DumpRegisters_27
                    3418   DumpRegisters_26:
00001FFE  4878 0030 3419          pea       48
00002002  4E92      3420          jsr       (A2)
00002004  584F      3421          addq.w    #4,A7
                    3422   DumpRegisters_27:
                    3423   ; if ((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1'); else putchar('0');      // IRQ0 Bit (bit 8)
00002006  3014      3424          move.w    (A4),D0
00002008  C07C 0100 3425          and.w     #256,D0
0000200C  0C40 0100 3426          cmp.w     #256,D0
00002010  660A      3427          bne.s     DumpRegisters_28
00002012  4878 0031 3428          pea       49
00002016  4E92      3429          jsr       (A2)
00002018  584F      3430          addq.w    #4,A7
0000201A  6008      3431          bra.s     DumpRegisters_29
                    3432   DumpRegisters_28:
0000201C  4878 0030 3433          pea       48
00002020  4E92      3434          jsr       (A2)
00002022  584F      3435          addq.w    #4,A7
                    3436   DumpRegisters_29:
                    3437   ; if ((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X'); else putchar('-');      // X Bit (bit 4)
00002024  3014      3438          move.w    (A4),D0
00002026  C07C 0010 3439          and.w     #16,D0
0000202A  0C40 0010 3440          cmp.w     #16,D0
0000202E  660A      3441          bne.s     DumpRegisters_30
00002030  4878 0058 3442          pea       88
00002034  4E92      3443          jsr       (A2)
00002036  584F      3444          addq.w    #4,A7
00002038  6008      3445          bra.s     DumpRegisters_31
                    3446   DumpRegisters_30:
0000203A  4878 002D 3447          pea       45
0000203E  4E92      3448          jsr       (A2)
00002040  584F      3449          addq.w    #4,A7
                    3450   DumpRegisters_31:
                    3451   ; if ((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N'); else putchar('-');      // N Bit (bit 3)
00002042  3014      3452          move.w    (A4),D0
00002044  C07C 0008 3453          and.w     #8,D0
00002048  0C40 0008 3454          cmp.w     #8,D0
0000204C  660A      3455          bne.s     DumpRegisters_32
0000204E  4878 004E 3456          pea       78
00002052  4E92      3457          jsr       (A2)
00002054  584F      3458          addq.w    #4,A7
00002056  6008      3459          bra.s     DumpRegisters_33
                    3460   DumpRegisters_32:
00002058  4878 002D 3461          pea       45
0000205C  4E92      3462          jsr       (A2)
0000205E  584F      3463          addq.w    #4,A7
                    3464   DumpRegisters_33:
                    3465   ; if ((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z'); else putchar('-');      // Z Bit (bit 2)
00002060  3014      3466          move.w    (A4),D0
00002062  C07C 0004 3467          and.w     #4,D0
00002066  0C40 0004 3468          cmp.w     #4,D0
0000206A  660A      3469          bne.s     DumpRegisters_34
0000206C  4878 005A 3470          pea       90
00002070  4E92      3471          jsr       (A2)
00002072  584F      3472          addq.w    #4,A7
00002074  6008      3473          bra.s     DumpRegisters_35
                    3474   DumpRegisters_34:
00002076  4878 002D 3475          pea       45
0000207A  4E92      3476          jsr       (A2)
0000207C  584F      3477          addq.w    #4,A7
                    3478   DumpRegisters_35:
                    3479   ; if ((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V'); else putchar('-');      // V Bit (bit 1)
0000207E  3014      3480          move.w    (A4),D0
00002080  C07C 0002 3481          and.w     #2,D0
00002084  0C40 0002 3482          cmp.w     #2,D0
00002088  660A      3483          bne.s     DumpRegisters_36
0000208A  4878 0056 3484          pea       86
0000208E  4E92      3485          jsr       (A2)
00002090  584F      3486          addq.w    #4,A7
00002092  6008      3487          bra.s     DumpRegisters_37
                    3488   DumpRegisters_36:
00002094  4878 002D 3489          pea       45
00002098  4E92      3490          jsr       (A2)
0000209A  584F      3491          addq.w    #4,A7
                    3492   DumpRegisters_37:
                    3493   ; if ((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C'); else putchar('-');      // C Bit (bit 0)
0000209C  3014      3494          move.w    (A4),D0
0000209E  C07C 0001 3495          and.w     #1,D0
000020A2  0C40 0001 3496          cmp.w     #1,D0
000020A6  660A      3497          bne.s     DumpRegisters_38
000020A8  4878 0043 3498          pea       67
000020AC  4E92      3499          jsr       (A2)
000020AE  584F      3500          addq.w    #4,A7
000020B0  6008      3501          bra.s     DumpRegisters_39
                    3502   DumpRegisters_38:
000020B2  4878 002D 3503          pea       45
000020B6  4E92      3504          jsr       (A2)
000020B8  584F      3505          addq.w    #4,A7
                    3506   DumpRegisters_39:
                    3507   ; putchar(']');
000020BA  4878 005D 3508          pea       93
000020BE  4E92      3509          jsr       (A2)
000020C0  584F      3510          addq.w    #4,A7
                    3511   ; printf("\r\n PC = $%08X  ", PC);
000020C2  2F39 0B00 3512          move.l    _PC.L,-(A7)
000020C6  0120      
000020C8  4879 0000 3513          pea       @lab5k_48.L
000020CC  4F54      
000020CE  4E93      3514          jsr       (A3)
000020D0  504F      3515          addq.w    #8,A7
                    3516   ; if (*(unsigned short int*)(PC) == 0x4e4e)
000020D2  2039 0B00 3517          move.l    _PC.L,D0
000020D6  0120      
000020D8  2040      3518          move.l    D0,A0
000020DA  3010      3519          move.w    (A0),D0
000020DC  0C40 4E4E 3520          cmp.w     #20046,D0
000020E0  660A      3521          bne.s     DumpRegisters_40
                    3522   ; printf("[@ BREAKPOINT]");
000020E2  4879 0000 3523          pea       @lab5k_49.L
000020E6  4F64      
000020E8  4E93      3524          jsr       (A3)
000020EA  584F      3525          addq.w    #4,A7
                    3526   DumpRegisters_40:
                    3527   ; printf("\r\n");
000020EC  4879 0000 3528          pea       @lab5k_1.L
000020F0  4B04      
000020F2  4E93      3529          jsr       (A3)
000020F4  584F      3530          addq.w    #4,A7
                    3531   ; for (i = 0; i < 8; i++) {
000020F6  4244      3532          clr.w     D4
                    3533   DumpRegisters_42:
000020F8  0C44 0008 3534          cmp.w     #8,D4
000020FC  6C00 0040 3535          bge       DumpRegisters_44
                    3536   ; if (WatchPointSetOrCleared[i] == 1)
00002100  48C4      3537          ext.l     D4
00002102  2004      3538          move.l    D4,D0
00002104  E588      3539          lsl.l     #2,D0
00002106  41F9 0B00 3540          lea       _WatchPointSetOrCleared.L,A0
0000210A  01A2      
0000210C  2030 0800 3541          move.l    0(A0,D0.L),D0
00002110  0C80 0000 3542          cmp.l     #1,D0
00002114  0001      
00002116  6622      3543          bne.s     DumpRegisters_45
                    3544   ; printf("\r\nWP%d = %s", i, WatchPointString[i]);
00002118  220D      3545          move.l    A5,D1
0000211A  48C4      3546          ext.l     D4
0000211C  2F00      3547          move.l    D0,-(A7)
0000211E  2004      3548          move.l    D4,D0
00002120  C1FC 0064 3549          muls      #100,D0
00002124  D280      3550          add.l     D0,D1
00002126  201F      3551          move.l    (A7)+,D0
00002128  2F01      3552          move.l    D1,-(A7)
0000212A  48C4      3553          ext.l     D4
0000212C  2F04      3554          move.l    D4,-(A7)
0000212E  4879 0000 3555          pea       @lab5k_50.L
00002132  4F74      
00002134  4E93      3556          jsr       (A3)
00002136  DEFC 000C 3557          add.w     #12,A7
                    3558   DumpRegisters_45:
0000213A  5244      3559          addq.w    #1,D4
0000213C  60BA      3560          bra       DumpRegisters_42
                    3561   DumpRegisters_44:
0000213E  4CDF 3CFC 3562          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002142  4E75      3563          rts
                    3564   ; }
                    3565   ; }
                    3566   ; // Trace Exception Handler
                    3567   ; void DumpRegistersandPause(void)
                    3568   ; {
                    3569   _DumpRegistersandPause:
00002144  2F0A      3570          move.l    A2,-(A7)
00002146  45F9 0000 3571          lea       _printf.L,A2
0000214A  3F54      
                    3572   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]");
0000214C  4879 0000 3573          pea       @lab5k_51.L
00002150  4F80      
00002152  4E92      3574          jsr       (A2)
00002154  584F      3575          addq.w    #4,A7
                    3576   ; printf("\r\nBreak Points :[Disabled]");
00002156  4879 0000 3577          pea       @lab5k_52.L
0000215A  4FA0      
0000215C  4E92      3578          jsr       (A2)
0000215E  584F      3579          addq.w    #4,A7
                    3580   ; DumpRegisters();
00002160  4EB8 1C90 3581          jsr       _DumpRegisters
                    3582   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002164  4879 0000 3583          pea       @lab5k_53.L
00002168  4FBC      
0000216A  4E92      3584          jsr       (A2)
0000216C  584F      3585          addq.w    #4,A7
                    3586   ; printf("\r\nPress <ESC> to Resume Program");
0000216E  4879 0000 3587          pea       @lab5k_54.L
00002172  4FE8      
00002174  4E92      3588          jsr       (A2)
00002176  584F      3589          addq.w    #4,A7
                    3590   ; menu();
00002178  4EB9 0000 3591          jsr       _menu
0000217C  2D28      
0000217E  245F      3592          move.l    (A7)+,A2
00002180  4E75      3593          rts
                    3594   ; }
                    3595   ; void ChangeRegisters(void)
                    3596   ; {
                    3597   _ChangeRegisters:
00002182  4E56 FFFC 3598          link      A6,#-4
00002186  48E7 303C 3599          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000218A  45F9 0000 3600          lea       _printf.L,A2
0000218E  3F54      
00002190  47EE FFFC 3601          lea       -4(A6),A3
00002194  49F8 148E 3602          lea       _Get8HexDigits.L,A4
00002198  4BF8 1352 3603          lea       __getch.L,A5
                    3604   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    3605   ; int reg_val;
                    3606   ; char c, reg[3];
                    3607   ; reg[0] = tolower(_getch());
0000219C  2F00      3608          move.l    D0,-(A7)
0000219E  4E95      3609          jsr       (A5)
000021A0  2200      3610          move.l    D0,D1
000021A2  201F      3611          move.l    (A7)+,D0
000021A4  2F01      3612          move.l    D1,-(A7)
000021A6  4EB9 0000 3613          jsr       _tolower
000021AA  4002      
000021AC  584F      3614          addq.w    #4,A7
000021AE  1680      3615          move.b    D0,(A3)
                    3616   ; reg[1] = c = tolower(_getch());
000021B0  2F00      3617          move.l    D0,-(A7)
000021B2  4E95      3618          jsr       (A5)
000021B4  2200      3619          move.l    D0,D1
000021B6  201F      3620          move.l    (A7)+,D0
000021B8  2F01      3621          move.l    D1,-(A7)
000021BA  4EB9 0000 3622          jsr       _tolower
000021BE  4002      
000021C0  584F      3623          addq.w    #4,A7
000021C2  1400      3624          move.b    D0,D2
000021C4  1740 0001 3625          move.b    D0,1(A3)
                    3626   ; if (reg[0] == (char)('d')) {    // change data register
000021C8  1013      3627          move.b    (A3),D0
000021CA  0C00 0064 3628          cmp.b     #100,D0
000021CE  6600 00AE 3629          bne       ChangeRegisters_1
                    3630   ; if ((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000021D2  102B 0001 3631          move.b    1(A3),D0
000021D6  0C00 0037 3632          cmp.b     #55,D0
000021DA  6E0A      3633          bgt.s     ChangeRegisters_5
000021DC  102B 0001 3634          move.b    1(A3),D0
000021E0  0C00 0030 3635          cmp.b     #48,D0
000021E4  6C0E      3636          bge.s     ChangeRegisters_3
                    3637   ChangeRegisters_5:
                    3638   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n");
000021E6  4879 0000 3639          pea       @lab5k_55.L
000021EA  5008      
000021EC  4E92      3640          jsr       (A2)
000021EE  584F      3641          addq.w    #4,A7
                    3642   ; return;
000021F0  6000 0244 3643          bra       ChangeRegisters_6
                    3644   ChangeRegisters_3:
                    3645   ; }
                    3646   ; else {
                    3647   ; printf("\r\nD%c = ", c);
000021F4  4882      3648          ext.w     D2
000021F6  48C2      3649          ext.l     D2
000021F8  2F02      3650          move.l    D2,-(A7)
000021FA  4879 0000 3651          pea       @lab5k_56.L
000021FE  5034      
00002200  4E92      3652          jsr       (A2)
00002202  504F      3653          addq.w    #8,A7
                    3654   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
00002204  42A7      3655          clr.l     -(A7)
00002206  4E94      3656          jsr       (A4)
00002208  584F      3657          addq.w    #4,A7
0000220A  2600      3658          move.l    D0,D3
                    3659   ; }
                    3660   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    3661   ; if (c == (char)('0'))
0000220C  0C02 0030 3662          cmp.b     #48,D2
00002210  660A      3663          bne.s     ChangeRegisters_7
                    3664   ; d0 = reg_val;
00002212  23C3 0B00 3665          move.l    D3,_d0.L
00002216  00E4      
00002218  6000 0060 3666          bra       ChangeRegisters_20
                    3667   ChangeRegisters_7:
                    3668   ; else if (c == (char)('1'))
0000221C  0C02 0031 3669          cmp.b     #49,D2
00002220  660A      3670          bne.s     ChangeRegisters_9
                    3671   ; d1 = reg_val;
00002222  23C3 0B00 3672          move.l    D3,_d1.L
00002226  00E8      
00002228  6000 0050 3673          bra       ChangeRegisters_20
                    3674   ChangeRegisters_9:
                    3675   ; else if (c == (char)('2'))
0000222C  0C02 0032 3676          cmp.b     #50,D2
00002230  660A      3677          bne.s     ChangeRegisters_11
                    3678   ; d2 = reg_val;
00002232  23C3 0B00 3679          move.l    D3,_d2.L
00002236  00EC      
00002238  6000 0040 3680          bra       ChangeRegisters_20
                    3681   ChangeRegisters_11:
                    3682   ; else if (c == (char)('3'))
0000223C  0C02 0033 3683          cmp.b     #51,D2
00002240  6608      3684          bne.s     ChangeRegisters_13
                    3685   ; d3 = reg_val;
00002242  23C3 0B00 3686          move.l    D3,_d3.L
00002246  00F0      
00002248  6030      3687          bra.s     ChangeRegisters_20
                    3688   ChangeRegisters_13:
                    3689   ; else if (c == (char)('4'))
0000224A  0C02 0034 3690          cmp.b     #52,D2
0000224E  6608      3691          bne.s     ChangeRegisters_15
                    3692   ; d4 = reg_val;
00002250  23C3 0B00 3693          move.l    D3,_d4.L
00002254  00F4      
00002256  6022      3694          bra.s     ChangeRegisters_20
                    3695   ChangeRegisters_15:
                    3696   ; else if (c == (char)('5'))
00002258  0C02 0035 3697          cmp.b     #53,D2
0000225C  6608      3698          bne.s     ChangeRegisters_17
                    3699   ; d5 = reg_val;
0000225E  23C3 0B00 3700          move.l    D3,_d5.L
00002262  00F8      
00002264  6014      3701          bra.s     ChangeRegisters_20
                    3702   ChangeRegisters_17:
                    3703   ; else if (c == (char)('6'))
00002266  0C02 0036 3704          cmp.b     #54,D2
0000226A  6608      3705          bne.s     ChangeRegisters_19
                    3706   ; d6 = reg_val;
0000226C  23C3 0B00 3707          move.l    D3,_d6.L
00002270  00FC      
00002272  6006      3708          bra.s     ChangeRegisters_20
                    3709   ChangeRegisters_19:
                    3710   ; else
                    3711   ; d7 = reg_val;
00002274  23C3 0B00 3712          move.l    D3,_d7.L
00002278  0100      
                    3713   ChangeRegisters_20:
0000227A  6000 01B6 3714          bra       ChangeRegisters_51
                    3715   ChangeRegisters_1:
                    3716   ; }
                    3717   ; else if (reg[0] == (char)('a')) {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
0000227E  1013      3718          move.b    (A3),D0
00002280  0C00 0061 3719          cmp.b     #97,D0
00002284  6600 00A6 3720          bne       ChangeRegisters_21
                    3721   ; if ((c > (char)('7')) || (c < (char)('0'))) {
00002288  0C02 0037 3722          cmp.b     #55,D2
0000228C  6E06      3723          bgt.s     ChangeRegisters_25
0000228E  0C02 0030 3724          cmp.b     #48,D2
00002292  6C0E      3725          bge.s     ChangeRegisters_23
                    3726   ChangeRegisters_25:
                    3727   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n");
00002294  4879 0000 3728          pea       @lab5k_57.L
00002298  503E      
0000229A  4E92      3729          jsr       (A2)
0000229C  584F      3730          addq.w    #4,A7
                    3731   ; return;
0000229E  6000 0196 3732          bra       ChangeRegisters_6
                    3733   ChangeRegisters_23:
                    3734   ; }
                    3735   ; else {
                    3736   ; printf("\r\nA%c = ", c);
000022A2  4882      3737          ext.w     D2
000022A4  48C2      3738          ext.l     D2
000022A6  2F02      3739          move.l    D2,-(A7)
000022A8  4879 0000 3740          pea       @lab5k_58.L
000022AC  506C      
000022AE  4E92      3741          jsr       (A2)
000022B0  504F      3742          addq.w    #8,A7
                    3743   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
000022B2  42A7      3744          clr.l     -(A7)
000022B4  4E94      3745          jsr       (A4)
000022B6  584F      3746          addq.w    #4,A7
000022B8  2600      3747          move.l    D0,D3
                    3748   ; }
                    3749   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    3750   ; if (c == (char)('0'))
000022BA  0C02 0030 3751          cmp.b     #48,D2
000022BE  660A      3752          bne.s     ChangeRegisters_26
                    3753   ; a0 = reg_val;
000022C0  23C3 0B00 3754          move.l    D3,_a0.L
000022C4  0104      
000022C6  6000 0060 3755          bra       ChangeRegisters_39
                    3756   ChangeRegisters_26:
                    3757   ; else if (c == (char)('1'))
000022CA  0C02 0031 3758          cmp.b     #49,D2
000022CE  660A      3759          bne.s     ChangeRegisters_28
                    3760   ; a1 = reg_val;
000022D0  23C3 0B00 3761          move.l    D3,_a1.L
000022D4  0108      
000022D6  6000 0050 3762          bra       ChangeRegisters_39
                    3763   ChangeRegisters_28:
                    3764   ; else if (c == (char)('2'))
000022DA  0C02 0032 3765          cmp.b     #50,D2
000022DE  660A      3766          bne.s     ChangeRegisters_30
                    3767   ; a2 = reg_val;
000022E0  23C3 0B00 3768          move.l    D3,_a2.L
000022E4  010C      
000022E6  6000 0040 3769          bra       ChangeRegisters_39
                    3770   ChangeRegisters_30:
                    3771   ; else if (c == (char)('3'))
000022EA  0C02 0033 3772          cmp.b     #51,D2
000022EE  6608      3773          bne.s     ChangeRegisters_32
                    3774   ; a3 = reg_val;
000022F0  23C3 0B00 3775          move.l    D3,_a3.L
000022F4  0110      
000022F6  6030      3776          bra.s     ChangeRegisters_39
                    3777   ChangeRegisters_32:
                    3778   ; else if (c == (char)('4'))
000022F8  0C02 0034 3779          cmp.b     #52,D2
000022FC  6608      3780          bne.s     ChangeRegisters_34
                    3781   ; a4 = reg_val;
000022FE  23C3 0B00 3782          move.l    D3,_a4.L
00002302  0114      
00002304  6022      3783          bra.s     ChangeRegisters_39
                    3784   ChangeRegisters_34:
                    3785   ; else if (c == (char)('5'))
00002306  0C02 0035 3786          cmp.b     #53,D2
0000230A  6608      3787          bne.s     ChangeRegisters_36
                    3788   ; a5 = reg_val;
0000230C  23C3 0B00 3789          move.l    D3,_a5.L
00002310  0118      
00002312  6014      3790          bra.s     ChangeRegisters_39
                    3791   ChangeRegisters_36:
                    3792   ; else if (c == (char)('6'))
00002314  0C02 0036 3793          cmp.b     #54,D2
00002318  6608      3794          bne.s     ChangeRegisters_38
                    3795   ; a6 = reg_val;
0000231A  23C3 0B00 3796          move.l    D3,_a6.L
0000231E  011C      
00002320  6006      3797          bra.s     ChangeRegisters_39
                    3798   ChangeRegisters_38:
                    3799   ; else
                    3800   ; USP = reg_val;
00002322  23C3 0B00 3801          move.l    D3,_USP.L
00002326  0128      
                    3802   ChangeRegisters_39:
00002328  6000 0108 3803          bra       ChangeRegisters_51
                    3804   ChangeRegisters_21:
                    3805   ; }
                    3806   ; else if ((reg[0] == (char)('u')) && (c == (char)('s'))) {
0000232C  1013      3807          move.b    (A3),D0
0000232E  0C00 0075 3808          cmp.b     #117,D0
00002332  6600 004E 3809          bne       ChangeRegisters_40
00002336  0C02 0073 3810          cmp.b     #115,D2
0000233A  6600 0046 3811          bne       ChangeRegisters_40
                    3812   ; if (tolower(_getch()) == 'p') {    // change user stack pointer
0000233E  2F00      3813          move.l    D0,-(A7)
00002340  4E95      3814          jsr       (A5)
00002342  2200      3815          move.l    D0,D1
00002344  201F      3816          move.l    (A7)+,D0
00002346  2F01      3817          move.l    D1,-(A7)
00002348  4EB9 0000 3818          jsr       _tolower
0000234C  4002      
0000234E  584F      3819          addq.w    #4,A7
00002350  0C80 0000 3820          cmp.l     #112,D0
00002354  0070      
00002356  6618      3821          bne.s     ChangeRegisters_42
                    3822   ; printf("\r\nUser SP = ");
00002358  4879 0000 3823          pea       @lab5k_59.L
0000235C  5076      
0000235E  4E92      3824          jsr       (A2)
00002360  584F      3825          addq.w    #4,A7
                    3826   ; USP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00002362  42A7      3827          clr.l     -(A7)
00002364  4E94      3828          jsr       (A4)
00002366  584F      3829          addq.w    #4,A7
00002368  23C0 0B00 3830          move.l    D0,_USP.L
0000236C  0128      
0000236E  600E      3831          bra.s     ChangeRegisters_43
                    3832   ChangeRegisters_42:
                    3833   ; }
                    3834   ; else {
                    3835   ; printf("\r\nIllegal Register....");
00002370  4879 0000 3836          pea       @lab5k_60.L
00002374  5084      
00002376  4E92      3837          jsr       (A2)
00002378  584F      3838          addq.w    #4,A7
                    3839   ; return;
0000237A  6000 00BA 3840          bra       ChangeRegisters_6
                    3841   ChangeRegisters_43:
0000237E  6000 00B2 3842          bra       ChangeRegisters_51
                    3843   ChangeRegisters_40:
                    3844   ; }
                    3845   ; }
                    3846   ; else if ((reg[0] == (char)('s')) && (c == (char)('s'))) {
00002382  1013      3847          move.b    (A3),D0
00002384  0C00 0073 3848          cmp.b     #115,D0
00002388  6600 004E 3849          bne       ChangeRegisters_44
0000238C  0C02 0073 3850          cmp.b     #115,D2
00002390  6600 0046 3851          bne       ChangeRegisters_44
                    3852   ; if (tolower(_getch()) == 'p') {    // change system stack pointer
00002394  2F00      3853          move.l    D0,-(A7)
00002396  4E95      3854          jsr       (A5)
00002398  2200      3855          move.l    D0,D1
0000239A  201F      3856          move.l    (A7)+,D0
0000239C  2F01      3857          move.l    D1,-(A7)
0000239E  4EB9 0000 3858          jsr       _tolower
000023A2  4002      
000023A4  584F      3859          addq.w    #4,A7
000023A6  0C80 0000 3860          cmp.l     #112,D0
000023AA  0070      
000023AC  6618      3861          bne.s     ChangeRegisters_46
                    3862   ; printf("\r\nSystem SP = ");
000023AE  4879 0000 3863          pea       @lab5k_61.L
000023B2  509C      
000023B4  4E92      3864          jsr       (A2)
000023B6  584F      3865          addq.w    #4,A7
                    3866   ; SSP = Get8HexDigits(0);    // read 32 bit value from user keyboard
000023B8  42A7      3867          clr.l     -(A7)
000023BA  4E94      3868          jsr       (A4)
000023BC  584F      3869          addq.w    #4,A7
000023BE  23C0 0B00 3870          move.l    D0,_SSP.L
000023C2  0124      
000023C4  600E      3871          bra.s     ChangeRegisters_47
                    3872   ChangeRegisters_46:
                    3873   ; }
                    3874   ; else {
                    3875   ; printf("\r\nIllegal Register....");
000023C6  4879 0000 3876          pea       @lab5k_60.L
000023CA  5084      
000023CC  4E92      3877          jsr       (A2)
000023CE  584F      3878          addq.w    #4,A7
                    3879   ; return;
000023D0  6000 0064 3880          bra       ChangeRegisters_6
                    3881   ChangeRegisters_47:
000023D4  6000 005C 3882          bra       ChangeRegisters_51
                    3883   ChangeRegisters_44:
                    3884   ; }
                    3885   ; }
                    3886   ; else if ((reg[0] == (char)('p')) && (c == (char)('c'))) {    // change program counter
000023D8  1013      3887          move.b    (A3),D0
000023DA  0C00 0070 3888          cmp.b     #112,D0
000023DE  6620      3889          bne.s     ChangeRegisters_48
000023E0  0C02 0063 3890          cmp.b     #99,D2
000023E4  661A      3891          bne.s     ChangeRegisters_48
                    3892   ; printf("\r\nPC = ");
000023E6  4879 0000 3893          pea       @lab5k_62.L
000023EA  50AC      
000023EC  4E92      3894          jsr       (A2)
000023EE  584F      3895          addq.w    #4,A7
                    3896   ; PC = Get8HexDigits(0);    // read 32 bit value from user keyboard
000023F0  42A7      3897          clr.l     -(A7)
000023F2  4E94      3898          jsr       (A4)
000023F4  584F      3899          addq.w    #4,A7
000023F6  23C0 0B00 3900          move.l    D0,_PC.L
000023FA  0120      
000023FC  6000 0034 3901          bra       ChangeRegisters_51
                    3902   ChangeRegisters_48:
                    3903   ; }
                    3904   ; else if ((reg[0] == (char)('s')) && (c == (char)('r'))) {    // change status register
00002400  1013      3905          move.b    (A3),D0
00002402  0C00 0073 3906          cmp.b     #115,D0
00002406  6620      3907          bne.s     ChangeRegisters_50
00002408  0C02 0072 3908          cmp.b     #114,D2
0000240C  661A      3909          bne.s     ChangeRegisters_50
                    3910   ; printf("\r\nSR = ");
0000240E  4879 0000 3911          pea       @lab5k_63.L
00002412  50B4      
00002414  4E92      3912          jsr       (A2)
00002416  584F      3913          addq.w    #4,A7
                    3914   ; SR = Get4HexDigits(0);    // read 16 bit value from user keyboard
00002418  42A7      3915          clr.l     -(A7)
0000241A  4EB8 1442 3916          jsr       _Get4HexDigits
0000241E  584F      3917          addq.w    #4,A7
00002420  33C0 0B00 3918          move.w    D0,_SR.L
00002424  012C      
00002426  600A      3919          bra.s     ChangeRegisters_51
                    3920   ChangeRegisters_50:
                    3921   ; }
                    3922   ; else
                    3923   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n");
00002428  4879 0000 3924          pea       @lab5k_64.L
0000242C  50BC      
0000242E  4E92      3925          jsr       (A2)
00002430  584F      3926          addq.w    #4,A7
                    3927   ChangeRegisters_51:
                    3928   ; DumpRegisters();
00002432  4EB8 1C90 3929          jsr       _DumpRegisters
                    3930   ChangeRegisters_6:
00002436  4CDF 3C0C 3931          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000243A  4E5E      3932          unlk      A6
0000243C  4E75      3933          rts
                    3934   ; }
                    3935   ; void BreakPointDisplay(void)
                    3936   ; {
                    3937   _BreakPointDisplay:
0000243E  48E7 3030 3938          movem.l   D2/D3/A2/A3,-(A7)
00002442  45F9 0000 3939          lea       _printf.L,A2
00002446  3F54      
00002448  47F9 0B00 3940          lea       _BreakPointAddress.L,A3
0000244C  012E      
                    3941   ; int i, BreakPointsSet = 0;
0000244E  4283      3942          clr.l     D3
                    3943   ; // any break points  set
                    3944   ; for (i = 0; i < 8; i++) {
00002450  4282      3945          clr.l     D2
                    3946   BreakPointDisplay_1:
00002452  0C82 0000 3947          cmp.l     #8,D2
00002456  0008      
00002458  6C1C      3948          bge.s     BreakPointDisplay_3
                    3949   ; if (BreakPointSetOrCleared[i] == 1)
0000245A  2002      3950          move.l    D2,D0
0000245C  E588      3951          lsl.l     #2,D0
0000245E  41F9 0B00 3952          lea       _BreakPointSetOrCleared.L,A0
00002462  015E      
00002464  2030 0800 3953          move.l    0(A0,D0.L),D0
00002468  0C80 0000 3954          cmp.l     #1,D0
0000246C  0001      
0000246E  6602      3955          bne.s     BreakPointDisplay_4
                    3956   ; BreakPointsSet = 1;
00002470  7601      3957          moveq     #1,D3
                    3958   BreakPointDisplay_4:
00002472  5282      3959          addq.l    #1,D2
00002474  60DC      3960          bra       BreakPointDisplay_1
                    3961   BreakPointDisplay_3:
                    3962   ; }
                    3963   ; if (BreakPointsSet == 1) {
00002476  0C83 0000 3964          cmp.l     #1,D3
0000247A  0001      
0000247C  6616      3965          bne.s     BreakPointDisplay_6
                    3966   ; printf("\r\n\r\nNum     Address      Instruction");
0000247E  4879 0000 3967          pea       @lab5k_65.L
00002482  50F8      
00002484  4E92      3968          jsr       (A2)
00002486  584F      3969          addq.w    #4,A7
                    3970   ; printf("\r\n---     ---------    -----------");
00002488  4879 0000 3971          pea       @lab5k_66.L
0000248C  511E      
0000248E  4E92      3972          jsr       (A2)
00002490  584F      3973          addq.w    #4,A7
00002492  600A      3974          bra.s     BreakPointDisplay_7
                    3975   BreakPointDisplay_6:
                    3976   ; }
                    3977   ; else
                    3978   ; printf("\r\nNo BreakPoints Set");
00002494  4879 0000 3979          pea       @lab5k_67.L
00002498  5142      
0000249A  4E92      3980          jsr       (A2)
0000249C  584F      3981          addq.w    #4,A7
                    3982   BreakPointDisplay_7:
                    3983   ; for (i = 0; i < 8; i++) {
0000249E  4282      3984          clr.l     D2
                    3985   BreakPointDisplay_8:
000024A0  0C82 0000 3986          cmp.l     #8,D2
000024A4  0008      
000024A6  6C00 005A 3987          bge       BreakPointDisplay_10
                    3988   ; // put opcode back, then put break point back
                    3989   ; if (BreakPointSetOrCleared[i] == 1) {
000024AA  2002      3990          move.l    D2,D0
000024AC  E588      3991          lsl.l     #2,D0
000024AE  41F9 0B00 3992          lea       _BreakPointSetOrCleared.L,A0
000024B2  015E      
000024B4  2030 0800 3993          move.l    0(A0,D0.L),D0
000024B8  0C80 0000 3994          cmp.l     #1,D0
000024BC  0001      
000024BE  6600 003E 3995          bne       BreakPointDisplay_11
                    3996   ; *(unsigned short int*)(BreakPointAddress[i]) = BreakPointInstruction[i];
000024C2  2002      3997          move.l    D2,D0
000024C4  E388      3998          lsl.l     #1,D0
000024C6  41F9 0B00 3999          lea       _BreakPointInstruction.L,A0
000024CA  014E      
000024CC  2202      4000          move.l    D2,D1
000024CE  E589      4001          lsl.l     #2,D1
000024D0  2233 1800 4002          move.l    0(A3,D1.L),D1
000024D4  2241      4003          move.l    D1,A1
000024D6  32B0 0800 4004          move.w    0(A0,D0.L),(A1)
                    4005   ; *(unsigned short int*)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e);
000024DA  2002      4006          move.l    D2,D0
000024DC  E588      4007          lsl.l     #2,D0
000024DE  2033 0800 4008          move.l    0(A3,D0.L),D0
000024E2  2040      4009          move.l    D0,A0
000024E4  30BC 4E4E 4010          move.w    #20046,(A0)
                    4011   ; printf("\r\n%3d     $%08x", i, BreakPointAddress[i]);
000024E8  2202      4012          move.l    D2,D1
000024EA  E589      4013          lsl.l     #2,D1
000024EC  2F33 1800 4014          move.l    0(A3,D1.L),-(A7)
000024F0  2F02      4015          move.l    D2,-(A7)
000024F2  4879 0000 4016          pea       @lab5k_68.L
000024F6  5158      
000024F8  4E92      4017          jsr       (A2)
000024FA  DEFC 000C 4018          add.w     #12,A7
                    4019   BreakPointDisplay_11:
000024FE  5282      4020          addq.l    #1,D2
00002500  609E      4021          bra       BreakPointDisplay_8
                    4022   BreakPointDisplay_10:
                    4023   ; }
                    4024   ; }
                    4025   ; printf("\r\n");
00002502  4879 0000 4026          pea       @lab5k_1.L
00002506  4B04      
00002508  4E92      4027          jsr       (A2)
0000250A  584F      4028          addq.w    #4,A7
0000250C  4CDF 0C0C 4029          movem.l   (A7)+,D2/D3/A2/A3
00002510  4E75      4030          rts
                    4031   ; }
                    4032   ; void WatchPointDisplay(void)
                    4033   ; {
                    4034   _WatchPointDisplay:
00002512  48E7 3020 4035          movem.l   D2/D3/A2,-(A7)
00002516  45F9 0000 4036          lea       _printf.L,A2
0000251A  3F54      
                    4037   ; int i;
                    4038   ; int WatchPointsSet = 0;
0000251C  4283      4039          clr.l     D3
                    4040   ; // any watchpoints set
                    4041   ; for (i = 0; i < 8; i++) {
0000251E  4282      4042          clr.l     D2
                    4043   WatchPointDisplay_1:
00002520  0C82 0000 4044          cmp.l     #8,D2
00002524  0008      
00002526  6C1C      4045          bge.s     WatchPointDisplay_3
                    4046   ; if (WatchPointSetOrCleared[i] == 1)
00002528  2002      4047          move.l    D2,D0
0000252A  E588      4048          lsl.l     #2,D0
0000252C  41F9 0B00 4049          lea       _WatchPointSetOrCleared.L,A0
00002530  01A2      
00002532  2030 0800 4050          move.l    0(A0,D0.L),D0
00002536  0C80 0000 4051          cmp.l     #1,D0
0000253A  0001      
0000253C  6602      4052          bne.s     WatchPointDisplay_4
                    4053   ; WatchPointsSet = 1;
0000253E  7601      4054          moveq     #1,D3
                    4055   WatchPointDisplay_4:
00002540  5282      4056          addq.l    #1,D2
00002542  60DC      4057          bra       WatchPointDisplay_1
                    4058   WatchPointDisplay_3:
                    4059   ; }
                    4060   ; if (WatchPointsSet == 1) {
00002544  0C83 0000 4061          cmp.l     #1,D3
00002548  0001      
0000254A  6616      4062          bne.s     WatchPointDisplay_6
                    4063   ; printf("\r\nNum     Address");
0000254C  4879 0000 4064          pea       @lab5k_69.L
00002550  5168      
00002552  4E92      4065          jsr       (A2)
00002554  584F      4066          addq.w    #4,A7
                    4067   ; printf("\r\n---     ---------");
00002556  4879 0000 4068          pea       @lab5k_70.L
0000255A  517A      
0000255C  4E92      4069          jsr       (A2)
0000255E  584F      4070          addq.w    #4,A7
00002560  600A      4071          bra.s     WatchPointDisplay_7
                    4072   WatchPointDisplay_6:
                    4073   ; }
                    4074   ; else
                    4075   ; printf("\r\nNo WatchPoints Set");
00002562  4879 0000 4076          pea       @lab5k_71.L
00002566  518E      
00002568  4E92      4077          jsr       (A2)
0000256A  584F      4078          addq.w    #4,A7
                    4079   WatchPointDisplay_7:
                    4080   ; for (i = 0; i < 8; i++) {
0000256C  4282      4081          clr.l     D2
                    4082   WatchPointDisplay_8:
0000256E  0C82 0000 4083          cmp.l     #8,D2
00002572  0008      
00002574  6C00 0038 4084          bge       WatchPointDisplay_10
                    4085   ; if (WatchPointSetOrCleared[i] == 1)
00002578  2002      4086          move.l    D2,D0
0000257A  E588      4087          lsl.l     #2,D0
0000257C  41F9 0B00 4088          lea       _WatchPointSetOrCleared.L,A0
00002580  01A2      
00002582  2030 0800 4089          move.l    0(A0,D0.L),D0
00002586  0C80 0000 4090          cmp.l     #1,D0
0000258A  0001      
0000258C  661C      4091          bne.s     WatchPointDisplay_11
                    4092   ; printf("\r\n%3d     $%08x", i, WatchPointAddress[i]);
0000258E  2202      4093          move.l    D2,D1
00002590  E589      4094          lsl.l     #2,D1
00002592  41F9 0B00 4095          lea       _WatchPointAddress.L,A0
00002596  0182      
00002598  2F30 1800 4096          move.l    0(A0,D1.L),-(A7)
0000259C  2F02      4097          move.l    D2,-(A7)
0000259E  4879 0000 4098          pea       @lab5k_68.L
000025A2  5158      
000025A4  4E92      4099          jsr       (A2)
000025A6  DEFC 000C 4100          add.w     #12,A7
                    4101   WatchPointDisplay_11:
000025AA  5282      4102          addq.l    #1,D2
000025AC  60C0      4103          bra       WatchPointDisplay_8
                    4104   WatchPointDisplay_10:
                    4105   ; }
                    4106   ; printf("\r\n");
000025AE  4879 0000 4107          pea       @lab5k_1.L
000025B2  4B04      
000025B4  4E92      4108          jsr       (A2)
000025B6  584F      4109          addq.w    #4,A7
000025B8  4CDF 040C 4110          movem.l   (A7)+,D2/D3/A2
000025BC  4E75      4111          rts
                    4112   ; }
                    4113   ; void BreakPointClear(void)
                    4114   ; {
                    4115   _BreakPointClear:
000025BE  4E56 FFFC 4116          link      A6,#-4
000025C2  48E7 2020 4117          movem.l   D2/A2,-(A7)
000025C6  45F9 0000 4118          lea       _printf.L,A2
000025CA  3F54      
                    4119   ; unsigned int i;
                    4120   ; volatile unsigned short int* ProgramBreakPointAddress;
                    4121   ; BreakPointDisplay();
000025CC  4EB8 243E 4122          jsr       _BreakPointDisplay
                    4123   ; printf("\r\nEnter Break Point Number: ");
000025D0  4879 0000 4124          pea       @lab5k_72.L
000025D4  51A4      
000025D6  4E92      4125          jsr       (A2)
000025D8  584F      4126          addq.w    #4,A7
                    4127   ; i = xtod(_getch());           // get break pointer number
000025DA  2F00      4128          move.l    D0,-(A7)
000025DC  4EB8 1352 4129          jsr       __getch
000025E0  2200      4130          move.l    D0,D1
000025E2  201F      4131          move.l    (A7)+,D0
000025E4  2F01      4132          move.l    D1,-(A7)
000025E6  4EB8 13BC 4133          jsr       _xtod
000025EA  584F      4134          addq.w    #4,A7
000025EC  C0BC 0000 4135          and.l     #255,D0
000025F0  00FF      
000025F2  2400      4136          move.l    D0,D2
                    4137   ; if ((i < 0) || (i > 7)) {
000025F4  0C82 0000 4138          cmp.l     #0,D2
000025F8  0000      
000025FA  6508      4139          blo.s     BreakPointClear_3
000025FC  0C82 0000 4140          cmp.l     #7,D2
00002600  0007      
00002602  630E      4141          bls.s     BreakPointClear_1
                    4142   BreakPointClear_3:
                    4143   ; printf("\r\nIllegal Range : Use 0 - 7");
00002604  4879 0000 4144          pea       @lab5k_73.L
00002608  51C2      
0000260A  4E92      4145          jsr       (A2)
0000260C  584F      4146          addq.w    #4,A7
                    4147   ; return;
0000260E  6000 0080 4148          bra       BreakPointClear_4
                    4149   BreakPointClear_1:
                    4150   ; }
                    4151   ; if (BreakPointSetOrCleared[i] == 1) {       // if break point set
00002612  2002      4152          move.l    D2,D0
00002614  E588      4153          lsl.l     #2,D0
00002616  41F9 0B00 4154          lea       _BreakPointSetOrCleared.L,A0
0000261A  015E      
0000261C  2030 0800 4155          move.l    0(A0,D0.L),D0
00002620  0C80 0000 4156          cmp.l     #1,D0
00002624  0001      
00002626  6600 005A 4157          bne       BreakPointClear_5
                    4158   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program we are about to change
0000262A  2002      4159          move.l    D2,D0
0000262C  E588      4160          lsl.l     #2,D0
0000262E  41F9 0B00 4161          lea       _BreakPointAddress.L,A0
00002632  012E      
00002634  2D70 0800 4162          move.l    0(A0,D0.L),-4(A6)
00002638  FFFC      
                    4163   ; BreakPointAddress[i] = 0;
0000263A  2002      4164          move.l    D2,D0
0000263C  E588      4165          lsl.l     #2,D0
0000263E  41F9 0B00 4166          lea       _BreakPointAddress.L,A0
00002642  012E      
00002644  42B0 0800 4167          clr.l     0(A0,D0.L)
                    4168   ; BreakPointSetOrCleared[i] = 0;
00002648  2002      4169          move.l    D2,D0
0000264A  E588      4170          lsl.l     #2,D0
0000264C  41F9 0B00 4171          lea       _BreakPointSetOrCleared.L,A0
00002650  015E      
00002652  42B0 0800 4172          clr.l     0(A0,D0.L)
                    4173   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00002656  2002      4174          move.l    D2,D0
00002658  E388      4175          lsl.l     #1,D0
0000265A  41F9 0B00 4176          lea       _BreakPointInstruction.L,A0
0000265E  014E      
00002660  226E FFFC 4177          move.l    -4(A6),A1
00002664  32B0 0800 4178          move.w    0(A0,D0.L),(A1)
                    4179   ; BreakPointInstruction[i] = 0;
00002668  2002      4180          move.l    D2,D0
0000266A  E388      4181          lsl.l     #1,D0
0000266C  41F9 0B00 4182          lea       _BreakPointInstruction.L,A0
00002670  014E      
00002672  4270 0800 4183          clr.w     0(A0,D0.L)
                    4184   ; printf("\r\nBreak Point Cleared.....\r\n");
00002676  4879 0000 4185          pea       @lab5k_74.L
0000267A  51DE      
0000267C  4E92      4186          jsr       (A2)
0000267E  584F      4187          addq.w    #4,A7
00002680  600A      4188          bra.s     BreakPointClear_6
                    4189   BreakPointClear_5:
                    4190   ; }
                    4191   ; else
                    4192   ; printf("\r\nBreak Point wasn't Set.....");
00002682  4879 0000 4193          pea       @lab5k_75.L
00002686  51FC      
00002688  4E92      4194          jsr       (A2)
0000268A  584F      4195          addq.w    #4,A7
                    4196   BreakPointClear_6:
                    4197   ; BreakPointDisplay();
0000268C  4EB8 243E 4198          jsr       _BreakPointDisplay
                    4199   ; return;
                    4200   BreakPointClear_4:
00002690  4CDF 0404 4201          movem.l   (A7)+,D2/A2
00002694  4E5E      4202          unlk      A6
00002696  4E75      4203          rts
                    4204   ; }
                    4205   ; void WatchPointClear(void)
                    4206   ; {
                    4207   _WatchPointClear:
00002698  48E7 2020 4208          movem.l   D2/A2,-(A7)
0000269C  45F9 0000 4209          lea       _printf.L,A2
000026A0  3F54      
                    4210   ; unsigned int i;
                    4211   ; WatchPointDisplay();
000026A2  4EB8 2512 4212          jsr       _WatchPointDisplay
                    4213   ; printf("\r\nEnter Watch Point Number: ");
000026A6  4879 0000 4214          pea       @lab5k_76.L
000026AA  521A      
000026AC  4E92      4215          jsr       (A2)
000026AE  584F      4216          addq.w    #4,A7
                    4217   ; i = xtod(_getch());           // get watch pointer number
000026B0  2F00      4218          move.l    D0,-(A7)
000026B2  4EB8 1352 4219          jsr       __getch
000026B6  2200      4220          move.l    D0,D1
000026B8  201F      4221          move.l    (A7)+,D0
000026BA  2F01      4222          move.l    D1,-(A7)
000026BC  4EB8 13BC 4223          jsr       _xtod
000026C0  584F      4224          addq.w    #4,A7
000026C2  C0BC 0000 4225          and.l     #255,D0
000026C6  00FF      
000026C8  2400      4226          move.l    D0,D2
                    4227   ; if ((i < 0) || (i > 7)) {
000026CA  0C82 0000 4228          cmp.l     #0,D2
000026CE  0000      
000026D0  6508      4229          blo.s     WatchPointClear_3
000026D2  0C82 0000 4230          cmp.l     #7,D2
000026D6  0007      
000026D8  630E      4231          bls.s     WatchPointClear_1
                    4232   WatchPointClear_3:
                    4233   ; printf("\r\nIllegal Range : Use 0 - 7");
000026DA  4879 0000 4234          pea       @lab5k_73.L
000026DE  51C2      
000026E0  4E92      4235          jsr       (A2)
000026E2  584F      4236          addq.w    #4,A7
                    4237   ; return;
000026E4  6000 004E 4238          bra       WatchPointClear_4
                    4239   WatchPointClear_1:
                    4240   ; }
                    4241   ; if (WatchPointSetOrCleared[i] == 1) {       // if watch point set
000026E8  2002      4242          move.l    D2,D0
000026EA  E588      4243          lsl.l     #2,D0
000026EC  41F9 0B00 4244          lea       _WatchPointSetOrCleared.L,A0
000026F0  01A2      
000026F2  2030 0800 4245          move.l    0(A0,D0.L),D0
000026F6  0C80 0000 4246          cmp.l     #1,D0
000026FA  0001      
000026FC  6628      4247          bne.s     WatchPointClear_5
                    4248   ; WatchPointAddress[i] = 0;
000026FE  2002      4249          move.l    D2,D0
00002700  E588      4250          lsl.l     #2,D0
00002702  41F9 0B00 4251          lea       _WatchPointAddress.L,A0
00002706  0182      
00002708  42B0 0800 4252          clr.l     0(A0,D0.L)
                    4253   ; WatchPointSetOrCleared[i] = 0;
0000270C  2002      4254          move.l    D2,D0
0000270E  E588      4255          lsl.l     #2,D0
00002710  41F9 0B00 4256          lea       _WatchPointSetOrCleared.L,A0
00002714  01A2      
00002716  42B0 0800 4257          clr.l     0(A0,D0.L)
                    4258   ; printf("\r\nWatch Point Cleared.....\r\n");
0000271A  4879 0000 4259          pea       @lab5k_77.L
0000271E  5238      
00002720  4E92      4260          jsr       (A2)
00002722  584F      4261          addq.w    #4,A7
00002724  600A      4262          bra.s     WatchPointClear_6
                    4263   WatchPointClear_5:
                    4264   ; }
                    4265   ; else
                    4266   ; printf("\r\nWatch Point Was not Set.....");
00002726  4879 0000 4267          pea       @lab5k_78.L
0000272A  5256      
0000272C  4E92      4268          jsr       (A2)
0000272E  584F      4269          addq.w    #4,A7
                    4270   WatchPointClear_6:
                    4271   ; WatchPointDisplay();
00002730  4EB8 2512 4272          jsr       _WatchPointDisplay
                    4273   ; return;
                    4274   WatchPointClear_4:
00002734  4CDF 0404 4275          movem.l   (A7)+,D2/A2
00002738  4E75      4276          rts
                    4277   ; }
                    4278   ; void DisableBreakPoints(void)
                    4279   ; {
                    4280   _DisableBreakPoints:
0000273A  4E56 FFFC 4281          link      A6,#-4
0000273E  2F02      4282          move.l    D2,-(A7)
                    4283   ; int i;
                    4284   ; volatile unsigned short int* ProgramBreakPointAddress;
                    4285   ; for (i = 0; i < 8; i++) {
00002740  4282      4286          clr.l     D2
                    4287   DisableBreakPoints_1:
00002742  0C82 0000 4288          cmp.l     #8,D2
00002746  0008      
00002748  6C00 003E 4289          bge       DisableBreakPoints_3
                    4290   ; if (BreakPointSetOrCleared[i] == 1) {                                                    // if break point set
0000274C  2002      4291          move.l    D2,D0
0000274E  E588      4292          lsl.l     #2,D0
00002750  41F9 0B00 4293          lea       _BreakPointSetOrCleared.L,A0
00002754  015E      
00002756  2030 0800 4294          move.l    0(A0,D0.L),D0
0000275A  0C80 0000 4295          cmp.l     #1,D0
0000275E  0001      
00002760  6622      4296          bne.s     DisableBreakPoints_4
                    4297   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00002762  2002      4298          move.l    D2,D0
00002764  E588      4299          lsl.l     #2,D0
00002766  41F9 0B00 4300          lea       _BreakPointAddress.L,A0
0000276A  012E      
0000276C  2D70 0800 4301          move.l    0(A0,D0.L),-4(A6)
00002770  FFFC      
                    4302   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00002772  2002      4303          move.l    D2,D0
00002774  E388      4304          lsl.l     #1,D0
00002776  41F9 0B00 4305          lea       _BreakPointInstruction.L,A0
0000277A  014E      
0000277C  226E FFFC 4306          move.l    -4(A6),A1
00002780  32B0 0800 4307          move.w    0(A0,D0.L),(A1)
                    4308   DisableBreakPoints_4:
00002784  5282      4309          addq.l    #1,D2
00002786  60BA      4310          bra       DisableBreakPoints_1
                    4311   DisableBreakPoints_3:
00002788  241F      4312          move.l    (A7)+,D2
0000278A  4E5E      4313          unlk      A6
0000278C  4E75      4314          rts
                    4315   ; }
                    4316   ; }
                    4317   ; }
                    4318   ; void EnableBreakPoints(void)
                    4319   ; {
                    4320   _EnableBreakPoints:
0000278E  4E56 FFFC 4321          link      A6,#-4
00002792  2F02      4322          move.l    D2,-(A7)
                    4323   ; int i;
                    4324   ; volatile unsigned short int* ProgramBreakPointAddress;
                    4325   ; for (i = 0; i < 8; i++) {
00002794  4282      4326          clr.l     D2
                    4327   EnableBreakPoints_1:
00002796  0C82 0000 4328          cmp.l     #8,D2
0000279A  0008      
0000279C  6C32      4329          bge.s     EnableBreakPoints_3
                    4330   ; if (BreakPointSetOrCleared[i] == 1) {                                                     // if break point set
0000279E  2002      4331          move.l    D2,D0
000027A0  E588      4332          lsl.l     #2,D0
000027A2  41F9 0B00 4333          lea       _BreakPointSetOrCleared.L,A0
000027A6  015E      
000027A8  2030 0800 4334          move.l    0(A0,D0.L),D0
000027AC  0C80 0000 4335          cmp.l     #1,D0
000027B0  0001      
000027B2  6618      4336          bne.s     EnableBreakPoints_4
                    4337   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
000027B4  2002      4338          move.l    D2,D0
000027B6  E588      4339          lsl.l     #2,D0
000027B8  41F9 0B00 4340          lea       _BreakPointAddress.L,A0
000027BC  012E      
000027BE  2D70 0800 4341          move.l    0(A0,D0.L),-4(A6)
000027C2  FFFC      
                    4342   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
000027C4  206E FFFC 4343          move.l    -4(A6),A0
000027C8  30BC 4E4E 4344          move.w    #20046,(A0)
                    4345   EnableBreakPoints_4:
000027CC  5282      4346          addq.l    #1,D2
000027CE  60C6      4347          bra       EnableBreakPoints_1
                    4348   EnableBreakPoints_3:
000027D0  241F      4349          move.l    (A7)+,D2
000027D2  4E5E      4350          unlk      A6
000027D4  4E75      4351          rts
                    4352   ; }
                    4353   ; }
                    4354   ; }
                    4355   ; void KillAllBreakPoints(void)
                    4356   ; {
                    4357   _KillAllBreakPoints:
000027D6  4E56 FFFC 4358          link      A6,#-4
000027DA  2F02      4359          move.l    D2,-(A7)
                    4360   ; int i;
                    4361   ; volatile unsigned short int* ProgramBreakPointAddress;
                    4362   ; for (i = 0; i < 8; i++) {
000027DC  4282      4363          clr.l     D2
                    4364   KillAllBreakPoints_1:
000027DE  0C82 0000 4365          cmp.l     #8,D2
000027E2  0008      
000027E4  6C00 0052 4366          bge       KillAllBreakPoints_3
                    4367   ; // clear BP
                    4368   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
000027E8  2002      4369          move.l    D2,D0
000027EA  E588      4370          lsl.l     #2,D0
000027EC  41F9 0B00 4371          lea       _BreakPointAddress.L,A0
000027F0  012E      
000027F2  2D70 0800 4372          move.l    0(A0,D0.L),-4(A6)
000027F6  FFFC      
                    4373   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
000027F8  2002      4374          move.l    D2,D0
000027FA  E388      4375          lsl.l     #1,D0
000027FC  41F9 0B00 4376          lea       _BreakPointInstruction.L,A0
00002800  014E      
00002802  226E FFFC 4377          move.l    -4(A6),A1
00002806  32B0 0800 4378          move.w    0(A0,D0.L),(A1)
                    4379   ; BreakPointAddress[i] = 0;                                                             // set BP address to NULL
0000280A  2002      4380          move.l    D2,D0
0000280C  E588      4381          lsl.l     #2,D0
0000280E  41F9 0B00 4382          lea       _BreakPointAddress.L,A0
00002812  012E      
00002814  42B0 0800 4383          clr.l     0(A0,D0.L)
                    4384   ; BreakPointInstruction[i] = 0;
00002818  2002      4385          move.l    D2,D0
0000281A  E388      4386          lsl.l     #1,D0
0000281C  41F9 0B00 4387          lea       _BreakPointInstruction.L,A0
00002820  014E      
00002822  4270 0800 4388          clr.w     0(A0,D0.L)
                    4389   ; BreakPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00002826  2002      4390          move.l    D2,D0
00002828  E588      4391          lsl.l     #2,D0
0000282A  41F9 0B00 4392          lea       _BreakPointSetOrCleared.L,A0
0000282E  015E      
00002830  42B0 0800 4393          clr.l     0(A0,D0.L)
00002834  5282      4394          addq.l    #1,D2
00002836  60A6      4395          bra       KillAllBreakPoints_1
                    4396   KillAllBreakPoints_3:
00002838  241F      4397          move.l    (A7)+,D2
0000283A  4E5E      4398          unlk      A6
0000283C  4E75      4399          rts
                    4400   ; }
                    4401   ; //BreakPointDisplay() ;       // display the break points
                    4402   ; }
                    4403   ; void KillAllWatchPoints(void)
                    4404   ; {
                    4405   _KillAllWatchPoints:
0000283E  2F02      4406          move.l    D2,-(A7)
                    4407   ; int i;
                    4408   ; for (i = 0; i < 8; i++) {
00002840  4282      4409          clr.l     D2
                    4410   KillAllWatchPoints_1:
00002842  0C82 0000 4411          cmp.l     #8,D2
00002846  0008      
00002848  6C20      4412          bge.s     KillAllWatchPoints_3
                    4413   ; WatchPointAddress[i] = 0;                                                             // set BP address to NULL
0000284A  2002      4414          move.l    D2,D0
0000284C  E588      4415          lsl.l     #2,D0
0000284E  41F9 0B00 4416          lea       _WatchPointAddress.L,A0
00002852  0182      
00002854  42B0 0800 4417          clr.l     0(A0,D0.L)
                    4418   ; WatchPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00002858  2002      4419          move.l    D2,D0
0000285A  E588      4420          lsl.l     #2,D0
0000285C  41F9 0B00 4421          lea       _WatchPointSetOrCleared.L,A0
00002860  01A2      
00002862  42B0 0800 4422          clr.l     0(A0,D0.L)
00002866  5282      4423          addq.l    #1,D2
00002868  60D8      4424          bra       KillAllWatchPoints_1
                    4425   KillAllWatchPoints_3:
0000286A  241F      4426          move.l    (A7)+,D2
0000286C  4E75      4427          rts
                    4428   ; }
                    4429   ; //WatchPointDisplay() ;       // display the break points
                    4430   ; }
                    4431   ; void SetBreakPoint(void)
                    4432   ; {
                    4433   _SetBreakPoint:
0000286E  4E56 FFFC 4434          link      A6,#-4
00002872  48E7 3830 4435          movem.l   D2/D3/D4/A2/A3,-(A7)
00002876  45F9 0000 4436          lea       _printf.L,A2
0000287A  3F54      
0000287C  47F9 0B00 4437          lea       _BreakPointSetOrCleared.L,A3
00002880  015E      
                    4438   ; int i;
                    4439   ; int BPNumber;
                    4440   ; int BPAddress;
                    4441   ; volatile unsigned short int* ProgramBreakPointAddress;
                    4442   ; // see if any free break points
                    4443   ; for (i = 0; i < 8; i++) {
00002882  4282      4444          clr.l     D2
                    4445   SetBreakPoint_1:
00002884  0C82 0000 4446          cmp.l     #8,D2
00002888  0008      
0000288A  6C10      4447          bge.s     SetBreakPoint_3
                    4448   ; if (BreakPointSetOrCleared[i] == 0)
0000288C  2002      4449          move.l    D2,D0
0000288E  E588      4450          lsl.l     #2,D0
00002890  2033 0800 4451          move.l    0(A3,D0.L),D0
00002894  6602      4452          bne.s     SetBreakPoint_4
                    4453   ; break;         // if spare BP found allow user to set it
00002896  6004      4454          bra.s     SetBreakPoint_3
                    4455   SetBreakPoint_4:
00002898  5282      4456          addq.l    #1,D2
0000289A  60E8      4457          bra       SetBreakPoint_1
                    4458   SetBreakPoint_3:
                    4459   ; }
                    4460   ; if (i == 8) {
0000289C  0C82 0000 4461          cmp.l     #8,D2
000028A0  0008      
000028A2  660E      4462          bne.s     SetBreakPoint_6
                    4463   ; printf("\r\nNo FREE Break Points.....");
000028A4  4879 0000 4464          pea       @lab5k_79.L
000028A8  5276      
000028AA  4E92      4465          jsr       (A2)
000028AC  584F      4466          addq.w    #4,A7
                    4467   ; return;
000028AE  6000 00D6 4468          bra       SetBreakPoint_15
                    4469   SetBreakPoint_6:
                    4470   ; }
                    4471   ; printf("\r\nBreak Point Address: ");
000028B2  4879 0000 4472          pea       @lab5k_80.L
000028B6  5292      
000028B8  4E92      4473          jsr       (A2)
000028BA  584F      4474          addq.w    #4,A7
                    4475   ; BPAddress = Get8HexDigits(0);
000028BC  42A7      4476          clr.l     -(A7)
000028BE  4EB8 148E 4477          jsr       _Get8HexDigits
000028C2  584F      4478          addq.w    #4,A7
000028C4  2600      4479          move.l    D0,D3
                    4480   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BPAddress);     // point to the instruction in the user program we are about to change
000028C6  2803      4481          move.l    D3,D4
                    4482   ; if ((BPAddress & 0x00000001) == 0x00000001) {   // cannot set BP at an odd address
000028C8  2003      4483          move.l    D3,D0
000028CA  C0BC 0000 4484          and.l     #1,D0
000028CE  0001      
000028D0  0C80 0000 4485          cmp.l     #1,D0
000028D4  0001      
000028D6  660E      4486          bne.s     SetBreakPoint_9
                    4487   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses");
000028D8  4879 0000 4488          pea       @lab5k_81.L
000028DC  52AA      
000028DE  4E92      4489          jsr       (A2)
000028E0  584F      4490          addq.w    #4,A7
                    4491   ; return;
000028E2  6000 00A2 4492          bra       SetBreakPoint_15
                    4493   SetBreakPoint_9:
                    4494   ; }
                    4495   ; if (BPAddress < 0x00008000) {   // cannot set BP in ROM
000028E6  0C83 0000 4496          cmp.l     #32768,D3
000028EA  8000      
000028EC  640E      4497          bhs.s     SetBreakPoint_11
                    4498   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]");
000028EE  4879 0000 4499          pea       @lab5k_82.L
000028F2  52E0      
000028F4  4E92      4500          jsr       (A2)
000028F6  584F      4501          addq.w    #4,A7
                    4502   ; return;
000028F8  6000 008C 4503          bra       SetBreakPoint_15
                    4504   SetBreakPoint_11:
                    4505   ; }
                    4506   ; // search for first free bp or existing same BP
                    4507   ; for (i = 0; i < 8; i++) {
000028FC  4282      4508          clr.l     D2
                    4509   SetBreakPoint_13:
000028FE  0C82 0000 4510          cmp.l     #8,D2
00002902  0008      
00002904  6C00 0080 4511          bge       SetBreakPoint_15
                    4512   ; if (BreakPointAddress[i] == BPAddress) {
00002908  2002      4513          move.l    D2,D0
0000290A  E588      4514          lsl.l     #2,D0
0000290C  41F9 0B00 4515          lea       _BreakPointAddress.L,A0
00002910  012E      
00002912  B6B0 0800 4516          cmp.l     0(A0,D0.L),D3
00002916  6610      4517          bne.s     SetBreakPoint_16
                    4518   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress);
00002918  2F03      4519          move.l    D3,-(A7)
0000291A  4879 0000 4520          pea       @lab5k_83.L
0000291E  5328      
00002920  4E92      4521          jsr       (A2)
00002922  504F      4522          addq.w    #8,A7
                    4523   ; return;
00002924  6000 0060 4524          bra       SetBreakPoint_15
                    4525   SetBreakPoint_16:
                    4526   ; }
                    4527   ; if (BreakPointSetOrCleared[i] == 0) {
00002928  2002      4528          move.l    D2,D0
0000292A  E588      4529          lsl.l     #2,D0
0000292C  2033 0800 4530          move.l    0(A3,D0.L),D0
00002930  6600 004E 4531          bne       SetBreakPoint_18
                    4532   ; // set BP here
                    4533   ; BreakPointSetOrCleared[i] = 1;                                 // mark this breakpoint as set
00002934  2002      4534          move.l    D2,D0
00002936  E588      4535          lsl.l     #2,D0
00002938  27BC 0000 4536          move.l    #1,0(A3,D0.L)
0000293C  0001 0800 
                    4537   ; BreakPointInstruction[i] = *ProgramBreakPointAddress;          // copy the user program instruction here so we can put it back afterwards
00002940  2044      4538          move.l    D4,A0
00002942  2002      4539          move.l    D2,D0
00002944  E388      4540          lsl.l     #1,D0
00002946  43F9 0B00 4541          lea       _BreakPointInstruction.L,A1
0000294A  014E      
0000294C  3390 0800 4542          move.w    (A0),0(A1,D0.L)
                    4543   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress);
00002950  2F04      4544          move.l    D4,-(A7)
00002952  4879 0000 4545          pea       @lab5k_84.L
00002956  5360      
00002958  4E92      4546          jsr       (A2)
0000295A  504F      4547          addq.w    #8,A7
                    4548   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);   // put a Trap14 instruction at the user specified address
0000295C  2044      4549          move.l    D4,A0
0000295E  30BC 4E4E 4550          move.w    #20046,(A0)
                    4551   ; BreakPointAddress[i] = BPAddress;                              // record the address of this break point in the debugger
00002962  2002      4552          move.l    D2,D0
00002964  E588      4553          lsl.l     #2,D0
00002966  41F9 0B00 4554          lea       _BreakPointAddress.L,A0
0000296A  012E      
0000296C  2183 0800 4555          move.l    D3,0(A0,D0.L)
                    4556   ; printf("\r\n");
00002970  4879 0000 4557          pea       @lab5k_1.L
00002974  4B04      
00002976  4E92      4558          jsr       (A2)
00002978  584F      4559          addq.w    #4,A7
                    4560   ; BreakPointDisplay();       // display the break points
0000297A  4EB8 243E 4561          jsr       _BreakPointDisplay
                    4562   ; return;
0000297E  6006      4563          bra.s     SetBreakPoint_15
                    4564   SetBreakPoint_18:
00002980  5282      4565          addq.l    #1,D2
00002982  6000 FF7A 4566          bra       SetBreakPoint_13
                    4567   SetBreakPoint_15:
00002986  4CDF 0C1C 4568          movem.l   (A7)+,D2/D3/D4/A2/A3
0000298A  4E5E      4569          unlk      A6
0000298C  4E75      4570          rts
                    4571   ; }
                    4572   ; }
                    4573   ; }
                    4574   ; void SetWatchPoint(void)
                    4575   ; {
                    4576   _SetWatchPoint:
0000298E  4E56 FFF8 4577          link      A6,#-8
00002992  48E7 3030 4578          movem.l   D2/D3/A2/A3,-(A7)
00002996  45F9 0000 4579          lea       _printf.L,A2
0000299A  3F54      
0000299C  47F9 0B00 4580          lea       _WatchPointSetOrCleared.L,A3
000029A0  01A2      
                    4581   ; int i;
                    4582   ; int WPNumber;
                    4583   ; int WPAddress;
                    4584   ; volatile unsigned short int* ProgramWatchPointAddress;
                    4585   ; // see if any free break points
                    4586   ; for (i = 0; i < 8; i++) {
000029A2  4282      4587          clr.l     D2
                    4588   SetWatchPoint_1:
000029A4  0C82 0000 4589          cmp.l     #8,D2
000029A8  0008      
000029AA  6C10      4590          bge.s     SetWatchPoint_3
                    4591   ; if (WatchPointSetOrCleared[i] == 0)
000029AC  2002      4592          move.l    D2,D0
000029AE  E588      4593          lsl.l     #2,D0
000029B0  2033 0800 4594          move.l    0(A3,D0.L),D0
000029B4  6602      4595          bne.s     SetWatchPoint_4
                    4596   ; break;         // if spare WP found allow user to set it
000029B6  6004      4597          bra.s     SetWatchPoint_3
                    4598   SetWatchPoint_4:
000029B8  5282      4599          addq.l    #1,D2
000029BA  60E8      4600          bra       SetWatchPoint_1
                    4601   SetWatchPoint_3:
                    4602   ; }
                    4603   ; if (i == 8) {
000029BC  0C82 0000 4604          cmp.l     #8,D2
000029C0  0008      
000029C2  660E      4605          bne.s     SetWatchPoint_6
                    4606   ; printf("\r\nNo FREE Watch Points.....");
000029C4  4879 0000 4607          pea       @lab5k_85.L
000029C8  5386      
000029CA  4E92      4608          jsr       (A2)
000029CC  584F      4609          addq.w    #4,A7
                    4610   ; return;
000029CE  6000 008C 4611          bra       SetWatchPoint_11
                    4612   SetWatchPoint_6:
                    4613   ; }
                    4614   ; printf("\r\nWatch Point Address: ");
000029D2  4879 0000 4615          pea       @lab5k_86.L
000029D6  53A2      
000029D8  4E92      4616          jsr       (A2)
000029DA  584F      4617          addq.w    #4,A7
                    4618   ; WPAddress = Get8HexDigits(0);
000029DC  42A7      4619          clr.l     -(A7)
000029DE  4EB8 148E 4620          jsr       _Get8HexDigits
000029E2  584F      4621          addq.w    #4,A7
000029E4  2600      4622          move.l    D0,D3
                    4623   ; // search for first free wp or existing same wp
                    4624   ; for (i = 0; i < 8; i++) {
000029E6  4282      4625          clr.l     D2
                    4626   SetWatchPoint_9:
000029E8  0C82 0000 4627          cmp.l     #8,D2
000029EC  0008      
000029EE  6C00 006C 4628          bge       SetWatchPoint_11
                    4629   ; if (WatchPointAddress[i] == WPAddress && WPAddress != 0) {     //so we can set a wp at 0
000029F2  2002      4630          move.l    D2,D0
000029F4  E588      4631          lsl.l     #2,D0
000029F6  41F9 0B00 4632          lea       _WatchPointAddress.L,A0
000029FA  0182      
000029FC  B6B0 0800 4633          cmp.l     0(A0,D0.L),D3
00002A00  6614      4634          bne.s     SetWatchPoint_12
00002A02  4A83      4635          tst.l     D3
00002A04  6710      4636          beq.s     SetWatchPoint_12
                    4637   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress);
00002A06  2F03      4638          move.l    D3,-(A7)
00002A08  4879 0000 4639          pea       @lab5k_87.L
00002A0C  53BA      
00002A0E  4E92      4640          jsr       (A2)
00002A10  504F      4641          addq.w    #8,A7
                    4642   ; return;
00002A12  6000 0048 4643          bra       SetWatchPoint_11
                    4644   SetWatchPoint_12:
                    4645   ; }
                    4646   ; if (WatchPointSetOrCleared[i] == 0) {
00002A16  2002      4647          move.l    D2,D0
00002A18  E588      4648          lsl.l     #2,D0
00002A1A  2033 0800 4649          move.l    0(A3,D0.L),D0
00002A1E  6600 0038 4650          bne       SetWatchPoint_14
                    4651   ; WatchPointSetOrCleared[i] = 1;                                 // mark this watchpoint as set
00002A22  2002      4652          move.l    D2,D0
00002A24  E588      4653          lsl.l     #2,D0
00002A26  27BC 0000 4654          move.l    #1,0(A3,D0.L)
00002A2A  0001 0800 
                    4655   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress);
00002A2E  2F03      4656          move.l    D3,-(A7)
00002A30  4879 0000 4657          pea       @lab5k_88.L
00002A34  53F0      
00002A36  4E92      4658          jsr       (A2)
00002A38  504F      4659          addq.w    #8,A7
                    4660   ; WatchPointAddress[i] = WPAddress;                              // record the address of this watch point in the debugger
00002A3A  2002      4661          move.l    D2,D0
00002A3C  E588      4662          lsl.l     #2,D0
00002A3E  41F9 0B00 4663          lea       _WatchPointAddress.L,A0
00002A42  0182      
00002A44  2183 0800 4664          move.l    D3,0(A0,D0.L)
                    4665   ; printf("\r\n");
00002A48  4879 0000 4666          pea       @lab5k_1.L
00002A4C  4B04      
00002A4E  4E92      4667          jsr       (A2)
00002A50  584F      4668          addq.w    #4,A7
                    4669   ; WatchPointDisplay();       // display the break points
00002A52  4EB8 2512 4670          jsr       _WatchPointDisplay
                    4671   ; return;
00002A56  6004      4672          bra.s     SetWatchPoint_11
                    4673   SetWatchPoint_14:
00002A58  5282      4674          addq.l    #1,D2
00002A5A  608C      4675          bra       SetWatchPoint_9
                    4676   SetWatchPoint_11:
00002A5C  4CDF 0C0C 4677          movem.l   (A7)+,D2/D3/A2/A3
00002A60  4E5E      4678          unlk      A6
00002A62  4E75      4679          rts
                    4680   ; }
                    4681   ; }
                    4682   ; }
                    4683   ; void HandleBreakPoint(void)
                    4684   ; {
                    4685   _HandleBreakPoint:
00002A64  4E56 FFFC 4686          link      A6,#-4
00002A68  48E7 0038 4687          movem.l   A2/A3/A4,-(A7)
00002A6C  45F9 0B00 4688          lea       _i.L,A2
00002A70  00C4      
00002A72  47F9 0000 4689          lea       _printf.L,A3
00002A76  3F54      
00002A78  49F9 0B00 4690          lea       _PC.L,A4
00002A7C  0120      
                    4691   ; volatile unsigned short int* ProgramBreakPointAddress;
                    4692   ; // now we have to put the break point back to run the instruction
                    4693   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    4694   ; PC = PC - 2;  // ready for user to resume after reaching breakpoint
00002A7E  5594      4695          subq.l    #2,(A4)
                    4696   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT");
00002A80  4879 0000 4697          pea       @lab5k_89.L
00002A84  5416      
00002A86  4E93      4698          jsr       (A3)
00002A88  584F      4699          addq.w    #4,A7
                    4700   ; printf("\r\nSingle Step : [ON]");
00002A8A  4879 0000 4701          pea       @lab5k_90.L
00002A8E  542A      
00002A90  4E93      4702          jsr       (A3)
00002A92  584F      4703          addq.w    #4,A7
                    4704   ; printf("\r\nBreakPoints : [Enabled]");
00002A94  4879 0000 4705          pea       @lab5k_91.L
00002A98  5440      
00002A9A  4E93      4706          jsr       (A3)
00002A9C  584F      4707          addq.w    #4,A7
                    4708   ; // now clear the break point (put original instruction back)
                    4709   ; ProgramBreakPointAddress = PC;
00002A9E  2D54 FFFC 4710          move.l    (A4),-4(A6)
                    4711   ; for (i = 0; i < 8; i++) {
00002AA2  4292      4712          clr.l     (A2)
                    4713   HandleBreakPoint_1:
00002AA4  2012      4714          move.l    (A2),D0
00002AA6  0C80 0000 4715          cmp.l     #8,D0
00002AAA  0008      
00002AAC  6400 0056 4716          bhs       HandleBreakPoint_3
                    4717   ; if (BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002AB0  2012      4718          move.l    (A2),D0
00002AB2  E588      4719          lsl.l     #2,D0
00002AB4  41F9 0B00 4720          lea       _BreakPointAddress.L,A0
00002AB8  012E      
00002ABA  2230 0800 4721          move.l    0(A0,D0.L),D1
00002ABE  B294      4722          cmp.l     (A4),D1
00002AC0  6600 003E 4723          bne       HandleBreakPoint_4
                    4724   ; BreakPointAddress[i] = 0;
00002AC4  2012      4725          move.l    (A2),D0
00002AC6  E588      4726          lsl.l     #2,D0
00002AC8  41F9 0B00 4727          lea       _BreakPointAddress.L,A0
00002ACC  012E      
00002ACE  42B0 0800 4728          clr.l     0(A0,D0.L)
                    4729   ; BreakPointSetOrCleared[i] = 0;
00002AD2  2012      4730          move.l    (A2),D0
00002AD4  E588      4731          lsl.l     #2,D0
00002AD6  41F9 0B00 4732          lea       _BreakPointSetOrCleared.L,A0
00002ADA  015E      
00002ADC  42B0 0800 4733          clr.l     0(A0,D0.L)
                    4734   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00002AE0  2012      4735          move.l    (A2),D0
00002AE2  E388      4736          lsl.l     #1,D0
00002AE4  41F9 0B00 4737          lea       _BreakPointInstruction.L,A0
00002AE8  014E      
00002AEA  226E FFFC 4738          move.l    -4(A6),A1
00002AEE  32B0 0800 4739          move.w    0(A0,D0.L),(A1)
                    4740   ; BreakPointInstruction[i] = 0;
00002AF2  2012      4741          move.l    (A2),D0
00002AF4  E388      4742          lsl.l     #1,D0
00002AF6  41F9 0B00 4743          lea       _BreakPointInstruction.L,A0
00002AFA  014E      
00002AFC  4270 0800 4744          clr.w     0(A0,D0.L)
                    4745   HandleBreakPoint_4:
00002B00  5292      4746          addq.l    #1,(A2)
00002B02  60A0      4747          bra       HandleBreakPoint_1
                    4748   HandleBreakPoint_3:
                    4749   ; }
                    4750   ; }
                    4751   ; DumpRegisters();
00002B04  4EB8 1C90 4752          jsr       _DumpRegisters
                    4753   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002B08  4879 0000 4754          pea       @lab5k_53.L
00002B0C  4FBC      
00002B0E  4E93      4755          jsr       (A3)
00002B10  584F      4756          addq.w    #4,A7
                    4757   ; printf("\r\nPress <ESC> to Resume User Program\r\n");
00002B12  4879 0000 4758          pea       @lab5k_92.L
00002B16  545A      
00002B18  4E93      4759          jsr       (A3)
00002B1A  584F      4760          addq.w    #4,A7
                    4761   ; menu();
00002B1C  4EB9 0000 4762          jsr       _menu
00002B20  2D28      
00002B22  4CDF 1C00 4763          movem.l   (A7)+,A2/A3/A4
00002B26  4E5E      4764          unlk      A6
00002B28  4E75      4765          rts
                    4766   ; }
                    4767   ; void UnknownCommand()
                    4768   ; {
                    4769   _UnknownCommand:
                    4770   ; printf("\r\nUnknown Command.....\r\n");
00002B2A  4879 0000 4771          pea       @lab5k_93.L
00002B2E  5482      
00002B30  4EB9 0000 4772          jsr       _printf
00002B34  3F54      
00002B36  584F      4773          addq.w    #4,A7
                    4774   ; Help();
00002B38  4EB9 0000 4775          jsr       _Help
00002B3C  2C4E      
00002B3E  4E75      4776          rts
                    4777   ; }
                    4778   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    4779   ; void CallDebugMonitor(void)
                    4780   ; {
                    4781   _CallDebugMonitor:
                    4782   ; printf("\r\nProgram Ended (TRAP #15)....");
00002B40  4879 0000 4783          pea       @lab5k_94.L
00002B44  549C      
00002B46  4EB9 0000 4784          jsr       _printf
00002B4A  3F54      
00002B4C  584F      4785          addq.w    #4,A7
                    4786   ; menu();
00002B4E  4EB9 0000 4787          jsr       _menu
00002B52  2D28      
00002B54  4E75      4788          rts
                    4789   ; }
                    4790   ; void Breakpoint(void)
                    4791   ; {
                    4792   _Breakpoint:
00002B56  2F02      4793          move.l    D2,-(A7)
                    4794   ; char c;
                    4795   ; c = toupper(_getch());
00002B58  2F00      4796          move.l    D0,-(A7)
00002B5A  4EB8 1352 4797          jsr       __getch
00002B5E  2200      4798          move.l    D0,D1
00002B60  201F      4799          move.l    (A7)+,D0
00002B62  2F01      4800          move.l    D1,-(A7)
00002B64  4EB9 0000 4801          jsr       _toupper
00002B68  4078      
00002B6A  584F      4802          addq.w    #4,A7
00002B6C  1400      4803          move.b    D0,D2
                    4804   ; if (c == (char)('D'))                                      // BreakPoint Display
00002B6E  0C02 0044 4805          cmp.b     #68,D2
00002B72  6608      4806          bne.s     Breakpoint_1
                    4807   ; BreakPointDisplay();
00002B74  4EB8 243E 4808          jsr       _BreakPointDisplay
00002B78  6000 0054 4809          bra       Breakpoint_10
                    4810   Breakpoint_1:
                    4811   ; else if (c == (char)('K')) {                                 // breakpoint Kill
00002B7C  0C02 004B 4812          cmp.b     #75,D2
00002B80  6630      4813          bne.s     Breakpoint_3
                    4814   ; printf("\r\nKill All Break Points...(y/n)?");
00002B82  4879 0000 4815          pea       @lab5k_95.L
00002B86  54BC      
00002B88  4EB9 0000 4816          jsr       _printf
00002B8C  3F54      
00002B8E  584F      4817          addq.w    #4,A7
                    4818   ; c = toupper(_getch());
00002B90  2F00      4819          move.l    D0,-(A7)
00002B92  4EB8 1352 4820          jsr       __getch
00002B96  2200      4821          move.l    D0,D1
00002B98  201F      4822          move.l    (A7)+,D0
00002B9A  2F01      4823          move.l    D1,-(A7)
00002B9C  4EB9 0000 4824          jsr       _toupper
00002BA0  4078      
00002BA2  584F      4825          addq.w    #4,A7
00002BA4  1400      4826          move.b    D0,D2
                    4827   ; if (c == (char)('Y'))
00002BA6  0C02 0059 4828          cmp.b     #89,D2
00002BAA  6604      4829          bne.s     Breakpoint_5
                    4830   ; KillAllBreakPoints();
00002BAC  4EB8 27D6 4831          jsr       _KillAllBreakPoints
                    4832   Breakpoint_5:
00002BB0  601C      4833          bra.s     Breakpoint_10
                    4834   Breakpoint_3:
                    4835   ; }
                    4836   ; else if (c == (char)('S')) {
00002BB2  0C02 0053 4837          cmp.b     #83,D2
00002BB6  6606      4838          bne.s     Breakpoint_7
                    4839   ; SetBreakPoint();
00002BB8  4EB8 286E 4840          jsr       _SetBreakPoint
00002BBC  6010      4841          bra.s     Breakpoint_10
                    4842   Breakpoint_7:
                    4843   ; }
                    4844   ; else if (c == (char)('C')) {
00002BBE  0C02 0043 4845          cmp.b     #67,D2
00002BC2  6606      4846          bne.s     Breakpoint_9
                    4847   ; BreakPointClear();
00002BC4  4EB8 25BE 4848          jsr       _BreakPointClear
00002BC8  6004      4849          bra.s     Breakpoint_10
                    4850   Breakpoint_9:
                    4851   ; }
                    4852   ; else
                    4853   ; UnknownCommand();
00002BCA  4EB8 2B2A 4854          jsr       _UnknownCommand
                    4855   Breakpoint_10:
00002BCE  241F      4856          move.l    (A7)+,D2
00002BD0  4E75      4857          rts
                    4858   ; }
                    4859   ; void Watchpoint(void)
                    4860   ; {
                    4861   _Watchpoint:
00002BD2  2F02      4862          move.l    D2,-(A7)
                    4863   ; char c;
                    4864   ; c = toupper(_getch());
00002BD4  2F00      4865          move.l    D0,-(A7)
00002BD6  4EB8 1352 4866          jsr       __getch
00002BDA  2200      4867          move.l    D0,D1
00002BDC  201F      4868          move.l    (A7)+,D0
00002BDE  2F01      4869          move.l    D1,-(A7)
00002BE0  4EB9 0000 4870          jsr       _toupper
00002BE4  4078      
00002BE6  584F      4871          addq.w    #4,A7
00002BE8  1400      4872          move.b    D0,D2
                    4873   ; if (c == (char)('D'))                                      // WatchPoint Display
00002BEA  0C02 0044 4874          cmp.b     #68,D2
00002BEE  6608      4875          bne.s     Watchpoint_1
                    4876   ; WatchPointDisplay();
00002BF0  4EB8 2512 4877          jsr       _WatchPointDisplay
00002BF4  6000 0054 4878          bra       Watchpoint_10
                    4879   Watchpoint_1:
                    4880   ; else if (c == (char)('K')) {                                 // wtahcpoint Kill
00002BF8  0C02 004B 4881          cmp.b     #75,D2
00002BFC  6630      4882          bne.s     Watchpoint_3
                    4883   ; printf("\r\nKill All Watch Points...(y/n)?");
00002BFE  4879 0000 4884          pea       @lab5k_96.L
00002C02  54DE      
00002C04  4EB9 0000 4885          jsr       _printf
00002C08  3F54      
00002C0A  584F      4886          addq.w    #4,A7
                    4887   ; c = toupper(_getch());
00002C0C  2F00      4888          move.l    D0,-(A7)
00002C0E  4EB8 1352 4889          jsr       __getch
00002C12  2200      4890          move.l    D0,D1
00002C14  201F      4891          move.l    (A7)+,D0
00002C16  2F01      4892          move.l    D1,-(A7)
00002C18  4EB9 0000 4893          jsr       _toupper
00002C1C  4078      
00002C1E  584F      4894          addq.w    #4,A7
00002C20  1400      4895          move.b    D0,D2
                    4896   ; if (c == (char)('Y'))
00002C22  0C02 0059 4897          cmp.b     #89,D2
00002C26  6604      4898          bne.s     Watchpoint_5
                    4899   ; KillAllWatchPoints();
00002C28  4EB8 283E 4900          jsr       _KillAllWatchPoints
                    4901   Watchpoint_5:
00002C2C  601C      4902          bra.s     Watchpoint_10
                    4903   Watchpoint_3:
                    4904   ; }
                    4905   ; else if (c == (char)('S')) {
00002C2E  0C02 0053 4906          cmp.b     #83,D2
00002C32  6606      4907          bne.s     Watchpoint_7
                    4908   ; SetWatchPoint();
00002C34  4EB8 298E 4909          jsr       _SetWatchPoint
00002C38  6010      4910          bra.s     Watchpoint_10
                    4911   Watchpoint_7:
                    4912   ; }
                    4913   ; else if (c == (char)('C')) {
00002C3A  0C02 0043 4914          cmp.b     #67,D2
00002C3E  6606      4915          bne.s     Watchpoint_9
                    4916   ; WatchPointClear();
00002C40  4EB8 2698 4917          jsr       _WatchPointClear
00002C44  6004      4918          bra.s     Watchpoint_10
                    4919   Watchpoint_9:
                    4920   ; }
                    4921   ; else
                    4922   ; UnknownCommand();
00002C46  4EB8 2B2A 4923          jsr       _UnknownCommand
                    4924   Watchpoint_10:
00002C4A  241F      4925          move.l    (A7)+,D2
00002C4C  4E75      4926          rts
                    4927   ; }
                    4928   ; void Help(void)
                    4929   ; {
                    4930   _Help:
00002C4E  48E7 2020 4931          movem.l   D2/A2,-(A7)
00002C52  45F9 0000 4932          lea       _printf.L,A2
00002C56  3F54      
                    4933   ; char* banner = "\r\n----------------------------------------------------------------";
00002C58  41F9 0000 4934          lea       @lab5k_97.L,A0
00002C5C  5500      
00002C5E  2408      4935          move.l    A0,D2
                    4936   ; printf(banner);
00002C60  2F02      4937          move.l    D2,-(A7)
00002C62  4E92      4938          jsr       (A2)
00002C64  584F      4939          addq.w    #4,A7
                    4940   ; printf("\r\n  Debugger Command Summary");
00002C66  4879 0000 4941          pea       @lab5k_98.L
00002C6A  5544      
00002C6C  4E92      4942          jsr       (A2)
00002C6E  584F      4943          addq.w    #4,A7
                    4944   ; printf(banner);
00002C70  2F02      4945          move.l    D2,-(A7)
00002C72  4E92      4946          jsr       (A2)
00002C74  584F      4947          addq.w    #4,A7
                    4948   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002C76  4879 0000 4949          pea       @lab5k_99.L
00002C7A  5562      
00002C7C  4E92      4950          jsr       (A2)
00002C7E  584F      4951          addq.w    #4,A7
                    4952   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill");
00002C80  4879 0000 4953          pea       @lab5k_100.L
00002C84  55A6      
00002C86  4E92      4954          jsr       (A2)
00002C88  584F      4955          addq.w    #4,A7
                    4956   ; printf("\r\n  C            - Copy Program from Flash to Main Memory");
00002C8A  4879 0000 4957          pea       @lab5k_101.L
00002C8E  55DE      
00002C90  4E92      4958          jsr       (A2)
00002C92  584F      4959          addq.w    #4,A7
                    4960   ; printf("\r\n  D            - Dump Memory Contents to Screen");
00002C94  4879 0000 4961          pea       @lab5k_102.L
00002C98  5618      
00002C9A  4E92      4962          jsr       (A2)
00002C9C  584F      4963          addq.w    #4,A7
                    4964   ; printf("\r\n  E            - Enter String into Memory");
00002C9E  4879 0000 4965          pea       @lab5k_103.L
00002CA2  564A      
00002CA4  4E92      4966          jsr       (A2)
00002CA6  584F      4967          addq.w    #4,A7
                    4968   ; printf("\r\n  F            - Fill Memory with Data");
00002CA8  4879 0000 4969          pea       @lab5k_104.L
00002CAC  5676      
00002CAE  4E92      4970          jsr       (A2)
00002CB0  584F      4971          addq.w    #4,A7
                    4972   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC);
00002CB2  2F39 0B00 4973          move.l    _PC.L,-(A7)
00002CB6  0120      
00002CB8  4879 0000 4974          pea       @lab5k_105.L
00002CBC  56A0      
00002CBE  4E92      4975          jsr       (A2)
00002CC0  504F      4976          addq.w    #8,A7
                    4977   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop");
00002CC2  4879 0000 4978          pea       @lab5k_106.L
00002CC6  56DA      
00002CC8  4E92      4979          jsr       (A2)
00002CCA  584F      4980          addq.w    #4,A7
                    4981   ; printf("\r\n  M            - Memory Examine and Change");
00002CCC  4879 0000 4982          pea       @lab5k_107.L
00002CD0  5712      
00002CD2  4E92      4983          jsr       (A2)
00002CD4  584F      4984          addq.w    #4,A7
                    4985   ; printf("\r\n  P            - Program Flash Memory with User Program");
00002CD6  4879 0000 4986          pea       @lab5k_108.L
00002CDA  5740      
00002CDC  4E92      4987          jsr       (A2)
00002CDE  584F      4988          addq.w    #4,A7
                    4989   ; printf("\r\n  R            - Display 68000 Registers");
00002CE0  4879 0000 4990          pea       @lab5k_109.L
00002CE4  577A      
00002CE6  4E92      4991          jsr       (A2)
00002CE8  584F      4992          addq.w    #4,A7
                    4993   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode");
00002CEA  4879 0000 4994          pea       @lab5k_110.L
00002CEE  57A6      
00002CF0  4E92      4995          jsr       (A2)
00002CF2  584F      4996          addq.w    #4,A7
                    4997   ; printf("\r\n  TM           - Test Memory");
00002CF4  4879 0000 4998          pea       @lab5k_111.L
00002CF8  57D8      
00002CFA  4E92      4999          jsr       (A2)
00002CFC  584F      5000          addq.w    #4,A7
                    5001   ; printf("\r\n  TS           - Test Switches: SW7-0");
00002CFE  4879 0000 5002          pea       @lab5k_112.L
00002D02  57F8      
00002D04  4E92      5003          jsr       (A2)
00002D06  584F      5004          addq.w    #4,A7
                    5005   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment");
00002D08  4879 0000 5006          pea       @lab5k_113.L
00002D0C  5820      
00002D0E  4E92      5007          jsr       (A2)
00002D10  584F      5008          addq.w    #4,A7
                    5009   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill");
00002D12  4879 0000 5010          pea       @lab5k_114.L
00002D16  5856      
00002D18  4E92      5011          jsr       (A2)
00002D1A  584F      5012          addq.w    #4,A7
                    5013   ; printf(banner);
00002D1C  2F02      5014          move.l    D2,-(A7)
00002D1E  4E92      5015          jsr       (A2)
00002D20  584F      5016          addq.w    #4,A7
00002D22  4CDF 0404 5017          movem.l   (A7)+,D2/A2
00002D26  4E75      5018          rts
                    5019   ; }
                    5020   ; void menu(void)
                    5021   ; {
                    5022   _menu:
00002D28  48E7 303C 5023          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002D2C  45F9 0000 5024          lea       _printf.L,A2
00002D30  3F54      
00002D32  47F9 0B00 5025          lea       _Trace.L,A3
00002D36  00D8      
00002D38  49F9 0B00 5026          lea       _x.L,A4
00002D3C  00C8      
00002D3E  4BF9 0B00 5027          lea       _SR.L,A5
00002D42  012C      
                    5028   ; char c, c1;
                    5029   ; while (1) {
                    5030   menu_1:
                    5031   ; FlushKeyboard();               // dump unread characters from keyboard
00002D44  4EB8 1390 5032          jsr       _FlushKeyboard
                    5033   ; printf("\r\n#");
00002D48  4879 0000 5034          pea       @lab5k_115.L
00002D4C  588E      
00002D4E  4E92      5035          jsr       (A2)
00002D50  584F      5036          addq.w    #4,A7
                    5037   ; c = toupper(_getch());
00002D52  2F00      5038          move.l    D0,-(A7)
00002D54  4EB8 1352 5039          jsr       __getch
00002D58  2200      5040          move.l    D0,D1
00002D5A  201F      5041          move.l    (A7)+,D0
00002D5C  2F01      5042          move.l    D1,-(A7)
00002D5E  4EB9 0000 5043          jsr       _toupper
00002D62  4078      
00002D64  584F      5044          addq.w    #4,A7
00002D66  1400      5045          move.b    D0,D2
                    5046   ; if (c == (char)('L'))                  // load s record file
00002D68  0C02 004C 5047          cmp.b     #76,D2
00002D6C  6608      5048          bne.s     menu_4
                    5049   ; Load_SRecordFile();
00002D6E  4EB8 1620 5050          jsr       _Load_SRecordFile
00002D72  6000 0276 5051          bra       menu_58
                    5052   menu_4:
                    5053   ; else if (c == (char)('D'))             // dump memory
00002D76  0C02 0044 5054          cmp.b     #68,D2
00002D7A  6608      5055          bne.s     menu_6
                    5056   ; DumpMemory();
00002D7C  4EB8 14B6 5057          jsr       _DumpMemory
00002D80  6000 0268 5058          bra       menu_58
                    5059   menu_6:
                    5060   ; else if (c == (char)('E'))             // Enter String into memory
00002D84  0C02 0045 5061          cmp.b     #69,D2
00002D88  660A      5062          bne.s     menu_8
                    5063   ; EnterString();
00002D8A  4EB9 0000 5064          jsr       _EnterString
00002D8E  3132      
00002D90  6000 0258 5065          bra       menu_58
                    5066   menu_8:
                    5067   ; else if (c == (char)('F'))             // fill memory
00002D94  0C02 0046 5068          cmp.b     #70,D2
00002D98  6608      5069          bne.s     menu_10
                    5070   ; FillMemory();
00002D9A  4EB8 15A6 5071          jsr       _FillMemory
00002D9E  6000 024A 5072          bra       menu_58
                    5073   menu_10:
                    5074   ; else if (c == (char)('G')) {           // go user program
00002DA2  0C02 0047 5075          cmp.b     #71,D2
00002DA6  6626      5076          bne.s     menu_12
                    5077   ; printf("\r\nProgram Running.....");
00002DA8  4879 0000 5078          pea       @lab5k_116.L
00002DAC  5892      
00002DAE  4E92      5079          jsr       (A2)
00002DB0  584F      5080          addq.w    #4,A7
                    5081   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
00002DB2  4879 0000 5082          pea       @lab5k_117.L
00002DB6  58AA      
00002DB8  4E92      5083          jsr       (A2)
00002DBA  584F      5084          addq.w    #4,A7
                    5085   ; GoFlag = 1;
00002DBC  23FC 0000 5086          move.l    #1,_GoFlag.L
00002DC0  0001 0B00 
00002DC4  00DC      
                    5087   ; go();
00002DC6  4EB8 08B8 5088          jsr       _go
00002DCA  6000 021E 5089          bra       menu_58
                    5090   menu_12:
                    5091   ; }
                    5092   ; else if (c == (char)('M'))           // memory examine and modify
00002DCE  0C02 004D 5093          cmp.b     #77,D2
00002DD2  6608      5094          bne.s     menu_14
                    5095   ; MemoryChange();
00002DD4  4EB8 17AE 5096          jsr       _MemoryChange
00002DD8  6000 0210 5097          bra       menu_58
                    5098   menu_14:
                    5099   ; else if (c == (char)('P'))            // Program Flash Chip
00002DDC  0C02 0050 5100          cmp.b     #80,D2
00002DE0  6608      5101          bne.s     menu_16
                    5102   ; ProgramFlashChip();
00002DE2  4EB8 1AC8 5103          jsr       _ProgramFlashChip
00002DE6  6000 0202 5104          bra       menu_58
                    5105   menu_16:
                    5106   ; else if (c == (char)('C'))             // copy flash chip to ram and go
00002DEA  0C02 0043 5107          cmp.b     #67,D2
00002DEE  6608      5108          bne.s     menu_18
                    5109   ; LoadFromFlashChip();
00002DF0  4EB8 1BD6 5110          jsr       _LoadFromFlashChip
00002DF4  6000 01F4 5111          bra       menu_58
                    5112   menu_18:
                    5113   ; else if (c == (char)('R'))             // dump registers
00002DF8  0C02 0052 5114          cmp.b     #82,D2
00002DFC  6608      5115          bne.s     menu_20
                    5116   ; DumpRegisters();
00002DFE  4EB8 1C90 5117          jsr       _DumpRegisters
00002E02  6000 01E6 5118          bra       menu_58
                    5119   menu_20:
                    5120   ; else if (c == (char)('.'))           // change registers
00002E06  0C02 002E 5121          cmp.b     #46,D2
00002E0A  6608      5122          bne.s     menu_22
                    5123   ; ChangeRegisters();
00002E0C  4EB8 2182 5124          jsr       _ChangeRegisters
00002E10  6000 01D8 5125          bra       menu_58
                    5126   menu_22:
                    5127   ; else if (c == (char)('B'))              // breakpoint command
00002E14  0C02 0042 5128          cmp.b     #66,D2
00002E18  6608      5129          bne.s     menu_24
                    5130   ; Breakpoint();
00002E1A  4EB8 2B56 5131          jsr       _Breakpoint
00002E1E  6000 01CA 5132          bra       menu_58
                    5133   menu_24:
                    5134   ; else if (c == (char)('T')) {          // Test command
00002E22  0C02 0054 5135          cmp.b     #84,D2
00002E26  6600 0046 5136          bne       menu_26
                    5137   ; c1 = toupper(_getch());
00002E2A  2F00      5138          move.l    D0,-(A7)
00002E2C  4EB8 1352 5139          jsr       __getch
00002E30  2200      5140          move.l    D0,D1
00002E32  201F      5141          move.l    (A7)+,D0
00002E34  2F01      5142          move.l    D1,-(A7)
00002E36  4EB9 0000 5143          jsr       _toupper
00002E3A  4078      
00002E3C  584F      5144          addq.w    #4,A7
00002E3E  1600      5145          move.b    D0,D3
                    5146   ; if (c1 == (char)('M'))                    // memory test
00002E40  0C03 004D 5147          cmp.b     #77,D3
00002E44  6608      5148          bne.s     menu_28
                    5149   ; MemoryTest();
00002E46  4EB9 0000 5150          jsr       _MemoryTest
00002E4A  3182      
00002E4C  601C      5151          bra.s     menu_33
                    5152   menu_28:
                    5153   ; else if (c1 == (char)('S'))              // Switch Test command
00002E4E  0C03 0053 5154          cmp.b     #83,D3
00002E52  6606      5155          bne.s     menu_30
                    5156   ; SwitchTest();
00002E54  4EB8 128E 5157          jsr       _SwitchTest
00002E58  6010      5158          bra.s     menu_33
                    5159   menu_30:
                    5160   ; else if (c1 == (char)('D'))              // display Test command
00002E5A  0C03 0044 5161          cmp.b     #68,D3
00002E5E  6606      5162          bne.s     menu_32
                    5163   ; TestLEDS();
00002E60  4EB8 123A 5164          jsr       _TestLEDS
00002E64  6004      5165          bra.s     menu_33
                    5166   menu_32:
                    5167   ; else
                    5168   ; UnknownCommand();
00002E66  4EB8 2B2A 5169          jsr       _UnknownCommand
                    5170   menu_33:
00002E6A  6000 017E 5171          bra       menu_58
                    5172   menu_26:
                    5173   ; }
                    5174   ; else if (c == (char)(' ')) {             // Next instruction command
00002E6E  0C02 0020 5175          cmp.b     #32,D2
00002E72  6636      5176          bne.s     menu_34
                    5177   ; DisableBreakPoints();
00002E74  4EB8 273A 5178          jsr       _DisableBreakPoints
                    5179   ; if (Trace == 1 && GoFlag == 1) {    // if the program is running and trace mode on then 'N' is valid
00002E78  2013      5180          move.l    (A3),D0
00002E7A  0C80 0000 5181          cmp.l     #1,D0
00002E7E  0001      
00002E80  661A      5182          bne.s     menu_36
00002E82  2039 0B00 5183          move.l    _GoFlag.L,D0
00002E86  00DC      
00002E88  0C80 0000 5184          cmp.l     #1,D0
00002E8C  0001      
00002E8E  660C      5185          bne.s     menu_36
                    5186   ; TraceException = 1;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002E90  13FC 0001 5187          move.b    #1,4194314
00002E94  0040 000A 
                    5188   ; return;
00002E98  6000 0154 5189          bra       menu_38
                    5190   menu_36:
                    5191   ; }
                    5192   ; else
                    5193   ; printf("\r\nError: Press 'G' first to start program");
00002E9C  4879 0000 5194          pea       @lab5k_118.L
00002EA0  58D8      
00002EA2  4E92      5195          jsr       (A2)
00002EA4  584F      5196          addq.w    #4,A7
00002EA6  6000 0142 5197          bra       menu_58
                    5198   menu_34:
                    5199   ; }
                    5200   ; else if (c == (char)('S')) {             // single step
00002EAA  0C02 0053 5201          cmp.b     #83,D2
00002EAE  6600 008C 5202          bne       menu_39
                    5203   ; if (Trace == 0) {
00002EB2  2013      5204          move.l    (A3),D0
00002EB4  6600 0050 5205          bne       menu_41
                    5206   ; DisableBreakPoints();
00002EB8  4EB8 273A 5207          jsr       _DisableBreakPoints
                    5208   ; printf("\r\nSingle Step  :[ON]");
00002EBC  4879 0000 5209          pea       @lab5k_119.L
00002EC0  5902      
00002EC2  4E92      5210          jsr       (A2)
00002EC4  584F      5211          addq.w    #4,A7
                    5212   ; printf("\r\nBreak Points :[Disabled]");
00002EC6  4879 0000 5213          pea       @lab5k_52.L
00002ECA  4FA0      
00002ECC  4E92      5214          jsr       (A2)
00002ECE  584F      5215          addq.w    #4,A7
                    5216   ; SR = SR | (unsigned short int)(0x8000);    // set T bit in status register
00002ED0  0055 8000 5217          or.w      #32768,(A5)
                    5218   ; printf("\r\nPress 'G' to Trace Program from address $%X.....", PC);
00002ED4  2F39 0B00 5219          move.l    _PC.L,-(A7)
00002ED8  0120      
00002EDA  4879 0000 5220          pea       @lab5k_120.L
00002EDE  5918      
00002EE0  4E92      5221          jsr       (A2)
00002EE2  504F      5222          addq.w    #8,A7
                    5223   ; printf("\r\nPush <RESET Button> to Stop.....");
00002EE4  4879 0000 5224          pea       @lab5k_121.L
00002EE8  594C      
00002EEA  4E92      5225          jsr       (A2)
00002EEC  584F      5226          addq.w    #4,A7
                    5227   ; DumpRegisters();
00002EEE  4EB8 1C90 5228          jsr       _DumpRegisters
                    5229   ; Trace = 1;
00002EF2  26BC 0000 5230          move.l    #1,(A3)
00002EF6  0001      
                    5231   ; TraceException = 1;
00002EF8  13FC 0001 5232          move.b    #1,4194314
00002EFC  0040 000A 
                    5233   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002F00  28B8 0074 5234          move.l    116,(A4)
00002F04  6032      5235          bra.s     menu_42
                    5236   menu_41:
                    5237   ; }
                    5238   ; else {
                    5239   ; Trace = 0;
00002F06  4293      5240          clr.l     (A3)
                    5241   ; TraceException = 0;
00002F08  4239 0040 5242          clr.b     4194314
00002F0C  000A      
                    5243   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002F0E  28B8 0074 5244          move.l    116,(A4)
                    5245   ; EnableBreakPoints();
00002F12  4EB8 278E 5246          jsr       _EnableBreakPoints
                    5247   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
00002F16  0255 7FFF 5248          and.w     #32767,(A5)
                    5249   ; printf("\r\nSingle Step : [OFF]");
00002F1A  4879 0000 5250          pea       @lab5k_122.L
00002F1E  5970      
00002F20  4E92      5251          jsr       (A2)
00002F22  584F      5252          addq.w    #4,A7
                    5253   ; printf("\r\nBreak Points :[Enabled]");
00002F24  4879 0000 5254          pea       @lab5k_123.L
00002F28  5986      
00002F2A  4E92      5255          jsr       (A2)
00002F2C  584F      5256          addq.w    #4,A7
                    5257   ; printf("\r\nPress <ESC> to Resume User Program.....");
00002F2E  4879 0000 5258          pea       @lab5k_124.L
00002F32  59A0      
00002F34  4E92      5259          jsr       (A2)
00002F36  584F      5260          addq.w    #4,A7
                    5261   menu_42:
00002F38  6000 00B0 5262          bra       menu_58
                    5263   menu_39:
                    5264   ; }
                    5265   ; }
                    5266   ; else if (c == (char)(0x1b)) {   // if user choses to end trace and run program
00002F3C  0C02 001B 5267          cmp.b     #27,D2
00002F40  6600 0042 5268          bne       menu_43
                    5269   ; Trace = 0;
00002F44  4293      5270          clr.l     (A3)
                    5271   ; TraceException = 0;
00002F46  4239 0040 5272          clr.b     4194314
00002F4A  000A      
                    5273   ; x = *(unsigned int*)(0x00000074);   // read IRQ 5 vector to reset trace vector generator
00002F4C  28B8 0074 5274          move.l    116,(A4)
                    5275   ; EnableBreakPoints();
00002F50  4EB8 278E 5276          jsr       _EnableBreakPoints
                    5277   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
00002F54  0255 7FFF 5278          and.w     #32767,(A5)
                    5279   ; printf("\r\nSingle Step  :[OFF]");
00002F58  4879 0000 5280          pea       @lab5k_125.L
00002F5C  59CA      
00002F5E  4E92      5281          jsr       (A2)
00002F60  584F      5282          addq.w    #4,A7
                    5283   ; printf("\r\nBreak Points :[Enabled]");
00002F62  4879 0000 5284          pea       @lab5k_123.L
00002F66  5986      
00002F68  4E92      5285          jsr       (A2)
00002F6A  584F      5286          addq.w    #4,A7
                    5287   ; printf("\r\nProgram Running.....");
00002F6C  4879 0000 5288          pea       @lab5k_116.L
00002F70  5892      
00002F72  4E92      5289          jsr       (A2)
00002F74  584F      5290          addq.w    #4,A7
                    5291   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
00002F76  4879 0000 5292          pea       @lab5k_117.L
00002F7A  58AA      
00002F7C  4E92      5293          jsr       (A2)
00002F7E  584F      5294          addq.w    #4,A7
                    5295   ; return;
00002F80  6000 006C 5296          bra       menu_38
                    5297   menu_43:
                    5298   ; }
                    5299   ; else if (c == (char)('W'))              // Watchpoint command
00002F84  0C02 0057 5300          cmp.b     #87,D2
00002F88  6608      5301          bne.s     menu_45
                    5302   ; Watchpoint();
00002F8A  4EB8 2BD2 5303          jsr       _Watchpoint
00002F8E  6000 005A 5304          bra       menu_58
                    5305   menu_45:
                    5306   ; else if (c == (char)('1')){  //I2C Write 
00002F92  0C02 0031 5307          cmp.b     #49,D2
00002F96  660A      5308          bne.s     menu_47
                    5309   ; WriteI2C();
00002F98  4EB9 0000 5310          jsr       _WriteI2C
00002F9C  38C4      
00002F9E  6000 004A 5311          bra       menu_58
                    5312   menu_47:
                    5313   ; }
                    5314   ; else if (c == (char)('2')){  //I2C Read
00002FA2  0C02 0032 5315          cmp.b     #50,D2
00002FA6  660A      5316          bne.s     menu_49
                    5317   ; ReadI2C();
00002FA8  4EB9 0000 5318          jsr       _ReadI2C
00002FAC  39B0      
00002FAE  6000 003A 5319          bra       menu_58
                    5320   menu_49:
                    5321   ; }
                    5322   ; else if (c == (char)('3')){  //I2C Page Write
00002FB2  0C02 0033 5323          cmp.b     #51,D2
00002FB6  6608      5324          bne.s     menu_51
                    5325   ; PageWriteI2C();
00002FB8  4EB9 0000 5326          jsr       _PageWriteI2C
00002FBC  3A72      
00002FBE  602A      5327          bra.s     menu_58
                    5328   menu_51:
                    5329   ; }
                    5330   ; else if (c == (char)('4')){  //I2C Sequential Read
00002FC0  0C02 0034 5331          cmp.b     #52,D2
00002FC4  6608      5332          bne.s     menu_53
                    5333   ; SeqReadI2C();
00002FC6  4EB9 0000 5334          jsr       _SeqReadI2C
00002FCA  3B12      
00002FCC  601C      5335          bra.s     menu_58
                    5336   menu_53:
                    5337   ; }
                    5338   ; else if (c == (char)('5')){  //ADC/DAC Operation
00002FCE  0C02 0035 5339          cmp.b     #53,D2
00002FD2  6606      5340          bne.s     menu_55
                    5341   ; DACWrite();
00002FD4  4EB8 0F98 5342          jsr       _DACWrite
00002FD8  6010      5343          bra.s     menu_58
                    5344   menu_55:
                    5345   ; }
                    5346   ; else if (c == (char)('6')){  //ADC/DAC Operation
00002FDA  0C02 0036 5347          cmp.b     #54,D2
00002FDE  6606      5348          bne.s     menu_57
                    5349   ; ADCWrite();
00002FE0  4EB8 1038 5350          jsr       _ADCWrite
00002FE4  6004      5351          bra.s     menu_58
                    5352   menu_57:
                    5353   ; }
                    5354   ; else
                    5355   ; UnknownCommand();
00002FE6  4EB8 2B2A 5356          jsr       _UnknownCommand
                    5357   menu_58:
00002FEA  6000 FD58 5358          bra       menu_1
                    5359   menu_38:
00002FEE  4CDF 3C0C 5360          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002FF2  4E75      5361          rts
                    5362   ; }
                    5363   ; }
                    5364   ; void PrintErrorMessageandAbort(char* string) {
                    5365   _PrintErrorMessageandAbort:
00002FF4  4E56 0000 5366          link      A6,#0
                    5367   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n");
00002FF8  4879 0000 5368          pea       @lab5k_126.L
00002FFC  59E0      
00002FFE  4EB9 0000 5369          jsr       _printf
00003002  3F54      
00003004  584F      5370          addq.w    #4,A7
                    5371   ; printf("%s\r\n", string);
00003006  2F2E 0008 5372          move.l    8(A6),-(A7)
0000300A  4879 0000 5373          pea       @lab5k_127.L
0000300E  59FC      
00003010  4EB9 0000 5374          jsr       _printf
00003014  3F54      
00003016  504F      5375          addq.w    #8,A7
                    5376   ; menu();
00003018  4EB8 2D28 5377          jsr       _menu
0000301C  4E5E      5378          unlk      A6
0000301E  4E75      5379          rts
                    5380   ; }
                    5381   ; void IRQMessage(int level) {
                    5382   _IRQMessage:
00003020  4E56 0000 5383          link      A6,#0
                    5384   ; printf("\r\n\r\nProgram ABORT !!!!!");
00003024  4879 0000 5385          pea       @lab5k_128.L
00003028  5A02      
0000302A  4EB9 0000 5386          jsr       _printf
0000302E  3F54      
00003030  584F      5387          addq.w    #4,A7
                    5388   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level);
00003032  2F2E 0008 5389          move.l    8(A6),-(A7)
00003036  4879 0000 5390          pea       @lab5k_129.L
0000303A  5A1A      
0000303C  4EB9 0000 5391          jsr       _printf
00003040  3F54      
00003042  504F      5392          addq.w    #8,A7
                    5393   ; menu();
00003044  4EB8 2D28 5394          jsr       _menu
00003048  4E5E      5395          unlk      A6
0000304A  4E75      5396          rts
                    5397   ; }
                    5398   ; void UnhandledIRQ1(void) {
                    5399   _UnhandledIRQ1:
                    5400   ; IRQMessage(1);
0000304C  4878 0001 5401          pea       1
00003050  4EB8 3020 5402          jsr       _IRQMessage
00003054  584F      5403          addq.w    #4,A7
00003056  4E75      5404          rts
                    5405   ; }
                    5406   ; void UnhandledIRQ2(void) {
                    5407   _UnhandledIRQ2:
                    5408   ; IRQMessage(2);
00003058  4878 0002 5409          pea       2
0000305C  4EB8 3020 5410          jsr       _IRQMessage
00003060  584F      5411          addq.w    #4,A7
00003062  4E75      5412          rts
                    5413   ; }
                    5414   ; void UnhandledIRQ3(void) {
                    5415   _UnhandledIRQ3:
                    5416   ; IRQMessage(3);
00003064  4878 0003 5417          pea       3
00003068  4EB8 3020 5418          jsr       _IRQMessage
0000306C  584F      5419          addq.w    #4,A7
0000306E  4E75      5420          rts
                    5421   ; }
                    5422   ; void UnhandledIRQ4(void) {
                    5423   _UnhandledIRQ4:
                    5424   ; IRQMessage(4);
00003070  4878 0004 5425          pea       4
00003074  4EB8 3020 5426          jsr       _IRQMessage
00003078  584F      5427          addq.w    #4,A7
0000307A  4E75      5428          rts
                    5429   ; }
                    5430   ; void UnhandledIRQ5(void) {
                    5431   _UnhandledIRQ5:
                    5432   ; IRQMessage(5);
0000307C  4878 0005 5433          pea       5
00003080  4EB8 3020 5434          jsr       _IRQMessage
00003084  584F      5435          addq.w    #4,A7
00003086  4E75      5436          rts
                    5437   ; }
                    5438   ; void UnhandledIRQ6(void) {
                    5439   _UnhandledIRQ6:
                    5440   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....");
00003088  4879 0000 5441          pea       @lab5k_130.L
0000308C  5A3E      
0000308E  4EB8 2FF4 5442          jsr       _PrintErrorMessageandAbort
00003092  584F      5443          addq.w    #4,A7
                    5444   ; menu();
00003094  4EB8 2D28 5445          jsr       _menu
00003098  4E75      5446          rts
                    5447   ; }
                    5448   ; void UnhandledIRQ7(void) {
                    5449   _UnhandledIRQ7:
                    5450   ; IRQMessage(7);
0000309A  4878 0007 5451          pea       7
0000309E  4EB8 3020 5452          jsr       _IRQMessage
000030A2  584F      5453          addq.w    #4,A7
000030A4  4E75      5454          rts
                    5455   ; }
                    5456   ; void UnhandledTrap(void) {
                    5457   _UnhandledTrap:
                    5458   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!");
000030A6  4879 0000 5459          pea       @lab5k_131.L
000030AA  5A7E      
000030AC  4EB8 2FF4 5460          jsr       _PrintErrorMessageandAbort
000030B0  584F      5461          addq.w    #4,A7
000030B2  4E75      5462          rts
                    5463   ; }
                    5464   ; void BusError() {
                    5465   _BusError:
                    5466   ; PrintErrorMessageandAbort("BUS Error!");
000030B4  4879 0000 5467          pea       @lab5k_132.L
000030B8  5A94      
000030BA  4EB8 2FF4 5468          jsr       _PrintErrorMessageandAbort
000030BE  584F      5469          addq.w    #4,A7
000030C0  4E75      5470          rts
                    5471   ; }
                    5472   ; void AddressError() {
                    5473   _AddressError:
                    5474   ; PrintErrorMessageandAbort("ADDRESS Error!");
000030C2  4879 0000 5475          pea       @lab5k_133.L
000030C6  5AA0      
000030C8  4EB8 2FF4 5476          jsr       _PrintErrorMessageandAbort
000030CC  584F      5477          addq.w    #4,A7
000030CE  4E75      5478          rts
                    5479   ; }
                    5480   ; void IllegalInstruction() {
                    5481   _IllegalInstruction:
                    5482   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION");
000030D0  4879 0000 5483          pea       @lab5k_134.L
000030D4  5AB0      
000030D6  4EB8 2FF4 5484          jsr       _PrintErrorMessageandAbort
000030DA  584F      5485          addq.w    #4,A7
000030DC  4E75      5486          rts
                    5487   ; }
                    5488   ; void Dividebyzero() {
                    5489   _Dividebyzero:
                    5490   ; PrintErrorMessageandAbort("DIVIDE BY ZERO");
000030DE  4879 0000 5491          pea       @lab5k_135.L
000030E2  5AC4      
000030E4  4EB8 2FF4 5492          jsr       _PrintErrorMessageandAbort
000030E8  584F      5493          addq.w    #4,A7
000030EA  4E75      5494          rts
                    5495   ; }
                    5496   ; void Check() {
                    5497   _Check:
                    5498   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION");
000030EC  4879 0000 5499          pea       @lab5k_136.L
000030F0  5AD4      
000030F2  4EB8 2FF4 5500          jsr       _PrintErrorMessageandAbort
000030F6  584F      5501          addq.w    #4,A7
000030F8  4E75      5502          rts
                    5503   ; }
                    5504   ; void Trapv() {
                    5505   _Trapv:
                    5506   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION");
000030FA  4879 0000 5507          pea       @lab5k_137.L
000030FE  5AE6      
00003100  4EB8 2FF4 5508          jsr       _PrintErrorMessageandAbort
00003104  584F      5509          addq.w    #4,A7
00003106  4E75      5510          rts
                    5511   ; }
                    5512   ; void PrivError() {
                    5513   _PrivError:
                    5514   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION");
00003108  4879 0000 5515          pea       @lab5k_138.L
0000310C  5AF8      
0000310E  4EB8 2FF4 5516          jsr       _PrintErrorMessageandAbort
00003112  584F      5517          addq.w    #4,A7
00003114  4E75      5518          rts
                    5519   ; }
                    5520   ; void UnitIRQ() {
                    5521   _UnitIRQ:
                    5522   ; PrintErrorMessageandAbort("UNINITIALISED IRQ");
00003116  4879 0000 5523          pea       @lab5k_139.L
0000311A  5B0C      
0000311C  4EB8 2FF4 5524          jsr       _PrintErrorMessageandAbort
00003120  584F      5525          addq.w    #4,A7
00003122  4E75      5526          rts
                    5527   ; }
                    5528   ; void Spurious() {
                    5529   _Spurious:
                    5530   ; PrintErrorMessageandAbort("SPURIOUS IRQ");
00003124  4879 0000 5531          pea       @lab5k_140.L
00003128  5B1E      
0000312A  4EB8 2FF4 5532          jsr       _PrintErrorMessageandAbort
0000312E  584F      5533          addq.w    #4,A7
00003130  4E75      5534          rts
                    5535   ; }
                    5536   ; void EnterString(void)
                    5537   ; {
                    5538   _EnterString:
00003132  4E56 FFFC 5539          link      A6,#-4
00003136  2F02      5540          move.l    D2,-(A7)
                    5541   ; unsigned char* Start;
                    5542   ; unsigned char c;
                    5543   ; printf("\r\nStart Address in Memory: ");
00003138  4879 0000 5544          pea       @lab5k_141.L
0000313C  5B2C      
0000313E  4EB9 0000 5545          jsr       _printf
00003142  3F54      
00003144  584F      5546          addq.w    #4,A7
                    5547   ; Start = Get8HexDigits(0);
00003146  42A7      5548          clr.l     -(A7)
00003148  4EB8 148E 5549          jsr       _Get8HexDigits
0000314C  584F      5550          addq.w    #4,A7
0000314E  2400      5551          move.l    D0,D2
                    5552   ; printf("\r\nEnter String (ESC to end) :");
00003150  4879 0000 5553          pea       @lab5k_142.L
00003154  5B48      
00003156  4EB9 0000 5554          jsr       _printf
0000315A  3F54      
0000315C  584F      5555          addq.w    #4,A7
                    5556   ; while ((c = getchar()) != 0x1b)
                    5557   EnterString_1:
0000315E  4EB9 0000 5558          jsr       _getch
00003162  3FC6      
00003164  1D40 FFFF 5559          move.b    D0,-1(A6)
00003168  0C00 001B 5560          cmp.b     #27,D0
0000316C  670A      5561          beq.s     EnterString_3
                    5562   ; *Start++ = c;
0000316E  2042      5563          move.l    D2,A0
00003170  5282      5564          addq.l    #1,D2
00003172  10AE FFFF 5565          move.b    -1(A6),(A0)
00003176  60E6      5566          bra       EnterString_1
                    5567   EnterString_3:
                    5568   ; *Start = 0x00;  // terminate with a null
00003178  2042      5569          move.l    D2,A0
0000317A  4210      5570          clr.b     (A0)
0000317C  241F      5571          move.l    (A7)+,D2
0000317E  4E5E      5572          unlk      A6
00003180  4E75      5573          rts
                    5574   ; }
                    5575   ; void MemoryTest(void)
                    5576   ; {
                    5577   _MemoryTest:
00003182  4E56 FFBC 5578          link      A6,#-68
00003186  48E7 3F3C 5579          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000318A  45F9 0000 5580          lea       _printf.L,A2
0000318E  3F54      
00003190  47F8 148E 5581          lea       _Get8HexDigits.L,A3
                    5582   ; char data_type_num;
                    5583   ; unsigned int test_data_num;
                    5584   ; unsigned char* StartPtrByte, * EndPtrByte, * TempPtrByte;
                    5585   ; unsigned short int* StartPtrWord, * EndPtrWord, * TempPtrWord;
                    5586   ; unsigned int* StartPtrLongWord, * EndPtrLongWord, * TempPtrLongWord;
                    5587   ; int StartPtrLongWordTruc, EndPtrLongWordTruc;
                    5588   ; unsigned char test_data_byte_list[] = { 0xAA, 0xAB, 0xCC, 0xCD };
00003194  41EE FFD8 5589          lea       -40(A6),A0
00003198  43F9 0000 5590          lea       MemoryTest_test_data_byte_list.L,A1
0000319C  675E      
0000319E  20D9      5591          move.l    (A1)+,(A0)+
                    5592   ; unsigned char test_data_byte;
                    5593   ; unsigned char read_data_byte;
                    5594   ; unsigned  int test_data_word_list[] = { 0xAAAA, 0xBABA, 0xCCDD, 0xDDDD };
000031A0  41EE FFDE 5595          lea       -34(A6),A0
000031A4  43F9 0000 5596          lea       MemoryTest_test_data_word_list.L,A1
000031A8  6762      
000031AA  7003      5597          moveq     #3,D0
000031AC  20D9      5598          move.l    (A1)+,(A0)+
000031AE  51C8 FFFC 5599          dbra      D0,*-2
                    5600   ; unsigned  int test_data_word;
                    5601   ; unsigned int test_data_long_word_list[] = { 0xAAAAAAAA, 0xABABABAB, 0xCCCCDDDD, 0xAABBCCDD };
000031B2  41EE FFEE 5602          lea       -18(A6),A0
000031B6  43F9 0000 5603          lea       MemoryTest_test_data_long_word_list.L,A1
000031BA  674E      
000031BC  7003      5604          moveq     #3,D0
000031BE  20D9      5605          move.l    (A1)+,(A0)+
000031C0  51C8 FFFC 5606          dbra      D0,*-2
                    5607   ; unsigned int test_data_long_word;
                    5608   ; unsigned short truncated_data;
                    5609   ; printf("\r\nEnter the value below for the size of the test you would like to use?\n1 = bytes (8 bits)\n2 = words (16 bits)\n3 = long words (32 bits)\n");
000031C4  4879 0000 5610          pea       @lab5k_143.L
000031C8  5B66      
000031CA  4E92      5611          jsr       (A2)
000031CC  584F      5612          addq.w    #4,A7
                    5613   ; data_type_num = _getch();
000031CE  4EB8 1352 5614          jsr       __getch
000031D2  1D40 FFBF 5615          move.b    D0,-65(A6)
                    5616   ; switch (data_type_num) {
000031D6  102E FFBF 5617          move.b    -65(A6),D0
000031DA  4880      5618          ext.w     D0
000031DC  48C0      5619          ext.l     D0
000031DE  0C80 0000 5620          cmp.l     #50,D0
000031E2  0032      
000031E4  6700 0218 5621          beq       MemoryTest_4
000031E8  6E0C      5622          bgt.s     MemoryTest_7
000031EA  0C80 0000 5623          cmp.l     #49,D0
000031EE  0031      
000031F0  6712      5624          beq.s     MemoryTest_3
000031F2  6000 06BE 5625          bra       MemoryTest_1
                    5626   MemoryTest_7:
000031F6  0C80 0000 5627          cmp.l     #51,D0
000031FA  0033      
000031FC  6700 0422 5628          beq       MemoryTest_5
00003200  6000 06B0 5629          bra       MemoryTest_1
                    5630   MemoryTest_3:
                    5631   ; case (char)('1') :
                    5632   ; printf("\nYou have selcted to use bytes size data to test your memory\n");
00003204  4879 0000 5633          pea       @lab5k_144.L
00003208  5BF0      
0000320A  4E92      5634          jsr       (A2)
0000320C  584F      5635          addq.w    #4,A7
                    5636   ; printf("Out of the below example test data, please select one by entering the value associated to each example:\n");
0000320E  4879 0000 5637          pea       @lab5k_145.L
00003212  5C2E      
00003214  4E92      5638          jsr       (A2)
00003216  584F      5639          addq.w    #4,A7
                    5640   ; printf("1 = \"AA\"\n2 = \"AB\"\n3 = \"CC\"\n4 = \"CD\"\n");
00003218  4879 0000 5641          pea       @lab5k_146.L
0000321C  5C98      
0000321E  4E92      5642          jsr       (A2)
00003220  584F      5643          addq.w    #4,A7
                    5644   ; do {
                    5645   MemoryTest_8:
                    5646   ; test_data_num = (int)(_getch());
00003222  4EB8 1352 5647          jsr       __getch
00003226  2400      5648          move.l    D0,D2
                    5649   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00003228  0C82 0000 5650          cmp.l     #49,D2
0000322C  0031      
0000322E  6722      5651          beq.s     MemoryTest_10
00003230  0C82 0000 5652          cmp.l     #50,D2
00003234  0032      
00003236  671A      5653          beq.s     MemoryTest_10
00003238  0C82 0000 5654          cmp.l     #51,D2
0000323C  0033      
0000323E  6712      5655          beq.s     MemoryTest_10
00003240  0C82 0000 5656          cmp.l     #52,D2
00003244  0034      
00003246  670A      5657          beq.s     MemoryTest_10
                    5658   ; printf("\r\nERROR: You have entered a keyboard input that does not associated with an option above, please try again\r\n");
00003248  4879 0000 5659          pea       @lab5k_147.L
0000324C  5CBE      
0000324E  4E92      5660          jsr       (A2)
00003250  584F      5661          addq.w    #4,A7
                    5662   MemoryTest_10:
00003252  0C82 0000 5663          cmp.l     #49,D2
00003256  0031      
00003258  6718      5664          beq.s     MemoryTest_12
0000325A  0C82 0000 5665          cmp.l     #50,D2
0000325E  0032      
00003260  6710      5666          beq.s     MemoryTest_12
00003262  0C82 0000 5667          cmp.l     #51,D2
00003266  0033      
00003268  6708      5668          beq.s     MemoryTest_12
0000326A  0C82 0000 5669          cmp.l     #52,D2
0000326E  0034      
00003270  66B0      5670          bne       MemoryTest_8
                    5671   MemoryTest_12:
                    5672   ; }
                    5673   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    5674   ; if (test_data_num == (int)('1')) {
00003272  0C82 0000 5675          cmp.l     #49,D2
00003276  0031      
00003278  660A      5676          bne.s     MemoryTest_13
                    5677   ; test_data_byte = test_data_byte_list[0];
0000327A  1D6E FFD8 5678          move.b    -40+0(A6),-36(A6)
0000327E  FFDC      
00003280  6000 0040 5679          bra       MemoryTest_20
                    5680   MemoryTest_13:
                    5681   ; }
                    5682   ; else if (test_data_num == (int)('2')) {
00003284  0C82 0000 5683          cmp.l     #50,D2
00003288  0032      
0000328A  6608      5684          bne.s     MemoryTest_15
                    5685   ; test_data_byte = test_data_byte_list[1];
0000328C  1D6E FFD9 5686          move.b    -40+1(A6),-36(A6)
00003290  FFDC      
00003292  602E      5687          bra.s     MemoryTest_20
                    5688   MemoryTest_15:
                    5689   ; }
                    5690   ; else if (test_data_num == (int)('3')) {
00003294  0C82 0000 5691          cmp.l     #51,D2
00003298  0033      
0000329A  6608      5692          bne.s     MemoryTest_17
                    5693   ; test_data_byte = test_data_byte_list[2];
0000329C  1D6E FFDA 5694          move.b    -40+2(A6),-36(A6)
000032A0  FFDC      
000032A2  601E      5695          bra.s     MemoryTest_20
                    5696   MemoryTest_17:
                    5697   ; }
                    5698   ; else if (test_data_num == (int)('4')) {
000032A4  0C82 0000 5699          cmp.l     #52,D2
000032A8  0034      
000032AA  6608      5700          bne.s     MemoryTest_19
                    5701   ; test_data_byte = test_data_byte_list[3];
000032AC  1D6E FFDB 5702          move.b    -40+3(A6),-36(A6)
000032B0  FFDC      
000032B2  600E      5703          bra.s     MemoryTest_20
                    5704   MemoryTest_19:
                    5705   ; }
                    5706   ; else {
                    5707   ; printf("\r\nERROR: Option memory complication. Exiting memory test...\r\n");
000032B4  4879 0000 5708          pea       @lab5k_148.L
000032B8  5D2C      
000032BA  4E92      5709          jsr       (A2)
000032BC  584F      5710          addq.w    #4,A7
                    5711   ; return;
000032BE  6000 05FC 5712          bra       MemoryTest_2
                    5713   MemoryTest_20:
                    5714   ; }
                    5715   ; printf("\r\nPlease enter the start address you would like to use for the test data into memory\r\n");
000032C2  4879 0000 5716          pea       @lab5k_149.L
000032C6  5D6A      
000032C8  4E92      5717          jsr       (A2)
000032CA  584F      5718          addq.w    #4,A7
                    5719   ; do{
                    5720   MemoryTest_22:
                    5721   ; StartPtrByte = (int)Get8HexDigits(0);
000032CC  42A7      5722          clr.l     -(A7)
000032CE  4E93      5723          jsr       (A3)
000032D0  584F      5724          addq.w    #4,A7
000032D2  2A00      5725          move.l    D0,D5
                    5726   ; if(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x09800000)){
000032D4  0C85 0900 5727          cmp.l     #150994944,D5
000032D8  0000      
000032DA  6508      5728          blo.s     MemoryTest_26
000032DC  0C85 0980 5729          cmp.l     #159383552,D5
000032E0  0000      
000032E2  630A      5730          bls.s     MemoryTest_24
                    5731   MemoryTest_26:
                    5732   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x08020000 - 0x097FFFFF\r\n");
000032E4  4879 0000 5733          pea       @lab5k_150.L
000032E8  5DC2      
000032EA  4E92      5734          jsr       (A2)
000032EC  584F      5735          addq.w    #4,A7
                    5736   MemoryTest_24:
000032EE  0C85 0900 5737          cmp.l     #150994944,D5
000032F2  0000      
000032F4  65D6      5738          blo       MemoryTest_22
000032F6  0C85 0980 5739          cmp.l     #159383552,D5
000032FA  0000      
000032FC  62CE      5740          bhi       MemoryTest_22
                    5741   ; }
                    5742   ; } while(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x09800000));
                    5743   ; printf("\r\nPlease enter the end address you would like to use for the test data in memory\r\n");
000032FE  4879 0000 5744          pea       @lab5k_151.L
00003302  5E48      
00003304  4E92      5745          jsr       (A2)
00003306  584F      5746          addq.w    #4,A7
                    5747   ; do{
                    5748   MemoryTest_27:
                    5749   ; EndPtrByte = (int)Get8HexDigits(0);
00003308  42A7      5750          clr.l     -(A7)
0000330A  4E93      5751          jsr       (A3)
0000330C  584F      5752          addq.w    #4,A7
0000330E  2D40 FFC0 5753          move.l    D0,-64(A6)
                    5754   ; if(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x09800000)){
00003312  202E FFC0 5755          move.l    -64(A6),D0
00003316  0C80 0900 5756          cmp.l     #150994944,D0
0000331A  0000      
0000331C  650C      5757          blo.s     MemoryTest_31
0000331E  202E FFC0 5758          move.l    -64(A6),D0
00003322  0C80 0980 5759          cmp.l     #159383552,D0
00003326  0000      
00003328  630A      5760          bls.s     MemoryTest_29
                    5761   MemoryTest_31:
                    5762   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x08020000 - 0x097FFFFF\r\n");
0000332A  4879 0000 5763          pea       @lab5k_152.L
0000332E  5E9C      
00003330  4E92      5764          jsr       (A2)
00003332  584F      5765          addq.w    #4,A7
                    5766   MemoryTest_29:
00003334  202E FFC0 5767          move.l    -64(A6),D0
00003338  0C80 0900 5768          cmp.l     #150994944,D0
0000333C  0000      
0000333E  65C8      5769          blo       MemoryTest_27
00003340  202E FFC0 5770          move.l    -64(A6),D0
00003344  0C80 0980 5771          cmp.l     #159383552,D0
00003348  0000      
0000334A  62BC      5772          bhi       MemoryTest_27
                    5773   ; }
                    5774   ; } while(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x09800000));
                    5775   ; printf("\r\n\r\nWriting to memory");
0000334C  4879 0000 5776          pea       @lab5k_153.L
00003350  5F1C      
00003352  4E92      5777          jsr       (A2)
00003354  584F      5778          addq.w    #4,A7
                    5779   ; TempPtrByte = StartPtrByte;
00003356  2D45 FFC4 5780          move.l    D5,-60(A6)
                    5781   ; while (StartPtrByte < EndPtrByte) {
                    5782   MemoryTest_32:
0000335A  BAAE FFC0 5783          cmp.l     -64(A6),D5
0000335E  6424      5784          bhs.s     MemoryTest_34
                    5785   ; *StartPtrByte = test_data_byte;
00003360  2045      5786          move.l    D5,A0
00003362  10AE FFDC 5787          move.b    -36(A6),(A0)
                    5788   ; printf("\r\nWRITE: [%02X to %08x]", test_data_byte, StartPtrByte);
00003366  2F05      5789          move.l    D5,-(A7)
00003368  122E FFDC 5790          move.b    -36(A6),D1
0000336C  C2BC 0000 5791          and.l     #255,D1
00003370  00FF      
00003372  2F01      5792          move.l    D1,-(A7)
00003374  4879 0000 5793          pea       @lab5k_154.L
00003378  5F32      
0000337A  4E92      5794          jsr       (A2)
0000337C  DEFC 000C 5795          add.w     #12,A7
                    5796   ; StartPtrByte++;
00003380  5285      5797          addq.l    #1,D5
00003382  60D6      5798          bra       MemoryTest_32
                    5799   MemoryTest_34:
                    5800   ; }
                    5801   ; printf("\r\n\r\nStarting memory validation test");
00003384  4879 0000 5802          pea       @lab5k_155.L
00003388  5F4A      
0000338A  4E92      5803          jsr       (A2)
0000338C  584F      5804          addq.w    #4,A7
                    5805   ; StartPtrByte = TempPtrByte;
0000338E  2A2E FFC4 5806          move.l    -60(A6),D5
                    5807   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrByte, EndPtrByte, test_data_byte);
00003392  122E FFDC 5808          move.b    -36(A6),D1
00003396  C2BC 0000 5809          and.l     #255,D1
0000339A  00FF      
0000339C  2F01      5810          move.l    D1,-(A7)
0000339E  2F2E FFC0 5811          move.l    -64(A6),-(A7)
000033A2  2F05      5812          move.l    D5,-(A7)
000033A4  4879 0000 5813          pea       @lab5k_156.L
000033A8  5F6E      
000033AA  4E92      5814          jsr       (A2)
000033AC  DEFC 0010 5815          add.w     #16,A7
                    5816   ; while (StartPtrByte < EndPtrByte) {
                    5817   MemoryTest_35:
000033B0  BAAE FFC0 5818          cmp.l     -64(A6),D5
000033B4  6400 003A 5819          bhs       MemoryTest_37
                    5820   ; if (*StartPtrByte != test_data_byte) {
000033B8  2045      5821          move.l    D5,A0
000033BA  1010      5822          move.b    (A0),D0
000033BC  B02E FFDC 5823          cmp.b     -36(A6),D0
000033C0  672A      5824          beq.s     MemoryTest_38
                    5825   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...\r\n", StartPtrByte, *StartPtrByte, test_data_byte);
000033C2  122E FFDC 5826          move.b    -36(A6),D1
000033C6  C2BC 0000 5827          and.l     #255,D1
000033CA  00FF      
000033CC  2F01      5828          move.l    D1,-(A7)
000033CE  2045      5829          move.l    D5,A0
000033D0  1210      5830          move.b    (A0),D1
000033D2  C2BC 0000 5831          and.l     #255,D1
000033D6  00FF      
000033D8  2F01      5832          move.l    D1,-(A7)
000033DA  2F05      5833          move.l    D5,-(A7)
000033DC  4879 0000 5834          pea       @lab5k_157.L
000033E0  5FB6      
000033E2  4E92      5835          jsr       (A2)
000033E4  DEFC 0010 5836          add.w     #16,A7
                    5837   ; return;
000033E8  6000 04D2 5838          bra       MemoryTest_2
                    5839   MemoryTest_38:
                    5840   ; }
                    5841   ; StartPtrByte++;
000033EC  5285      5842          addq.l    #1,D5
000033EE  60C0      5843          bra       MemoryTest_35
                    5844   MemoryTest_37:
                    5845   ; }
                    5846   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
000033F0  4879 0000 5847          pea       @lab5k_158.L
000033F4  6044      
000033F6  4E92      5848          jsr       (A2)
000033F8  584F      5849          addq.w    #4,A7
                    5850   ; break;
000033FA  6000 04C0 5851          bra       MemoryTest_2
                    5852   MemoryTest_4:
                    5853   ; case (char)('2') :
                    5854   ; printf("\r\nYou have selcted to use word size data to test your memory");
000033FE  4879 0000 5855          pea       @lab5k_159.L
00003402  6072      
00003404  4E92      5856          jsr       (A2)
00003406  584F      5857          addq.w    #4,A7
                    5858   ; printf("\r\nOut of the below example test data, please select one by entering the value associated to each example:");
00003408  4879 0000 5859          pea       @lab5k_160.L
0000340C  60B0      
0000340E  4E92      5860          jsr       (A2)
00003410  584F      5861          addq.w    #4,A7
                    5862   ; printf("\r\n1 = \"AAAA\"\n2 = \"BABA\"\n3 = \"CCDD\"\n4 = \"DDDD\"\r\n");
00003412  4879 0000 5863          pea       @lab5k_161.L
00003416  611A      
00003418  4E92      5864          jsr       (A2)
0000341A  584F      5865          addq.w    #4,A7
                    5866   ; do {
                    5867   MemoryTest_40:
                    5868   ; test_data_num = (int)(_getch());
0000341C  4EB8 1352 5869          jsr       __getch
00003420  2400      5870          move.l    D0,D2
                    5871   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00003422  0C82 0000 5872          cmp.l     #49,D2
00003426  0031      
00003428  6722      5873          beq.s     MemoryTest_42
0000342A  0C82 0000 5874          cmp.l     #50,D2
0000342E  0032      
00003430  671A      5875          beq.s     MemoryTest_42
00003432  0C82 0000 5876          cmp.l     #51,D2
00003436  0033      
00003438  6712      5877          beq.s     MemoryTest_42
0000343A  0C82 0000 5878          cmp.l     #52,D2
0000343E  0034      
00003440  670A      5879          beq.s     MemoryTest_42
                    5880   ; printf("\r\nERROR: You have entered a keyboard input that does not associated with an option above, please try again\r\n");
00003442  4879 0000 5881          pea       @lab5k_147.L
00003446  5CBE      
00003448  4E92      5882          jsr       (A2)
0000344A  584F      5883          addq.w    #4,A7
                    5884   MemoryTest_42:
0000344C  0C82 0000 5885          cmp.l     #49,D2
00003450  0031      
00003452  6718      5886          beq.s     MemoryTest_44
00003454  0C82 0000 5887          cmp.l     #50,D2
00003458  0032      
0000345A  6710      5888          beq.s     MemoryTest_44
0000345C  0C82 0000 5889          cmp.l     #51,D2
00003460  0033      
00003462  6708      5890          beq.s     MemoryTest_44
00003464  0C82 0000 5891          cmp.l     #52,D2
00003468  0034      
0000346A  66B0      5892          bne       MemoryTest_40
                    5893   MemoryTest_44:
                    5894   ; }
                    5895   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    5896   ; if (test_data_num == (int)('1')) {
0000346C  0C82 0000 5897          cmp.l     #49,D2
00003470  0031      
00003472  6608      5898          bne.s     MemoryTest_45
                    5899   ; test_data_word = test_data_word_list[0];
00003474  2A6E FFDE 5900          move.l    -34+0(A6),A5
00003478  6000 003A 5901          bra       MemoryTest_52
                    5902   MemoryTest_45:
                    5903   ; }
                    5904   ; else if (test_data_num == (int)('2')) {
0000347C  0C82 0000 5905          cmp.l     #50,D2
00003480  0032      
00003482  6606      5906          bne.s     MemoryTest_47
                    5907   ; test_data_word = test_data_word_list[1];
00003484  2A6E FFE2 5908          move.l    -34+4(A6),A5
00003488  602A      5909          bra.s     MemoryTest_52
                    5910   MemoryTest_47:
                    5911   ; }
                    5912   ; else if (test_data_num == (int)('3')) {
0000348A  0C82 0000 5913          cmp.l     #51,D2
0000348E  0033      
00003490  6606      5914          bne.s     MemoryTest_49
                    5915   ; test_data_word = test_data_word_list[2];
00003492  2A6E FFE6 5916          move.l    -34+8(A6),A5
00003496  601C      5917          bra.s     MemoryTest_52
                    5918   MemoryTest_49:
                    5919   ; }
                    5920   ; else if (test_data_num == (int)('4')) {
00003498  0C82 0000 5921          cmp.l     #52,D2
0000349C  0034      
0000349E  6606      5922          bne.s     MemoryTest_51
                    5923   ; test_data_word = test_data_word_list[3];
000034A0  2A6E FFEA 5924          move.l    -34+12(A6),A5
000034A4  600E      5925          bra.s     MemoryTest_52
                    5926   MemoryTest_51:
                    5927   ; }
                    5928   ; else {
                    5929   ; printf("\r\nERROR: Option memory complication. Exiting memory test...\r\n");
000034A6  4879 0000 5930          pea       @lab5k_148.L
000034AA  5D2C      
000034AC  4E92      5931          jsr       (A2)
000034AE  584F      5932          addq.w    #4,A7
                    5933   ; return;
000034B0  6000 040A 5934          bra       MemoryTest_2
                    5935   MemoryTest_52:
                    5936   ; }
                    5937   ; do {
                    5938   MemoryTest_53:
                    5939   ; printf("\r\nPlease enter the start address you would like to use for the test data into memory (Ensure to enter an even number)\r\n");
000034B4  4879 0000 5940          pea       @lab5k_162.L
000034B8  614A      
000034BA  4E92      5941          jsr       (A2)
000034BC  584F      5942          addq.w    #4,A7
                    5943   ; StartPtrWord = Get8HexDigits(0);
000034BE  42A7      5944          clr.l     -(A7)
000034C0  4E93      5945          jsr       (A3)
000034C2  584F      5946          addq.w    #4,A7
000034C4  2800      5947          move.l    D0,D4
                    5948   ; while(StartPtrWord < (int)(0x09000000) || StartPtrWord > (int)(0x09800000)){
                    5949   MemoryTest_55:
000034C6  0C84 0900 5950          cmp.l     #150994944,D4
000034CA  0000      
000034CC  6508      5951          blo.s     MemoryTest_58
000034CE  0C84 0980 5952          cmp.l     #159383552,D4
000034D2  0000      
000034D4  6314      5953          bls.s     MemoryTest_57
                    5954   MemoryTest_58:
                    5955   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
000034D6  4879 0000 5956          pea       @lab5k_163.L
000034DA  61C2      
000034DC  4E92      5957          jsr       (A2)
000034DE  584F      5958          addq.w    #4,A7
                    5959   ; StartPtrWord = Get8HexDigits(0);
000034E0  42A7      5960          clr.l     -(A7)
000034E2  4E93      5961          jsr       (A3)
000034E4  584F      5962          addq.w    #4,A7
000034E6  2800      5963          move.l    D0,D4
000034E8  60DC      5964          bra       MemoryTest_55
                    5965   MemoryTest_57:
                    5966   ; }
                    5967   ; if (StartPtrWord % 2 != 0) {
000034EA  2F04      5968          move.l    D4,-(A7)
000034EC  4878 0002 5969          pea       2
000034F0  4EB9 0000 5970          jsr       ULDIV
000034F4  3E76      
000034F6  202F 0004 5971          move.l    4(A7),D0
000034FA  504F      5972          addq.w    #8,A7
000034FC  4A80      5973          tst.l     D0
000034FE  670A      5974          beq.s     MemoryTest_59
                    5975   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00003500  4879 0000 5976          pea       @lab5k_164.L
00003504  6248      
00003506  4E92      5977          jsr       (A2)
00003508  584F      5978          addq.w    #4,A7
                    5979   MemoryTest_59:
0000350A  2F04      5980          move.l    D4,-(A7)
0000350C  4878 0002 5981          pea       2
00003510  4EB9 0000 5982          jsr       ULDIV
00003514  3E76      
00003516  202F 0004 5983          move.l    4(A7),D0
0000351A  504F      5984          addq.w    #8,A7
0000351C  4A80      5985          tst.l     D0
0000351E  6694      5986          bne       MemoryTest_53
                    5987   ; }
                    5988   ; } while (StartPtrWord % 2 != 0);
                    5989   ; do {
                    5990   MemoryTest_61:
                    5991   ; printf("\r\nPlease enter the end address you would like to use for the test data in memory (Ensure to enter an even number)\r\n");
00003520  4879 0000 5992          pea       @lab5k_165.L
00003524  628E      
00003526  4E92      5993          jsr       (A2)
00003528  584F      5994          addq.w    #4,A7
                    5995   ; EndPtrWord = Get8HexDigits(0);
0000352A  42A7      5996          clr.l     -(A7)
0000352C  4E93      5997          jsr       (A3)
0000352E  584F      5998          addq.w    #4,A7
00003530  2840      5999          move.l    D0,A4
                    6000   ; while(EndPtrWord < (int)(0x09000000) || EndPtrWord > (int)(0x09800000)){
                    6001   MemoryTest_63:
00003532  200C      6002          move.l    A4,D0
00003534  0C80 0900 6003          cmp.l     #150994944,D0
00003538  0000      
0000353A  650A      6004          blo.s     MemoryTest_66
0000353C  200C      6005          move.l    A4,D0
0000353E  0C80 0980 6006          cmp.l     #159383552,D0
00003542  0000      
00003544  6314      6007          bls.s     MemoryTest_65
                    6008   MemoryTest_66:
                    6009   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00003546  4879 0000 6010          pea       @lab5k_166.L
0000354A  6302      
0000354C  4E92      6011          jsr       (A2)
0000354E  584F      6012          addq.w    #4,A7
                    6013   ; EndPtrWord = Get8HexDigits(0);
00003550  42A7      6014          clr.l     -(A7)
00003552  4E93      6015          jsr       (A3)
00003554  584F      6016          addq.w    #4,A7
00003556  2840      6017          move.l    D0,A4
00003558  60D8      6018          bra       MemoryTest_63
                    6019   MemoryTest_65:
                    6020   ; }
                    6021   ; if (EndPtrWord % 2 != 0) {
0000355A  2F0C      6022          move.l    A4,-(A7)
0000355C  4878 0002 6023          pea       2
00003560  4EB9 0000 6024          jsr       ULDIV
00003564  3E76      
00003566  202F 0004 6025          move.l    4(A7),D0
0000356A  504F      6026          addq.w    #8,A7
0000356C  4A80      6027          tst.l     D0
0000356E  670A      6028          beq.s     MemoryTest_67
                    6029   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00003570  4879 0000 6030          pea       @lab5k_164.L
00003574  6248      
00003576  4E92      6031          jsr       (A2)
00003578  584F      6032          addq.w    #4,A7
                    6033   MemoryTest_67:
0000357A  2F0C      6034          move.l    A4,-(A7)
0000357C  4878 0002 6035          pea       2
00003580  4EB9 0000 6036          jsr       ULDIV
00003584  3E76      
00003586  202F 0004 6037          move.l    4(A7),D0
0000358A  504F      6038          addq.w    #8,A7
0000358C  4A80      6039          tst.l     D0
0000358E  6690      6040          bne       MemoryTest_61
                    6041   ; }
                    6042   ; } while (EndPtrWord % 2 != 0);
                    6043   ; printf("\r\n\r\nWriting to memory");
00003590  4879 0000 6044          pea       @lab5k_153.L
00003594  5F1C      
00003596  4E92      6045          jsr       (A2)
00003598  584F      6046          addq.w    #4,A7
                    6047   ; TempPtrWord = StartPtrWord;
0000359A  2D44 FFC8 6048          move.l    D4,-56(A6)
                    6049   ; while (StartPtrWord < EndPtrWord) {
                    6050   MemoryTest_69:
0000359E  B88C      6051          cmp.l     A4,D4
000035A0  6418      6052          bhs.s     MemoryTest_71
                    6053   ; *StartPtrWord = test_data_word;
000035A2  2044      6054          move.l    D4,A0
000035A4  308D      6055          move.w    A5,(A0)
                    6056   ; printf("\r\nWRITE: [%04X to %08x]", test_data_word, StartPtrWord);
000035A6  2F04      6057          move.l    D4,-(A7)
000035A8  2F0D      6058          move.l    A5,-(A7)
000035AA  4879 0000 6059          pea       @lab5k_167.L
000035AE  6382      
000035B0  4E92      6060          jsr       (A2)
000035B2  DEFC 000C 6061          add.w     #12,A7
                    6062   ; StartPtrWord++;
000035B6  5484      6063          addq.l    #2,D4
000035B8  60E4      6064          bra       MemoryTest_69
                    6065   MemoryTest_71:
                    6066   ; }
                    6067   ; printf("\r\n\r\nStarting memory validation test");
000035BA  4879 0000 6068          pea       @lab5k_155.L
000035BE  5F4A      
000035C0  4E92      6069          jsr       (A2)
000035C2  584F      6070          addq.w    #4,A7
                    6071   ; StartPtrWord = TempPtrWord;
000035C4  282E FFC8 6072          move.l    -56(A6),D4
                    6073   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrWord, EndPtrWord, test_data_word);
000035C8  2F0D      6074          move.l    A5,-(A7)
000035CA  2F0C      6075          move.l    A4,-(A7)
000035CC  2F04      6076          move.l    D4,-(A7)
000035CE  4879 0000 6077          pea       @lab5k_156.L
000035D2  5F6E      
000035D4  4E92      6078          jsr       (A2)
000035D6  DEFC 0010 6079          add.w     #16,A7
                    6080   ; while (StartPtrWord < EndPtrWord) {
                    6081   MemoryTest_72:
000035DA  B88C      6082          cmp.l     A4,D4
000035DC  6400 0034 6083          bhs       MemoryTest_74
                    6084   ; if (*StartPtrWord != test_data_word) {
000035E0  2044      6085          move.l    D4,A0
000035E2  3010      6086          move.w    (A0),D0
000035E4  C0BC 0000 6087          and.l     #65535,D0
000035E8  FFFF      
000035EA  B08D      6088          cmp.l     A5,D0
000035EC  6720      6089          beq.s     MemoryTest_75
                    6090   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...", StartPtrWord, *StartPtrWord, test_data_word);
000035EE  2F0D      6091          move.l    A5,-(A7)
000035F0  2044      6092          move.l    D4,A0
000035F2  3210      6093          move.w    (A0),D1
000035F4  C2BC 0000 6094          and.l     #65535,D1
000035F8  FFFF      
000035FA  2F01      6095          move.l    D1,-(A7)
000035FC  2F04      6096          move.l    D4,-(A7)
000035FE  4879 0000 6097          pea       @lab5k_168.L
00003602  639A      
00003604  4E92      6098          jsr       (A2)
00003606  DEFC 0010 6099          add.w     #16,A7
                    6100   ; return;
0000360A  6000 02B0 6101          bra       MemoryTest_2
                    6102   MemoryTest_75:
                    6103   ; }
                    6104   ; StartPtrWord++;
0000360E  5484      6105          addq.l    #2,D4
00003610  60C8      6106          bra       MemoryTest_72
                    6107   MemoryTest_74:
                    6108   ; }
                    6109   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
00003612  4879 0000 6110          pea       @lab5k_158.L
00003616  6044      
00003618  4E92      6111          jsr       (A2)
0000361A  584F      6112          addq.w    #4,A7
                    6113   ; break;
0000361C  6000 029E 6114          bra       MemoryTest_2
                    6115   MemoryTest_5:
                    6116   ; case (char)('3') :
                    6117   ; printf("\r\nYou have selcted to use bytes size data to test your memory");
00003620  4879 0000 6118          pea       @lab5k_169.L
00003624  6426      
00003626  4E92      6119          jsr       (A2)
00003628  584F      6120          addq.w    #4,A7
                    6121   ; printf("\r\nOut of the below example test data, please select one by entering the value associated to each example:");
0000362A  4879 0000 6122          pea       @lab5k_160.L
0000362E  60B0      
00003630  4E92      6123          jsr       (A2)
00003632  584F      6124          addq.w    #4,A7
                    6125   ; printf("\r\n1 = \"AAAAAAAA\"\n2 = \"ABABABAB\"\n3 = \"CCCCDDDD\"\n4 = \"AABBCCDD\"\r\n");
00003634  4879 0000 6126          pea       @lab5k_170.L
00003638  6464      
0000363A  4E92      6127          jsr       (A2)
0000363C  584F      6128          addq.w    #4,A7
                    6129   ; do {
                    6130   MemoryTest_77:
                    6131   ; test_data_num = (int)(_getch());
0000363E  4EB8 1352 6132          jsr       __getch
00003642  2400      6133          move.l    D0,D2
                    6134   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00003644  0C82 0000 6135          cmp.l     #49,D2
00003648  0031      
0000364A  6722      6136          beq.s     MemoryTest_79
0000364C  0C82 0000 6137          cmp.l     #50,D2
00003650  0032      
00003652  671A      6138          beq.s     MemoryTest_79
00003654  0C82 0000 6139          cmp.l     #51,D2
00003658  0033      
0000365A  6712      6140          beq.s     MemoryTest_79
0000365C  0C82 0000 6141          cmp.l     #52,D2
00003660  0034      
00003662  670A      6142          beq.s     MemoryTest_79
                    6143   ; printf("\r\nERROR: You have entered a keyboard input that does not associated with an option above, please try again\r\n");
00003664  4879 0000 6144          pea       @lab5k_147.L
00003668  5CBE      
0000366A  4E92      6145          jsr       (A2)
0000366C  584F      6146          addq.w    #4,A7
                    6147   MemoryTest_79:
0000366E  0C82 0000 6148          cmp.l     #49,D2
00003672  0031      
00003674  6718      6149          beq.s     MemoryTest_81
00003676  0C82 0000 6150          cmp.l     #50,D2
0000367A  0032      
0000367C  6710      6151          beq.s     MemoryTest_81
0000367E  0C82 0000 6152          cmp.l     #51,D2
00003682  0033      
00003684  6708      6153          beq.s     MemoryTest_81
00003686  0C82 0000 6154          cmp.l     #52,D2
0000368A  0034      
0000368C  66B0      6155          bne       MemoryTest_77
                    6156   MemoryTest_81:
                    6157   ; }
                    6158   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    6159   ; if (test_data_num == (int)('1')) {
0000368E  0C82 0000 6160          cmp.l     #49,D2
00003692  0031      
00003694  6608      6161          bne.s     MemoryTest_82
                    6162   ; test_data_long_word = test_data_long_word_list[0];
00003696  2C2E FFEE 6163          move.l    -18+0(A6),D6
0000369A  6000 003A 6164          bra       MemoryTest_89
                    6165   MemoryTest_82:
                    6166   ; }
                    6167   ; else if (test_data_num == (int)('2')) {
0000369E  0C82 0000 6168          cmp.l     #50,D2
000036A2  0032      
000036A4  6606      6169          bne.s     MemoryTest_84
                    6170   ; test_data_long_word = test_data_long_word_list[1];
000036A6  2C2E FFF2 6171          move.l    -18+4(A6),D6
000036AA  602A      6172          bra.s     MemoryTest_89
                    6173   MemoryTest_84:
                    6174   ; }
                    6175   ; else if (test_data_num == (int)('3')) {
000036AC  0C82 0000 6176          cmp.l     #51,D2
000036B0  0033      
000036B2  6606      6177          bne.s     MemoryTest_86
                    6178   ; test_data_long_word = test_data_long_word_list[2];
000036B4  2C2E FFF6 6179          move.l    -18+8(A6),D6
000036B8  601C      6180          bra.s     MemoryTest_89
                    6181   MemoryTest_86:
                    6182   ; }
                    6183   ; else if (test_data_num == (int)('4')) {
000036BA  0C82 0000 6184          cmp.l     #52,D2
000036BE  0034      
000036C0  6606      6185          bne.s     MemoryTest_88
                    6186   ; test_data_long_word = test_data_long_word_list[3];
000036C2  2C2E FFFA 6187          move.l    -18+12(A6),D6
000036C6  600E      6188          bra.s     MemoryTest_89
                    6189   MemoryTest_88:
                    6190   ; }
                    6191   ; else {
                    6192   ; printf("\r\nERROR: Option memory complication. Exiting memory test...\r\n");
000036C8  4879 0000 6193          pea       @lab5k_148.L
000036CC  5D2C      
000036CE  4E92      6194          jsr       (A2)
000036D0  584F      6195          addq.w    #4,A7
                    6196   ; return;
000036D2  6000 01E8 6197          bra       MemoryTest_2
                    6198   MemoryTest_89:
                    6199   ; }
                    6200   ; do {
                    6201   MemoryTest_90:
                    6202   ; printf("\r\nPlease enter the start address you would like to use for the test data into memory (Ensure to enter an even number)\r\n");
000036D6  4879 0000 6203          pea       @lab5k_162.L
000036DA  614A      
000036DC  4E92      6204          jsr       (A2)
000036DE  584F      6205          addq.w    #4,A7
                    6206   ; StartPtrLongWord = Get8HexDigits(0);
000036E0  42A7      6207          clr.l     -(A7)
000036E2  4E93      6208          jsr       (A3)
000036E4  584F      6209          addq.w    #4,A7
000036E6  2600      6210          move.l    D0,D3
                    6211   ; while(StartPtrLongWord < (int)(0x09000000) || StartPtrLongWord > (int)(0x09800000)){
                    6212   MemoryTest_92:
000036E8  0C83 0900 6213          cmp.l     #150994944,D3
000036EC  0000      
000036EE  6508      6214          blo.s     MemoryTest_95
000036F0  0C83 0980 6215          cmp.l     #159383552,D3
000036F4  0000      
000036F6  6314      6216          bls.s     MemoryTest_94
                    6217   MemoryTest_95:
                    6218   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
000036F8  4879 0000 6219          pea       @lab5k_163.L
000036FC  61C2      
000036FE  4E92      6220          jsr       (A2)
00003700  584F      6221          addq.w    #4,A7
                    6222   ; StartPtrLongWord = Get8HexDigits(0);
00003702  42A7      6223          clr.l     -(A7)
00003704  4E93      6224          jsr       (A3)
00003706  584F      6225          addq.w    #4,A7
00003708  2600      6226          move.l    D0,D3
0000370A  60DC      6227          bra       MemoryTest_92
                    6228   MemoryTest_94:
                    6229   ; }
                    6230   ; if (StartPtrLongWord % 2 != 0) {
0000370C  2F03      6231          move.l    D3,-(A7)
0000370E  4878 0002 6232          pea       2
00003712  4EB9 0000 6233          jsr       ULDIV
00003716  3E76      
00003718  202F 0004 6234          move.l    4(A7),D0
0000371C  504F      6235          addq.w    #8,A7
0000371E  4A80      6236          tst.l     D0
00003720  670A      6237          beq.s     MemoryTest_96
                    6238   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00003722  4879 0000 6239          pea       @lab5k_164.L
00003726  6248      
00003728  4E92      6240          jsr       (A2)
0000372A  584F      6241          addq.w    #4,A7
                    6242   MemoryTest_96:
0000372C  2F03      6243          move.l    D3,-(A7)
0000372E  4878 0002 6244          pea       2
00003732  4EB9 0000 6245          jsr       ULDIV
00003736  3E76      
00003738  202F 0004 6246          move.l    4(A7),D0
0000373C  504F      6247          addq.w    #8,A7
0000373E  4A80      6248          tst.l     D0
00003740  6694      6249          bne       MemoryTest_90
                    6250   ; }
                    6251   ; } while (StartPtrLongWord % 2 != 0);
                    6252   ; do {
                    6253   MemoryTest_98:
                    6254   ; printf("\r\nPlease enter the end address you would like to use for the test data in memory (Ensure to enter an even number)\r\n");
00003742  4879 0000 6255          pea       @lab5k_165.L
00003746  628E      
00003748  4E92      6256          jsr       (A2)
0000374A  584F      6257          addq.w    #4,A7
                    6258   ; EndPtrLongWord = Get8HexDigits(0);
0000374C  42A7      6259          clr.l     -(A7)
0000374E  4E93      6260          jsr       (A3)
00003750  584F      6261          addq.w    #4,A7
00003752  2E00      6262          move.l    D0,D7
                    6263   ; while(EndPtrLongWord < (int)(0x09000000) || EndPtrLongWord > (int)(0x09800000)){
                    6264   MemoryTest_100:
00003754  0C87 0900 6265          cmp.l     #150994944,D7
00003758  0000      
0000375A  6508      6266          blo.s     MemoryTest_103
0000375C  0C87 0980 6267          cmp.l     #159383552,D7
00003760  0000      
00003762  6314      6268          bls.s     MemoryTest_102
                    6269   MemoryTest_103:
                    6270   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00003764  4879 0000 6271          pea       @lab5k_166.L
00003768  6302      
0000376A  4E92      6272          jsr       (A2)
0000376C  584F      6273          addq.w    #4,A7
                    6274   ; EndPtrLongWord = Get8HexDigits(0);
0000376E  42A7      6275          clr.l     -(A7)
00003770  4E93      6276          jsr       (A3)
00003772  584F      6277          addq.w    #4,A7
00003774  2E00      6278          move.l    D0,D7
00003776  60DC      6279          bra       MemoryTest_100
                    6280   MemoryTest_102:
                    6281   ; }
                    6282   ; if (EndPtrLongWord % 2 != 0) {
00003778  2F07      6283          move.l    D7,-(A7)
0000377A  4878 0002 6284          pea       2
0000377E  4EB9 0000 6285          jsr       ULDIV
00003782  3E76      
00003784  202F 0004 6286          move.l    4(A7),D0
00003788  504F      6287          addq.w    #8,A7
0000378A  4A80      6288          tst.l     D0
0000378C  670A      6289          beq.s     MemoryTest_104
                    6290   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
0000378E  4879 0000 6291          pea       @lab5k_164.L
00003792  6248      
00003794  4E92      6292          jsr       (A2)
00003796  584F      6293          addq.w    #4,A7
                    6294   MemoryTest_104:
00003798  2F07      6295          move.l    D7,-(A7)
0000379A  4878 0002 6296          pea       2
0000379E  4EB9 0000 6297          jsr       ULDIV
000037A2  3E76      
000037A4  202F 0004 6298          move.l    4(A7),D0
000037A8  504F      6299          addq.w    #8,A7
000037AA  4A80      6300          tst.l     D0
000037AC  6694      6301          bne       MemoryTest_98
                    6302   ; }
                    6303   ; } while (EndPtrLongWord % 2 != 0);
                    6304   ; printf("\r\n\r\nWriting to memory");
000037AE  4879 0000 6305          pea       @lab5k_153.L
000037B2  5F1C      
000037B4  4E92      6306          jsr       (A2)
000037B6  584F      6307          addq.w    #4,A7
                    6308   ; StartPtrLongWordTruc = StartPtrLongWord;
000037B8  2D43 FFD0 6309          move.l    D3,-48(A6)
                    6310   ; EndPtrLongWordTruc = EndPtrLongWord;
000037BC  2D47 FFD4 6311          move.l    D7,-44(A6)
                    6312   ; TempPtrLongWord = StartPtrLongWord;
000037C0  2D43 FFCC 6313          move.l    D3,-52(A6)
                    6314   ; if((EndPtrLongWordTruc-StartPtrLongWordTruc) % 0x4 != 0){
000037C4  202E FFD4 6315          move.l    -44(A6),D0
000037C8  90AE FFD0 6316          sub.l     -48(A6),D0
000037CC  2F00      6317          move.l    D0,-(A7)
000037CE  4878 0004 6318          pea       4
000037D2  4EB9 0000 6319          jsr       LDIV
000037D6  3E88      
000037D8  202F 0004 6320          move.l    4(A7),D0
000037DC  504F      6321          addq.w    #8,A7
000037DE  4A80      6322          tst.l     D0
000037E0  670E      6323          beq.s     MemoryTest_106
                    6324   ; printf("\r\nWARNING: Memory will contain truncated data"); 
000037E2  4879 0000 6325          pea       @lab5k_171.L
000037E6  64A4      
000037E8  4E92      6326          jsr       (A2)
000037EA  584F      6327          addq.w    #4,A7
                    6328   ; truncated_data = test_data_long_word;   
000037EC  3D46 FFFE 6329          move.w    D6,-2(A6)
                    6330   MemoryTest_106:
                    6331   ; }
                    6332   ; while (StartPtrLongWord < EndPtrLongWord) {
                    6333   MemoryTest_108:
000037F0  B687      6334          cmp.l     D7,D3
000037F2  6400 0050 6335          bhs       MemoryTest_110
                    6336   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
000037F6  202E FFD4 6337          move.l    -44(A6),D0
000037FA  90AE FFD0 6338          sub.l     -48(A6),D0
000037FE  0C80 0000 6339          cmp.l     #4,D0
00003802  0004      
00003804  6C22      6340          bge.s     MemoryTest_111
                    6341   ; StartPtrWord = StartPtrLongWord;
00003806  2803      6342          move.l    D3,D4
                    6343   ; *StartPtrWord = test_data_long_word;
00003808  2044      6344          move.l    D4,A0
0000380A  3086      6345          move.w    D6,(A0)
                    6346   ; printf("\r\nWRITE: [%08X to %08x]", *StartPtrWord, StartPtrWord);
0000380C  2F04      6347          move.l    D4,-(A7)
0000380E  2044      6348          move.l    D4,A0
00003810  3210      6349          move.w    (A0),D1
00003812  C2BC 0000 6350          and.l     #65535,D1
00003816  FFFF      
00003818  2F01      6351          move.l    D1,-(A7)
0000381A  4879 0000 6352          pea       @lab5k_172.L
0000381E  64D2      
00003820  4E92      6353          jsr       (A2)
00003822  DEFC 000C 6354          add.w     #12,A7
00003826  6014      6355          bra.s     MemoryTest_112
                    6356   MemoryTest_111:
                    6357   ; }else{
                    6358   ; *StartPtrLongWord = test_data_long_word;
00003828  2043      6359          move.l    D3,A0
0000382A  2086      6360          move.l    D6,(A0)
                    6361   ; printf("\r\nWRITE: [%08X to %08x]", test_data_long_word, StartPtrLongWord);
0000382C  2F03      6362          move.l    D3,-(A7)
0000382E  2F06      6363          move.l    D6,-(A7)
00003830  4879 0000 6364          pea       @lab5k_172.L
00003834  64D2      
00003836  4E92      6365          jsr       (A2)
00003838  DEFC 000C 6366          add.w     #12,A7
                    6367   MemoryTest_112:
                    6368   ; }
                    6369   ; StartPtrLongWord++;
0000383C  5883      6370          addq.l    #4,D3
                    6371   ; StartPtrLongWordTruc = StartPtrLongWord;
0000383E  2D43 FFD0 6372          move.l    D3,-48(A6)
00003842  60AC      6373          bra       MemoryTest_108
                    6374   MemoryTest_110:
                    6375   ; }
                    6376   ; printf("\r\n\r\nStarting memory validation test");
00003844  4879 0000 6377          pea       @lab5k_155.L
00003848  5F4A      
0000384A  4E92      6378          jsr       (A2)
0000384C  584F      6379          addq.w    #4,A7
                    6380   ; StartPtrLongWord = TempPtrLongWord;
0000384E  262E FFCC 6381          move.l    -52(A6),D3
                    6382   ; truncated_data = test_data_long_word;
00003852  3D46 FFFE 6383          move.w    D6,-2(A6)
                    6384   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrLongWord, EndPtrLongWord, test_data_long_word);
00003856  2F06      6385          move.l    D6,-(A7)
00003858  2F07      6386          move.l    D7,-(A7)
0000385A  2F03      6387          move.l    D3,-(A7)
0000385C  4879 0000 6388          pea       @lab5k_156.L
00003860  5F6E      
00003862  4E92      6389          jsr       (A2)
00003864  DEFC 0010 6390          add.w     #16,A7
                    6391   ; while (StartPtrLongWord < EndPtrLongWord) {
                    6392   MemoryTest_113:
00003868  B687      6393          cmp.l     D7,D3
0000386A  6400 003A 6394          bhs       MemoryTest_115
                    6395   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
0000386E  202E FFD4 6396          move.l    -44(A6),D0
00003872  90AE FFD0 6397          sub.l     -48(A6),D0
00003876  0C80 0000 6398          cmp.l     #4,D0
0000387A  0004      
0000387C  6C04      6399          bge.s     MemoryTest_116
                    6400   ; StartPtrWord = StartPtrLongWord;
0000387E  2803      6401          move.l    D3,D4
00003880  601C      6402          bra.s     MemoryTest_118
                    6403   MemoryTest_116:
                    6404   ; }else{
                    6405   ; if (*StartPtrLongWord != test_data_long_word) {
00003882  2043      6406          move.l    D3,A0
00003884  BC90      6407          cmp.l     (A0),D6
00003886  6716      6408          beq.s     MemoryTest_118
                    6409   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %08X Expected Data: %08X] Exiting memory test...\r\n", StartPtrLongWord, *StartPtrLongWord, test_data_long_word);
00003888  2F06      6410          move.l    D6,-(A7)
0000388A  2043      6411          move.l    D3,A0
0000388C  2F10      6412          move.l    (A0),-(A7)
0000388E  2F03      6413          move.l    D3,-(A7)
00003890  4879 0000 6414          pea       @lab5k_173.L
00003894  64EA      
00003896  4E92      6415          jsr       (A2)
00003898  DEFC 0010 6416          add.w     #16,A7
                    6417   ; return;
0000389C  601E      6418          bra.s     MemoryTest_2
                    6419   MemoryTest_118:
                    6420   ; }
                    6421   ; }
                    6422   ; StartPtrLongWord++;
0000389E  5883      6423          addq.l    #4,D3
                    6424   ; StartPtrLongWordTruc = StartPtrLongWord;
000038A0  2D43 FFD0 6425          move.l    D3,-48(A6)
000038A4  60C2      6426          bra       MemoryTest_113
                    6427   MemoryTest_115:
                    6428   ; }
                    6429   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
000038A6  4879 0000 6430          pea       @lab5k_158.L
000038AA  6044      
000038AC  4E92      6431          jsr       (A2)
000038AE  584F      6432          addq.w    #4,A7
                    6433   ; break;
000038B0  600A      6434          bra.s     MemoryTest_2
                    6435   MemoryTest_1:
                    6436   ; default:
                    6437   ; printf("\r\nYou failed to select a data type to use! Click open memory test again to try again.\r\n");
000038B2  4879 0000 6438          pea       @lab5k_174.L
000038B6  6578      
000038B8  4E92      6439          jsr       (A2)
000038BA  584F      6440          addq.w    #4,A7
                    6441   MemoryTest_2:
000038BC  4CDF 3CFC 6442          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000038C0  4E5E      6443          unlk      A6
000038C2  4E75      6444          rts
                    6445   ; }   
                    6446   ; }
                    6447   ; void WriteI2C(void){
                    6448   _WriteI2C:
000038C4  48E7 3C20 6449          movem.l   D2/D3/D4/D5/A2,-(A7)
000038C8  45F9 0000 6450          lea       _printf.L,A2
000038CC  3F54      
                    6451   ; unsigned int Address;
                    6452   ; unsigned char AddressLSB;
                    6453   ; unsigned char AddressMSB;
                    6454   ; unsigned char c;
                    6455   ; printf("\r\nI2C Write:");
000038CE  4879 0000 6456          pea       @lab5k_175.L
000038D2  65D0      
000038D4  4E92      6457          jsr       (A2)
000038D6  584F      6458          addq.w    #4,A7
                    6459   ; printf("\r\nEnter Address: ");
000038D8  4879 0000 6460          pea       @lab5k_19.L
000038DC  4CCE      
000038DE  4E92      6461          jsr       (A2)
000038E0  584F      6462          addq.w    #4,A7
                    6463   ; Address = Get8HexDigits(0);
000038E2  42A7      6464          clr.l     -(A7)
000038E4  4EB8 148E 6465          jsr       _Get8HexDigits
000038E8  584F      6466          addq.w    #4,A7
000038EA  2400      6467          move.l    D0,D2
                    6468   ; if(Address > 0x1FFFF ){ //Chip is 128kB therefore can not be greater
000038EC  0C82 0001 6469          cmp.l     #131071,D2
000038F0  FFFF      
000038F2  630E      6470          bls.s     WriteI2C_1
                    6471   ; printf("\r\nEntered Address is invalid, please enter a smaller valued address. Returning back to the debug monitor menu");
000038F4  4879 0000 6472          pea       @lab5k_176.L
000038F8  65DE      
000038FA  4E92      6473          jsr       (A2)
000038FC  584F      6474          addq.w    #4,A7
                    6475   ; return;
000038FE  6000 00AA 6476          bra       WriteI2C_3
                    6477   WriteI2C_1:
                    6478   ; } 
                    6479   ; printf("\r\nEnter Data: ");
00003902  4879 0000 6480          pea       @lab5k_177.L
00003906  664C      
00003908  4E92      6481          jsr       (A2)
0000390A  584F      6482          addq.w    #4,A7
                    6483   ; c = Get2HexDigits(0);
0000390C  42A7      6484          clr.l     -(A7)
0000390E  4EB8 13EE 6485          jsr       _Get2HexDigits
00003912  584F      6486          addq.w    #4,A7
00003914  1A00      6487          move.b    D0,D5
                    6488   ; if(Address > 0xFFFF){ //Chip is consisted of 2 x 64kB blocks which is the high and low block
00003916  0C82 0000 6489          cmp.l     #65535,D2
0000391A  FFFF      
0000391C  6300 0050 6490          bls       WriteI2C_4
                    6491   ; //Adjusting address values to high block and onwards
                    6492   ; AddressMSB = ((Address - 0x10000) >> 8) & 0xFF;
00003920  2002      6493          move.l    D2,D0
00003922  0480 0001 6494          sub.l     #65536,D0
00003926  0000      
00003928  E088      6495          lsr.l     #8,D0
0000392A  C0BC 0000 6496          and.l     #255,D0
0000392E  00FF      
00003930  1800      6497          move.b    D0,D4
                    6498   ; AddressLSB = (Address - 0x10000) & 0xFF;    
00003932  2002      6499          move.l    D2,D0
00003934  0480 0001 6500          sub.l     #65536,D0
00003938  0000      
0000393A  C0BC 0000 6501          and.l     #255,D0
0000393E  00FF      
00003940  1600      6502          move.b    D0,D3
                    6503   ; WriteI2CInteraction(1, Address, AddressMSB, AddressLSB, c, 0);
00003942  42A7      6504          clr.l     -(A7)
00003944  CABC 0000 6505          and.l     #255,D5
00003948  00FF      
0000394A  2F05      6506          move.l    D5,-(A7)
0000394C  C6BC 0000 6507          and.l     #255,D3
00003950  00FF      
00003952  2F03      6508          move.l    D3,-(A7)
00003954  C8BC 0000 6509          and.l     #255,D4
00003958  00FF      
0000395A  2F04      6510          move.l    D4,-(A7)
0000395C  2F02      6511          move.l    D2,-(A7)
0000395E  4878 0001 6512          pea       1
00003962  4EB8 099C 6513          jsr       _WriteI2CInteraction
00003966  DEFC 0018 6514          add.w     #24,A7
0000396A  6000 003E 6515          bra       WriteI2C_5
                    6516   WriteI2C_4:
                    6517   ; }else{
                    6518   ; AddressMSB = (Address >> 8) & 0xFF;
0000396E  2002      6519          move.l    D2,D0
00003970  E088      6520          lsr.l     #8,D0
00003972  C0BC 0000 6521          and.l     #255,D0
00003976  00FF      
00003978  1800      6522          move.b    D0,D4
                    6523   ; AddressLSB = Address & 0xFF;
0000397A  2002      6524          move.l    D2,D0
0000397C  C0BC 0000 6525          and.l     #255,D0
00003980  00FF      
00003982  1600      6526          move.b    D0,D3
                    6527   ; WriteI2CInteraction(0, Address, AddressMSB, AddressLSB, c, 0);
00003984  42A7      6528          clr.l     -(A7)
00003986  CABC 0000 6529          and.l     #255,D5
0000398A  00FF      
0000398C  2F05      6530          move.l    D5,-(A7)
0000398E  C6BC 0000 6531          and.l     #255,D3
00003992  00FF      
00003994  2F03      6532          move.l    D3,-(A7)
00003996  C8BC 0000 6533          and.l     #255,D4
0000399A  00FF      
0000399C  2F04      6534          move.l    D4,-(A7)
0000399E  2F02      6535          move.l    D2,-(A7)
000039A0  42A7      6536          clr.l     -(A7)
000039A2  4EB8 099C 6537          jsr       _WriteI2CInteraction
000039A6  DEFC 0018 6538          add.w     #24,A7
                    6539   WriteI2C_5:
                    6540   ; }
                    6541   ; return;
                    6542   WriteI2C_3:
000039AA  4CDF 043C 6543          movem.l   (A7)+,D2/D3/D4/D5/A2
000039AE  4E75      6544          rts
                    6545   ; }
                    6546   ; void ReadI2C(void){
                    6547   _ReadI2C:
000039B0  48E7 3820 6548          movem.l   D2/D3/D4/A2,-(A7)
000039B4  45F9 0000 6549          lea       _printf.L,A2
000039B8  3F54      
                    6550   ; unsigned int Address;
                    6551   ; unsigned char AddressLSB;
                    6552   ; unsigned char AddressMSB;
                    6553   ; printf("\r\nI2C Read:");
000039BA  4879 0000 6554          pea       @lab5k_178.L
000039BE  665C      
000039C0  4E92      6555          jsr       (A2)
000039C2  584F      6556          addq.w    #4,A7
                    6557   ; printf("\r\nEnter Address: ");
000039C4  4879 0000 6558          pea       @lab5k_19.L
000039C8  4CCE      
000039CA  4E92      6559          jsr       (A2)
000039CC  584F      6560          addq.w    #4,A7
                    6561   ; Address = Get8HexDigits(0);
000039CE  42A7      6562          clr.l     -(A7)
000039D0  4EB8 148E 6563          jsr       _Get8HexDigits
000039D4  584F      6564          addq.w    #4,A7
000039D6  2400      6565          move.l    D0,D2
                    6566   ; if(Address > 0x1FFFF){ //Chip is 128kB therefore can not be greater
000039D8  0C82 0001 6567          cmp.l     #131071,D2
000039DC  FFFF      
000039DE  630E      6568          bls.s     ReadI2C_1
                    6569   ; printf("\r\nEntered Address is invalid, please enter a smaller valued address. Returning back to the debug monitor menu");
000039E0  4879 0000 6570          pea       @lab5k_176.L
000039E4  65DE      
000039E6  4E92      6571          jsr       (A2)
000039E8  584F      6572          addq.w    #4,A7
                    6573   ; return;
000039EA  6000 0080 6574          bra       ReadI2C_3
                    6575   ReadI2C_1:
                    6576   ; } 
                    6577   ; if(Address > 0xFFFF){ //Chip is consisted of 2 x 64kB blocks which is the high and low block
000039EE  0C82 0000 6578          cmp.l     #65535,D2
000039F2  FFFF      
000039F4  6300 0044 6579          bls       ReadI2C_4
                    6580   ; //Adjusting address values to high block and onwards
                    6581   ; AddressMSB = ((Address - 0x10000) >> 8) & 0xFF;
000039F8  2002      6582          move.l    D2,D0
000039FA  0480 0001 6583          sub.l     #65536,D0
000039FE  0000      
00003A00  E088      6584          lsr.l     #8,D0
00003A02  C0BC 0000 6585          and.l     #255,D0
00003A06  00FF      
00003A08  1800      6586          move.b    D0,D4
                    6587   ; AddressLSB = (Address - 0x10000) & 0xFF;    
00003A0A  2002      6588          move.l    D2,D0
00003A0C  0480 0001 6589          sub.l     #65536,D0
00003A10  0000      
00003A12  C0BC 0000 6590          and.l     #255,D0
00003A16  00FF      
00003A18  1600      6591          move.b    D0,D3
                    6592   ; ReadI2CByteInteraction(1, Address, AddressMSB, AddressLSB);
00003A1A  C6BC 0000 6593          and.l     #255,D3
00003A1E  00FF      
00003A20  2F03      6594          move.l    D3,-(A7)
00003A22  C8BC 0000 6595          and.l     #255,D4
00003A26  00FF      
00003A28  2F04      6596          move.l    D4,-(A7)
00003A2A  2F02      6597          move.l    D2,-(A7)
00003A2C  4878 0001 6598          pea       1
00003A30  4EB8 0CEE 6599          jsr       _ReadI2CByteInteraction
00003A34  DEFC 0010 6600          add.w     #16,A7
00003A38  6032      6601          bra.s     ReadI2C_5
                    6602   ReadI2C_4:
                    6603   ; }else{
                    6604   ; AddressMSB = (Address >> 8) & 0xFF;
00003A3A  2002      6605          move.l    D2,D0
00003A3C  E088      6606          lsr.l     #8,D0
00003A3E  C0BC 0000 6607          and.l     #255,D0
00003A42  00FF      
00003A44  1800      6608          move.b    D0,D4
                    6609   ; AddressLSB = Address & 0xFF;
00003A46  2002      6610          move.l    D2,D0
00003A48  C0BC 0000 6611          and.l     #255,D0
00003A4C  00FF      
00003A4E  1600      6612          move.b    D0,D3
                    6613   ; ReadI2CByteInteraction(0, Address, AddressMSB, AddressLSB);
00003A50  C6BC 0000 6614          and.l     #255,D3
00003A54  00FF      
00003A56  2F03      6615          move.l    D3,-(A7)
00003A58  C8BC 0000 6616          and.l     #255,D4
00003A5C  00FF      
00003A5E  2F04      6617          move.l    D4,-(A7)
00003A60  2F02      6618          move.l    D2,-(A7)
00003A62  42A7      6619          clr.l     -(A7)
00003A64  4EB8 0CEE 6620          jsr       _ReadI2CByteInteraction
00003A68  DEFC 0010 6621          add.w     #16,A7
                    6622   ReadI2C_5:
                    6623   ; }
                    6624   ; return;
                    6625   ReadI2C_3:
00003A6C  4CDF 041C 6626          movem.l   (A7)+,D2/D3/D4/A2
00003A70  4E75      6627          rts
                    6628   ; }
                    6629   ; void PageWriteI2C(void){
                    6630   _PageWriteI2C:
00003A72  4E56 FFFC 6631          link      A6,#-4
00003A76  48E7 3020 6632          movem.l   D2/D3/A2,-(A7)
00003A7A  45F9 0000 6633          lea       _printf.L,A2
00003A7E  3F54      
                    6634   ; unsigned int AddressFrom;
                    6635   ; unsigned int AddressTo;
                    6636   ; unsigned char c;
                    6637   ; printf("\r\nI2C Page Write:");
00003A80  4879 0000 6638          pea       @lab5k_179.L
00003A84  6668      
00003A86  4E92      6639          jsr       (A2)
00003A88  584F      6640          addq.w    #4,A7
                    6641   ; printf("\r\nEnter Address From: ");
00003A8A  4879 0000 6642          pea       @lab5k_180.L
00003A8E  667A      
00003A90  4E92      6643          jsr       (A2)
00003A92  584F      6644          addq.w    #4,A7
                    6645   ; AddressFrom = Get8HexDigits(0);
00003A94  42A7      6646          clr.l     -(A7)
00003A96  4EB8 148E 6647          jsr       _Get8HexDigits
00003A9A  584F      6648          addq.w    #4,A7
00003A9C  2600      6649          move.l    D0,D3
                    6650   ; if(AddressFrom > 0x1FFFF ){ //Chip is 128kB therefore can not be greater
00003A9E  0C83 0001 6651          cmp.l     #131071,D3
00003AA2  FFFF      
00003AA4  630E      6652          bls.s     PageWriteI2C_1
                    6653   ; printf("\r\nEntered Address is invalid, please enter a smaller valued address. Returning back to the debug monitor menu");
00003AA6  4879 0000 6654          pea       @lab5k_176.L
00003AAA  65DE      
00003AAC  4E92      6655          jsr       (A2)
00003AAE  584F      6656          addq.w    #4,A7
                    6657   ; return;
00003AB0  6000 0058 6658          bra       PageWriteI2C_3
                    6659   PageWriteI2C_1:
                    6660   ; } 
                    6661   ; printf("\r\nEnter Address To: ");
00003AB4  4879 0000 6662          pea       @lab5k_181.L
00003AB8  6692      
00003ABA  4E92      6663          jsr       (A2)
00003ABC  584F      6664          addq.w    #4,A7
                    6665   ; AddressTo = Get8HexDigits(0);
00003ABE  42A7      6666          clr.l     -(A7)
00003AC0  4EB8 148E 6667          jsr       _Get8HexDigits
00003AC4  584F      6668          addq.w    #4,A7
00003AC6  2400      6669          move.l    D0,D2
                    6670   ; if(AddressTo > 0x1FFFF ){ //Chip is 128kB therefore can not be greater
00003AC8  0C82 0001 6671          cmp.l     #131071,D2
00003ACC  FFFF      
00003ACE  630C      6672          bls.s     PageWriteI2C_4
                    6673   ; printf("\r\nEntered Address is invalid, please enter a smaller valued address. Returning back to the debug monitor menu");
00003AD0  4879 0000 6674          pea       @lab5k_176.L
00003AD4  65DE      
00003AD6  4E92      6675          jsr       (A2)
00003AD8  584F      6676          addq.w    #4,A7
                    6677   ; return;
00003ADA  602E      6678          bra.s     PageWriteI2C_3
                    6679   PageWriteI2C_4:
                    6680   ; } 
                    6681   ; printf("\r\nEnter Data: ");
00003ADC  4879 0000 6682          pea       @lab5k_177.L
00003AE0  664C      
00003AE2  4E92      6683          jsr       (A2)
00003AE4  584F      6684          addq.w    #4,A7
                    6685   ; c = Get2HexDigits(0);
00003AE6  42A7      6686          clr.l     -(A7)
00003AE8  4EB8 13EE 6687          jsr       _Get2HexDigits
00003AEC  584F      6688          addq.w    #4,A7
00003AEE  1D40 FFFF 6689          move.b    D0,-1(A6)
                    6690   ; PageWriteI2CInteraction(AddressFrom, AddressTo, c);
00003AF2  122E FFFF 6691          move.b    -1(A6),D1
00003AF6  C2BC 0000 6692          and.l     #255,D1
00003AFA  00FF      
00003AFC  2F01      6693          move.l    D1,-(A7)
00003AFE  2F02      6694          move.l    D2,-(A7)
00003B00  2F03      6695          move.l    D3,-(A7)
00003B02  4EB8 0A40 6696          jsr       _PageWriteI2CInteraction
00003B06  DEFC 000C 6697          add.w     #12,A7
                    6698   ; return;
                    6699   PageWriteI2C_3:
00003B0A  4CDF 040C 6700          movem.l   (A7)+,D2/D3/A2
00003B0E  4E5E      6701          unlk      A6
00003B10  4E75      6702          rts
                    6703   ; }
                    6704   ; void SeqReadI2C(void){
                    6705   _SeqReadI2C:
00003B12  48E7 3020 6706          movem.l   D2/D3/A2,-(A7)
00003B16  45F9 0000 6707          lea       _printf.L,A2
00003B1A  3F54      
                    6708   ; int AddressFrom;
                    6709   ; int AddressTo;
                    6710   ; printf("\r\nI2C Seq Read:");
00003B1C  4879 0000 6711          pea       @lab5k_182.L
00003B20  66A8      
00003B22  4E92      6712          jsr       (A2)
00003B24  584F      6713          addq.w    #4,A7
                    6714   ; printf("\r\nEnter Address From: ");
00003B26  4879 0000 6715          pea       @lab5k_180.L
00003B2A  667A      
00003B2C  4E92      6716          jsr       (A2)
00003B2E  584F      6717          addq.w    #4,A7
                    6718   ; AddressFrom = Get8HexDigits(0);
00003B30  42A7      6719          clr.l     -(A7)
00003B32  4EB8 148E 6720          jsr       _Get8HexDigits
00003B36  584F      6721          addq.w    #4,A7
00003B38  2400      6722          move.l    D0,D2
                    6723   ; if(AddressFrom > 0x1FFFF){ //Chip is 128kB therefore can not be greater
00003B3A  0C82 0001 6724          cmp.l     #131071,D2
00003B3E  FFFF      
00003B40  6F0E      6725          ble.s     SeqReadI2C_1
                    6726   ; printf("\r\nEntered Address is invalid, please enter a smaller valued address. Returning back to the debug monitor menu");
00003B42  4879 0000 6727          pea       @lab5k_176.L
00003B46  65DE      
00003B48  4E92      6728          jsr       (A2)
00003B4A  584F      6729          addq.w    #4,A7
                    6730   ; return;
00003B4C  6000 0056 6731          bra       SeqReadI2C_3
                    6732   SeqReadI2C_1:
                    6733   ; } 
                    6734   ; printf("\r\nEnter Address To: ");
00003B50  4879 0000 6735          pea       @lab5k_181.L
00003B54  6692      
00003B56  4E92      6736          jsr       (A2)
00003B58  584F      6737          addq.w    #4,A7
                    6738   ; AddressTo = Get8HexDigits(0);
00003B5A  42A7      6739          clr.l     -(A7)
00003B5C  4EB8 148E 6740          jsr       _Get8HexDigits
00003B60  584F      6741          addq.w    #4,A7
00003B62  2600      6742          move.l    D0,D3
                    6743   ; if(AddressTo > 0x1FFFF){ //Chip is 128kB therefore can not be greater
00003B64  0C83 0001 6744          cmp.l     #131071,D3
00003B68  FFFF      
00003B6A  6F0C      6745          ble.s     SeqReadI2C_4
                    6746   ; printf("\r\nEntered Address is invalid, please enter a smaller valued address. Returning back to the debug monitor menu");
00003B6C  4879 0000 6747          pea       @lab5k_176.L
00003B70  65DE      
00003B72  4E92      6748          jsr       (A2)
00003B74  584F      6749          addq.w    #4,A7
                    6750   ; return;
00003B76  602C      6751          bra.s     SeqReadI2C_3
                    6752   SeqReadI2C_4:
                    6753   ; } 
                    6754   ; if(AddressFrom > 0xFFFF){ //Chip is consisted of 2 x 64kB blocks which is the high and low block
00003B78  0C82 0000 6755          cmp.l     #65535,D2
00003B7C  FFFF      
00003B7E  6314      6756          bls.s     SeqReadI2C_6
                    6757   ; ReadI2CSequential(1, AddressTo, AddressFrom, AddressFrom);
00003B80  2F02      6758          move.l    D2,-(A7)
00003B82  2F02      6759          move.l    D2,-(A7)
00003B84  2F03      6760          move.l    D3,-(A7)
00003B86  4878 0001 6761          pea       1
00003B8A  4EB8 0DBC 6762          jsr       _ReadI2CSequential
00003B8E  DEFC 0010 6763          add.w     #16,A7
00003B92  6010      6764          bra.s     SeqReadI2C_7
                    6765   SeqReadI2C_6:
                    6766   ; }
                    6767   ; else{
                    6768   ; ReadI2CSequential(0, AddressTo, AddressFrom, AddressFrom);
00003B94  2F02      6769          move.l    D2,-(A7)
00003B96  2F02      6770          move.l    D2,-(A7)
00003B98  2F03      6771          move.l    D3,-(A7)
00003B9A  42A7      6772          clr.l     -(A7)
00003B9C  4EB8 0DBC 6773          jsr       _ReadI2CSequential
00003BA0  DEFC 0010 6774          add.w     #16,A7
                    6775   SeqReadI2C_7:
                    6776   ; }
                    6777   ; return;
                    6778   SeqReadI2C_3:
00003BA4  4CDF 040C 6779          movem.l   (A7)+,D2/D3/A2
00003BA8  4E75      6780          rts
                    6781   ; }
                    6782   ; void main(void)
                    6783   ; {
                    6784   _main:
00003BAA  4E56 FFF0 6785          link      A6,#-16
00003BAE  48E7 3030 6786          movem.l   D2/D3/A2/A3,-(A7)
00003BB2  45F8 121A 6787          lea       _InstallExceptionHandler.L,A2
00003BB6  47F9 0000 6788          lea       _printf.L,A3
00003BBA  3F54      
                    6789   ; char c;
                    6790   ; int i, j;
                    6791   ; char* BugMessage = "DE1-68k Bug V1.77";
00003BBC  41F9 0000 6792          lea       @lab5k_183.L,A0
00003BC0  66B8      
00003BC2  2608      6793          move.l    A0,D3
                    6794   ; char* CopyrightMessage = "Copyright (C) PJ Davies 2016";
00003BC4  41F9 0000 6795          lea       @lab5k_184.L,A0
00003BC8  66CA      
00003BCA  2D48 FFF8 6796          move.l    A0,-8(A6)
                    6797   ; char* NameAndStudentNumber = "\r\n\r\nKenny Wakaba - 91378315\r\nJacob Yang - 24940835";
00003BCE  41F9 0000 6798          lea       @lab5k_185.L,A0
00003BD2  66E8      
00003BD4  2D48 FFFC 6799          move.l    A0,-4(A6)
                    6800   ; KillAllBreakPoints();
00003BD8  4EB8 27D6 6801          jsr       _KillAllBreakPoints
                    6802   ; i = x = y = z = PortA_Count = 0;
00003BDC  42B9 0B00 6803          clr.l     _PortA_Count.L
00003BE0  00D4      
00003BE2  42B9 0B00 6804          clr.l     _z.L
00003BE6  00D0      
00003BE8  42B9 0B00 6805          clr.l     _y.L
00003BEC  00CC      
00003BEE  42B9 0B00 6806          clr.l     _x.L
00003BF2  00C8      
00003BF4  4282      6807          clr.l     D2
                    6808   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00003BF6  42B9 0B00 6809          clr.l     _GoFlag.L
00003BFA  00DC      
00003BFC  42B9 0B00 6810          clr.l     _Trace.L
00003C00  00D8      
                    6811   ; Echo = 1;
00003C02  23FC 0000 6812          move.l    #1,_Echo.L
00003C06  0001 0B00 
00003C0A  00E0      
                    6813   ; d0 = d1 = d2 = d3 = d4 = d5 = d6 = d7 = 0;
00003C0C  42B9 0B00 6814          clr.l     _d7.L
00003C10  0100      
00003C12  42B9 0B00 6815          clr.l     _d6.L
00003C16  00FC      
00003C18  42B9 0B00 6816          clr.l     _d5.L
00003C1C  00F8      
00003C1E  42B9 0B00 6817          clr.l     _d4.L
00003C22  00F4      
00003C24  42B9 0B00 6818          clr.l     _d3.L
00003C28  00F0      
00003C2A  42B9 0B00 6819          clr.l     _d2.L
00003C2E  00EC      
00003C30  42B9 0B00 6820          clr.l     _d1.L
00003C34  00E8      
00003C36  42B9 0B00 6821          clr.l     _d0.L
00003C3A  00E4      
                    6822   ; a0 = a1 = a2 = a3 = a4 = a5 = a6 = 0;
00003C3C  42B9 0B00 6823          clr.l     _a6.L
00003C40  011C      
00003C42  42B9 0B00 6824          clr.l     _a5.L
00003C46  0118      
00003C48  42B9 0B00 6825          clr.l     _a4.L
00003C4C  0114      
00003C4E  42B9 0B00 6826          clr.l     _a3.L
00003C52  0110      
00003C54  42B9 0B00 6827          clr.l     _a2.L
00003C58  010C      
00003C5A  42B9 0B00 6828          clr.l     _a1.L
00003C5E  0108      
00003C60  42B9 0B00 6829          clr.l     _a0.L
00003C64  0104      
                    6830   ; PC = ProgramStart, SSP = TopOfStack, USP = TopOfStack;
00003C66  23FC 0800 6831          move.l    #134217728,_PC.L
00003C6A  0000 0B00 
00003C6E  0120      
00003C70  23FC 0C00 6832          move.l    #201326592,_SSP.L
00003C74  0000 0B00 
00003C78  0124      
00003C7A  23FC 0C00 6833          move.l    #201326592,_USP.L
00003C7E  0000 0B00 
00003C82  0128      
                    6834   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00003C84  33FC 2000 6835          move.w    #8192,_SR.L
00003C88  0B00 012C 
                    6836   ; // Initialise Breakpoint variables
                    6837   ; for (i = 0; i < 8; i++) {
00003C8C  4282      6838          clr.l     D2
                    6839   main_1:
00003C8E  0C82 0000 6840          cmp.l     #8,D2
00003C92  0008      
00003C94  6C00 004C 6841          bge       main_3
                    6842   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00003C98  2002      6843          move.l    D2,D0
00003C9A  E588      6844          lsl.l     #2,D0
00003C9C  41F9 0B00 6845          lea       _BreakPointAddress.L,A0
00003CA0  012E      
00003CA2  42B0 0800 6846          clr.l     0(A0,D0.L)
                    6847   ; WatchPointAddress[i] = 0;
00003CA6  2002      6848          move.l    D2,D0
00003CA8  E588      6849          lsl.l     #2,D0
00003CAA  41F9 0B00 6850          lea       _WatchPointAddress.L,A0
00003CAE  0182      
00003CB0  42B0 0800 6851          clr.l     0(A0,D0.L)
                    6852   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00003CB4  2002      6853          move.l    D2,D0
00003CB6  E388      6854          lsl.l     #1,D0
00003CB8  41F9 0B00 6855          lea       _BreakPointInstruction.L,A0
00003CBC  014E      
00003CBE  4270 0800 6856          clr.w     0(A0,D0.L)
                    6857   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00003CC2  2002      6858          move.l    D2,D0
00003CC4  E588      6859          lsl.l     #2,D0
00003CC6  41F9 0B00 6860          lea       _BreakPointSetOrCleared.L,A0
00003CCA  015E      
00003CCC  42B0 0800 6861          clr.l     0(A0,D0.L)
                    6862   ; WatchPointSetOrCleared[i] = 0;
00003CD0  2002      6863          move.l    D2,D0
00003CD2  E588      6864          lsl.l     #2,D0
00003CD4  41F9 0B00 6865          lea       _WatchPointSetOrCleared.L,A0
00003CD8  01A2      
00003CDA  42B0 0800 6866          clr.l     0(A0,D0.L)
00003CDE  5282      6867          addq.l    #1,D2
00003CE0  60AC      6868          bra       main_1
                    6869   main_3:
                    6870   ; }
                    6871   ; Init_RS232();     // initialise the RS232 port
00003CE2  4EB8 12FC 6872          jsr       _Init_RS232
                    6873   ; Init_LCD();
00003CE6  4EB8 1148 6874          jsr       _Init_LCD
                    6875   ; for (i = 32; i < 48; i++)
00003CEA  7420      6876          moveq     #32,D2
                    6877   main_4:
00003CEC  0C82 0000 6878          cmp.l     #48,D2
00003CF0  0030      
00003CF2  6C0E      6879          bge.s     main_6
                    6880   ; InstallExceptionHandler(UnhandledTrap, i);		        // install Trap exception handler on vector 32-47
00003CF4  2F02      6881          move.l    D2,-(A7)
00003CF6  4878 30A6 6882          pea       _UnhandledTrap.L
00003CFA  4E92      6883          jsr       (A2)
00003CFC  504F      6884          addq.w    #8,A7
00003CFE  5282      6885          addq.l    #1,D2
00003D00  60EA      6886          bra       main_4
                    6887   main_6:
                    6888   ; InstallExceptionHandler(menu, 47);		                   // TRAP #15 call debug and end program
00003D02  4878 002F 6889          pea       47
00003D06  4878 2D28 6890          pea       _menu.L
00003D0A  4E92      6891          jsr       (A2)
00003D0C  504F      6892          addq.w    #8,A7
                    6893   ; InstallExceptionHandler(UnhandledIRQ1, 25);		      // install handler for interrupts
00003D0E  4878 0019 6894          pea       25
00003D12  4878 304C 6895          pea       _UnhandledIRQ1.L
00003D16  4E92      6896          jsr       (A2)
00003D18  504F      6897          addq.w    #8,A7
                    6898   ; InstallExceptionHandler(UnhandledIRQ2, 26);		      // install handler for interrupts
00003D1A  4878 001A 6899          pea       26
00003D1E  4878 3058 6900          pea       _UnhandledIRQ2.L
00003D22  4E92      6901          jsr       (A2)
00003D24  504F      6902          addq.w    #8,A7
                    6903   ; InstallExceptionHandler(UnhandledIRQ3, 27);		      // install handler for interrupts
00003D26  4878 001B 6904          pea       27
00003D2A  4878 3064 6905          pea       _UnhandledIRQ3.L
00003D2E  4E92      6906          jsr       (A2)
00003D30  504F      6907          addq.w    #8,A7
                    6908   ; InstallExceptionHandler(UnhandledIRQ4, 28);		      // install handler for interrupts
00003D32  4878 001C 6909          pea       28
00003D36  4878 3070 6910          pea       _UnhandledIRQ4.L
00003D3A  4E92      6911          jsr       (A2)
00003D3C  504F      6912          addq.w    #8,A7
                    6913   ; InstallExceptionHandler(UnhandledIRQ5, 29);		      // install handler for interrupts
00003D3E  4878 001D 6914          pea       29
00003D42  4878 307C 6915          pea       _UnhandledIRQ5.L
00003D46  4E92      6916          jsr       (A2)
00003D48  504F      6917          addq.w    #8,A7
                    6918   ; InstallExceptionHandler(UnhandledIRQ6, 30);		      // install handler for interrupts
00003D4A  4878 001E 6919          pea       30
00003D4E  4878 3088 6920          pea       _UnhandledIRQ6.L
00003D52  4E92      6921          jsr       (A2)
00003D54  504F      6922          addq.w    #8,A7
                    6923   ; InstallExceptionHandler(UnhandledIRQ7, 31);		      // install handler for interrupts
00003D56  4878 001F 6924          pea       31
00003D5A  4878 309A 6925          pea       _UnhandledIRQ7.L
00003D5E  4E92      6926          jsr       (A2)
00003D60  504F      6927          addq.w    #8,A7
                    6928   ; InstallExceptionHandler(HandleBreakPoint, 46);		           // install Trap 14 Break Point exception handler on vector 46
00003D62  4878 002E 6929          pea       46
00003D66  4878 2A64 6930          pea       _HandleBreakPoint.L
00003D6A  4E92      6931          jsr       (A2)
00003D6C  504F      6932          addq.w    #8,A7
                    6933   ; InstallExceptionHandler(DumpRegistersandPause, 29);		   // install TRACE handler for IRQ5 on vector 29
00003D6E  4878 001D 6934          pea       29
00003D72  4878 2144 6935          pea       _DumpRegistersandPause.L
00003D76  4E92      6936          jsr       (A2)
00003D78  504F      6937          addq.w    #8,A7
                    6938   ; InstallExceptionHandler(BusError, 2);                          // install Bus error handler
00003D7A  4878 0002 6939          pea       2
00003D7E  4878 30B4 6940          pea       _BusError.L
00003D82  4E92      6941          jsr       (A2)
00003D84  504F      6942          addq.w    #8,A7
                    6943   ; InstallExceptionHandler(AddressError, 3);                      // install address error handler (doesn't work on soft core 68k implementation)
00003D86  4878 0003 6944          pea       3
00003D8A  4878 30C2 6945          pea       _AddressError.L
00003D8E  4E92      6946          jsr       (A2)
00003D90  504F      6947          addq.w    #8,A7
                    6948   ; InstallExceptionHandler(IllegalInstruction, 4);                // install illegal instruction exception handler
00003D92  4878 0004 6949          pea       4
00003D96  4878 30D0 6950          pea       _IllegalInstruction.L
00003D9A  4E92      6951          jsr       (A2)
00003D9C  504F      6952          addq.w    #8,A7
                    6953   ; InstallExceptionHandler(Dividebyzero, 5);                      // install /0 exception handler
00003D9E  4878 0005 6954          pea       5
00003DA2  4878 30DE 6955          pea       _Dividebyzero.L
00003DA6  4E92      6956          jsr       (A2)
00003DA8  504F      6957          addq.w    #8,A7
                    6958   ; InstallExceptionHandler(Check, 6);                             // install check instruction exception handler
00003DAA  4878 0006 6959          pea       6
00003DAE  4878 30EC 6960          pea       _Check.L
00003DB2  4E92      6961          jsr       (A2)
00003DB4  504F      6962          addq.w    #8,A7
                    6963   ; InstallExceptionHandler(Trapv, 7);                             // install trapv instruction exception handler
00003DB6  4878 0007 6964          pea       7
00003DBA  4878 30FA 6965          pea       _Trapv.L
00003DBE  4E92      6966          jsr       (A2)
00003DC0  504F      6967          addq.w    #8,A7
                    6968   ; InstallExceptionHandler(PrivError, 8);                         // install Priv Violation exception handler
00003DC2  4878 0008 6969          pea       8
00003DC6  4878 3108 6970          pea       _PrivError.L
00003DCA  4E92      6971          jsr       (A2)
00003DCC  504F      6972          addq.w    #8,A7
                    6973   ; InstallExceptionHandler(UnitIRQ, 15);                          // install uninitialised IRQ exception handler
00003DCE  4878 000F 6974          pea       15
00003DD2  4878 3116 6975          pea       _UnitIRQ.L
00003DD6  4E92      6976          jsr       (A2)
00003DD8  504F      6977          addq.w    #8,A7
                    6978   ; InstallExceptionHandler(Check, 24);                            // install spurious IRQ exception handler
00003DDA  4878 0018 6979          pea       24
00003DDE  4878 30EC 6980          pea       _Check.L
00003DE2  4E92      6981          jsr       (A2)
00003DE4  504F      6982          addq.w    #8,A7
                    6983   ; FlushKeyboard();                        // dump unread characters from keyboard
00003DE6  4EB8 1390 6984          jsr       _FlushKeyboard
                    6985   ; TraceException = 0;                     // clear trace exception port to remove any software generated single step/trace
00003DEA  4239 0040 6986          clr.b     4194314
00003DEE  000A      
                    6987   ; //Initialize SPI
                    6988   ; //SPI_Init();
                    6989   ; //Initialize I2C
                    6990   ; I2C_Init();
00003DF0  4EB8 098E 6991          jsr       _I2C_Init
                    6992   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    6993   ; while (((char)(PortB & 0x02)) == (char)(0x02)) {
                    6994   main_7:
00003DF4  1039 0040 6995          move.b    4194306,D0
00003DF8  0002      
00003DFA  C03C 0002 6996          and.b     #2,D0
00003DFE  0C00 0002 6997          cmp.b     #2,D0
00003E02  662A      6998          bne.s     main_9
                    6999   ; LoadFromFlashChip();
00003E04  4EB8 1BD6 7000          jsr       _LoadFromFlashChip
                    7001   ; printf("\r\nRunning.....");
00003E08  4879 0000 7002          pea       @lab5k_186.L
00003E0C  671C      
00003E0E  4E93      7003          jsr       (A3)
00003E10  584F      7004          addq.w    #4,A7
                    7005   ; Oline1("Running.....");
00003E12  4879 0000 7006          pea       @lab5k_187.L
00003E16  672C      
00003E18  4EB8 11EC 7007          jsr       _Oline1
00003E1C  584F      7008          addq.w    #4,A7
                    7009   ; GoFlag = 1;
00003E1E  23FC 0000 7010          move.l    #1,_GoFlag.L
00003E22  0001 0B00 
00003E26  00DC      
                    7011   ; go();
00003E28  4EB8 08B8 7012          jsr       _go
00003E2C  60C6      7013          bra       main_7
                    7014   main_9:
                    7015   ; }
                    7016   ; // otherwise start the debug monitor
                    7017   ; Oline0(BugMessage);
00003E2E  2F03      7018          move.l    D3,-(A7)
00003E30  4EB8 11BE 7019          jsr       _Oline0
00003E34  584F      7020          addq.w    #4,A7
                    7021   ; Oline1("By: PJ Davies");
00003E36  4879 0000 7022          pea       @lab5k_188.L
00003E3A  673A      
00003E3C  4EB8 11EC 7023          jsr       _Oline1
00003E40  584F      7024          addq.w    #4,A7
                    7025   ; printf("\r\n%s", BugMessage);
00003E42  2F03      7026          move.l    D3,-(A7)
00003E44  4879 0000 7027          pea       @lab5k_189.L
00003E48  6748      
00003E4A  4E93      7028          jsr       (A3)
00003E4C  504F      7029          addq.w    #8,A7
                    7030   ; printf("\r\n%s", CopyrightMessage);
00003E4E  2F2E FFF8 7031          move.l    -8(A6),-(A7)
00003E52  4879 0000 7032          pea       @lab5k_189.L
00003E56  6748      
00003E58  4E93      7033          jsr       (A3)
00003E5A  504F      7034          addq.w    #8,A7
                    7035   ; printf("\r\n%s", NameAndStudentNumber);
00003E5C  2F2E FFFC 7036          move.l    -4(A6),-(A7)
00003E60  4879 0000 7037          pea       @lab5k_189.L
00003E64  6748      
00003E66  4E93      7038          jsr       (A3)
00003E68  504F      7039          addq.w    #8,A7
                    7040   ; menu();
00003E6A  4EB8 2D28 7041          jsr       _menu
00003E6E  4CDF 0C0C 7042          movem.l   (A7)+,D2/D3/A2/A3
00003E72  4E5E      7043          unlk      A6
00003E74  4E75      7044          rts
                    7045   ; }
                    7046   ULDIV:
00003E76  4E56 0000 7047          link    A6,#0
00003E7A  48E7 C000 7048          movem.l D0/D1,-(A7)
00003E7E  222E 0008 7049          move.l  8(A6),D1
00003E82  202E 000C 7050          move.l  12(A6),D0
00003E86  6036      7051          bra.s   ldiv_3
                    7052   LDIV:
00003E88  4E56 0000 7053          link    A6,#0
00003E8C  48E7 C000 7054          movem.l D0/D1,-(A7)
00003E90  222E 0008 7055          move.l  8(A6),D1
00003E94  202E 000C 7056          move.l  12(A6),D0
00003E98  4A80      7057          tst.l   D0
00003E9A  6A0E      7058          bpl.s   ldiv_1
00003E9C  4480      7059          neg.l   D0
00003E9E  4A81      7060          tst.l   D1
00003EA0  6A14      7061          bpl.s   ldiv_2
00003EA2  4481      7062          neg.l   D1
00003EA4  612A      7063          bsr.s   dodiv
00003EA6  4481      7064          neg.l   D1
00003EA8  6016      7065          bra.s   ldiv_4
                    7066   ldiv_1:
00003EAA  4A81      7067          tst.l   D1
00003EAC  6A10      7068          bpl.s   ldiv_3
00003EAE  4481      7069          neg.l   D1
00003EB0  611E      7070          bsr.s   dodiv
00003EB2  4480      7071          neg.l   D0
00003EB4  600A      7072          bra.s   ldiv_4
                    7073   ldiv_2:
00003EB6  6118      7074          bsr.s   dodiv
00003EB8  4480      7075          neg.l   D0
00003EBA  4481      7076          neg.l   D1
00003EBC  6002      7077          bra.s   ldiv_4
                    7078   ldiv_3:
00003EBE  6110      7079          bsr.s   dodiv
                    7080   ldiv_4:
00003EC0  2D40 0008 7081          move.l  D0,8(A6)
00003EC4  2D41 000C 7082          move.l  D1,12(A6)
00003EC8  4CDF 0003 7083          movem.l (A7)+,D0/D1
00003ECC  4E5E      7084          unlk    A6
00003ECE  4E75      7085          rts
                    7086   dodiv:
00003ED0  0C81 0000 7087          cmpi.l  #$FFFF,D1
00003ED4  FFFF      
00003ED6  6236      7088          bhi.s   dodiv_2
00003ED8  0C80 0000 7089          cmpi.l  #$FFFF,D0
00003EDC  FFFF      
00003EDE  6210      7090          bhi.s   dodiv_1
00003EE0  80C1      7091          divu    D1,D0
00003EE2  2200      7092          move.l  D0,D1
00003EE4  4241      7093          clr.w   D1
00003EE6  4841      7094          swap    D1
00003EE8  0280 0000 7095          andi.l  #$FFFF,D0
00003EEC  FFFF      
00003EEE  4E75      7096          rts
                    7097   dodiv_1:
00003EF0  48A7 A000 7098          movem.w D0/D2,-(A7)
00003EF4  4240      7099          clr.w   D0
00003EF6  4840      7100          swap    D0
00003EF8  80C1      7101          divu    D1,D0
00003EFA  3400      7102          move.w  D0,D2
00003EFC  301F      7103          move.w  (A7)+,D0
00003EFE  80C1      7104          divu    D1,D0
00003F00  4840      7105          swap    D0
00003F02  4281      7106          clr.l   D1
00003F04  3200      7107          move.w  D0,D1
00003F06  3002      7108          move.w  D2,D0
00003F08  4840      7109          swap    D0
00003F0A  341F      7110          move.w  (A7)+,D2
00003F0C  4E75      7111          rts
                    7112   dodiv_2:
00003F0E  48E7 3800 7113          movem.l D2/D3/D4,-(A7)
00003F12  2401      7114          move.l  D1,D2
00003F14  4242      7115          clr.w   D2
00003F16  4842      7116          swap    D2
00003F18  5282      7117          addq.l  #1,D2
00003F1A  2600      7118          move.l  D0,D3
00003F1C  2801      7119          move.l  D1,D4
00003F1E  2202      7120          move.l  D2,D1
00003F20  61CE      7121          bsr.s   dodiv_1
00003F22  2204      7122          move.l  D4,D1
00003F24  82C2      7123          divu    D2,D1
00003F26  80C1      7124          divu    D1,D0
00003F28  0280 0000 7125          andi.l  #$FFFF,D0
00003F2C  FFFF      
                    7126   dodiv_3:
00003F2E  2204      7127          move.l  D4,D1
00003F30  2404      7128          move.l  D4,D2
00003F32  4842      7129          swap    D2
00003F34  C2C0      7130          mulu    D0,D1
00003F36  C4C0      7131          mulu    D0,D2
00003F38  4842      7132          swap    D2
00003F3A  D282      7133          add.l   D2,D1
00003F3C  9283      7134          sub.l   D3,D1
00003F3E  620A      7135          bhi.s   dodiv_4
00003F40  4481      7136          neg.l   D1
00003F42  B881      7137          cmp.l   D1,D4
00003F44  6208      7138          bhi.s   dodiv_5
00003F46  5280      7139          addq.l  #1,D0
00003F48  60E4      7140          bra.s   dodiv_3
                    7141   dodiv_4:
00003F4A  5380      7142          subq.l  #1,D0
00003F4C  60E0      7143          bra.s   dodiv_3
                    7144   dodiv_5:
00003F4E  4CDF 001C 7145          movem.l (A7)+,D2/D3/D4
00003F52  4E75      7146          rts
                    7147   _printf:
00003F54  4E56 FFFC 7148          link      A6,#-4
00003F58  48E7 2000 7149          movem.l   D2,-(A7)
00003F5C  41EE 0008 7150          lea       8(A6),A0
00003F60  5848      7151          addq.w    #4,A0
00003F62  2408      7152          move.l    A0,D2
00003F64  2F02      7153          move.l    D2,-(A7)
00003F66  2F2E 0008 7154          move.l    8(A6),-(A7)
00003F6A  42A7      7155          clr.l     -(A7)
00003F6C  6100 01E8 7156          bsr       _vsprintf
00003F70  DEFC 000C 7157          add.w     #12,A7
00003F74  2D40 FFFC 7158          move.l    D0,-4(A6)
00003F78  4282      7159          clr.l     D2
00003F7A  202E FFFC 7160          move.l    -4(A6),D0
00003F7E  4CDF 0004 7161          movem.l   (A7)+,D2
00003F82  4E5E      7162          unlk      A6
00003F84  4E75      7163          rts
                    7164   _strcpy:
00003F86  206F 0004 7165          move.l    (4,A7),A0
00003F8A  226F 0008 7166          move.l    (8,A7),A1
00003F8E  2008      7167          move.l    A0,D0
                    7168   strcpy_1:
00003F90  10D9      7169          move.b    (A1)+,(A0)+
00003F92  66FC      7170          bne       strcpy_1
00003F94  4E75      7171          rts
                    7172   _putch:
00003F96  4E56 0000 7173          link      A6,#0
00003F9A  48E7 2000 7174          movem.l   D2,-(A7)
00003F9E  242E 0008 7175          move.l    8(A6),D2
00003FA2  0C82 0000 7176          cmp.l     #10,D2
00003FA6  000A      
00003FA8  660A      7177          bne.s     putch_1
00003FAA  4878 000D 7178          pea       13
00003FAE  6100 D376 7179          bsr       __putch
00003FB2  584F      7180          addq.w    #4,A7
                    7181   putch_1:
00003FB4  2F02      7182          move.l    D2,-(A7)
00003FB6  6100 D36E 7183          bsr       __putch
00003FBA  584F      7184          addq.w    #4,A7
00003FBC  2002      7185          move.l    D2,D0
00003FBE  4CDF 0004 7186          movem.l   (A7)+,D2
00003FC2  4E5E      7187          unlk      A6
00003FC4  4E75      7188          rts
                    7189   _getch:
00003FC6  48E7 2000 7190          movem.l   D2,-(A7)
00003FCA  2439 0B00 7191          move.l    __ungetbuf,D2
00003FCE  00C0      
00003FD0  2039 0B00 7192          move.l    __ungetbuf,D0
00003FD4  00C0      
00003FD6  0C80 FFFF 7193          cmp.l     #-1,D0
00003FDA  FFFF      
00003FDC  670C      7194          beq.s     getch_1
00003FDE  23FC FFFF 7195          move.l    #-1,__ungetbuf
00003FE2  FFFF 0B00 
00003FE6  00C0      
00003FE8  6010      7196          bra.s     getch_3
                    7197   getch_1:
00003FEA  6100 D366 7198          bsr       __getch
00003FEE  2400      7199          move.l    D0,D2
00003FF0  0C80 0000 7200          cmp.l     #13,D0
00003FF4  000D      
00003FF6  6602      7201          bne.s     getch_3
00003FF8  740A      7202          moveq     #10,D2
                    7203   getch_3:
00003FFA  2002      7204          move.l    D2,D0
00003FFC  4CDF 0004 7205          movem.l   (A7)+,D2
00004000  4E75      7206          rts
                    7207   _tolower:
00004002  4E56 0000 7208          link      A6,#0
00004006  48E7 2000 7209          movem.l   D2,-(A7)
0000400A  242E 0008 7210          move.l    8(A6),D2
0000400E  0C82 0000 7211          cmp.l     #65,D2
00004012  0041      
00004014  6D0E      7212          blt.s     tolower_1
00004016  0C82 0000 7213          cmp.l     #90,D2
0000401A  005A      
0000401C  6E06      7214          bgt.s     tolower_1
0000401E  84BC 0000 7215          or.l      #32,D2
00004022  0020      
                    7216   tolower_1:
00004024  2002      7217          move.l    D2,D0
00004026  4CDF 0004 7218          movem.l   (A7)+,D2
0000402A  4E5E      7219          unlk      A6
0000402C  4E75      7220          rts
                    7221   _sprintf:
0000402E  4E56 FFFC 7222          link      A6,#-4
00004032  48E7 2000 7223          movem.l   D2,-(A7)
00004036  41EE 000C 7224          lea       12(A6),A0
0000403A  5848      7225          addq.w    #4,A0
0000403C  2408      7226          move.l    A0,D2
0000403E  2F02      7227          move.l    D2,-(A7)
00004040  2F2E 000C 7228          move.l    12(A6),-(A7)
00004044  2F2E 0008 7229          move.l    8(A6),-(A7)
00004048  6100 010C 7230          bsr       _vsprintf
0000404C  DEFC 000C 7231          add.w     #12,A7
00004050  2D40 FFFC 7232          move.l    D0,-4(A6)
00004054  4282      7233          clr.l     D2
00004056  202E FFFC 7234          move.l    -4(A6),D0
0000405A  4CDF 0004 7235          movem.l   (A7)+,D2
0000405E  4E5E      7236          unlk      A6
00004060  4E75      7237          rts
                    7238   _strcat:
00004062  206F 0004 7239          move.l    (4,A7),A0	
00004066  226F 0008 7240          move.l    (8,A7),A1	
0000406A  2008      7241          move.l    A0,D0		
                    7242   strcat_0:
0000406C  4A18      7243          tst.b     (A0)+
0000406E  66FC      7244          bne       strcat_0
00004070  5348      7245          subq      #1,A0
                    7246   strcat_1:
00004072  10D9      7247          move.b    (A1)+,(A0)+
00004074  66FC      7248          bne       strcat_1
00004076  4E75      7249          rts
                    7250   _toupper:
00004078  4E56 0000 7251          link      A6,#0
0000407C  48E7 2000 7252          movem.l   D2,-(A7)
00004080  242E 0008 7253          move.l    8(A6),D2
00004084  0C82 0000 7254          cmp.l     #97,D2
00004088  0061      
0000408A  6D0E      7255          blt.s     toupper_1
0000408C  0C82 0000 7256          cmp.l     #122,D2
00004090  007A      
00004092  6E06      7257          bgt.s     toupper_1
00004094  C4BC 0000 7258          and.l     #95,D2
00004098  005F      
                    7259   toupper_1:
0000409A  2002      7260          move.l    D2,D0
0000409C  4CDF 0004 7261          movem.l   (A7)+,D2
000040A0  4E5E      7262          unlk      A6
000040A2  4E75      7263          rts
                    7264   @vsprintf_copy:
000040A4  4E56 0000 7265          link      A6,#0
000040A8  206E 0008 7266          move.l    8(A6),A0
000040AC  4A90      7267          tst.l     (A0)
000040AE  6710      7268          beq.s     @vsprintf_copy_1
000040B0  202E 000C 7269          move.l    12(A6),D0
000040B4  206E 0008 7270          move.l    8(A6),A0
000040B8  2250      7271          move.l    (A0),A1
000040BA  5290      7272          addq.l    #1,(A0)
000040BC  1280      7273          move.b    D0,(A1)
000040BE  600A      7274          bra.s     @vsprintf_copy_2
                    7275   @vsprintf_copy_1:
000040C0  2F2E 000C 7276          move.l    12(A6),-(A7)
000040C4  6100 FED0 7277          bsr       _putch
000040C8  584F      7278          addq.w    #4,A7
                    7279   @vsprintf_copy_2:
000040CA  4E5E      7280          unlk      A6
000040CC  4E75      7281          rts
                    7282   @vsprintf_getval:
000040CE  4E56 0000 7283          link      A6,#0
000040D2  48E7 3000 7284          movem.l   D2/D3,-(A7)
000040D6  242E 0008 7285          move.l    8(A6),D2
000040DA  4283      7286          clr.l     D3
000040DC  2042      7287          move.l    D2,A0
000040DE  2050      7288          move.l    (A0),A0
000040E0  1010      7289          move.b    (A0),D0
000040E2  4880      7290          ext.w     D0
000040E4  48C0      7291          ext.l     D0
000040E6  0C80 0000 7292          cmp.l     #42,D0
000040EA  002A      
000040EC  6612      7293          bne.s     @vsprintf_getval_1
000040EE  206E 000C 7294          move.l    12(A6),A0
000040F2  2250      7295          move.l    (A0),A1
000040F4  5890      7296          addq.l    #4,(A0)
000040F6  2611      7297          move.l    (A1),D3
000040F8  2042      7298          move.l    D2,A0
000040FA  5290      7299          addq.l    #1,(A0)
000040FC  6000 004E 7300          bra       @vsprintf_getval_5
                    7301   @vsprintf_getval_1:
00004100  2042      7302          move.l    D2,A0
00004102  2050      7303          move.l    (A0),A0
00004104  1010      7304          move.b    (A0),D0
00004106  4880      7305          ext.w     D0
00004108  48C0      7306          ext.l     D0
0000410A  0C80 0000 7307          cmp.l     #48,D0
0000410E  0030      
00004110  6D00 003A 7308          blt       @vsprintf_getval_5
00004114  2042      7309          move.l    D2,A0
00004116  2050      7310          move.l    (A0),A0
00004118  1010      7311          move.b    (A0),D0
0000411A  4880      7312          ext.w     D0
0000411C  48C0      7313          ext.l     D0
0000411E  0C80 0000 7314          cmp.l     #57,D0
00004122  0039      
00004124  6E26      7315          bgt.s     @vsprintf_getval_5
00004126  2F03      7316          move.l    D3,-(A7)
00004128  4878 000A 7317          pea       10
0000412C  6100 07F4 7318          bsr       LMUL
00004130  2017      7319          move.l    (A7),D0
00004132  504F      7320          addq.w    #8,A7
00004134  2042      7321          move.l    D2,A0
00004136  2250      7322          move.l    (A0),A1
00004138  5290      7323          addq.l    #1,(A0)
0000413A  1211      7324          move.b    (A1),D1
0000413C  4881      7325          ext.w     D1
0000413E  48C1      7326          ext.l     D1
00004140  D081      7327          add.l     D1,D0
00004142  0480 0000 7328          sub.l     #48,D0
00004146  0030      
00004148  2600      7329          move.l    D0,D3
0000414A  60B4      7330          bra       @vsprintf_getval_1
                    7331   @vsprintf_getval_5:
0000414C  2003      7332          move.l    D3,D0
0000414E  4CDF 000C 7333          movem.l   (A7)+,D2/D3
00004152  4E5E      7334          unlk      A6
00004154  4E75      7335          rts
                    7336   _vsprintf:
00004156  4E56 FFCC 7337          link      A6,#-52
0000415A  48E7 3F3C 7338          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000415E  45EE 0008 7339          lea       8(A6),A2
00004162  47F8 40A4 7340          lea       @vsprintf_copy,A3
00004166  49F9 0000 7341          lea       _ultoa,A4
0000416A  48AE      
0000416C  4286      7342          clr.l     D6
                    7343   vsprintf_1:
0000416E  206E 000C 7344          move.l    12(A6),A0
00004172  4A10      7345          tst.b     (A0)
00004174  6700 0624 7346          beq       vsprintf_3
00004178  206E 000C 7347          move.l    12(A6),A0
0000417C  1010      7348          move.b    (A0),D0
0000417E  4880      7349          ext.w     D0
00004180  48C0      7350          ext.l     D0
00004182  0C80 0000 7351          cmp.l     #37,D0
00004186  0025      
00004188  671C      7352          beq.s     vsprintf_4
0000418A  206E 000C 7353          move.l    12(A6),A0
0000418E  52AE 000C 7354          addq.l    #1,12(A6)
00004192  1210      7355          move.b    (A0),D1
00004194  4881      7356          ext.w     D1
00004196  48C1      7357          ext.l     D1
00004198  2F01      7358          move.l    D1,-(A7)
0000419A  2F0A      7359          move.l    A2,-(A7)
0000419C  4E93      7360          jsr       (A3)
0000419E  504F      7361          addq.w    #8,A7
000041A0  5286      7362          addq.l    #1,D6
000041A2  6000 05F2 7363          bra       vsprintf_2
                    7364   vsprintf_4:
000041A6  52AE 000C 7365          addq.l    #1,12(A6)
000041AA  422E FFD3 7366          clr.b     -45(A6)
000041AE  422E FFD2 7367          clr.b     -46(A6)
000041B2  422E FFD0 7368          clr.b     -48(A6)
000041B6  422E FFCF 7369          clr.b     -49(A6)
000041BA  422E FFCE 7370          clr.b     -50(A6)
000041BE  422E FFCD 7371          clr.b     -51(A6)
000041C2  42AE FFFC 7372          clr.l     -4(A6)
000041C6  7AFF      7373          moveq     #-1,D5
000041C8  41EE FFDC 7374          lea       -36(A6),A0
000041CC  2608      7375          move.l    A0,D3
000041CE  2408      7376          move.l    A0,D2
                    7377   vsprintf_6:
000041D0  206E 000C 7378          move.l    12(A6),A0
000041D4  1010      7379          move.b    (A0),D0
000041D6  4880      7380          ext.w     D0
000041D8  48C0      7381          ext.l     D0
000041DA  0C80 0000 7382          cmp.l     #43,D0
000041DE  002B      
000041E0  6730      7383          beq.s     vsprintf_12
000041E2  6E18      7384          bgt.s     vsprintf_15
000041E4  0C80 0000 7385          cmp.l     #35,D0
000041E8  0023      
000041EA  6700 003E 7386          beq       vsprintf_14
000041EE  6E00 0046 7387          bgt       vsprintf_9
000041F2  0C80 0000 7388          cmp.l     #32,D0
000041F6  0020      
000041F8  6724      7389          beq.s     vsprintf_13
000041FA  603A      7390          bra.s     vsprintf_9
                    7391   vsprintf_15:
000041FC  0C80 0000 7392          cmp.l     #45,D0
00004200  002D      
00004202  6702      7393          beq.s     vsprintf_11
00004204  6030      7394          bra.s     vsprintf_9
                    7395   vsprintf_11:
00004206  1D7C 0001 7396          move.b    #1,-51(A6)
0000420A  FFCD      
0000420C  52AE 000C 7397          addq.l    #1,12(A6)
00004210  6026      7398          bra.s     vsprintf_7
                    7399   vsprintf_12:
00004212  1D7C 0001 7400          move.b    #1,-50(A6)
00004216  FFCE      
00004218  52AE 000C 7401          addq.l    #1,12(A6)
0000421C  601A      7402          bra.s     vsprintf_7
                    7403   vsprintf_13:
0000421E  1D7C 0001 7404          move.b    #1,-49(A6)
00004222  FFCF      
00004224  52AE 000C 7405          addq.l    #1,12(A6)
00004228  600E      7406          bra.s     vsprintf_7
                    7407   vsprintf_14:
0000422A  1D7C 0001 7408          move.b    #1,-48(A6)
0000422E  FFD0      
00004230  52AE 000C 7409          addq.l    #1,12(A6)
00004234  6002      7410          bra.s     vsprintf_7
                    7411   vsprintf_9:
00004236  6002      7412          bra.s     vsprintf_8
                    7413   vsprintf_7:
00004238  6096      7414          bra       vsprintf_6
                    7415   vsprintf_8:
0000423A  206E 000C 7416          move.l    12(A6),A0
0000423E  1010      7417          move.b    (A0),D0
00004240  4880      7418          ext.w     D0
00004242  48C0      7419          ext.l     D0
00004244  0C80 0000 7420          cmp.l     #48,D0
00004248  0030      
0000424A  660A      7421          bne.s     vsprintf_16
0000424C  52AE 000C 7422          addq.l    #1,12(A6)
00004250  1D7C 0001 7423          move.b    #1,-46(A6)
00004254  FFD2      
                    7424   vsprintf_16:
00004256  486E 0010 7425          pea       16(A6)
0000425A  486E 000C 7426          pea       12(A6)
0000425E  6100 FE6E 7427          bsr       @vsprintf_getval
00004262  504F      7428          addq.w    #8,A7
00004264  2A40      7429          move.l    D0,A5
00004266  206E 000C 7430          move.l    12(A6),A0
0000426A  1010      7431          move.b    (A0),D0
0000426C  4880      7432          ext.w     D0
0000426E  48C0      7433          ext.l     D0
00004270  0C80 0000 7434          cmp.l     #46,D0
00004274  002E      
00004276  6614      7435          bne.s     vsprintf_18
00004278  52AE 000C 7436          addq.l    #1,12(A6)
0000427C  486E 0010 7437          pea       16(A6)
00004280  486E 000C 7438          pea       12(A6)
00004284  6100 FE48 7439          bsr       @vsprintf_getval
00004288  504F      7440          addq.w    #8,A7
0000428A  2A00      7441          move.l    D0,D5
                    7442   vsprintf_18:
0000428C  206E 000C 7443          move.l    12(A6),A0
00004290  1010      7444          move.b    (A0),D0
00004292  4880      7445          ext.w     D0
00004294  48C0      7446          ext.l     D0
00004296  0C80 0000 7447          cmp.l     #108,D0
0000429A  006C      
0000429C  660A      7448          bne.s     vsprintf_20
0000429E  52AE 000C 7449          addq.l    #1,12(A6)
000042A2  1D7C 0001 7450          move.b    #1,-45(A6)
000042A6  FFD3      
                    7451   vsprintf_20:
000042A8  206E 000C 7452          move.l    12(A6),A0
000042AC  1010      7453          move.b    (A0),D0
000042AE  4880      7454          ext.w     D0
000042B0  48C0      7455          ext.l     D0
000042B2  0C80 0000 7456          cmp.l     #111,D0
000042B6  006F      
000042B8  6700 00D4 7457          beq       vsprintf_27
000042BC  6E34      7458          bgt.s     vsprintf_33
000042BE  0C80 0000 7459          cmp.l     #100,D0
000042C2  0064      
000042C4  6700 0054 7460          beq       vsprintf_24
000042C8  6E1C      7461          bgt.s     vsprintf_34
000042CA  0C80 0000 7462          cmp.l     #99,D0
000042CE  0063      
000042D0  6700 012C 7463          beq       vsprintf_30
000042D4  6E00 016A 7464          bgt       vsprintf_22
000042D8  0C80 0000 7465          cmp.l     #88,D0
000042DC  0058      
000042DE  6700 00E6 7466          beq       vsprintf_28
000042E2  6000 015C 7467          bra       vsprintf_22
                    7468   vsprintf_34:
000042E6  0C80 0000 7469          cmp.l     #105,D0
000042EA  0069      
000042EC  672C      7470          beq.s     vsprintf_24
000042EE  6000 0150 7471          bra       vsprintf_22
                    7472   vsprintf_33:
000042F2  0C80 0000 7473          cmp.l     #117,D0
000042F6  0075      
000042F8  6700 005C 7474          beq       vsprintf_26
000042FC  6E0E      7475          bgt.s     vsprintf_35
000042FE  0C80 0000 7476          cmp.l     #115,D0
00004302  0073      
00004304  6700 011C 7477          beq       vsprintf_31
00004308  6000 0136 7478          bra       vsprintf_22
                    7479   vsprintf_35:
0000430C  0C80 0000 7480          cmp.l     #120,D0
00004310  0078      
00004312  6700 00B2 7481          beq       vsprintf_28
00004316  6000 0128 7482          bra       vsprintf_22
                    7483   vsprintf_24:
0000431A  4A2E FFD3 7484          tst.b     -45(A6)
0000431E  671A      7485          beq.s     vsprintf_36
00004320  4878 000A 7486          pea       10
00004324  2F03      7487          move.l    D3,-(A7)
00004326  206E 0010 7488          move.l    16(A6),A0
0000432A  58AE 0010 7489          addq.l    #4,16(A6)
0000432E  2F10      7490          move.l    (A0),-(A7)
00004330  6100 04F8 7491          bsr       _ltoa
00004334  DEFC 000C 7492          add.w     #12,A7
00004338  6018      7493          bra.s     vsprintf_37
                    7494   vsprintf_36:
0000433A  4878 000A 7495          pea       10
0000433E  2F03      7496          move.l    D3,-(A7)
00004340  206E 0010 7497          move.l    16(A6),A0
00004344  58AE 0010 7498          addq.l    #4,16(A6)
00004348  2F10      7499          move.l    (A0),-(A7)
0000434A  6100 04DE 7500          bsr       _ltoa
0000434E  DEFC 000C 7501          add.w     #12,A7
                    7502   vsprintf_37:
00004352  6000 00FA 7503          bra       vsprintf_23
                    7504   vsprintf_26:
00004356  4A2E FFD3 7505          tst.b     -45(A6)
0000435A  6718      7506          beq.s     vsprintf_38
0000435C  4878 000A 7507          pea       10
00004360  2F03      7508          move.l    D3,-(A7)
00004362  206E 0010 7509          move.l    16(A6),A0
00004366  58AE 0010 7510          addq.l    #4,16(A6)
0000436A  2F10      7511          move.l    (A0),-(A7)
0000436C  4E94      7512          jsr       (A4)
0000436E  DEFC 000C 7513          add.w     #12,A7
00004372  6016      7514          bra.s     vsprintf_39
                    7515   vsprintf_38:
00004374  4878 000A 7516          pea       10
00004378  2F03      7517          move.l    D3,-(A7)
0000437A  206E 0010 7518          move.l    16(A6),A0
0000437E  58AE 0010 7519          addq.l    #4,16(A6)
00004382  2F10      7520          move.l    (A0),-(A7)
00004384  4E94      7521          jsr       (A4)
00004386  DEFC 000C 7522          add.w     #12,A7
                    7523   vsprintf_39:
0000438A  6000 00C2 7524          bra       vsprintf_23
                    7525   vsprintf_27:
0000438E  4A2E FFD3 7526          tst.b     -45(A6)
00004392  6718      7527          beq.s     vsprintf_40
00004394  4878 0008 7528          pea       8
00004398  2F03      7529          move.l    D3,-(A7)
0000439A  206E 0010 7530          move.l    16(A6),A0
0000439E  58AE 0010 7531          addq.l    #4,16(A6)
000043A2  2F10      7532          move.l    (A0),-(A7)
000043A4  4E94      7533          jsr       (A4)
000043A6  DEFC 000C 7534          add.w     #12,A7
000043AA  6016      7535          bra.s     vsprintf_41
                    7536   vsprintf_40:
000043AC  4878 0008 7537          pea       8
000043B0  2F03      7538          move.l    D3,-(A7)
000043B2  206E 0010 7539          move.l    16(A6),A0
000043B6  58AE 0010 7540          addq.l    #4,16(A6)
000043BA  2F10      7541          move.l    (A0),-(A7)
000043BC  4E94      7542          jsr       (A4)
000043BE  DEFC 000C 7543          add.w     #12,A7
                    7544   vsprintf_41:
000043C2  6000 008A 7545          bra       vsprintf_23
                    7546   vsprintf_28:
000043C6  4A2E FFD3 7547          tst.b     -45(A6)
000043CA  6718      7548          beq.s     vsprintf_42
000043CC  4878 0010 7549          pea       16
000043D0  2F03      7550          move.l    D3,-(A7)
000043D2  206E 0010 7551          move.l    16(A6),A0
000043D6  58AE 0010 7552          addq.l    #4,16(A6)
000043DA  2F10      7553          move.l    (A0),-(A7)
000043DC  4E94      7554          jsr       (A4)
000043DE  DEFC 000C 7555          add.w     #12,A7
000043E2  6016      7556          bra.s     vsprintf_43
                    7557   vsprintf_42:
000043E4  4878 0010 7558          pea       16
000043E8  2F03      7559          move.l    D3,-(A7)
000043EA  206E 0010 7560          move.l    16(A6),A0
000043EE  58AE 0010 7561          addq.l    #4,16(A6)
000043F2  2F10      7562          move.l    (A0),-(A7)
000043F4  4E94      7563          jsr       (A4)
000043F6  DEFC 000C 7564          add.w     #12,A7
                    7565   vsprintf_43:
000043FA  6000 0052 7566          bra       vsprintf_23
                    7567   vsprintf_30:
000043FE  206E 0010 7568          move.l    16(A6),A0
00004402  58AE 0010 7569          addq.l    #4,16(A6)
00004406  2010      7570          move.l    (A0),D0
00004408  2042      7571          move.l    D2,A0
0000440A  5282      7572          addq.l    #1,D2
0000440C  1080      7573          move.b    D0,(A0)
0000440E  2042      7574          move.l    D2,A0
00004410  4210      7575          clr.b     (A0)
00004412  200D      7576          move.l    A5,D0
00004414  6704      7577          beq.s     vsprintf_44
00004416  200D      7578          move.l    A5,D0
00004418  6002      7579          bra.s     vsprintf_45
                    7580   vsprintf_44:
0000441A  7001      7581          moveq     #1,D0
                    7582   vsprintf_45:
0000441C  2A00      7583          move.l    D0,D5
0000441E  6000 002E 7584          bra       vsprintf_23
                    7585   vsprintf_31:
00004422  206E 0010 7586          move.l    16(A6),A0
00004426  58AE 0010 7587          addq.l    #4,16(A6)
0000442A  2610      7588          move.l    (A0),D3
0000442C  0C85 FFFF 7589          cmp.l     #-1,D5
00004430  FFFF      
00004432  660A      7590          bne.s     vsprintf_46
00004434  2F03      7591          move.l    D3,-(A7)
00004436  6100 0578 7592          bsr       _strlen
0000443A  584F      7593          addq.w    #4,A7
0000443C  2A00      7594          move.l    D0,D5
                    7595   vsprintf_46:
0000443E  600E      7596          bra.s     vsprintf_23
                    7597   vsprintf_22:
00004440  206E 000C 7598          move.l    12(A6),A0
00004444  2242      7599          move.l    D2,A1
00004446  5282      7600          addq.l    #1,D2
00004448  1290      7601          move.b    (A0),(A1)
0000444A  2042      7602          move.l    D2,A0
0000444C  4210      7603          clr.b     (A0)
                    7604   vsprintf_23:
0000444E  2F03      7605          move.l    D3,-(A7)
00004450  6100 055E 7606          bsr       _strlen
00004454  584F      7607          addq.w    #4,A7
00004456  1800      7608          move.b    D0,D4
00004458  206E 000C 7609          move.l    12(A6),A0
0000445C  1010      7610          move.b    (A0),D0
0000445E  4880      7611          ext.w     D0
00004460  48C0      7612          ext.l     D0
00004462  0C80 0000 7613          cmp.l     #115,D0
00004466  0073      
00004468  6618      7614          bne.s     vsprintf_48
0000446A  0C85 0000 7615          cmp.l     #0,D5
0000446E  0000      
00004470  6D10      7616          blt.s     vsprintf_48
00004472  4884      7617          ext.w     D4
00004474  48C4      7618          ext.l     D4
00004476  B885      7619          cmp.l     D5,D4
00004478  6F04      7620          ble.s     vsprintf_50
0000447A  1005      7621          move.b    D5,D0
0000447C  6002      7622          bra.s     vsprintf_51
                    7623   vsprintf_50:
0000447E  1004      7624          move.b    D4,D0
                    7625   vsprintf_51:
00004480  1800      7626          move.b    D0,D4
                    7627   vsprintf_48:
00004482  206E 000C 7628          move.l    12(A6),A0
00004486  1010      7629          move.b    (A0),D0
00004488  4880      7630          ext.w     D0
0000448A  48C0      7631          ext.l     D0
0000448C  0C80 0000 7632          cmp.l     #88,D0
00004490  0058      
00004492  6600 0026 7633          bne       vsprintf_56
00004496  41EE FFDC 7634          lea       -36(A6),A0
0000449A  2408      7635          move.l    A0,D2
                    7636   vsprintf_54:
0000449C  2042      7637          move.l    D2,A0
0000449E  4A10      7638          tst.b     (A0)
000044A0  6718      7639          beq.s     vsprintf_56
000044A2  2042      7640          move.l    D2,A0
000044A4  1210      7641          move.b    (A0),D1
000044A6  4881      7642          ext.w     D1
000044A8  48C1      7643          ext.l     D1
000044AA  2F01      7644          move.l    D1,-(A7)
000044AC  6100 FBCA 7645          bsr       _toupper
000044B0  584F      7646          addq.w    #4,A7
000044B2  2042      7647          move.l    D2,A0
000044B4  1080      7648          move.b    D0,(A0)
000044B6  5282      7649          addq.l    #1,D2
000044B8  60E2      7650          bra       vsprintf_54
                    7651   vsprintf_56:
000044BA  7E00      7652          moveq     #0,D7
000044BC  41EE FFD4 7653          lea       -44(A6),A0
000044C0  2408      7654          move.l    A0,D2
000044C2  206E 000C 7655          move.l    12(A6),A0
000044C6  1010      7656          move.b    (A0),D0
000044C8  4880      7657          ext.w     D0
000044CA  48C0      7658          ext.l     D0
000044CC  0C80 0000 7659          cmp.l     #100,D0
000044D0  0064      
000044D2  6714      7660          beq.s     vsprintf_59
000044D4  206E 000C 7661          move.l    12(A6),A0
000044D8  1010      7662          move.b    (A0),D0
000044DA  4880      7663          ext.w     D0
000044DC  48C0      7664          ext.l     D0
000044DE  0C80 0000 7665          cmp.l     #105,D0
000044E2  0069      
000044E4  6600 0076 7666          bne       vsprintf_65
                    7667   vsprintf_59:
000044E8  4A2E FFCE 7668          tst.b     -50(A6)
000044EC  6612      7669          bne.s     vsprintf_62
000044EE  2043      7670          move.l    D3,A0
000044F0  1010      7671          move.b    (A0),D0
000044F2  4880      7672          ext.w     D0
000044F4  48C0      7673          ext.l     D0
000044F6  0C80 0000 7674          cmp.l     #45,D0
000044FA  002D      
000044FC  6600 002E 7675          bne       vsprintf_60
                    7676   vsprintf_62:
00004500  2043      7677          move.l    D3,A0
00004502  1010      7678          move.b    (A0),D0
00004504  4880      7679          ext.w     D0
00004506  48C0      7680          ext.l     D0
00004508  0C80 0000 7681          cmp.l     #45,D0
0000450C  002D      
0000450E  660E      7682          bne.s     vsprintf_63
00004510  2043      7683          move.l    D3,A0
00004512  5283      7684          addq.l    #1,D3
00004514  2242      7685          move.l    D2,A1
00004516  5282      7686          addq.l    #1,D2
00004518  1290      7687          move.b    (A0),(A1)
0000451A  5304      7688          subq.b    #1,D4
0000451C  6008      7689          bra.s     vsprintf_64
                    7690   vsprintf_63:
0000451E  2042      7691          move.l    D2,A0
00004520  5282      7692          addq.l    #1,D2
00004522  10BC 002B 7693          move.b    #43,(A0)
                    7694   vsprintf_64:
00004526  5287      7695          addq.l    #1,D7
00004528  6000 0032 7696          bra       vsprintf_65
                    7697   vsprintf_60:
0000452C  4A2E FFCF 7698          tst.b     -49(A6)
00004530  6700 002A 7699          beq       vsprintf_65
00004534  2043      7700          move.l    D3,A0
00004536  1010      7701          move.b    (A0),D0
00004538  4880      7702          ext.w     D0
0000453A  48C0      7703          ext.l     D0
0000453C  0C80 0000 7704          cmp.l     #45,D0
00004540  002D      
00004542  660E      7705          bne.s     vsprintf_67
00004544  2043      7706          move.l    D3,A0
00004546  5283      7707          addq.l    #1,D3
00004548  2242      7708          move.l    D2,A1
0000454A  5282      7709          addq.l    #1,D2
0000454C  1290      7710          move.b    (A0),(A1)
0000454E  5304      7711          subq.b    #1,D4
00004550  6008      7712          bra.s     vsprintf_68
                    7713   vsprintf_67:
00004552  2042      7714          move.l    D2,A0
00004554  5282      7715          addq.l    #1,D2
00004556  10BC 0020 7716          move.b    #32,(A0)
                    7717   vsprintf_68:
0000455A  5287      7718          addq.l    #1,D7
                    7719   vsprintf_65:
0000455C  4A2E FFD0 7720          tst.b     -48(A6)
00004560  6700 0066 7721          beq       vsprintf_77
00004564  206E 000C 7722          move.l    12(A6),A0
00004568  1010      7723          move.b    (A0),D0
0000456A  4880      7724          ext.w     D0
0000456C  48C0      7725          ext.l     D0
0000456E  0C80 0000 7726          cmp.l     #111,D0
00004572  006F      
00004574  671A      7727          beq.s     vsprintf_73
00004576  6E0C      7728          bgt.s     vsprintf_76
00004578  0C80 0000 7729          cmp.l     #88,D0
0000457C  0058      
0000457E  6710      7730          beq.s     vsprintf_73
00004580  6000 0046 7731          bra       vsprintf_77
                    7732   vsprintf_76:
00004584  0C80 0000 7733          cmp.l     #120,D0
00004588  0078      
0000458A  6704      7734          beq.s     vsprintf_73
0000458C  6000 003A 7735          bra       vsprintf_77
                    7736   vsprintf_73:
00004590  2042      7737          move.l    D2,A0
00004592  5282      7738          addq.l    #1,D2
00004594  10BC 0030 7739          move.b    #48,(A0)
00004598  5287      7740          addq.l    #1,D7
0000459A  206E 000C 7741          move.l    12(A6),A0
0000459E  1010      7742          move.b    (A0),D0
000045A0  4880      7743          ext.w     D0
000045A2  48C0      7744          ext.l     D0
000045A4  0C80 0000 7745          cmp.l     #120,D0
000045A8  0078      
000045AA  6712      7746          beq.s     vsprintf_79
000045AC  206E 000C 7747          move.l    12(A6),A0
000045B0  1010      7748          move.b    (A0),D0
000045B2  4880      7749          ext.w     D0
000045B4  48C0      7750          ext.l     D0
000045B6  0C80 0000 7751          cmp.l     #88,D0
000045BA  0058      
000045BC  660A      7752          bne.s     vsprintf_77
                    7753   vsprintf_79:
000045BE  2042      7754          move.l    D2,A0
000045C0  5282      7755          addq.l    #1,D2
000045C2  10BC 0078 7756          move.b    #120,(A0)
000045C6  5287      7757          addq.l    #1,D7
                    7758   vsprintf_77:
000045C8  2042      7759          move.l    D2,A0
000045CA  4210      7760          clr.b     (A0)
000045CC  206E 000C 7761          move.l    12(A6),A0
000045D0  1010      7762          move.b    (A0),D0
000045D2  4880      7763          ext.w     D0
000045D4  48C0      7764          ext.l     D0
000045D6  0C80 0000 7765          cmp.l     #105,D0
000045DA  0069      
000045DC  6700 0076 7766          beq       vsprintf_82
000045E0  6E42      7767          bgt.s     vsprintf_93
000045E2  0C80 0000 7768          cmp.l     #99,D0
000045E6  0063      
000045E8  6700 0084 7769          beq       vsprintf_96
000045EC  6E1C      7770          bgt.s     vsprintf_94
000045EE  0C80 0000 7771          cmp.l     #88,D0
000045F2  0058      
000045F4  6700 005E 7772          beq       vsprintf_82
000045F8  6E00 0184 7773          bgt       vsprintf_80
000045FC  0C80 0000 7774          cmp.l     #69,D0
00004600  0045      
00004602  6700 0050 7775          beq       vsprintf_82
00004606  6000 0176 7776          bra       vsprintf_80
                    7777   vsprintf_94:
0000460A  0C80 0000 7778          cmp.l     #101,D0
0000460E  0065      
00004610  6700 0042 7779          beq       vsprintf_82
00004614  6E00 0168 7780          bgt       vsprintf_80
00004618  0C80 0000 7781          cmp.l     #100,D0
0000461C  0064      
0000461E  6734      7782          beq.s     vsprintf_82
00004620  6000 015C 7783          bra       vsprintf_80
                    7784   vsprintf_93:
00004624  0C80 0000 7785          cmp.l     #117,D0
00004628  0075      
0000462A  6728      7786          beq.s     vsprintf_82
0000462C  6E1A      7787          bgt.s     vsprintf_95
0000462E  0C80 0000 7788          cmp.l     #115,D0
00004632  0073      
00004634  6700 0038 7789          beq       vsprintf_96
00004638  6E00 0144 7790          bgt       vsprintf_80
0000463C  0C80 0000 7791          cmp.l     #111,D0
00004640  006F      
00004642  6710      7792          beq.s     vsprintf_82
00004644  6000 0138 7793          bra       vsprintf_80
                    7794   vsprintf_95:
00004648  0C80 0000 7795          cmp.l     #120,D0
0000464C  0078      
0000464E  6704      7796          beq.s     vsprintf_82
00004650  6000 012C 7797          bra       vsprintf_80
                    7798   vsprintf_82:
00004654  4A2E FFD2 7799          tst.b     -46(A6)
00004658  6714      7800          beq.s     vsprintf_96
0000465A  4A2E FFCD 7801          tst.b     -51(A6)
0000465E  660E      7802          bne.s     vsprintf_96
00004660  200D      7803          move.l    A5,D0
00004662  9087      7804          sub.l     D7,D0
00004664  4884      7805          ext.w     D4
00004666  48C4      7806          ext.l     D4
00004668  9084      7807          sub.l     D4,D0
0000466A  2D40 FFFC 7808          move.l    D0,-4(A6)
                    7809   vsprintf_96:
0000466E  202E FFFC 7810          move.l    -4(A6),D0
00004672  0C80 0000 7811          cmp.l     #0,D0
00004676  0000      
00004678  6C04      7812          bge.s     vsprintf_98
0000467A  42AE FFFC 7813          clr.l     -4(A6)
                    7814   vsprintf_98:
0000467E  4A2E FFCD 7815          tst.b     -51(A6)
00004682  6600 0030 7816          bne       vsprintf_104
00004686  4884      7817          ext.w     D4
00004688  48C4      7818          ext.l     D4
0000468A  2004      7819          move.l    D4,D0
0000468C  D0AE FFFC 7820          add.l     -4(A6),D0
00004690  D087      7821          add.l     D7,D0
00004692  1D40 FFD1 7822          move.b    D0,-47(A6)
                    7823   vsprintf_102:
00004696  102E FFD1 7824          move.b    -47(A6),D0
0000469A  4880      7825          ext.w     D0
0000469C  48C0      7826          ext.l     D0
0000469E  220D      7827          move.l    A5,D1
000046A0  534D      7828          subq.w    #1,A5
000046A2  B081      7829          cmp.l     D1,D0
000046A4  6C0E      7830          bge.s     vsprintf_104
000046A6  4878 0020 7831          pea       32
000046AA  2F0A      7832          move.l    A2,-(A7)
000046AC  4E93      7833          jsr       (A3)
000046AE  504F      7834          addq.w    #8,A7
000046B0  5286      7835          addq.l    #1,D6
000046B2  60E2      7836          bra       vsprintf_102
                    7837   vsprintf_104:
000046B4  41EE FFD4 7838          lea       -44(A6),A0
000046B8  2408      7839          move.l    A0,D2
                    7840   vsprintf_105:
000046BA  2042      7841          move.l    D2,A0
000046BC  4A10      7842          tst.b     (A0)
000046BE  6716      7843          beq.s     vsprintf_107
000046C0  2042      7844          move.l    D2,A0
000046C2  5282      7845          addq.l    #1,D2
000046C4  1210      7846          move.b    (A0),D1
000046C6  4881      7847          ext.w     D1
000046C8  48C1      7848          ext.l     D1
000046CA  2F01      7849          move.l    D1,-(A7)
000046CC  2F0A      7850          move.l    A2,-(A7)
000046CE  4E93      7851          jsr       (A3)
000046D0  504F      7852          addq.w    #8,A7
000046D2  5286      7853          addq.l    #1,D6
000046D4  60E4      7854          bra       vsprintf_105
                    7855   vsprintf_107:
000046D6  202E FFFC 7856          move.l    -4(A6),D0
000046DA  1D40 FFD1 7857          move.b    D0,-47(A6)
                    7858   vsprintf_108:
000046DE  102E FFD1 7859          move.b    -47(A6),D0
000046E2  532E FFD1 7860          subq.b    #1,-47(A6)
000046E6  4A00      7861          tst.b     D0
000046E8  670E      7862          beq.s     vsprintf_110
000046EA  4878 0030 7863          pea       48
000046EE  2F0A      7864          move.l    A2,-(A7)
000046F0  4E93      7865          jsr       (A3)
000046F2  504F      7866          addq.w    #8,A7
000046F4  5286      7867          addq.l    #1,D6
000046F6  60E6      7868          bra       vsprintf_108
                    7869   vsprintf_110:
000046F8  2043      7870          move.l    D3,A0
000046FA  4A10      7871          tst.b     (A0)
000046FC  6700 0048 7872          beq       vsprintf_113
00004700  206E 000C 7873          move.l    12(A6),A0
00004704  1010      7874          move.b    (A0),D0
00004706  4880      7875          ext.w     D0
00004708  48C0      7876          ext.l     D0
0000470A  0C80 0000 7877          cmp.l     #115,D0
0000470E  0073      
00004710  670C      7878          beq.s     vsprintf_116
00004712  6E18      7879          bgt.s     vsprintf_119
00004714  0C80 0000 7880          cmp.l     #99,D0
00004718  0063      
0000471A  6702      7881          beq.s     vsprintf_116
0000471C  600E      7882          bra.s     vsprintf_119
                    7883   vsprintf_116:
0000471E  2005      7884          move.l    D5,D0
00004720  5385      7885          subq.l    #1,D5
00004722  0C80 0000 7886          cmp.l     #0,D0
00004726  0000      
00004728  6E02      7887          bgt.s     vsprintf_119
0000472A  6016      7888          bra.s     vsprintf_115
                    7889   vsprintf_119:
0000472C  2043      7890          move.l    D3,A0
0000472E  5283      7891          addq.l    #1,D3
00004730  1210      7892          move.b    (A0),D1
00004732  4881      7893          ext.w     D1
00004734  48C1      7894          ext.l     D1
00004736  2F01      7895          move.l    D1,-(A7)
00004738  2F0A      7896          move.l    A2,-(A7)
0000473A  4E93      7897          jsr       (A3)
0000473C  504F      7898          addq.w    #8,A7
0000473E  5286      7899          addq.l    #1,D6
00004740  6002      7900          bra.s     vsprintf_112
                    7901   vsprintf_115:
00004742  6002      7902          bra.s     vsprintf_113
                    7903   vsprintf_112:
00004744  60B2      7904          bra       vsprintf_110
                    7905   vsprintf_113:
00004746  4A2E FFCD 7906          tst.b     -51(A6)
0000474A  6700 0030 7907          beq       vsprintf_125
0000474E  4884      7908          ext.w     D4
00004750  48C4      7909          ext.l     D4
00004752  2004      7910          move.l    D4,D0
00004754  D0AE FFFC 7911          add.l     -4(A6),D0
00004758  D087      7912          add.l     D7,D0
0000475A  1D40 FFD1 7913          move.b    D0,-47(A6)
                    7914   vsprintf_123:
0000475E  102E FFD1 7915          move.b    -47(A6),D0
00004762  4880      7916          ext.w     D0
00004764  48C0      7917          ext.l     D0
00004766  220D      7918          move.l    A5,D1
00004768  534D      7919          subq.w    #1,A5
0000476A  B081      7920          cmp.l     D1,D0
0000476C  6C0E      7921          bge.s     vsprintf_125
0000476E  4878 0020 7922          pea       32
00004772  2F0A      7923          move.l    A2,-(A7)
00004774  4E93      7924          jsr       (A3)
00004776  504F      7925          addq.w    #8,A7
00004778  5386      7926          subq.l    #1,D6
0000477A  60E2      7927          bra       vsprintf_123
                    7928   vsprintf_125:
0000477C  6014      7929          bra.s     vsprintf_81
                    7930   vsprintf_80:
0000477E  206E 000C 7931          move.l    12(A6),A0
00004782  1210      7932          move.b    (A0),D1
00004784  4881      7933          ext.w     D1
00004786  48C1      7934          ext.l     D1
00004788  2F01      7935          move.l    D1,-(A7)
0000478A  2F0A      7936          move.l    A2,-(A7)
0000478C  4E93      7937          jsr       (A3)
0000478E  504F      7938          addq.w    #8,A7
00004790  5286      7939          addq.l    #1,D6
                    7940   vsprintf_81:
00004792  52AE 000C 7941          addq.l    #1,12(A6)
                    7942   vsprintf_2:
00004796  6000 F9D6 7943          bra       vsprintf_1
                    7944   vsprintf_3:
0000479A  4A92      7945          tst.l     (A2)
0000479C  6710      7946          beq.s     vsprintf_126
0000479E  4201      7947          clr.b     D1
000047A0  C2BC 0000 7948          and.l     #255,D1
000047A4  00FF      
000047A6  2F01      7949          move.l    D1,-(A7)
000047A8  2F0A      7950          move.l    A2,-(A7)
000047AA  4E93      7951          jsr       (A3)
000047AC  504F      7952          addq.w    #8,A7
                    7953   vsprintf_126:
000047AE  2006      7954          move.l    D6,D0
000047B0  4CDF 3CFC 7955          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000047B4  4E5E      7956          unlk      A6
000047B6  4E75      7957          rts
                    7958   @itoa_convert:
000047B8  4E56 0000 7959          link      A6,#0
000047BC  48E7 3C00 7960          movem.l   D2/D3/D4/D5,-(A7)
000047C0  242E 0008 7961          move.l    8(A6),D2
000047C4  262E 0010 7962          move.l    16(A6),D3
000047C8  2A2E 000C 7963          move.l    12(A6),D5
000047CC  2F05      7964          move.l    D5,-(A7)
000047CE  2F03      7965          move.l    D3,-(A7)
000047D0  6100 F6A4 7966          bsr       ULDIV
000047D4  202F 0004 7967          move.l    4(A7),D0
000047D8  504F      7968          addq.w    #8,A7
000047DA  2800      7969          move.l    D0,D4
000047DC  BA83      7970          cmp.l     D3,D5
000047DE  651A      7971          blo.s     @itoa_convert_1
000047E0  2F03      7972          move.l    D3,-(A7)
000047E2  2F05      7973          move.l    D5,-(A7)
000047E4  2F03      7974          move.l    D3,-(A7)
000047E6  6100 F68E 7975          bsr       ULDIV
000047EA  2217      7976          move.l    (A7),D1
000047EC  504F      7977          addq.w    #8,A7
000047EE  2F01      7978          move.l    D1,-(A7)
000047F0  2F02      7979          move.l    D2,-(A7)
000047F2  61C4      7980          bsr       @itoa_convert
000047F4  DEFC 000C 7981          add.w     #12,A7
000047F8  2400      7982          move.l    D0,D2
                    7983   @itoa_convert_1:
000047FA  0C84 0000 7984          cmp.l     #9,D4
000047FE  0009      
00004800  6E0A      7985          bgt.s     @itoa_convert_3
00004802  2004      7986          move.l    D4,D0
00004804  0680 0000 7987          add.l     #48,D0
00004808  0030      
0000480A  600E      7988          bra.s     @itoa_convert_4
                    7989   @itoa_convert_3:
0000480C  2004      7990          move.l    D4,D0
0000480E  0680 0000 7991          add.l     #97,D0
00004812  0061      
00004814  0480 0000 7992          sub.l     #10,D0
00004818  000A      
                    7993   @itoa_convert_4:
0000481A  2042      7994          move.l    D2,A0
0000481C  1080      7995          move.b    D0,(A0)
0000481E  2002      7996          move.l    D2,D0
00004820  5280      7997          addq.l    #1,D0
00004822  4CDF 003C 7998          movem.l   (A7)+,D2/D3/D4/D5
00004826  4E5E      7999          unlk      A6
00004828  4E75      8000          rts
                    8001   _ltoa:
0000482A  4E56 0000 8002          link      A6,#0
0000482E  48E7 3C00 8003          movem.l   D2/D3/D4/D5,-(A7)
00004832  242E 0008 8004          move.l    8(A6),D2
00004836  262E 000C 8005          move.l    12(A6),D3
0000483A  2A2E 0010 8006          move.l    16(A6),D5
0000483E  2803      8007          move.l    D3,D4
00004840  0C85 0000 8008          cmp.l     #2,D5
00004844  0002      
00004846  6D08      8009          blt.s     ltoa_3
00004848  0C85 0000 8010          cmp.l     #36,D5
0000484C  0024      
0000484E  6F06      8011          ble.s     ltoa_1
                    8012   ltoa_3:
00004850  2003      8013          move.l    D3,D0
00004852  6000 0052 8014          bra       ltoa_4
                    8015   ltoa_1:
00004856  0C85 0000 8016          cmp.l     #10,D5
0000485A  000A      
0000485C  6600 0032 8017          bne       ltoa_5
00004860  0C82 0000 8018          cmp.l     #0,D2
00004864  0000      
00004866  6C28      8019          bge.s     ltoa_5
00004868  2002      8020          move.l    D2,D0
0000486A  4480      8021          neg.l     D0
0000486C  2400      8022          move.l    D0,D2
0000486E  0C82 0000 8023          cmp.l     #0,D2
00004872  0000      
00004874  6C12      8024          bge.s     ltoa_7
00004876  4879 0000 8025          pea       @itoa_1
0000487A  6772      
0000487C  2F03      8026          move.l    D3,-(A7)
0000487E  6100 F706 8027          bsr       _strcpy
00004882  504F      8028          addq.w    #8,A7
00004884  2003      8029          move.l    D3,D0
00004886  601E      8030          bra.s     ltoa_4
                    8031   ltoa_7:
00004888  2044      8032          move.l    D4,A0
0000488A  5284      8033          addq.l    #1,D4
0000488C  10BC 002D 8034          move.b    #45,(A0)
                    8035   ltoa_5:
00004890  2F05      8036          move.l    D5,-(A7)
00004892  2F02      8037          move.l    D2,-(A7)
00004894  2F04      8038          move.l    D4,-(A7)
00004896  6100 FF20 8039          bsr       @itoa_convert
0000489A  DEFC 000C 8040          add.w     #12,A7
0000489E  2800      8041          move.l    D0,D4
000048A0  2044      8042          move.l    D4,A0
000048A2  4210      8043          clr.b     (A0)
000048A4  2003      8044          move.l    D3,D0
                    8045   ltoa_4:
000048A6  4CDF 003C 8046          movem.l   (A7)+,D2/D3/D4/D5
000048AA  4E5E      8047          unlk      A6
000048AC  4E75      8048          rts
                    8049   _ultoa:
000048AE  4E56 0000 8050          link      A6,#0
000048B2  48E7 3800 8051          movem.l   D2/D3/D4,-(A7)
000048B6  262E 0010 8052          move.l    16(A6),D3
000048BA  282E 000C 8053          move.l    12(A6),D4
000048BE  2404      8054          move.l    D4,D2
000048C0  0C83 0000 8055          cmp.l     #2,D3
000048C4  0002      
000048C6  6D08      8056          blt.s     ultoa_3
000048C8  0C83 0000 8057          cmp.l     #36,D3
000048CC  0024      
000048CE  6F04      8058          ble.s     ultoa_1
                    8059   ultoa_3:
000048D0  2004      8060          move.l    D4,D0
000048D2  6018      8061          bra.s     ultoa_4
                    8062   ultoa_1:
000048D4  2F03      8063          move.l    D3,-(A7)
000048D6  2F2E 0008 8064          move.l    8(A6),-(A7)
000048DA  2F02      8065          move.l    D2,-(A7)
000048DC  6100 FEDA 8066          bsr       @itoa_convert
000048E0  DEFC 000C 8067          add.w     #12,A7
000048E4  2400      8068          move.l    D0,D2
000048E6  2042      8069          move.l    D2,A0
000048E8  4210      8070          clr.b     (A0)
000048EA  2004      8071          move.l    D4,D0
                    8072   ultoa_4:
000048EC  4CDF 001C 8073          movem.l   (A7)+,D2/D3/D4
000048F0  4E5E      8074          unlk      A6
000048F2  4E75      8075          rts
                    8076   _itoa:
000048F4  4E56 0000 8077          link      A6,#0
000048F8  2F2E 0010 8078          move.l    16(A6),-(A7)
000048FC  2F2E 000C 8079          move.l    12(A6),-(A7)
00004900  2F2E 0008 8080          move.l    8(A6),-(A7)
00004904  6100 FF24 8081          bsr       _ltoa
00004908  DEFC 000C 8082          add.w     #12,A7
0000490C  4E5E      8083          unlk      A6
0000490E  4E75      8084          rts
                    8085   ULMUL:
00004910  4E56 0000 8086          link    A6,#0
00004914  48E7 C000 8087          movem.l D0/D1,-(A7)
00004918  222E 0008 8088          move.l  8(A6),D1
0000491C  202E 000C 8089          move.l  12(A6),D0
00004920  602C      8090          bra.s   lmul_3
                    8091   LMUL:
00004922  4E56 0000 8092          link    A6,#0
00004926  48E7 C000 8093          movem.l D0/D1,-(A7)
0000492A  222E 0008 8094          move.l  8(A6),D1
0000492E  202E 000C 8095          move.l  12(A6),D0
00004932  4A80      8096          tst.l   D0
00004934  6A0A      8097          bpl.s   lmul_1
00004936  4480      8098          neg.l   D0
00004938  4A81      8099          tst.l   D1
0000493A  6A0A      8100          bpl.s   lmul_2
0000493C  4481      8101          neg.l   D1
0000493E  600E      8102          bra.s   lmul_3
                    8103   lmul_1:
00004940  4A81      8104          tst.l   D1
00004942  6A0A      8105          bpl.s   lmul_3
00004944  4481      8106          neg.l   D1
                    8107   lmul_2:
00004946  6114      8108          bsr.s   domul
00004948  4481      8109          neg.l   D1
0000494A  4080      8110          negx.l  D0
0000494C  6002      8111          bra.s   lmul_4
                    8112   lmul_3:
0000494E  610C      8113          bsr.s   domul
                    8114   lmul_4:
00004950  2D41 0008 8115          move.l  D1,8(A6)
00004954  4CDF 0003 8116          movem.l (A7)+,D0/D1
00004958  4E5E      8117          unlk    A6
0000495A  4E75      8118          rts
                    8119   domul:
0000495C  0C81 0000 8120          cmpi.l  #$FFFF,D1
00004960  FFFF      
00004962  620C      8121          bhi.s   domul_1
00004964  0C80 0000 8122          cmpi.l  #$FFFF,D0
00004968  FFFF      
0000496A  620E      8123          bhi.s   domul_2
0000496C  C2C0      8124          mulu    D0,D1
0000496E  4E75      8125          rts
                    8126   domul_1:
00004970  0C80 0000 8127          cmpi.l  #$FFFF,D0
00004974  FFFF      
00004976  6218      8128          bhi.s   domul_4
00004978  6002      8129          bra.s   domul_3
                    8130   domul_2
0000497A  C141      8131          exg     D0,D1
                    8132   domul_3:
0000497C  2F02      8133          move.l  D2,-(A7)
0000497E  2401      8134          move.l  D1,D2
00004980  4842      8135          swap    D2
00004982  C2C0      8136          mulu    D0,D1
00004984  C4C0      8137          mulu    D0,D2
00004986  4842      8138          swap    D2
00004988  4242      8139          clr.w   D2
0000498A  D282      8140          add.l   D2,D1
0000498C  241F      8141          move.l  (A7)+,D2
0000498E  4E75      8142          rts
                    8143   domul_4:
00004990  48E7 3000 8144          movem.l D2/D3,-(A7)
00004994  2401      8145          move.l  D1,D2
00004996  2601      8146          move.l  D1,D3
00004998  C2C0      8147          mulu    D0,D1
0000499A  4842      8148          swap    D2
0000499C  C4C0      8149          mulu    D0,D2
0000499E  4840      8150          swap    D0
000049A0  C6C0      8151          mulu    D0,D3
000049A2  D483      8152          add.l   D3,D2
000049A4  4842      8153          swap    D2
000049A6  4242      8154          clr.w   D2
000049A8  D282      8155          add.l   D2,D1
000049AA  4CDF 000C 8156          movem.l (A7)+,D2/D3
000049AE  4E75      8157          rts
                    8158   _strlen:
000049B0  206F 0004 8159          move.l    (4,A7),A0
000049B4  2248      8160          move.l    A0,A1
                    8161   strlen_1:
000049B6  4A19      8162          tst.b     (A1)+
000049B8  66FC      8163          bne       strlen_1
000049BA  2009      8164          move.l    A1,D0
000049BC  9088      8165          sub.l     A0,D0
000049BE  5380      8166          subq.l    #1,D0
000049C0  4E75      8167          rts
                    8168          section   const
                    8169   
                    8170   @i2c_1:
000049C2  0D0A 5772 8171          dc.b      13,10,87,114,111,116,101,32,91,37,120,93,32
000049C6  6F74 6520 
000049CA  5B25 785D 
000049CE  20        
000049CF  746F 2041 8172          dc.b      116,111,32,65,100,100,114,101,115,115,91,37
000049D3  6464 7265 
000049D7  7373 5B25 
000049DB  785D 00   8173          dc.b      120,93,0
                    8174   @i2c_2:
000049DE  0D0A 5772 8175          dc.b      13,10,87,114,111,116,101,32,91,37,120,93,32
000049E2  6F74 6520 
000049E6  5B25 785D 
000049EA  20        
000049EB  6672 6F6D 8176          dc.b      102,114,111,109,32,65,100,100,114,101,115,115
000049EF  2041 6464 
000049F3  7265 7373 
000049F7  5B25 785D 8177          dc.b      91,37,120,93,32,116,111,32,65,100,100,114,101
000049FB  2074 6F20 
000049FF  4164 6472 
00004A03  65        
00004A04  7373 5B25 8178          dc.b      115,115,91,37,120,93,0
00004A08  785D 00   
                    8179   @i2c_3:
00004A0C  0D0A 5265 8180          dc.b      13,10,82,101,97,100,32,91,37,120,93,32,102,114
00004A10  6164 205B 
00004A14  2578 5D20 
00004A18  6672      
00004A1A  6F6D 2041 8181          dc.b      111,109,32,65,100,100,114,101,115,115,91,37
00004A1E  6464 7265 
00004A22  7373 5B25 
00004A26  785D 00   8182          dc.b      120,93,0
                    8183   @i2c_4:
00004A2A  0D0A 426C 8184          dc.b      13,10,66,108,111,99,107,32,82,101,97,100,32
00004A2E  6F63 6B20 
00004A32  5265 6164 
00004A36  20        
00004A37  6F70 6572 8185          dc.b      111,112,101,114,97,116,105,111,110,32,99,111
00004A3B  6174 696F 
00004A3F  6E20 636F 
00004A43  6D70 6C65 8186          dc.b      109,112,108,101,116,101,13,10,0
00004A47  7465 0D0A 
00004A4B  00        
                    8187   @i2c_5:
00004A4C  0A49 3243 8188          dc.b      10,73,50,67,32,68,65,67,32,87,114,105,116,101
00004A50  2044 4143 
00004A54  2057 7269 
00004A58  7465      
00004A5A  3A20 506C 8189          dc.b      58,32,80,108,101,97,115,101,32,99,104,101,99
00004A5E  6561 7365 
00004A62  2063 6865 
00004A66  63        
00004A67  6B20 4C45 8190          dc.b      107,32,76,69,68,10,0
00004A6B  440A 00   
                    8191   @i2c_6:
00004A6E  4932 4320 8192          dc.b      73,50,67,32,65,68,67,32,82,101,97,100,58,10
00004A72  4144 4320 
00004A76  5265 6164 
00004A7A  3A0A      
00004A7C  00        8193          dc.b      0
                    8194   @i2c_7:
00004A7E  0A3D 3D3D 8195          dc.b      10,61,61,61,61,61,61,61,61,61,61,61,61,61,61
00004A82  3D3D 3D3D 
00004A86  3D3D 3D3D 
00004A8A  3D3D 3D   
00004A8D  3D3D 3D3D 8196          dc.b      61,61,61,61,61,61,61,61,61,61,61,61,61,61,61
00004A91  3D3D 3D3D 
00004A95  3D3D 3D3D 
00004A99  3D3D 3D   
00004A9C  3D4D 6561 8197          dc.b      61,77,101,97,115,117,114,105,110,103,61,61,61
00004AA0  7375 7269 
00004AA4  6E67 3D3D 
00004AA8  3D        
00004AA9  3D3D 3D3D 8198          dc.b      61,61,61,61,61,61,61,61,61,61,61,61,61,61,61
00004AAD  3D3D 3D3D 
00004AB1  3D3D 3D3D 
00004AB5  3D3D 3D   
00004AB8  3D3D 3D3D 8199          dc.b      61,61,61,61,61,61,61,61,61,61,61,61,10,0
00004ABC  3D3D 3D3D 
00004AC0  3D3D 3D3D 
00004AC4  0A00      
                    8200   @i2c_8:
00004AC6  5661 6C75 8201          dc.b      86,97,108,117,101,32,111,102,32,84,104,101,114
00004ACA  6520 6F66 
00004ACE  2054 6865 
00004AD2  72        
00004AD3  6D69 7374 8202          dc.b      109,105,115,116,111,114,58,32,37,100,32,80,111
00004AD7  6F72 3A20 
00004ADB  2564 2050 
00004ADF  6F        
00004AE0  7465 6E74 8203          dc.b      116,101,110,116,105,111,109,101,116,101,114
00004AE4  696F 6D65 
00004AE8  7465 72   
00004AEB  3A20 2564 8204          dc.b      58,32,37,100,32,80,104,111,116,111,45,114,101
00004AEF  2050 686F 
00004AF3  746F 2D72 
00004AF7  65        
00004AF8  7369 7374 8205          dc.b      115,105,115,116,101,114,58,32,37,100,10,0
00004AFC  6572 3A20 
00004B00  2564 0A00 
                    8206   @lab5k_1:
00004B04  0D0A 00   8207          dc.b      13,10,0
                    8208   @lab5k_2:
00004B08  0D53 7769 8209          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004B0C  7463 6865 
00004B10  7320 5357 
00004B14  5B        
00004B15  372D 305D 8210          dc.b      55,45,48,93,32,61,32,0
00004B19  203D 2000 
                    8211   @lab5k_3:
00004B1E  3000      8212          dc.b      48,0
                    8213   @lab5k_4:
00004B20  3100      8214          dc.b      49,0
                    8215   @lab5k_5:
00004B22  0D0A 4475 8216          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004B26  6D70 204D 
00004B2A  656D 6F72 
00004B2E  79        
00004B2F  2042 6C6F 8217          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004B33  636B 3A20 
00004B37  3C45 5343 
00004B3B  3E20      
00004B3D  746F 2041 8218          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004B41  626F 7274 
00004B45  2C20 3C53 
00004B49  50        
00004B4A  4143 453E 8219          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004B4E  2074 6F20 
00004B52  436F 6E74 
00004B56  69        
00004B57  6E75 6500 8220          dc.b      110,117,101,0
                    8221   @lab5k_6:
00004B5C  0D0A 456E 8222          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004B60  7465 7220 
00004B64  5374 6172 
00004B68  74        
00004B69  2041 6464 8223          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004B6D  7265 7373 
00004B71  3A20 00   
                    8224   @lab5k_7:
00004B74  0D0A 2530 8225          dc.b      13,10,37,48,56,120,32,0
00004B78  3878 2000 
                    8226   @lab5k_8:
00004B7C  2530 3258 8227          dc.b      37,48,50,88,0
00004B80  00        
                    8228   @lab5k_9:
00004B82  2020 00   8229          dc.b      32,32,0
                    8230   @lab5k_10:
00004B86  0D0A 4669 8231          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004B8A  6C6C 204D 
00004B8E  656D 6F72 
00004B92  79        
00004B93  2042 6C6F 8232          dc.b      32,66,108,111,99,107,0
00004B97  636B 00   
                    8233   @lab5k_11:
00004B9A  0D0A 456E 8234          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004B9E  7465 7220 
00004BA2  456E 6420 
00004BA6  41        
00004BA7  6464 7265 8235          dc.b      100,100,114,101,115,115,58,32,0
00004BAB  7373 3A20 
00004BAF  00        
                    8236   @lab5k_12:
00004BB0  0D0A 456E 8237          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004BB4  7465 7220 
00004BB8  4669 6C6C 
00004BBC  20        
00004BBD  4461 7461 8238          dc.b      68,97,116,97,58,32,0
00004BC1  3A20 00   
                    8239   @lab5k_13:
00004BC4  0D0A 4669 8240          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004BC8  6C6C 696E 
00004BCC  6720 4164 
00004BD0  64        
00004BD1  7265 7373 8241          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004BD5  6573 205B 
00004BD9  2425 3038 
00004BDD  58        
00004BDE  202D 2024 8242          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004BE2  2530 3858 
00004BE6  5D20 7769 
00004BEA  7468      
00004BEC  2024 2530 8243          dc.b      32,36,37,48,50,88,0
00004BF0  3258 00   
                    8244   @lab5k_14:
00004BF4  0D0A 5573 8245          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004BF8  6520 4879 
00004BFC  7065 7254 
00004C00  65        
00004C01  726D 696E 8246          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004C05  616C 2074 
00004C09  6F20 5365 
00004C0D  6E64 2054 8247          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004C11  6578 7420 
00004C15  4669 6C65 
00004C19  2028 2E68 8248          dc.b      32,40,46,104,101,120,41,13,10,0
00004C1D  6578 290D 
00004C21  0A00      
                    8249   @lab5k_15:
00004C24  0D0A 4C6F 8250          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004C28  6164 2046 
00004C2C  6169 6C65 
00004C30  64        
00004C31  2061 7420 8251          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004C35  4164 6472 
00004C39  6573 7320 
00004C3D  3D        
00004C3E  205B 2425 8252          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004C42  3038 585D 
00004C46  0D0A 00   
                    8253   @lab5k_16:
00004C4A  0D0A 5375 8254          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004C4E  6363 6573 
00004C52  733A 2044 
00004C56  6F        
00004C57  776E 6C6F 8255          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004C5B  6164 6564 
00004C5F  2025 6420 
00004C63  6279 7465 8256          dc.b      98,121,116,101,115,13,10,0
00004C67  730D 0A00 
                    8257   @lab5k_17:
00004C6C  0D0A 4578 8258          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004C70  616D 696E 
00004C74  6520 616E 
00004C78  64        
00004C79  2043 6861 8259          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004C7D  6E67 6520 
00004C81  4D65 6D6F 
00004C85  72        
00004C86  7900      8260          dc.b      121,0
                    8261   @lab5k_18:
00004C88  0D0A 3C45 8262          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004C8C  5343 3E20 
00004C90  746F 2053 
00004C94  746F      
00004C96  702C 203C 8263          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004C9A  5350 4143 
00004C9E  453E 2074 
00004CA2  6F20      
00004CA4  4164 7661 8264          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004CA8  6E63 652C 
00004CAC  2027 2D27 
00004CB0  2074      
00004CB2  6F20 476F 8265          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004CB6  2042 6163 
00004CBA  6B2C 203C 
00004CBE  4441      
00004CC0  5441 3E20 8266          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004CC4  746F 2063 
00004CC8  6861 6E67 
00004CCC  65        
00004CCD  00        8267          dc.b      0
                    8268   @lab5k_19:
00004CCE  0D0A 456E 8269          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004CD2  7465 7220 
00004CD6  4164 6472 
00004CDA  65        
00004CDB  7373 3A20 8270          dc.b      115,115,58,32,0
00004CDF  00        
                    8271   @lab5k_20:
00004CE0  0D0A 5B25 8272          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004CE4  3038 785D 
00004CE8  203A 2025 
00004CEC  3032 78   
00004CEF  2020 00   8273          dc.b      32,32,0
                    8274   @lab5k_21:
00004CF2  0D0A 5761 8275          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004CF6  726E 696E 
00004CFA  6720 4368 
00004CFE  61        
00004CFF  6E67 6520 8276          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004D03  4661 696C 
00004D07  6564 3A20 
00004D0B  57        
00004D0C  726F 7465 8277          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004D10  205B 2530 
00004D14  3278 5D2C 
00004D18  20        
00004D19  5265 6164 8278          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004D1D  205B 2530 
00004D21  3278 5D00 
                    8279   @lab5k_22:
00004D26  2E00      8280          dc.b      46,0
                    8281   @lab5k_23:
00004D28  0A0D 4572 8282          dc.b      10,13,69,114,97,115,105,110,103,10,13,0
00004D2C  6173 696E 
00004D30  670A 0D00 
                    8283   @lab5k_24:
00004D34  5772 6974 8284          dc.b      87,114,105,116,105,110,103,32,80,114,111,103
00004D38  696E 6720 
00004D3C  5072 6F67 
00004D40  7261 6D20 8285          dc.b      114,97,109,32,116,111,32,109,101,109,111,114
00004D44  746F 206D 
00004D48  656D 6F72 
00004D4C  7920 0A0D 8286          dc.b      121,32,10,13,0
00004D50  00        
                    8287   @lab5k_25:
00004D52  5772 6974 8288          dc.b      87,114,105,116,105,110,103,32,68,111,110,101
00004D56  696E 6720 
00004D5A  446F 6E65 
00004D5E  0A0D 00   8289          dc.b      10,13,0
                    8290   @lab5k_26:
00004D62  5265 6164 8291          dc.b      82,101,97,100,105,110,103,32,80,114,111,103
00004D66  696E 6720 
00004D6A  5072 6F67 
00004D6E  7261 6D20 8292          dc.b      114,97,109,32,102,114,111,109,32,109,101,109
00004D72  6672 6F6D 
00004D76  206D 656D 
00004D7A  6F72 790A 8293          dc.b      111,114,121,10,13,0
00004D7E  0D00      
                    8294   @lab5k_27:
00004D80  0D0A 4552 8295          dc.b      13,10,69,82,82,79,82,58,32,68,65,84,65,32,77
00004D84  524F 523A 
00004D88  2044 4154 
00004D8C  4120 4D   
00004D8F  6973 6D61 8296          dc.b      105,115,109,97,116,99,104,32,97,116,32,97,100
00004D93  7463 6820 
00004D97  6174 2061 
00004D9B  64        
00004D9C  6472 2030 8297          dc.b      100,114,32,48,120,37,48,56,120,46,32,87,82,73
00004DA0  7825 3038 
00004DA4  782E 2057 
00004DA8  5249      
00004DAA  5445 3A20 8298          dc.b      84,69,58,32,48,120,37,48,50,120,32,82,69,65
00004DAE  3078 2530 
00004DB2  3278 2052 
00004DB6  4541      
00004DB8  443A 2030 8299          dc.b      68,58,32,48,120,37,48,50,120,13,10,0
00004DBC  7825 3032 
00004DC0  780D 0A00 
                    8300   @lab5k_28:
00004DC4  5041 5353 8301          dc.b      80,65,83,83,10,13,0
00004DC8  0A0D 00   
                    8302   @lab5k_29:
00004DCC  0D0A 4C6F 8303          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004DD0  6164 696E 
00004DD4  6720 5072 
00004DD8  6F        
00004DD9  6772 616D 8304          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00004DDD  2046 726F 
00004DE1  6D20 5350 
00004DE5  49        
00004DE6  2046 6C61 8305          dc.b      32,70,108,97,115,104,46,46,46,46,0
00004DEA  7368 2E2E 
00004DEE  2E2E 00   
                    8306   @lab5k_30:
00004DF2  6761 7262 8307          dc.b      103,97,114,98,97,103,101,32,118,97,108,117,101
00004DF6  6167 6520 
00004DFA  7661 6C75 
00004DFE  65        
00004DFF  2072 6561 8308          dc.b      32,114,101,97,100,33,13,10,0
00004E03  6421 0D0A 
00004E07  00        
                    8309   @lab5k_31:
00004E08  0D0A 446F 8310          dc.b      13,10,68,111,110,101,32,108,111,97,100,105,110
00004E0C  6E65 206C 
00004E10  6F61 6469 
00004E14  6E        
00004E15  672E 0D0A 8311          dc.b      103,46,13,10,0
00004E19  00        
                    8312   @lab5k_32:
00004E1A  2425 3038 8313          dc.b      36,37,48,56,88,32,32,0
00004E1E  5820 2000 
                    8314   @lab5k_33:
00004E22  2000      8315          dc.b      32,0
                    8316   @lab5k_34:
00004E24  2563 00   8317          dc.b      37,99,0
                    8318   @lab5k_35:
00004E28  00        8319          dc.b      0
                    8320   @lab5k_36:
00004E2A  0D0A 0D0A 8321          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004E2E  2044 3020 
00004E32  3D20 2425 
00004E36  3038 58   
00004E39  2020 4130 8322          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004E3D  203D 2024 
00004E41  2530 3858 
00004E45  00        
                    8323   @lab5k_37:
00004E46  0D0A 2044 8324          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004E4A  3120 3D20 
00004E4E  2425 3038 
00004E52  5820 20   
00004E55  4131 203D 8325          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004E59  2024 2530 
00004E5D  3858 00   
                    8326   @lab5k_38:
00004E60  0D0A 2044 8327          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004E64  3220 3D20 
00004E68  2425 3038 
00004E6C  5820 20   
00004E6F  4132 203D 8328          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004E73  2024 2530 
00004E77  3858 00   
                    8329   @lab5k_39:
00004E7A  0D0A 2044 8330          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004E7E  3320 3D20 
00004E82  2425 3038 
00004E86  5820 20   
00004E89  4133 203D 8331          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004E8D  2024 2530 
00004E91  3858 00   
                    8332   @lab5k_40:
00004E94  0D0A 2044 8333          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004E98  3420 3D20 
00004E9C  2425 3038 
00004EA0  5820 20   
00004EA3  4134 203D 8334          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004EA7  2024 2530 
00004EAB  3858 00   
                    8335   @lab5k_41:
00004EAE  0D0A 2044 8336          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004EB2  3520 3D20 
00004EB6  2425 3038 
00004EBA  5820 20   
00004EBD  4135 203D 8337          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004EC1  2024 2530 
00004EC5  3858 00   
                    8338   @lab5k_42:
00004EC8  0D0A 2044 8339          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004ECC  3620 3D20 
00004ED0  2425 3038 
00004ED4  5820 20   
00004ED7  4136 203D 8340          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004EDB  2024 2530 
00004EDF  3858 00   
                    8341   @lab5k_43:
00004EE2  0D0A 2044 8342          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004EE6  3720 3D20 
00004EEA  2425 3038 
00004EEE  5820 20   
00004EF1  4137 203D 8343          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004EF5  2024 2530 
00004EF9  3858 00   
                    8344   @lab5k_44:
00004EFC  0D0A 0D0A 8345          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004F00  5553 5020 
00004F04  3D20 2425 
00004F08  3038 58   
00004F0B  2020 2841 8346          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004F0F  3729 2055 
00004F13  7365 7220 
00004F17  5350      
00004F19  00        8347          dc.b      0
                    8348   @lab5k_45:
00004F1A  0D0A 5353 8349          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004F1E  5020 3D20 
00004F22  2425 3038 
00004F26  5820 20   
00004F29  2841 3729 8350          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004F2D  2053 7570 
00004F31  6572 7669 
00004F35  73        
00004F36  6F72 2053 8351          dc.b      111,114,32,83,80,0
00004F3A  5000      
                    8352   @lab5k_46:
00004F3C  0D0A 2053 8353          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004F40  5220 3D20 
00004F44  2425 3034 
00004F48  5820 20   
00004F4B  2000      8354          dc.b      32,0
                    8355   @lab5k_47:
00004F4E  2020 205B 8356          dc.b      32,32,32,91,0
00004F52  00        
                    8357   @lab5k_48:
00004F54  0D0A 2050 8358          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004F58  4320 3D20 
00004F5C  2425 3038 
00004F60  5820 20   
00004F63  00        8359          dc.b      0
                    8360   @lab5k_49:
00004F64  5B40 2042 8361          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004F68  5245 414B 
00004F6C  504F 494E 
00004F70  545D 00   
                    8362   @lab5k_50:
00004F74  0D0A 5750 8363          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004F78  2564 203D 
00004F7C  2025 7300 
                    8364   @lab5k_51:
00004F80  0D0A 0D0A 8365          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004F84  0D0A 0D0A 
00004F88  0D0A 0D0A 
00004F8C  5369 6E   
00004F8F  676C 6520 8366          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004F93  5374 6570 
00004F97  2020 3A5B 
00004F9B  4F        
00004F9C  4E5D 00   8367          dc.b      78,93,0
                    8368   @lab5k_52:
00004FA0  0D0A 4272 8369          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004FA4  6561 6B20 
00004FA8  506F 696E 
00004FAC  74        
00004FAD  7320 3A5B 8370          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004FB1  4469 7361 
00004FB5  626C 6564 
00004FB9  5D        
00004FBA  00        8371          dc.b      0
                    8372   @lab5k_53:
00004FBC  0D0A 5072 8373          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004FC0  6573 7320 
00004FC4  3C53 5041 
00004FC8  4345      
00004FCA  3E20 746F 8374          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004FCE  2045 7865 
00004FD2  6375 7465 
00004FD6  20        
00004FD7  4E65 7874 8375          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004FDB  2049 6E73 
00004FDF  7472 7563 
00004FE3  7469 6F6E 8376          dc.b      116,105,111,110,0
00004FE7  00        
                    8377   @lab5k_54:
00004FE8  0D0A 5072 8378          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004FEC  6573 7320 
00004FF0  3C45 5343 
00004FF4  3E20      
00004FF6  746F 2052 8379          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004FFA  6573 756D 
00004FFE  6520 5072 
00005002  6F67 7261 8380          dc.b      111,103,114,97,109,0
00005006  6D00      
                    8381   @lab5k_55:
00005008  0D0A 496C 8382          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000500C  6C65 6761 
00005010  6C20 4461 
00005014  74        
00005015  6120 5265 8383          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00005019  6769 7374 
0000501D  6572 203A 
00005021  20        
00005022  5573 6520 8384          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00005026  4430 2D44 
0000502A  372E 2E2E 
0000502E  2E2E      
00005030  0D0A 00   8385          dc.b      13,10,0
                    8386   @lab5k_56:
00005034  0D0A 4425 8387          dc.b      13,10,68,37,99,32,61,32,0
00005038  6320 3D20 
0000503C  00        
                    8388   @lab5k_57:
0000503E  0D0A 496C 8389          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00005042  6C65 6761 
00005046  6C20 4164 
0000504A  64        
0000504B  7265 7373 8390          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000504F  2052 6567 
00005053  6973 7465 
00005057  7220 3A20 8391          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000505B  5573 6520 
0000505F  4130 2D41 
00005063  372E      
00005065  2E2E 2E2E 8392          dc.b      46,46,46,46,13,10,0
00005069  0D0A 00   
                    8393   @lab5k_58:
0000506C  0D0A 4125 8394          dc.b      13,10,65,37,99,32,61,32,0
00005070  6320 3D20 
00005074  00        
                    8395   @lab5k_59:
00005076  0D0A 5573 8396          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000507A  6572 2053 
0000507E  5020 3D20 
00005082  00        
                    8397   @lab5k_60:
00005084  0D0A 496C 8398          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00005088  6C65 6761 
0000508C  6C20 5265 
00005090  67        
00005091  6973 7465 8399          dc.b      105,115,116,101,114,46,46,46,46,0
00005095  722E 2E2E 
00005099  2E00      
                    8400   @lab5k_61:
0000509C  0D0A 5379 8401          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000050A0  7374 656D 
000050A4  2053 5020 
000050A8  3D        
000050A9  2000      8402          dc.b      32,0
                    8403   @lab5k_62:
000050AC  0D0A 5043 8404          dc.b      13,10,80,67,32,61,32,0
000050B0  203D 2000 
                    8405   @lab5k_63:
000050B4  0D0A 5352 8406          dc.b      13,10,83,82,32,61,32,0
000050B8  203D 2000 
                    8407   @lab5k_64:
000050BC  0D0A 496C 8408          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000050C0  6C65 6761 
000050C4  6C20 5265 
000050C8  67        
000050C9  6973 7465 8409          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000050CD  723A 2055 
000050D1  7365 2041 
000050D5  30        
000050D6  2D41 372C 8410          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000050DA  2044 302D 
000050DE  4437 2C20 
000050E2  5353 50   
000050E5  2C20 5553 8411          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000050E9  502C 2050 
000050ED  4320 6F72 
000050F1  2053      
000050F3  520D 0A00 8412          dc.b      82,13,10,0
                    8413   @lab5k_65:
000050F8  0D0A 0D0A 8414          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000050FC  4E75 6D20 
00005100  2020 2020 
00005104  4164      
00005106  6472 6573 8415          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000510A  7320 2020 
0000510E  2020 2049 
00005112  6E        
00005113  7374 7275 8416          dc.b      115,116,114,117,99,116,105,111,110,0
00005117  6374 696F 
0000511B  6E00      
                    8417   @lab5k_66:
0000511E  0D0A 2D2D 8418          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00005122  2D20 2020 
00005126  2020 2D2D 
0000512A  2D2D 2D   
0000512D  2D2D 2D2D 8419          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00005131  2020 2020 
00005135  2D2D 2D2D 
00005139  2D2D 2D   
0000513C  2D2D 2D2D 8420          dc.b      45,45,45,45,0
00005140  00        
                    8421   @lab5k_67:
00005142  0D0A 4E6F 8422          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00005146  2042 7265 
0000514A  616B 506F 
0000514E  69        
0000514F  6E74 7320 8423          dc.b      110,116,115,32,83,101,116,0
00005153  5365 7400 
                    8424   @lab5k_68:
00005158  0D0A 2533 8425          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000515C  6420 2020 
00005160  2020 2425 
00005164  3038 78   
00005167  00        8426          dc.b      0
                    8427   @lab5k_69:
00005168  0D0A 4E75 8428          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000516C  6D20 2020 
00005170  2020 4164 
00005174  6472      
00005176  6573 7300 8429          dc.b      101,115,115,0
                    8430   @lab5k_70:
0000517A  0D0A 2D2D 8431          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000517E  2D20 2020 
00005182  2020 2D2D 
00005186  2D2D 2D   
00005189  2D2D 2D2D 8432          dc.b      45,45,45,45,0
0000518D  00        
                    8433   @lab5k_71:
0000518E  0D0A 4E6F 8434          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00005192  2057 6174 
00005196  6368 506F 
0000519A  69        
0000519B  6E74 7320 8435          dc.b      110,116,115,32,83,101,116,0
0000519F  5365 7400 
                    8436   @lab5k_72:
000051A4  0D0A 456E 8437          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000051A8  7465 7220 
000051AC  4272 6561 
000051B0  6B        
000051B1  2050 6F69 8438          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000051B5  6E74 204E 
000051B9  756D 6265 
000051BD  72        
000051BE  3A20 00   8439          dc.b      58,32,0
                    8440   @lab5k_73:
000051C2  0D0A 496C 8441          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000051C6  6C65 6761 
000051CA  6C20 5261 
000051CE  6E        
000051CF  6765 203A 8442          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000051D3  2055 7365 
000051D7  2030 202D 
000051DB  2037      
000051DD  00        8443          dc.b      0
                    8444   @lab5k_74:
000051DE  0D0A 4272 8445          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000051E2  6561 6B20 
000051E6  506F 696E 
000051EA  74        
000051EB  2043 6C65 8446          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000051EF  6172 6564 
000051F3  2E2E 2E2E 
000051F7  2E        
000051F8  0D0A 00   8447          dc.b      13,10,0
                    8448   @lab5k_75:
000051FC  0D0A 4272 8449          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005200  6561 6B20 
00005204  506F 696E 
00005208  74        
00005209  2077 6173 8450          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000520D  6E27 7420 
00005211  5365 742E 
00005215  2E        
00005216  2E2E 2E00 8451          dc.b      46,46,46,0
                    8452   @lab5k_76:
0000521A  0D0A 456E 8453          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
0000521E  7465 7220 
00005222  5761 7463 
00005226  68        
00005227  2050 6F69 8454          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000522B  6E74 204E 
0000522F  756D 6265 
00005233  72        
00005234  3A20 00   8455          dc.b      58,32,0
                    8456   @lab5k_77:
00005238  0D0A 5761 8457          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000523C  7463 6820 
00005240  506F 696E 
00005244  74        
00005245  2043 6C65 8458          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00005249  6172 6564 
0000524D  2E2E 2E2E 
00005251  2E        
00005252  0D0A 00   8459          dc.b      13,10,0
                    8460   @lab5k_78:
00005256  0D0A 5761 8461          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000525A  7463 6820 
0000525E  506F 696E 
00005262  74        
00005263  2057 6173 8462          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00005267  206E 6F74 
0000526B  2053 6574 
0000526F  2E        
00005270  2E2E 2E2E 8463          dc.b      46,46,46,46,0
00005274  00        
                    8464   @lab5k_79:
00005276  0D0A 4E6F 8465          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000527A  2046 5245 
0000527E  4520 4272 
00005282  6561      
00005284  6B20 506F 8466          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00005288  696E 7473 
0000528C  2E2E 2E2E 
00005290  2E        
00005291  00        8467          dc.b      0
                    8468   @lab5k_80:
00005292  0D0A 4272 8469          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005296  6561 6B20 
0000529A  506F 696E 
0000529E  74        
0000529F  2041 6464 8470          dc.b      32,65,100,100,114,101,115,115,58,32,0
000052A3  7265 7373 
000052A7  3A20 00   
                    8471   @lab5k_81:
000052AA  0D0A 4572 8472          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000052AE  726F 7220 
000052B2  3A20 4272 
000052B6  65        
000052B7  616B 2050 8473          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000052BB  6F69 6E74 
000052BF  7320 4341 
000052C3  4E        
000052C4  4E4F 5420 8474          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000052C8  6265 2073 
000052CC  6574 2061 
000052D0  74        
000052D1  204F 4444 8475          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000052D5  2061 6464 
000052D9  7265 7373 
000052DD  65        
000052DE  7300      8476          dc.b      115,0
                    8477   @lab5k_82:
000052E0  0D0A 4572 8478          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000052E4  726F 7220 
000052E8  3A20 4272 
000052EC  65        
000052ED  616B 2050 8479          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000052F1  6F69 6E74 
000052F5  7320 4341 
000052F9  4E        
000052FA  4E4F 5420 8480          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000052FE  6265 2073 
00005302  6574 2066 
00005306  6F        
00005307  7220 524F 8481          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000530B  4D20 696E 
0000530F  2052 616E 
00005313  67        
00005314  6520 3A20 8482          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00005318  5B24 302D 
0000531C  2430 3030 
00005320  3037 46   
00005323  4646 5D00 8483          dc.b      70,70,93,0
                    8484   @lab5k_83:
00005328  0D0A 4572 8485          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000532C  726F 723A 
00005330  2042 7265 
00005334  61        
00005335  6B20 506F 8486          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00005339  696E 7420 
0000533D  416C 7265 
00005341  6164 7920 8487          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00005345  4578 6973 
00005349  7473 2061 
0000534D  74        
0000534E  2041 6464 8488          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00005352  7265 7373 
00005356  203A 2025 
0000535A  30        
0000535B  3878 0D0A 8489          dc.b      56,120,13,10,0
0000535F  00        
                    8490   @lab5k_84:
00005360  0D0A 4272 8491          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005364  6561 6B20 
00005368  506F 696E 
0000536C  74        
0000536D  2053 6574 8492          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005371  2061 7420 
00005375  4164 6472 
00005379  65        
0000537A  7373 3A20 8493          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000537E  5B24 2530 
00005382  3878 5D00 
                    8494   @lab5k_85:
00005386  0D0A 4E6F 8495          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
0000538A  2046 5245 
0000538E  4520 5761 
00005392  7463      
00005394  6820 506F 8496          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00005398  696E 7473 
0000539C  2E2E 2E2E 
000053A0  2E        
000053A1  00        8497          dc.b      0
                    8498   @lab5k_86:
000053A2  0D0A 5761 8499          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000053A6  7463 6820 
000053AA  506F 696E 
000053AE  74        
000053AF  2041 6464 8500          dc.b      32,65,100,100,114,101,115,115,58,32,0
000053B3  7265 7373 
000053B7  3A20 00   
                    8501   @lab5k_87:
000053BA  0D0A 4572 8502          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000053BE  726F 723A 
000053C2  2057 6174 
000053C6  63        
000053C7  6820 506F 8503          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000053CB  696E 7420 
000053CF  416C 7265 
000053D3  6164 7920 8504          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000053D7  5365 7420 
000053DB  6174 2041 
000053DF  64        
000053E0  6472 6573 8505          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000053E4  7320 3A20 
000053E8  2530 3878 
000053EC  0D        
000053ED  0A00      8506          dc.b      10,0
                    8507   @lab5k_88:
000053F0  0D0A 5761 8508          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000053F4  7463 6820 
000053F8  506F 696E 
000053FC  74        
000053FD  2053 6574 8509          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005401  2061 7420 
00005405  4164 6472 
00005409  65        
0000540A  7373 3A20 8510          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000540E  5B24 2530 
00005412  3878 5D00 
                    8511   @lab5k_89:
00005416  0D0A 0D0A 8512          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
0000541A  0D0A 0D0A 
0000541E  4042 5245 
00005422  414B 50   
00005425  4F49 4E54 8513          dc.b      79,73,78,84,0
00005429  00        
                    8514   @lab5k_90:
0000542A  0D0A 5369 8515          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000542E  6E67 6C65 
00005432  2053 7465 
00005436  70        
00005437  203A 205B 8516          dc.b      32,58,32,91,79,78,93,0
0000543B  4F4E 5D00 
                    8517   @lab5k_91:
00005440  0D0A 4272 8518          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00005444  6561 6B50 
00005448  6F69 6E74 
0000544C  73        
0000544D  203A 205B 8519          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00005451  456E 6162 
00005455  6C65 645D 
00005459  00        
                    8520   @lab5k_92:
0000545A  0D0A 5072 8521          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000545E  6573 7320 
00005462  3C45 5343 
00005466  3E20      
00005468  746F 2052 8522          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000546C  6573 756D 
00005470  6520 5573 
00005474  6572 2050 8523          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00005478  726F 6772 
0000547C  616D 0D0A 
00005480  00        
                    8524   @lab5k_93:
00005482  0D0A 556E 8525          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00005486  6B6E 6F77 
0000548A  6E20 436F 
0000548E  6D        
0000548F  6D61 6E64 8526          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00005493  2E2E 2E2E 
00005497  2E0D 0A00 
                    8527   @lab5k_94:
0000549C  0D0A 5072 8528          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000054A0  6F67 7261 
000054A4  6D20 456E 
000054A8  64        
000054A9  6564 2028 8529          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000054AD  5452 4150 
000054B1  2023 3135 
000054B5  292E      
000054B7  2E2E 2E00 8530          dc.b      46,46,46,0
                    8531   @lab5k_95:
000054BC  0D0A 4B69 8532          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000054C0  6C6C 2041 
000054C4  6C6C 2042 
000054C8  72        
000054C9  6561 6B20 8533          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000054CD  506F 696E 
000054D1  7473 2E2E 
000054D5  2E        
000054D6  2879 2F6E 8534          dc.b      40,121,47,110,41,63,0
000054DA  293F 00   
                    8535   @lab5k_96:
000054DE  0D0A 4B69 8536          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000054E2  6C6C 2041 
000054E6  6C6C 2057 
000054EA  61        
000054EB  7463 6820 8537          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000054EF  506F 696E 
000054F3  7473 2E2E 
000054F7  2E        
000054F8  2879 2F6E 8538          dc.b      40,121,47,110,41,63,0
000054FC  293F 00   
                    8539   @lab5k_97:
00005500  0D0A 2D2D 8540          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00005504  2D2D 2D2D 
00005508  2D2D 2D2D 
0000550C  2D2D 2D   
0000550F  2D2D 2D2D 8541          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005513  2D2D 2D2D 
00005517  2D2D 2D2D 
0000551B  2D2D 2D   
0000551E  2D2D 2D2D 8542          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005522  2D2D 2D2D 
00005526  2D2D 2D2D 
0000552A  2D2D 2D   
0000552D  2D2D 2D2D 8543          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005531  2D2D 2D2D 
00005535  2D2D 2D2D 
00005539  2D2D 2D   
0000553C  2D2D 2D2D 8544          dc.b      45,45,45,45,45,45,0
00005540  2D2D 00   
                    8545   @lab5k_98:
00005544  0D0A 2020 8546          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00005548  4465 6275 
0000554C  6767 6572 
00005550  20        
00005551  436F 6D6D 8547          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00005555  616E 6420 
00005559  5375 6D6D 
0000555D  6172 7900 8548          dc.b      97,114,121,0
                    8549   @lab5k_99:
00005562  0D0A 2020 8550          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00005566  2E28 7265 
0000556A  6729 2020 
0000556E  2020      
00005570  2020 202D 8551          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00005574  2043 6861 
00005578  6E67 6520 
0000557C  5265      
0000557E  6769 7374 8552          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00005582  6572 733A 
00005586  2065 2E67 
0000558A  2041 302D 8553          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000558E  4137 2C44 
00005592  302D 4437 
00005596  2C50 43   
00005599  2C53 5350 8554          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000559D  2C55 5350 
000055A1  2C53 5200 
                    8555   @lab5k_100:
000055A6  0D0A 2020 8556          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000055AA  4244 2F42 
000055AE  532F 4243 
000055B2  2F42 4B   
000055B5  2020 2D20 8557          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000055B9  4272 6561 
000055BD  6B20 506F 
000055C1  69        
000055C2  6E74 3A20 8558          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000055C6  4469 7370 
000055CA  6C61 792F 
000055CE  53        
000055CF  6574 2F43 8559          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000055D3  6C65 6172 
000055D7  2F4B 696C 
000055DB  6C        
000055DC  00        8560          dc.b      0
                    8561   @lab5k_101:
000055DE  0D0A 2020 8562          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000055E2  4320 2020 
000055E6  2020 2020 
000055EA  2020 20   
000055ED  2020 2D20 8563          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000055F1  436F 7079 
000055F5  2050 726F 
000055F9  67        
000055FA  7261 6D20 8564          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000055FE  6672 6F6D 
00005602  2046 6C61 
00005606  73        
00005607  6820 746F 8565          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000560B  204D 6169 
0000560F  6E20 4D65 
00005613  6D        
00005614  6F72 7900 8566          dc.b      111,114,121,0
                    8567   @lab5k_102:
00005618  0D0A 2020 8568          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
0000561C  4420 2020 
00005620  2020 2020 
00005624  2020 20   
00005627  2020 2D20 8569          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
0000562B  4475 6D70 
0000562F  204D 656D 
00005633  6F        
00005634  7279 2043 8570          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00005638  6F6E 7465 
0000563C  6E74 7320 
00005640  746F 2053 8571          dc.b      116,111,32,83,99,114,101,101,110,0
00005644  6372 6565 
00005648  6E00      
                    8572   @lab5k_103:
0000564A  0D0A 2020 8573          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
0000564E  4520 2020 
00005652  2020 2020 
00005656  2020 20   
00005659  2020 2D20 8574          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
0000565D  456E 7465 
00005661  7220 5374 
00005665  72        
00005666  696E 6720 8575          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
0000566A  696E 746F 
0000566E  204D 656D 
00005672  6F72 7900 8576          dc.b      111,114,121,0
                    8577   @lab5k_104:
00005676  0D0A 2020 8578          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
0000567A  4620 2020 
0000567E  2020 2020 
00005682  2020 20   
00005685  2020 2D20 8579          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00005689  4669 6C6C 
0000568D  204D 656D 
00005691  6F        
00005692  7279 2077 8580          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00005696  6974 6820 
0000569A  4461 7461 
0000569E  00        
                    8581   @lab5k_105:
000056A0  0D0A 2020 8582          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000056A4  4720 2020 
000056A8  2020 2020 
000056AC  2020 20   
000056AF  2020 2D20 8583          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000056B3  476F 2050 
000056B7  726F 6772 
000056BB  61        
000056BC  6D20 5374 8584          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000056C0  6172 7469 
000056C4  6E67 2061 
000056C8  74        
000056C9  2041 6464 8585          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000056CD  7265 7373 
000056D1  3A20 2425 
000056D5  30        
000056D6  3858 00   8586          dc.b      56,88,0
                    8587   @lab5k_106:
000056DA  0D0A 2020 8588          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000056DE  4C20 2020 
000056E2  2020 2020 
000056E6  2020 20   
000056E9  2020 2D20 8589          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000056ED  4C6F 6164 
000056F1  2050 726F 
000056F5  67        
000056F6  7261 6D20 8590          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000056FA  282E 4845 
000056FE  5820 6669 
00005702  6C        
00005703  6529 2066 8591          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00005707  726F 6D20 
0000570B  4C61 7074 
0000570F  6F        
00005710  7000      8592          dc.b      112,0
                    8593   @lab5k_107:
00005712  0D0A 2020 8594          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00005716  4D20 2020 
0000571A  2020 2020 
0000571E  2020 20   
00005721  2020 2D20 8595          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00005725  4D65 6D6F 
00005729  7279 2045 
0000572D  78        
0000572E  616D 696E 8596          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00005732  6520 616E 
00005736  6420 4368 
0000573A  61        
0000573B  6E67 6500 8597          dc.b      110,103,101,0
                    8598   @lab5k_108:
00005740  0D0A 2020 8599          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00005744  5020 2020 
00005748  2020 2020 
0000574C  2020 20   
0000574F  2020 2D20 8600          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00005753  5072 6F67 
00005757  7261 6D20 
0000575B  46        
0000575C  6C61 7368 8601          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005760  204D 656D 
00005764  6F72 7920 
00005768  7769 7468 8602          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
0000576C  2055 7365 
00005770  7220 5072 
00005774  6F67 7261 8603          dc.b      111,103,114,97,109,0
00005778  6D00      
                    8604   @lab5k_109:
0000577A  0D0A 2020 8605          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
0000577E  5220 2020 
00005782  2020 2020 
00005786  2020 20   
00005789  2020 2D20 8606          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
0000578D  4469 7370 
00005791  6C61 7920 
00005795  36        
00005796  3830 3030 8607          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000579A  2052 6567 
0000579E  6973 7465 
000057A2  72        
000057A3  7300      8608          dc.b      115,0
                    8609   @lab5k_110:
000057A6  0D0A 2020 8610          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000057AA  5320 2020 
000057AE  2020 2020 
000057B2  2020 20   
000057B5  2020 2D20 8611          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000057B9  546F 6767 
000057BD  6C65 204F 
000057C1  4E        
000057C2  2F4F 4646 8612          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000057C6  2053 696E 
000057CA  676C 6520 
000057CE  53        
000057CF  7465 7020 8613          dc.b      116,101,112,32,77,111,100,101,0
000057D3  4D6F 6465 
000057D7  00        
                    8614   @lab5k_111:
000057D8  0D0A 2020 8615          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000057DC  544D 2020 
000057E0  2020 2020 
000057E4  2020 20   
000057E7  2020 2D20 8616          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000057EB  5465 7374 
000057EF  204D 656D 
000057F3  6F        
000057F4  7279 00   8617          dc.b      114,121,0
                    8618   @lab5k_112:
000057F8  0D0A 2020 8619          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000057FC  5453 2020 
00005800  2020 2020 
00005804  2020 20   
00005807  2020 2D20 8620          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
0000580B  5465 7374 
0000580F  2053 7769 
00005813  74        
00005814  6368 6573 8621          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00005818  3A20 5357 
0000581C  372D 3000 
                    8622   @lab5k_113:
00005820  0D0A 2020 8623          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00005824  5444 2020 
00005828  2020 2020 
0000582C  2020 20   
0000582F  2020 2D20 8624          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00005833  5465 7374 
00005837  2044 6973 
0000583B  70        
0000583C  6C61 7973 8625          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005840  3A20 4C45 
00005844  4473 2061 
00005848  6E        
00005849  6420 372D 8626          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
0000584D  5365 676D 
00005851  656E 7400 
                    8627   @lab5k_114:
00005856  0D0A 2020 8628          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
0000585A  5744 2F57 
0000585E  532F 5743 
00005862  2F57 4B   
00005865  2020 2D20 8629          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00005869  5761 7463 
0000586D  6820 506F 
00005871  696E      
00005873  743A 2044 8630          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00005877  6973 706C 
0000587B  6179 2F53 
0000587F  65        
00005880  742F 436C 8631          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00005884  6561 722F 
00005888  4B69 6C6C 
0000588C  00        
                    8632   @lab5k_115:
0000588E  0D0A 2300 8633          dc.b      13,10,35,0
                    8634   @lab5k_116:
00005892  0D0A 5072 8635          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00005896  6F67 7261 
0000589A  6D20 5275 
0000589E  6E        
0000589F  6E69 6E67 8636          dc.b      110,105,110,103,46,46,46,46,46,0
000058A3  2E2E 2E2E 
000058A7  2E00      
                    8637   @lab5k_117:
000058AA  0D0A 5072 8638          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000058AE  6573 7320 
000058B2  3C52 4553 
000058B6  4554      
000058B8  3E20 6275 8639          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000058BC  7474 6F6E 
000058C0  203C 4B65 
000058C4  79        
000058C5  303E 206F 8640          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000058C9  6E20 4445 
000058CD  3120 746F 
000058D1  2073      
000058D3  746F 7000 8641          dc.b      116,111,112,0
                    8642   @lab5k_118:
000058D8  0D0A 4572 8643          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000058DC  726F 723A 
000058E0  2050 7265 
000058E4  73        
000058E5  7320 2747 8644          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000058E9  2720 6669 
000058ED  7273 7420 
000058F1  74        
000058F2  6F20 7374 8645          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000058F6  6172 7420 
000058FA  7072 6F67 
000058FE  7261 6D00 8646          dc.b      114,97,109,0
                    8647   @lab5k_119:
00005902  0D0A 5369 8648          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005906  6E67 6C65 
0000590A  2053 7465 
0000590E  70        
0000590F  2020 3A5B 8649          dc.b      32,32,58,91,79,78,93,0
00005913  4F4E 5D00 
                    8650   @lab5k_120:
00005918  0D0A 5072 8651          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
0000591C  6573 7320 
00005920  2747 2720 
00005924  74        
00005925  6F20 5472 8652          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005929  6163 6520 
0000592D  5072 6F67 
00005931  72        
00005932  616D 2066 8653          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00005936  726F 6D20 
0000593A  6164 6472 
0000593E  6573 7320 8654          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00005942  2425 582E 
00005946  2E2E 2E2E 
0000594A  00        
                    8655   @lab5k_121:
0000594C  0D0A 5075 8656          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005950  7368 203C 
00005954  5245 5345 
00005958  5420      
0000595A  4275 7474 8657          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
0000595E  6F6E 3E20 
00005962  746F 2053 
00005966  74        
00005967  6F70 2E2E 8658          dc.b      111,112,46,46,46,46,46,0
0000596B  2E2E 2E00 
                    8659   @lab5k_122:
00005970  0D0A 5369 8660          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005974  6E67 6C65 
00005978  2053 7465 
0000597C  70        
0000597D  203A 205B 8661          dc.b      32,58,32,91,79,70,70,93,0
00005981  4F46 465D 
00005985  00        
                    8662   @lab5k_123:
00005986  0D0A 4272 8663          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000598A  6561 6B20 
0000598E  506F 696E 
00005992  74        
00005993  7320 3A5B 8664          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00005997  456E 6162 
0000599B  6C65 645D 
0000599F  00        
                    8665   @lab5k_124:
000059A0  0D0A 5072 8666          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000059A4  6573 7320 
000059A8  3C45 5343 
000059AC  3E20      
000059AE  746F 2052 8667          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000059B2  6573 756D 
000059B6  6520 5573 
000059BA  6572 2050 8668          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000059BE  726F 6772 
000059C2  616D 2E2E 
000059C6  2E        
000059C7  2E2E 00   8669          dc.b      46,46,0
                    8670   @lab5k_125:
000059CA  0D0A 5369 8671          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000059CE  6E67 6C65 
000059D2  2053 7465 
000059D6  70        
000059D7  2020 3A5B 8672          dc.b      32,32,58,91,79,70,70,93,0
000059DB  4F46 465D 
000059DF  00        
                    8673   @lab5k_126:
000059E0  0D0A 0D0A 8674          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000059E4  5072 6F67 
000059E8  7261 6D20 
000059EC  41        
000059ED  424F 5254 8675          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000059F1  2021 2121 
000059F5  2121 210D 
000059F9  0A00      
                    8676   @lab5k_127:
000059FC  2573 0D0A 8677          dc.b      37,115,13,10,0
00005A00  00        
                    8678   @lab5k_128:
00005A02  0D0A 0D0A 8679          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005A06  5072 6F67 
00005A0A  7261 6D20 
00005A0E  41        
00005A0F  424F 5254 8680          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005A13  2021 2121 
00005A17  2121 00   
                    8681   @lab5k_129:
00005A1A  0D0A 556E 8682          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005A1E  6861 6E64 
00005A22  6C65 6420 
00005A26  49        
00005A27  6E74 6572 8683          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005A2B  7275 7074 
00005A2F  3A20 4952 
00005A33  5125 6420 8684          dc.b      81,37,100,32,33,33,33,33,33,0
00005A37  2121 2121 
00005A3B  2100      
                    8685   @lab5k_130:
00005A3E  4144 4452 8686          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005A42  4553 5320 
00005A46  4552 524F 
00005A4A  523A 20   
00005A4D  3136 206F 8687          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005A51  7220 3332 
00005A55  2042 6974 
00005A59  2054      
00005A5B  7261 6E73 8688          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005A5F  6665 7220 
00005A63  746F 2F66 
00005A67  726F 6D20 8689          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005A6B  616E 204F 
00005A6F  4444 2041 
00005A73  64        
00005A74  6472 6573 8690          dc.b      100,114,101,115,115,46,46,46,46,0
00005A78  732E 2E2E 
00005A7C  2E00      
                    8691   @lab5k_131:
00005A7E  556E 6861 8692          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005A82  6E64 6C65 
00005A86  6420 5472 
00005A8A  6170 2021 8693          dc.b      97,112,32,33,33,33,33,33,0
00005A8E  2121 2121 
00005A92  00        
                    8694   @lab5k_132:
00005A94  4255 5320 8695          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005A98  4572 726F 
00005A9C  7221 00   
                    8696   @lab5k_133:
00005AA0  4144 4452 8697          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005AA4  4553 5320 
00005AA8  4572 726F 
00005AAC  7221      
00005AAE  00        8698          dc.b      0
                    8699   @lab5k_134:
00005AB0  494C 4C45 8700          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005AB4  4741 4C20 
00005AB8  494E 5354 
00005ABC  5255 43   
00005ABF  5449 4F4E 8701          dc.b      84,73,79,78,0
00005AC3  00        
                    8702   @lab5k_135:
00005AC4  4449 5649 8703          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005AC8  4445 2042 
00005ACC  5920 5A45 
00005AD0  524F 00   
                    8704   @lab5k_136:
00005AD4  2743 484B 8705          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005AD8  2720 494E 
00005ADC  5354 5255 
00005AE0  4354 49   
00005AE3  4F4E 00   8706          dc.b      79,78,0
                    8707   @lab5k_137:
00005AE6  5452 4150 8708          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005AEA  5620 494E 
00005AEE  5354 5255 
00005AF2  4354 49   
00005AF5  4F4E 00   8709          dc.b      79,78,0
                    8710   @lab5k_138:
00005AF8  5052 4956 8711          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005AFC  494C 4547 
00005B00  4520 5649 
00005B04  4F4C 41   
00005B07  5449 4F4E 8712          dc.b      84,73,79,78,0
00005B0B  00        
                    8713   @lab5k_139:
00005B0C  554E 494E 8714          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005B10  4954 4941 
00005B14  4C49 5345 
00005B18  4420 49   
00005B1B  5251 00   8715          dc.b      82,81,0
                    8716   @lab5k_140:
00005B1E  5350 5552 8717          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005B22  494F 5553 
00005B26  2049 5251 
00005B2A  00        
                    8718   @lab5k_141:
00005B2C  0D0A 5374 8719          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005B30  6172 7420 
00005B34  4164 6472 
00005B38  65        
00005B39  7373 2069 8720          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005B3D  6E20 4D65 
00005B41  6D6F 7279 
00005B45  3A20 00   8721          dc.b      58,32,0
                    8722   @lab5k_142:
00005B48  0D0A 456E 8723          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005B4C  7465 7220 
00005B50  5374 7269 
00005B54  6E        
00005B55  6720 2845 8724          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005B59  5343 2074 
00005B5D  6F20 656E 
00005B61  64        
00005B62  2920 3A00 8725          dc.b      41,32,58,0
                    8726   @lab5k_143:
00005B66  0D0A 456E 8727          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,118
00005B6A  7465 7220 
00005B6E  7468 6520 
00005B72  76        
00005B73  616C 7565 8728          dc.b      97,108,117,101,32,98,101,108,111,119,32,102
00005B77  2062 656C 
00005B7B  6F77 2066 
00005B7F  6F72 2074 8729          dc.b      111,114,32,116,104,101,32,115,105,122,101,32
00005B83  6865 2073 
00005B87  697A 6520 
00005B8B  6F66 2074 8730          dc.b      111,102,32,116,104,101,32,116,101,115,116,32
00005B8F  6865 2074 
00005B93  6573 7420 
00005B97  796F 7520 8731          dc.b      121,111,117,32,119,111,117,108,100,32,108,105
00005B9B  776F 756C 
00005B9F  6420 6C69 
00005BA3  6B65 2074 8732          dc.b      107,101,32,116,111,32,117,115,101,63,10,49,32
00005BA7  6F20 7573 
00005BAB  653F 0A31 
00005BAF  20        
00005BB0  3D20 6279 8733          dc.b      61,32,98,121,116,101,115,32,40,56,32,98,105
00005BB4  7465 7320 
00005BB8  2838 2062 
00005BBC  69        
00005BBD  7473 290A 8734          dc.b      116,115,41,10,50,32,61,32,119,111,114,100,115
00005BC1  3220 3D20 
00005BC5  776F 7264 
00005BC9  73        
00005BCA  2028 3136 8735          dc.b      32,40,49,54,32,98,105,116,115,41,10,51,32,61
00005BCE  2062 6974 
00005BD2  7329 0A33 
00005BD6  203D      
00005BD8  206C 6F6E 8736          dc.b      32,108,111,110,103,32,119,111,114,100,115,32
00005BDC  6720 776F 
00005BE0  7264 7320 
00005BE4  2833 3220 8737          dc.b      40,51,50,32,98,105,116,115,41,10,0
00005BE8  6269 7473 
00005BEC  290A 00   
                    8738   @lab5k_144:
00005BF0  0A59 6F75 8739          dc.b      10,89,111,117,32,104,97,118,101,32,115,101,108
00005BF4  2068 6176 
00005BF8  6520 7365 
00005BFC  6C        
00005BFD  6374 6564 8740          dc.b      99,116,101,100,32,116,111,32,117,115,101,32
00005C01  2074 6F20 
00005C05  7573 6520 
00005C09  6279 7465 8741          dc.b      98,121,116,101,115,32,115,105,122,101,32,100
00005C0D  7320 7369 
00005C11  7A65 2064 
00005C15  6174 6120 8742          dc.b      97,116,97,32,116,111,32,116,101,115,116,32,121
00005C19  746F 2074 
00005C1D  6573 7420 
00005C21  79        
00005C22  6F75 7220 8743          dc.b      111,117,114,32,109,101,109,111,114,121,10,0
00005C26  6D65 6D6F 
00005C2A  7279 0A00 
                    8744   @lab5k_145:
00005C2E  4F75 7420 8745          dc.b      79,117,116,32,111,102,32,116,104,101,32,98,101
00005C32  6F66 2074 
00005C36  6865 2062 
00005C3A  65        
00005C3B  6C6F 7720 8746          dc.b      108,111,119,32,101,120,97,109,112,108,101,32
00005C3F  6578 616D 
00005C43  706C 6520 
00005C47  7465 7374 8747          dc.b      116,101,115,116,32,100,97,116,97,44,32,112,108
00005C4B  2064 6174 
00005C4F  612C 2070 
00005C53  6C        
00005C54  6561 7365 8748          dc.b      101,97,115,101,32,115,101,108,101,99,116,32
00005C58  2073 656C 
00005C5C  6563 7420 
00005C60  6F6E 6520 8749          dc.b      111,110,101,32,98,121,32,101,110,116,101,114
00005C64  6279 2065 
00005C68  6E74 6572 
00005C6C  696E 6720 8750          dc.b      105,110,103,32,116,104,101,32,118,97,108,117
00005C70  7468 6520 
00005C74  7661 6C75 
00005C78  6520 6173 8751          dc.b      101,32,97,115,115,111,99,105,97,116,101,100
00005C7C  736F 6369 
00005C80  6174 6564 
00005C84  2074 6F20 8752          dc.b      32,116,111,32,101,97,99,104,32,101,120,97,109
00005C88  6561 6368 
00005C8C  2065 7861 
00005C90  6D        
00005C91  706C 653A 8753          dc.b      112,108,101,58,10,0
00005C95  0A00      
                    8754   @lab5k_146:
00005C98  3120 3D20 8755          dc.b      49,32,61,32,34,65,65,34,10,50,32,61,32,34,65
00005C9C  2241 4122 
00005CA0  0A32 203D 
00005CA4  2022 41   
00005CA7  4222 0A33 8756          dc.b      66,34,10,51,32,61,32,34,67,67,34,10,52,32,61
00005CAB  203D 2022 
00005CAF  4343 220A 
00005CB3  3420 3D   
00005CB6  2022 4344 8757          dc.b      32,34,67,68,34,10,0
00005CBA  220A 00   
                    8758   @lab5k_147:
00005CBE  0D0A 4552 8759          dc.b      13,10,69,82,82,79,82,58,32,89,111,117,32,104
00005CC2  524F 523A 
00005CC6  2059 6F75 
00005CCA  2068      
00005CCC  6176 6520 8760          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
00005CD0  656E 7465 
00005CD4  7265 6420 
00005CD8  6120 6B65 8761          dc.b      97,32,107,101,121,98,111,97,114,100,32,105,110
00005CDC  7962 6F61 
00005CE0  7264 2069 
00005CE4  6E        
00005CE5  7075 7420 8762          dc.b      112,117,116,32,116,104,97,116,32,100,111,101
00005CE9  7468 6174 
00005CED  2064 6F65 
00005CF1  7320 6E6F 8763          dc.b      115,32,110,111,116,32,97,115,115,111,99,105
00005CF5  7420 6173 
00005CF9  736F 6369 
00005CFD  6174 6564 8764          dc.b      97,116,101,100,32,119,105,116,104,32,97,110
00005D01  2077 6974 
00005D05  6820 616E 
00005D09  206F 7074 8765          dc.b      32,111,112,116,105,111,110,32,97,98,111,118
00005D0D  696F 6E20 
00005D11  6162 6F76 
00005D15  652C 2070 8766          dc.b      101,44,32,112,108,101,97,115,101,32,116,114
00005D19  6C65 6173 
00005D1D  6520 7472 
00005D21  7920 6167 8767          dc.b      121,32,97,103,97,105,110,13,10,0
00005D25  6169 6E0D 
00005D29  0A00      
                    8768   @lab5k_148:
00005D2C  0D0A 4552 8769          dc.b      13,10,69,82,82,79,82,58,32,79,112,116,105,111
00005D30  524F 523A 
00005D34  204F 7074 
00005D38  696F      
00005D3A  6E20 6D65 8770          dc.b      110,32,109,101,109,111,114,121,32,99,111,109
00005D3E  6D6F 7279 
00005D42  2063 6F6D 
00005D46  706C 6963 8771          dc.b      112,108,105,99,97,116,105,111,110,46,32,69,120
00005D4A  6174 696F 
00005D4E  6E2E 2045 
00005D52  78        
00005D53  6974 696E 8772          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
00005D57  6720 6D65 
00005D5B  6D6F 7279 
00005D5F  2074 6573 8773          dc.b      32,116,101,115,116,46,46,46,13,10,0
00005D63  742E 2E2E 
00005D67  0D0A 00   
                    8774   @lab5k_149:
00005D6A  0D0A 506C 8775          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00005D6E  6561 7365 
00005D72  2065 6E74 
00005D76  65        
00005D77  7220 7468 8776          dc.b      114,32,116,104,101,32,115,116,97,114,116,32
00005D7B  6520 7374 
00005D7F  6172 7420 
00005D83  6164 6472 8777          dc.b      97,100,100,114,101,115,115,32,121,111,117,32
00005D87  6573 7320 
00005D8B  796F 7520 
00005D8F  776F 756C 8778          dc.b      119,111,117,108,100,32,108,105,107,101,32,116
00005D93  6420 6C69 
00005D97  6B65 2074 
00005D9B  6F20 7573 8779          dc.b      111,32,117,115,101,32,102,111,114,32,116,104
00005D9F  6520 666F 
00005DA3  7220 7468 
00005DA7  6520 7465 8780          dc.b      101,32,116,101,115,116,32,100,97,116,97,32,105
00005DAB  7374 2064 
00005DAF  6174 6120 
00005DB3  69        
00005DB4  6E74 6F20 8781          dc.b      110,116,111,32,109,101,109,111,114,121,13,10
00005DB8  6D65 6D6F 
00005DBC  7279 0D0A 
00005DC0  00        8782          dc.b      0
                    8783   @lab5k_150:
00005DC2  0D0A 4552 8784          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
00005DC6  524F 523A 
00005DCA  2053 7461 
00005DCE  7274      
00005DD0  696E 6720 8785          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
00005DD4  4164 6472 
00005DD8  6573 7320 
00005DDC  6973 206F 8786          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
00005DE0  7574 7369 
00005DE4  6465 206F 
00005DE8  6620 3638 8787          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
00005DEC  4B20 6D65 
00005DF0  6D6F 7279 
00005DF4  20        
00005DF5  7261 6E67 8788          dc.b      114,97,110,103,101,46,32,80,108,101,97,115,101
00005DF9  652E 2050 
00005DFD  6C65 6173 
00005E01  65        
00005E02  2074 7279 8789          dc.b      32,116,114,121,32,97,103,97,105,110,32,97,110
00005E06  2061 6761 
00005E0A  696E 2061 
00005E0E  6E        
00005E0F  6420 656E 8790          dc.b      100,32,101,110,115,117,114,101,32,116,104,101
00005E13  7375 7265 
00005E17  2074 6865 
00005E1B  2061 6464 8791          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
00005E1F  7265 7373 
00005E23  2069 7320 
00005E27  7769 7468 8792          dc.b      119,105,116,104,110,32,48,120,48,56,48,50,48
00005E2B  6E20 3078 
00005E2F  3038 3032 
00005E33  30        
00005E34  3030 3020 8793          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
00005E38  2D20 3078 
00005E3C  3039 3746 
00005E40  4646 46   
00005E43  460D 0A00 8794          dc.b      70,13,10,0
                    8795   @lab5k_151:
00005E48  0D0A 506C 8796          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00005E4C  6561 7365 
00005E50  2065 6E74 
00005E54  65        
00005E55  7220 7468 8797          dc.b      114,32,116,104,101,32,101,110,100,32,97,100
00005E59  6520 656E 
00005E5D  6420 6164 
00005E61  6472 6573 8798          dc.b      100,114,101,115,115,32,121,111,117,32,119,111
00005E65  7320 796F 
00005E69  7520 776F 
00005E6D  756C 6420 8799          dc.b      117,108,100,32,108,105,107,101,32,116,111,32
00005E71  6C69 6B65 
00005E75  2074 6F20 
00005E79  7573 6520 8800          dc.b      117,115,101,32,102,111,114,32,116,104,101,32
00005E7D  666F 7220 
00005E81  7468 6520 
00005E85  7465 7374 8801          dc.b      116,101,115,116,32,100,97,116,97,32,105,110
00005E89  2064 6174 
00005E8D  6120 696E 
00005E91  206D 656D 8802          dc.b      32,109,101,109,111,114,121,13,10,0
00005E95  6F72 790D 
00005E99  0A00      
                    8803   @lab5k_152:
00005E9C  0D0A 4552 8804          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
00005EA0  524F 523A 
00005EA4  2045 6E64 
00005EA8  2041      
00005EAA  6464 7265 8805          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
00005EAE  7373 2069 
00005EB2  7320 6F75 
00005EB6  7473 6964 8806          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
00005EBA  6520 6F66 
00005EBE  2036 384B 
00005EC2  20        
00005EC3  6D65 6D6F 8807          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
00005EC7  7279 2072 
00005ECB  616E 6765 
00005ECF  2E20 506C 8808          dc.b      46,32,80,108,101,97,115,101,32,116,114,121,32
00005ED3  6561 7365 
00005ED7  2074 7279 
00005EDB  20        
00005EDC  6167 6169 8809          dc.b      97,103,97,105,110,32,97,110,100,32,101,110,115
00005EE0  6E20 616E 
00005EE4  6420 656E 
00005EE8  73        
00005EE9  7572 6520 8810          dc.b      117,114,101,32,116,104,101,32,97,100,100,114
00005EED  7468 6520 
00005EF1  6164 6472 
00005EF5  6573 7320 8811          dc.b      101,115,115,32,105,115,32,119,105,116,104,110
00005EF9  6973 2077 
00005EFD  6974 686E 
00005F01  2030 7830 8812          dc.b      32,48,120,48,56,48,50,48,48,48,48,32,45,32,48
00005F05  3830 3230 
00005F09  3030 3020 
00005F0D  2D20 30   
00005F10  7830 3937 8813          dc.b      120,48,57,55,70,70,70,70,70,13,10,0
00005F14  4646 4646 
00005F18  460D 0A00 
                    8814   @lab5k_153:
00005F1C  0D0A 0D0A 8815          dc.b      13,10,13,10,87,114,105,116,105,110,103,32,116
00005F20  5772 6974 
00005F24  696E 6720 
00005F28  74        
00005F29  6F20 6D65 8816          dc.b      111,32,109,101,109,111,114,121,0
00005F2D  6D6F 7279 
00005F31  00        
                    8817   @lab5k_154:
00005F32  0D0A 5752 8818          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,50,88,32
00005F36  4954 453A 
00005F3A  205B 2530 
00005F3E  3258 20   
00005F41  746F 2025 8819          dc.b      116,111,32,37,48,56,120,93,0
00005F45  3038 785D 
00005F49  00        
                    8820   @lab5k_155:
00005F4A  0D0A 0D0A 8821          dc.b      13,10,13,10,83,116,97,114,116,105,110,103,32
00005F4E  5374 6172 
00005F52  7469 6E67 
00005F56  20        
00005F57  6D65 6D6F 8822          dc.b      109,101,109,111,114,121,32,118,97,108,105,100
00005F5B  7279 2076 
00005F5F  616C 6964 
00005F63  6174 696F 8823          dc.b      97,116,105,111,110,32,116,101,115,116,0
00005F67  6E20 7465 
00005F6B  7374 00   
                    8824   @lab5k_156:
00005F6E  0D0A 5665 8825          dc.b      13,10,86,101,114,105,102,121,105,110,103,32
00005F72  7269 6679 
00005F76  696E 6720 
00005F7A  7468 6520 8826          dc.b      116,104,101,32,97,100,100,114,101,115,115,101
00005F7E  6164 6472 
00005F82  6573 7365 
00005F86  7320 5B25 8827          dc.b      115,32,91,37,48,56,120,32,116,111,32,37,48,56
00005F8A  3038 7820 
00005F8E  746F 2025 
00005F92  3038      
00005F94  785D 2063 8828          dc.b      120,93,32,99,111,110,116,97,105,110,115,32,116
00005F98  6F6E 7461 
00005F9C  696E 7320 
00005FA0  74        
00005FA1  6573 7420 8829          dc.b      101,115,116,32,100,97,116,97,32,91,37,48,50
00005FA5  6461 7461 
00005FA9  205B 2530 
00005FAD  32        
00005FAE  585D 2E2E 8830          dc.b      88,93,46,46,46,46,46,0
00005FB2  2E2E 2E00 
                    8831   @lab5k_157:
00005FB6  0D0A 4552 8832          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005FBA  524F 523A 
00005FBE  2044 6174 
00005FC2  6120 77   
00005FC5  6974 6869 8833          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005FC9  6E20 6D65 
00005FCD  6D6F 7279 
00005FD1  2064 6F65 8834          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00005FD5  7320 6E6F 
00005FD9  7420 6D61 
00005FDD  7463 6820 8835          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
00005FE1  7365 6C65 
00005FE5  6374 6564 
00005FE9  2074 6573 8836          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
00005FED  7420 6461 
00005FF1  7461 2120 
00005FF5  5B        
00005FF6  4164 6472 8837          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00005FFA  6573 733A 
00005FFE  2025 3038 
00006002  78        
00006003  2045 7861 8838          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00006007  6374 2044 
0000600B  6174 613A 
0000600F  2025      
00006011  3032 5820 8839          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
00006015  4578 7065 
00006019  6374 6564 
0000601D  20        
0000601E  4461 7461 8840          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
00006022  3A20 2530 
00006026  3258 5D20 
0000602A  4578      
0000602C  6974 696E 8841          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
00006030  6720 6D65 
00006034  6D6F 7279 
00006038  2074 6573 8842          dc.b      32,116,101,115,116,46,46,46,13,10,0
0000603C  742E 2E2E 
00006040  0D0A 00   
                    8843   @lab5k_158:
00006044  0D0A 5041 8844          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
00006048  5353 3A20 
0000604C  4D65 6D6F 
00006050  7279      
00006052  2056 616C 8845          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
00006056  6964 6174 
0000605A  696F 6E20 
0000605E  74        
0000605F  6573 7420 8846          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
00006063  6861 7320 
00006067  7061 7373 
0000606B  6564 210D 8847          dc.b      101,100,33,13,10,0
0000606F  0A00      
                    8848   @lab5k_159:
00006072  0D0A 596F 8849          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00006076  7520 6861 
0000607A  7665 2073 
0000607E  65        
0000607F  6C63 7465 8850          dc.b      108,99,116,101,100,32,116,111,32,117,115,101
00006083  6420 746F 
00006087  2075 7365 
0000608B  2077 6F72 8851          dc.b      32,119,111,114,100,32,115,105,122,101,32,100
0000608F  6420 7369 
00006093  7A65 2064 
00006097  6174 6120 8852          dc.b      97,116,97,32,116,111,32,116,101,115,116,32,121
0000609B  746F 2074 
0000609F  6573 7420 
000060A3  79        
000060A4  6F75 7220 8853          dc.b      111,117,114,32,109,101,109,111,114,121,0
000060A8  6D65 6D6F 
000060AC  7279 00   
                    8854   @lab5k_160:
000060B0  0D0A 4F75 8855          dc.b      13,10,79,117,116,32,111,102,32,116,104,101,32
000060B4  7420 6F66 
000060B8  2074 6865 
000060BC  20        
000060BD  6265 6C6F 8856          dc.b      98,101,108,111,119,32,101,120,97,109,112,108
000060C1  7720 6578 
000060C5  616D 706C 
000060C9  6520 7465 8857          dc.b      101,32,116,101,115,116,32,100,97,116,97,44,32
000060CD  7374 2064 
000060D1  6174 612C 
000060D5  20        
000060D6  706C 6561 8858          dc.b      112,108,101,97,115,101,32,115,101,108,101,99
000060DA  7365 2073 
000060DE  656C 6563 
000060E2  7420 6F6E 8859          dc.b      116,32,111,110,101,32,98,121,32,101,110,116
000060E6  6520 6279 
000060EA  2065 6E74 
000060EE  6572 696E 8860          dc.b      101,114,105,110,103,32,116,104,101,32,118,97
000060F2  6720 7468 
000060F6  6520 7661 
000060FA  6C75 6520 8861          dc.b      108,117,101,32,97,115,115,111,99,105,97,116
000060FE  6173 736F 
00006102  6369 6174 
00006106  6564 2074 8862          dc.b      101,100,32,116,111,32,101,97,99,104,32,101,120
0000610A  6F20 6561 
0000610E  6368 2065 
00006112  78        
00006113  616D 706C 8863          dc.b      97,109,112,108,101,58,0
00006117  653A 00   
                    8864   @lab5k_161:
0000611A  0D0A 3120 8865          dc.b      13,10,49,32,61,32,34,65,65,65,65,34,10,50,32
0000611E  3D20 2241 
00006122  4141 4122 
00006126  0A32 20   
00006129  3D20 2242 8866          dc.b      61,32,34,66,65,66,65,34,10,51,32,61,32,34,67
0000612D  4142 4122 
00006131  0A33 203D 
00006135  2022 43   
00006138  4344 4422 8867          dc.b      67,68,68,34,10,52,32,61,32,34,68,68,68,68,34
0000613C  0A34 203D 
00006140  2022 4444 
00006144  4444 22   
00006147  0D0A 00   8868          dc.b      13,10,0
                    8869   @lab5k_162:
0000614A  0D0A 506C 8870          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
0000614E  6561 7365 
00006152  2065 6E74 
00006156  65        
00006157  7220 7468 8871          dc.b      114,32,116,104,101,32,115,116,97,114,116,32
0000615B  6520 7374 
0000615F  6172 7420 
00006163  6164 6472 8872          dc.b      97,100,100,114,101,115,115,32,121,111,117,32
00006167  6573 7320 
0000616B  796F 7520 
0000616F  776F 756C 8873          dc.b      119,111,117,108,100,32,108,105,107,101,32,116
00006173  6420 6C69 
00006177  6B65 2074 
0000617B  6F20 7573 8874          dc.b      111,32,117,115,101,32,102,111,114,32,116,104
0000617F  6520 666F 
00006183  7220 7468 
00006187  6520 7465 8875          dc.b      101,32,116,101,115,116,32,100,97,116,97,32,105
0000618B  7374 2064 
0000618F  6174 6120 
00006193  69        
00006194  6E74 6F20 8876          dc.b      110,116,111,32,109,101,109,111,114,121,32,40
00006198  6D65 6D6F 
0000619C  7279 2028 
000061A0  456E 7375 8877          dc.b      69,110,115,117,114,101,32,116,111,32,101,110
000061A4  7265 2074 
000061A8  6F20 656E 
000061AC  7465 7220 8878          dc.b      116,101,114,32,97,110,32,101,118,101,110,32
000061B0  616E 2065 
000061B4  7665 6E20 
000061B8  6E75 6D62 8879          dc.b      110,117,109,98,101,114,41,13,10,0
000061BC  6572 290D 
000061C0  0A00      
                    8880   @lab5k_163:
000061C2  0D0A 4552 8881          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
000061C6  524F 523A 
000061CA  2053 7461 
000061CE  7274      
000061D0  696E 6720 8882          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
000061D4  4164 6472 
000061D8  6573 7320 
000061DC  6973 206F 8883          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
000061E0  7574 7369 
000061E4  6465 206F 
000061E8  6620 3638 8884          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
000061EC  4B20 6D65 
000061F0  6D6F 7279 
000061F4  20        
000061F5  7261 6E67 8885          dc.b      114,97,110,103,101,46,32,80,108,101,97,115,101
000061F9  652E 2050 
000061FD  6C65 6173 
00006201  65        
00006202  2074 7279 8886          dc.b      32,116,114,121,32,97,103,97,105,110,32,97,110
00006206  2061 6761 
0000620A  696E 2061 
0000620E  6E        
0000620F  6420 656E 8887          dc.b      100,32,101,110,115,117,114,101,32,116,104,101
00006213  7375 7265 
00006217  2074 6865 
0000621B  2061 6464 8888          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
0000621F  7265 7373 
00006223  2069 7320 
00006227  7769 7468 8889          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
0000622B  6E20 3078 
0000622F  3039 3030 
00006233  30        
00006234  3030 3020 8890          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
00006238  2D20 3078 
0000623C  3039 3746 
00006240  4646 46   
00006243  460D 0A00 8891          dc.b      70,13,10,0
                    8892   @lab5k_164:
00006248  0D0A 4552 8893          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
0000624C  524F 523A 
00006250  2054 6865 
00006254  2061      
00006256  6464 7265 8894          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
0000625A  7373 2079 
0000625E  6F75 2068 
00006262  6176 6520 8895          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
00006266  656E 7465 
0000626A  7265 6420 
0000626E  6973 206E 8896          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
00006272  6F74 2065 
00006276  7665 6E2E 
0000627A  2050 6C65 8897          dc.b      32,80,108,101,97,115,101,32,116,114,121,32,97
0000627E  6173 6520 
00006282  7472 7920 
00006286  61        
00006287  6761 696E 8898          dc.b      103,97,105,110,13,10,0
0000628B  0D0A 00   
                    8899   @lab5k_165:
0000628E  0D0A 506C 8900          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00006292  6561 7365 
00006296  2065 6E74 
0000629A  65        
0000629B  7220 7468 8901          dc.b      114,32,116,104,101,32,101,110,100,32,97,100
0000629F  6520 656E 
000062A3  6420 6164 
000062A7  6472 6573 8902          dc.b      100,114,101,115,115,32,121,111,117,32,119,111
000062AB  7320 796F 
000062AF  7520 776F 
000062B3  756C 6420 8903          dc.b      117,108,100,32,108,105,107,101,32,116,111,32
000062B7  6C69 6B65 
000062BB  2074 6F20 
000062BF  7573 6520 8904          dc.b      117,115,101,32,102,111,114,32,116,104,101,32
000062C3  666F 7220 
000062C7  7468 6520 
000062CB  7465 7374 8905          dc.b      116,101,115,116,32,100,97,116,97,32,105,110
000062CF  2064 6174 
000062D3  6120 696E 
000062D7  206D 656D 8906          dc.b      32,109,101,109,111,114,121,32,40,69,110,115
000062DB  6F72 7920 
000062DF  2845 6E73 
000062E3  7572 6520 8907          dc.b      117,114,101,32,116,111,32,101,110,116,101,114
000062E7  746F 2065 
000062EB  6E74 6572 
000062EF  2061 6E20 8908          dc.b      32,97,110,32,101,118,101,110,32,110,117,109
000062F3  6576 656E 
000062F7  206E 756D 
000062FB  6265 7229 8909          dc.b      98,101,114,41,13,10,0
000062FF  0D0A 00   
                    8910   @lab5k_166:
00006302  0D0A 4552 8911          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
00006306  524F 523A 
0000630A  2045 6E64 
0000630E  2041      
00006310  6464 7265 8912          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
00006314  7373 2069 
00006318  7320 6F75 
0000631C  7473 6964 8913          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
00006320  6520 6F66 
00006324  2036 384B 
00006328  20        
00006329  6D65 6D6F 8914          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
0000632D  7279 2072 
00006331  616E 6765 
00006335  2E20 506C 8915          dc.b      46,32,80,108,101,97,115,101,32,116,114,121,32
00006339  6561 7365 
0000633D  2074 7279 
00006341  20        
00006342  6167 6169 8916          dc.b      97,103,97,105,110,32,97,110,100,32,101,110,115
00006346  6E20 616E 
0000634A  6420 656E 
0000634E  73        
0000634F  7572 6520 8917          dc.b      117,114,101,32,116,104,101,32,97,100,100,114
00006353  7468 6520 
00006357  6164 6472 
0000635B  6573 7320 8918          dc.b      101,115,115,32,105,115,32,119,105,116,104,110
0000635F  6973 2077 
00006363  6974 686E 
00006367  2030 7830 8919          dc.b      32,48,120,48,57,48,48,48,48,48,48,32,45,32,48
0000636B  3930 3030 
0000636F  3030 3020 
00006373  2D20 30   
00006376  7830 3937 8920          dc.b      120,48,57,55,70,70,70,70,70,13,10,0
0000637A  4646 4646 
0000637E  460D 0A00 
                    8921   @lab5k_167:
00006382  0D0A 5752 8922          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,52,88,32
00006386  4954 453A 
0000638A  205B 2530 
0000638E  3458 20   
00006391  746F 2025 8923          dc.b      116,111,32,37,48,56,120,93,0
00006395  3038 785D 
00006399  00        
                    8924   @lab5k_168:
0000639A  0D0A 4552 8925          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
0000639E  524F 523A 
000063A2  2044 6174 
000063A6  6120 77   
000063A9  6974 6869 8926          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
000063AD  6E20 6D65 
000063B1  6D6F 7279 
000063B5  2064 6F65 8927          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
000063B9  7320 6E6F 
000063BD  7420 6D61 
000063C1  7463 6820 8928          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
000063C5  7365 6C65 
000063C9  6374 6564 
000063CD  2074 6573 8929          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
000063D1  7420 6461 
000063D5  7461 2120 
000063D9  5B        
000063DA  4164 6472 8930          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
000063DE  6573 733A 
000063E2  2025 3038 
000063E6  78        
000063E7  2045 7861 8931          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
000063EB  6374 2044 
000063EF  6174 613A 
000063F3  2025      
000063F5  3032 5820 8932          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
000063F9  4578 7065 
000063FD  6374 6564 
00006401  20        
00006402  4461 7461 8933          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
00006406  3A20 2530 
0000640A  3258 5D20 
0000640E  4578      
00006410  6974 696E 8934          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
00006414  6720 6D65 
00006418  6D6F 7279 
0000641C  2074 6573 8935          dc.b      32,116,101,115,116,46,46,46,0
00006420  742E 2E2E 
00006424  00        
                    8936   @lab5k_169:
00006426  0D0A 596F 8937          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
0000642A  7520 6861 
0000642E  7665 2073 
00006432  65        
00006433  6C63 7465 8938          dc.b      108,99,116,101,100,32,116,111,32,117,115,101
00006437  6420 746F 
0000643B  2075 7365 
0000643F  2062 7974 8939          dc.b      32,98,121,116,101,115,32,115,105,122,101,32
00006443  6573 2073 
00006447  697A 6520 
0000644B  6461 7461 8940          dc.b      100,97,116,97,32,116,111,32,116,101,115,116
0000644F  2074 6F20 
00006453  7465 7374 
00006457  2079 6F75 8941          dc.b      32,121,111,117,114,32,109,101,109,111,114,121
0000645B  7220 6D65 
0000645F  6D6F 7279 
00006463  00        8942          dc.b      0
                    8943   @lab5k_170:
00006464  0D0A 3120 8944          dc.b      13,10,49,32,61,32,34,65,65,65,65,65,65,65,65
00006468  3D20 2241 
0000646C  4141 4141 
00006470  4141 41   
00006473  220A 3220 8945          dc.b      34,10,50,32,61,32,34,65,66,65,66,65,66,65,66
00006477  3D20 2241 
0000647B  4241 4241 
0000647F  4241 42   
00006482  220A 3320 8946          dc.b      34,10,51,32,61,32,34,67,67,67,67,68,68,68,68
00006486  3D20 2243 
0000648A  4343 4344 
0000648E  4444 44   
00006491  220A 3420 8947          dc.b      34,10,52,32,61,32,34,65,65,66,66,67,67,68,68
00006495  3D20 2241 
00006499  4142 4243 
0000649D  4344 44   
000064A0  220D 0A00 8948          dc.b      34,13,10,0
                    8949   @lab5k_171:
000064A4  0D0A 5741 8950          dc.b      13,10,87,65,82,78,73,78,71,58,32,77,101,109
000064A8  524E 494E 
000064AC  473A 204D 
000064B0  656D      
000064B2  6F72 7920 8951          dc.b      111,114,121,32,119,105,108,108,32,99,111,110
000064B6  7769 6C6C 
000064BA  2063 6F6E 
000064BE  7461 696E 8952          dc.b      116,97,105,110,32,116,114,117,110,99,97,116
000064C2  2074 7275 
000064C6  6E63 6174 
000064CA  6564 2064 8953          dc.b      101,100,32,100,97,116,97,0
000064CE  6174 6100 
                    8954   @lab5k_172:
000064D2  0D0A 5752 8955          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,56,88,32
000064D6  4954 453A 
000064DA  205B 2530 
000064DE  3858 20   
000064E1  746F 2025 8956          dc.b      116,111,32,37,48,56,120,93,0
000064E5  3038 785D 
000064E9  00        
                    8957   @lab5k_173:
000064EA  0D0A 4552 8958          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
000064EE  524F 523A 
000064F2  2044 6174 
000064F6  6120 77   
000064F9  6974 6869 8959          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
000064FD  6E20 6D65 
00006501  6D6F 7279 
00006505  2064 6F65 8960          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00006509  7320 6E6F 
0000650D  7420 6D61 
00006511  7463 6820 8961          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
00006515  7365 6C65 
00006519  6374 6564 
0000651D  2074 6573 8962          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
00006521  7420 6461 
00006525  7461 2120 
00006529  5B        
0000652A  4164 6472 8963          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
0000652E  6573 733A 
00006532  2025 3038 
00006536  78        
00006537  2045 7861 8964          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
0000653B  6374 2044 
0000653F  6174 613A 
00006543  2025      
00006545  3038 5820 8965          dc.b      48,56,88,32,69,120,112,101,99,116,101,100,32
00006549  4578 7065 
0000654D  6374 6564 
00006551  20        
00006552  4461 7461 8966          dc.b      68,97,116,97,58,32,37,48,56,88,93,32,69,120
00006556  3A20 2530 
0000655A  3858 5D20 
0000655E  4578      
00006560  6974 696E 8967          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
00006564  6720 6D65 
00006568  6D6F 7279 
0000656C  2074 6573 8968          dc.b      32,116,101,115,116,46,46,46,13,10,0
00006570  742E 2E2E 
00006574  0D0A 00   
                    8969   @lab5k_174:
00006578  0D0A 596F 8970          dc.b      13,10,89,111,117,32,102,97,105,108,101,100,32
0000657C  7520 6661 
00006580  696C 6564 
00006584  20        
00006585  746F 2073 8971          dc.b      116,111,32,115,101,108,101,99,116,32,97,32,100
00006589  656C 6563 
0000658D  7420 6120 
00006591  64        
00006592  6174 6120 8972          dc.b      97,116,97,32,116,121,112,101,32,116,111,32,117
00006596  7479 7065 
0000659A  2074 6F20 
0000659E  75        
0000659F  7365 2120 8973          dc.b      115,101,33,32,67,108,105,99,107,32,111,112,101
000065A3  436C 6963 
000065A7  6B20 6F70 
000065AB  65        
000065AC  6E20 6D65 8974          dc.b      110,32,109,101,109,111,114,121,32,116,101,115
000065B0  6D6F 7279 
000065B4  2074 6573 
000065B8  7420 6167 8975          dc.b      116,32,97,103,97,105,110,32,116,111,32,116,114
000065BC  6169 6E20 
000065C0  746F 2074 
000065C4  72        
000065C5  7920 6167 8976          dc.b      121,32,97,103,97,105,110,46,13,10,0
000065C9  6169 6E2E 
000065CD  0D0A 00   
                    8977   @lab5k_175:
000065D0  0D0A 4932 8978          dc.b      13,10,73,50,67,32,87,114,105,116,101,58,0
000065D4  4320 5772 
000065D8  6974 653A 
000065DC  00        
                    8979   @lab5k_176:
000065DE  0D0A 456E 8980          dc.b      13,10,69,110,116,101,114,101,100,32,65,100,100
000065E2  7465 7265 
000065E6  6420 4164 
000065EA  64        
000065EB  7265 7373 8981          dc.b      114,101,115,115,32,105,115,32,105,110,118,97
000065EF  2069 7320 
000065F3  696E 7661 
000065F7  6C69 642C 8982          dc.b      108,105,100,44,32,112,108,101,97,115,101,32
000065FB  2070 6C65 
000065FF  6173 6520 
00006603  656E 7465 8983          dc.b      101,110,116,101,114,32,97,32,115,109,97,108
00006607  7220 6120 
0000660B  736D 616C 
0000660F  6C65 7220 8984          dc.b      108,101,114,32,118,97,108,117,101,100,32,97
00006613  7661 6C75 
00006617  6564 2061 
0000661B  6464 7265 8985          dc.b      100,100,114,101,115,115,46,32,82,101,116,117
0000661F  7373 2E20 
00006623  5265 7475 
00006627  726E 696E 8986          dc.b      114,110,105,110,103,32,98,97,99,107,32,116,111
0000662B  6720 6261 
0000662F  636B 2074 
00006633  6F        
00006634  2074 6865 8987          dc.b      32,116,104,101,32,100,101,98,117,103,32,109
00006638  2064 6562 
0000663C  7567 206D 
00006640  6F6E 6974 8988          dc.b      111,110,105,116,111,114,32,109,101,110,117,0
00006644  6F72 206D 
00006648  656E 7500 
                    8989   @lab5k_177:
0000664C  0D0A 456E 8990          dc.b      13,10,69,110,116,101,114,32,68,97,116,97,58
00006650  7465 7220 
00006654  4461 7461 
00006658  3A        
00006659  2000      8991          dc.b      32,0
                    8992   @lab5k_178:
0000665C  0D0A 4932 8993          dc.b      13,10,73,50,67,32,82,101,97,100,58,0
00006660  4320 5265 
00006664  6164 3A00 
                    8994   @lab5k_179:
00006668  0D0A 4932 8995          dc.b      13,10,73,50,67,32,80,97,103,101,32,87,114,105
0000666C  4320 5061 
00006670  6765 2057 
00006674  7269      
00006676  7465 3A00 8996          dc.b      116,101,58,0
                    8997   @lab5k_180:
0000667A  0D0A 456E 8998          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
0000667E  7465 7220 
00006682  4164 6472 
00006686  65        
00006687  7373 2046 8999          dc.b      115,115,32,70,114,111,109,58,32,0
0000668B  726F 6D3A 
0000668F  2000      
                    9000   @lab5k_181:
00006692  0D0A 456E 9001          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006696  7465 7220 
0000669A  4164 6472 
0000669E  65        
0000669F  7373 2054 9002          dc.b      115,115,32,84,111,58,32,0
000066A3  6F3A 2000 
                    9003   @lab5k_182:
000066A8  0D0A 4932 9004          dc.b      13,10,73,50,67,32,83,101,113,32,82,101,97,100
000066AC  4320 5365 
000066B0  7120 5265 
000066B4  6164      
000066B6  3A00      9005          dc.b      58,0
                    9006   @lab5k_183:
000066B8  4445 312D 9007          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000066BC  3638 6B20 
000066C0  4275 6720 
000066C4  5631      
000066C6  2E37 3700 9008          dc.b      46,55,55,0
                    9009   @lab5k_184:
000066CA  436F 7079 9010          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000066CE  7269 6768 
000066D2  7420 2843 
000066D6  2920 504A 9011          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000066DA  2044 6176 
000066DE  6965 7320 
000066E2  3230      
000066E4  3136 00   9012          dc.b      49,54,0
                    9013   @lab5k_185:
000066E8  0D0A 0D0A 9014          dc.b      13,10,13,10,75,101,110,110,121,32,87,97,107
000066EC  4B65 6E6E 
000066F0  7920 5761 
000066F4  6B        
000066F5  6162 6120 9015          dc.b      97,98,97,32,45,32,57,49,51,55,56,51,49,53,13
000066F9  2D20 3931 
000066FD  3337 3833 
00006701  3135 0D   
00006704  0A4A 6163 9016          dc.b      10,74,97,99,111,98,32,89,97,110,103,32,45,32
00006708  6F62 2059 
0000670C  616E 6720 
00006710  2D20      
00006712  3234 3934 9017          dc.b      50,52,57,52,48,56,51,53,0
00006716  3038 3335 
0000671A  00        
                    9018   @lab5k_186:
0000671C  0D0A 5275 9019          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00006720  6E6E 696E 
00006724  672E 2E2E 
00006728  2E        
00006729  2E00      9020          dc.b      46,0
                    9021   @lab5k_187:
0000672C  5275 6E6E 9022          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00006730  696E 672E 
00006734  2E2E 2E2E 
00006738  00        
                    9023   @lab5k_188:
0000673A  4279 3A20 9024          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000673E  504A 2044 
00006742  6176 6965 
00006746  73        
00006747  00        9025          dc.b      0
                    9026   @lab5k_189:
00006748  0D0A 2573 9027          dc.b      13,10,37,115,0
0000674C  00        
                    9028   MemoryTest_test_data_long_word_list:
0000674E  AAAA AAAA 9029          dc.l      -1431655766,-1414812757,-858989091,-1430532899
00006752  ABAB ABAB 
00006756  CCCC DDDD 
0000675A  AABB CCDD 
                    9030          section   data
0000675E            9031                   align
          0000 675E 9032   DataStart       equ       *
                    9033   
                    9034   *********************************************************************************************************
                    9035   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    9036   * to ram as part of the CStart routine in this file
                    9037   *********************************************************************************************************
                    9038   
                    9039   MemoryTest_test_data_byte_list:
0000675E  AAAB CCCD 9040          dc.b      170,171,204,205
                    9041   MemoryTest_test_data_word_list:
00006762  0000 AAAA 9042          dc.l      43690,47802,52445,56797
00006766  0000 BABA 
0000676A  0000 CCDD 
0000676E  0000 DDDD 
                    9043   @itoa_1:
00006772  2D32 3134 9044          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00006776  3734 3833 
0000677A  3634 3800 
                    9045          section   bss
0000677E            9046                   align
          0000 677E 9047   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    9048   
                    9049   *********************************************************************************************************
                    9050   * Section for Uninitialised Data held in ROM as constants
                    9051   *********************************************************************************************************
                    9052   
0B000000            9053                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0020 9054   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    9055   
                    9056   
0B000000            9057   bss             org       bss
                    9058   
                    9059   *********************************************************************************************************
                    9060   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    9061   * install the exception handler using the C function InstallExceptionHandler()
                    9062   *********************************************************************************************************
                    9063   
                    9064   
                    9065   
0B000000            9066   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            9067   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            9068   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            9069   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            9070   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            9071   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            9072   VCheck           ds.l    1      ditto
0B00001C            9073   VTrapV           ds.l    1      ditto
0B000020            9074   VPrivilege       ds.l    1      ditto
0B000024            9075   VTrace           ds.l    1
0B000028            9076   VLine1010emul    ds.l    1
0B00002C            9077   VLine1111emul    ds.l    1
0B000030            9078   VUnassigned1     ds.l    1
0B000034            9079   VUnassigned2     ds.l    1
0B000038            9080   VUnassigned3     ds.l    1
0B00003C            9081   VUninit_IRQ      ds.l    1
0B000040            9082   VUnassigned4     ds.l    1
0B000044            9083   VUnassigned5     ds.l    1
0B000048            9084   VUnassigned6     ds.l    1
0B00004C            9085   VUnassigned7     ds.l    1
0B000050            9086   VUnassigned8     ds.l    1
0B000054            9087   VUnassigned9     ds.l    1
0B000058            9088   VUnassigned10    ds.l    1
0B00005C            9089   VUnassigned11    ds.l    1
0B000060            9090   VSpuriousIRQ     ds.l    1
                    9091   
                    9092   * Interrupt handlers Vector 25-31
0B000064            9093   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            9094   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            9095   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            9096   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            9097   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            9098   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            9099   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    9100   
                    9101   * Trap Handler vectors 32-47
0B000080            9102   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            9103   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            9104   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            9105   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            9106   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            9107   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            9108   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            9109   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            9110   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            9111   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            9112   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            9113   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            9114   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            9115   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            9116   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            9117   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    9118   
                    9119   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    9120   
                    9121   ***********************************************************************************************************
                    9122   * Other Variables
                    9123   ***********************************************************************************************************
                    9124   *__DebugA5       ds.l    1
                    9125   *__UserA5        ds.l    1
                    9126   
                    9127   ***********************************************************************************************************
0B0000C0            9128   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            9129   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            9130   __heap:         ds.l    0       ; pointers for malloc functions
                    9131   
                    9132   *__himem:       ds.l    himem            ; highest memory location + 1
                    9133   *__stklen:      ds.l    stklen           ; default stack size
                    9134   
                    9135   *********************************************************************************************************
                    9136   * Section for Heap
                    9137   *********************************************************************************************************
                    9138   
                    9139   _i:
0B0000C4            9140          ds.b      4
                    9141   _x:
0B0000C8            9142          ds.b      4
                    9143   _y:
0B0000CC            9144          ds.b      4
                    9145   _z:
0B0000D0            9146          ds.b      4
                    9147   _PortA_Count:
0B0000D4            9148          ds.b      4
                    9149   _Trace:
0B0000D8            9150          ds.b      4
                    9151   _GoFlag:
0B0000DC            9152          ds.b      4
                    9153   _Echo:
0B0000E0            9154          ds.b      4
                    9155   _d0:
0B0000E4            9156          ds.b      4
                    9157   _d1:
0B0000E8            9158          ds.b      4
                    9159   _d2:
0B0000EC            9160          ds.b      4
                    9161   _d3:
0B0000F0            9162          ds.b      4
                    9163   _d4:
0B0000F4            9164          ds.b      4
                    9165   _d5:
0B0000F8            9166          ds.b      4
                    9167   _d6:
0B0000FC            9168          ds.b      4
                    9169   _d7:
0B000100            9170          ds.b      4
                    9171   _a0:
0B000104            9172          ds.b      4
                    9173   _a1:
0B000108            9174          ds.b      4
                    9175   _a2:
0B00010C            9176          ds.b      4
                    9177   _a3:
0B000110            9178          ds.b      4
                    9179   _a4:
0B000114            9180          ds.b      4
                    9181   _a5:
0B000118            9182          ds.b      4
                    9183   _a6:
0B00011C            9184          ds.b      4
                    9185   _PC:
0B000120            9186          ds.b      4
                    9187   _SSP:
0B000124            9188          ds.b      4
                    9189   _USP:
0B000128            9190          ds.b      4
                    9191   _SR:
0B00012C            9192          ds.b      2
                    9193   _BreakPointAddress:
0B00012E            9194          ds.b      32
                    9195   _BreakPointInstruction:
0B00014E            9196          ds.b      16
                    9197   _BreakPointSetOrCleared:
0B00015E            9198          ds.b      32
                    9199   _InstructionSize:
0B00017E            9200          ds.b      4
                    9201   _WatchPointAddress:
0B000182            9202          ds.b      32
                    9203   _WatchPointSetOrCleared:
0B0001A2            9204          ds.b      32
                    9205   _WatchPointString:
0B0001C2            9206          ds.b      800
                    9207   _TempString:
0B0004E2            9208          ds.b      100
                    9209          section   heap
0B000546            9210                   align
          0B00 0546 9211   bssEnd          equ *                   end of storage space for unitialised variables
                    9212   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 9213   heap   equ       *
0B000546            9214                    align
          0000 0000

Assembly errors: 0
