680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 10 Apr 2024      Time: 02:59:24          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\MUPDE1.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  2784      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  006C      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  2664      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  2668      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  27F0 0800 
08000034  266C      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  0FD0      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\MUPDE1.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <string.h>
                      47   ; #include <ctype.h>
                      48   ; //IMPORTANT
                      49   ; //
                      50   ; // Uncomment one of the two #defines below
                      51   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                      52   ; // 0B000000 for running programs from dram
                      53   ; //
                      54   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      55   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      56   ; // building
                      57   ; //
                      58   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      59   ; // is based around Dram so #define accordingly before building
                      60   ; //#define StartOfExceptionVectorTable 0x08030000
                      61   ; #define StartOfExceptionVectorTable 0x0B000000
                      62   ; /**********************************************************************************************
                      63   ; **	Parallel port addresses
                      64   ; **********************************************************************************************/
                      65   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      66   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      67   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      68   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      69   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      70   ; /*********************************************************************************************
                      71   ; **	Hex 7 seg displays port addresses
                      72   ; *********************************************************************************************/
                      73   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      74   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      75   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      76   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      77   ; /**********************************************************************************************
                      78   ; **	LCD display port addresses
                      79   ; **********************************************************************************************/
                      80   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      81   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      82   ; /********************************************************************************************
                      83   ; **	Timer Port addresses
                      84   ; *********************************************************************************************/
                      85   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      86   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      87   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      88   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      89   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      90   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      91   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      92   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      93   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      94   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      95   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      96   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      97   ; /*********************************************************************************************
                      98   ; **	RS232 port addresses
                      99   ; *********************************************************************************************/
                     100   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     101   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     102   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     103   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     104   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     105   ; /*********************************************************************************************
                     106   ; **	PIA 1 and 2 port addresses
                     107   ; *********************************************************************************************/
                     108   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     109   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     110   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     111   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     112   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     113   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     114   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     115   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     116   ; //////////////////////////////
                     117   ; // I2C Controller Registers //
                     118   ; //////////////////////////////
                     119   ; #define I2C_CLK_PRESCALE_LOW (*(volatile unsigned char *)(0x00408000))
                     120   ; #define I2C_CLK_PRESCALE_HIGH (*(volatile unsigned char *)(0x00408002))
                     121   ; #define I2C_CTRL (*(volatile unsigned char *)(0x00408004))
                     122   ; #define I2C_TX (*(volatile unsigned char *)(0x00408006))
                     123   ; #define I2C_RX (*(volatile unsigned char *)(0x00408006))
                     124   ; #define I2C_CMD (*(volatile unsigned char *)(0x00408008))
                     125   ; #define I2C_STAT (*(volatile unsigned char *)(0x00408008))
                     126   ; //////////////////
                     127   ; // I2C Commands //
                     128   ; //////////////////
                     129   ; #define I2C_CMD_Slave_Write_With_Start 0x91 // 1001 0001
                     130   ; #define I2C_CMD_Slave_Read_With_Start 0xA9  // 1010 1001
                     131   ; #define I2C_CMD_Slave_Write 0x11            // 0001 0001
                     132   ; #define I2C_CMD_Slave_Read 0x21             // 0010 0001
                     133   ; #define I2C_CMD_Slave_Read_Ack 0x29         // 0010 1001
                     134   ; #define I2C_CMD_Slave_Write_Stop 0x51       // 0101 0001
                     135   ; #define I2C_CMD_Slave_Read_Stop 0x49        // 0100 1001
                     136   ; /////////////////////
                     137   ; // EEPROM Commands //
                     138   ; /////////////////////
                     139   ; #define EEPROM_Write_Block_1 0xA2           // 1010 0010
                     140   ; #define EEPROM_Read_Block_1 0xA3            // 1010 0011
                     141   ; #define EEPROM_Write_Block_0 0xA0           // 1010 0000
                     142   ; #define EEPROM_Read_Block_0 0xA1            // 1010 0001
                     143   ; //////////////////////
                     144   ; // ADC/DAC Commands //
                     145   ; //////////////////////
                     146   ; #define ADC_DAC_Write_Address 0x90          // 1001 0000
                     147   ; #define ADC_Read_Address 0x91               // 1001 0001
                     148   ; #define ADC_CMD_Enable 0x44                 // 0100 0100
                     149   ; #define DAC_CMD_Enable 0x40                 // 0100 0000
                     150   ; #define Enable_I2C_Controller() I2C_CTRL = 0x80     // 1000 0000
                     151   ; /*********************************************************************************************
                     152   ; ** These addresses and definitions were taken from Appendix 7 of the Can Controller
                     153   ; ** application note and adapted for the 68k assignment
                     154   ; *********************************************************************************************/
                     155   ; /*
                     156   ; ** definition for the SJA1000 registers and bits based on 68k address map areas
                     157   ; ** assume the addresses for the 2 can controllers given in the assignment
                     158   ; **
                     159   ; ** Registers are defined in terms of the following Macro for each Can controller,
                     160   ; ** where (i) represents an registers number
                     161   ; */
                     162   ; #define CAN0_CONTROLLER(i) (*(volatile unsigned char *)(0x00500000 + (i << 1)))
                     163   ; #define CAN1_CONTROLLER(i) (*(volatile unsigned char *)(0x00500200 + (i << 1)))
                     164   ; /* Can 0 register definitions */
                     165   ; #define Can0_ModeControlReg      CAN0_CONTROLLER(0)
                     166   ; #define Can0_CommandReg          CAN0_CONTROLLER(1)
                     167   ; #define Can0_StatusReg           CAN0_CONTROLLER(2)
                     168   ; #define Can0_InterruptReg        CAN0_CONTROLLER(3)
                     169   ; #define Can0_InterruptEnReg      CAN0_CONTROLLER(4) /* PeliCAN mode */
                     170   ; #define Can0_BusTiming0Reg       CAN0_CONTROLLER(6)
                     171   ; #define Can0_BusTiming1Reg       CAN0_CONTROLLER(7)
                     172   ; #define Can0_OutControlReg       CAN0_CONTROLLER(8)
                     173   ; /* address definitions of Other Registers */
                     174   ; #define Can0_ArbLostCapReg       CAN0_CONTROLLER(11)
                     175   ; #define Can0_ErrCodeCapReg       CAN0_CONTROLLER(12)
                     176   ; #define Can0_ErrWarnLimitReg     CAN0_CONTROLLER(13)
                     177   ; #define Can0_RxErrCountReg       CAN0_CONTROLLER(14)
                     178   ; #define Can0_TxErrCountReg       CAN0_CONTROLLER(15)
                     179   ; #define Can0_RxMsgCountReg       CAN0_CONTROLLER(29)
                     180   ; #define Can0_RxBufStartAdr       CAN0_CONTROLLER(30)
                     181   ; #define Can0_ClockDivideReg      CAN0_CONTROLLER(31)
                     182   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                     183   ; #define Can0_AcceptCode0Reg      CAN0_CONTROLLER(16)
                     184   ; #define Can0_AcceptCode1Reg      CAN0_CONTROLLER(17)
                     185   ; #define Can0_AcceptCode2Reg      CAN0_CONTROLLER(18)
                     186   ; #define Can0_AcceptCode3Reg      CAN0_CONTROLLER(19)
                     187   ; #define Can0_AcceptMask0Reg      CAN0_CONTROLLER(20)
                     188   ; #define Can0_AcceptMask1Reg      CAN0_CONTROLLER(21)
                     189   ; #define Can0_AcceptMask2Reg      CAN0_CONTROLLER(22)
                     190   ; #define Can0_AcceptMask3Reg      CAN0_CONTROLLER(23)
                     191   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                     192   ; #define Can0_RxFrameInfo         CAN0_CONTROLLER(16)
                     193   ; #define Can0_RxBuffer1           CAN0_CONTROLLER(17)
                     194   ; #define Can0_RxBuffer2           CAN0_CONTROLLER(18)
                     195   ; #define Can0_RxBuffer3           CAN0_CONTROLLER(19)
                     196   ; #define Can0_RxBuffer4           CAN0_CONTROLLER(20)
                     197   ; #define Can0_RxBuffer5           CAN0_CONTROLLER(21)
                     198   ; #define Can0_RxBuffer6           CAN0_CONTROLLER(22)
                     199   ; #define Can0_RxBuffer7           CAN0_CONTROLLER(23)
                     200   ; #define Can0_RxBuffer8           CAN0_CONTROLLER(24)
                     201   ; #define Can0_RxBuffer9           CAN0_CONTROLLER(25)
                     202   ; #define Can0_RxBuffer10          CAN0_CONTROLLER(26)
                     203   ; #define Can0_RxBuffer11          CAN0_CONTROLLER(27)
                     204   ; #define Can0_RxBuffer12          CAN0_CONTROLLER(28)
                     205   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     206   ; #define Can0_TxFrameInfo         CAN0_CONTROLLER(16)
                     207   ; #define Can0_TxBuffer1           CAN0_CONTROLLER(17)
                     208   ; #define Can0_TxBuffer2           CAN0_CONTROLLER(18)
                     209   ; #define Can0_TxBuffer3           CAN0_CONTROLLER(19)
                     210   ; #define Can0_TxBuffer4           CAN0_CONTROLLER(20)
                     211   ; #define Can0_TxBuffer5           CAN0_CONTROLLER(21)
                     212   ; #define Can0_TxBuffer6           CAN0_CONTROLLER(22)
                     213   ; #define Can0_TxBuffer7           CAN0_CONTROLLER(23)
                     214   ; #define Can0_TxBuffer8           CAN0_CONTROLLER(24)
                     215   ; #define Can0_TxBuffer9           CAN0_CONTROLLER(25)
                     216   ; #define Can0_TxBuffer10          CAN0_CONTROLLER(26)
                     217   ; #define Can0_TxBuffer11          CAN0_CONTROLLER(27)
                     218   ; #define Can0_TxBuffer12          CAN0_CONTROLLER(28)
                     219   ; /* read only addresses */
                     220   ; #define Can0_TxFrameInfoRd       CAN0_CONTROLLER(96)
                     221   ; #define Can0_TxBufferRd1         CAN0_CONTROLLER(97)
                     222   ; #define Can0_TxBufferRd2         CAN0_CONTROLLER(98)
                     223   ; #define Can0_TxBufferRd3         CAN0_CONTROLLER(99)
                     224   ; #define Can0_TxBufferRd4         CAN0_CONTROLLER(100)
                     225   ; #define Can0_TxBufferRd5         CAN0_CONTROLLER(101)
                     226   ; #define Can0_TxBufferRd6         CAN0_CONTROLLER(102)
                     227   ; #define Can0_TxBufferRd7         CAN0_CONTROLLER(103)
                     228   ; #define Can0_TxBufferRd8         CAN0_CONTROLLER(104)
                     229   ; #define Can0_TxBufferRd9         CAN0_CONTROLLER(105)
                     230   ; #define Can0_TxBufferRd10        CAN0_CONTROLLER(106)
                     231   ; #define Can0_TxBufferRd11        CAN0_CONTROLLER(107)
                     232   ; #define Can0_TxBufferRd12        CAN0_CONTROLLER(108)
                     233   ; /* CAN1 Controller register definitions */
                     234   ; #define Can1_ModeControlReg      CAN1_CONTROLLER(0)
                     235   ; #define Can1_CommandReg          CAN1_CONTROLLER(1)
                     236   ; #define Can1_StatusReg           CAN1_CONTROLLER(2)
                     237   ; #define Can1_InterruptReg        CAN1_CONTROLLER(3)
                     238   ; #define Can1_InterruptEnReg      CAN1_CONTROLLER(4) /* PeliCAN mode */
                     239   ; #define Can1_BusTiming0Reg       CAN1_CONTROLLER(6)
                     240   ; #define Can1_BusTiming1Reg       CAN1_CONTROLLER(7)
                     241   ; #define Can1_OutControlReg       CAN1_CONTROLLER(8)
                     242   ; /* address definitions of Other Registers */
                     243   ; #define Can1_ArbLostCapReg       CAN1_CONTROLLER(11)
                     244   ; #define Can1_ErrCodeCapReg       CAN1_CONTROLLER(12)
                     245   ; #define Can1_ErrWarnLimitReg     CAN1_CONTROLLER(13)
                     246   ; #define Can1_RxErrCountReg       CAN1_CONTROLLER(14)
                     247   ; #define Can1_TxErrCountReg       CAN1_CONTROLLER(15)
                     248   ; #define Can1_RxMsgCountReg       CAN1_CONTROLLER(29)
                     249   ; #define Can1_RxBufStartAdr       CAN1_CONTROLLER(30)
                     250   ; #define Can1_ClockDivideReg      CAN1_CONTROLLER(31)
                     251   ; /* address definitions of Acceptance Code & Mask Registers - RESET MODE */
                     252   ; #define Can1_AcceptCode0Reg      CAN1_CONTROLLER(16)
                     253   ; #define Can1_AcceptCode1Reg      CAN1_CONTROLLER(17)
                     254   ; #define Can1_AcceptCode2Reg      CAN1_CONTROLLER(18)
                     255   ; #define Can1_AcceptCode3Reg      CAN1_CONTROLLER(19)
                     256   ; #define Can1_AcceptMask0Reg      CAN1_CONTROLLER(20)
                     257   ; #define Can1_AcceptMask1Reg      CAN1_CONTROLLER(21)
                     258   ; #define Can1_AcceptMask2Reg      CAN1_CONTROLLER(22)
                     259   ; #define Can1_AcceptMask3Reg      CAN1_CONTROLLER(23)
                     260   ; /* address definitions Rx Buffer - OPERATING MODE - Read only register*/
                     261   ; #define Can1_RxFrameInfo         CAN1_CONTROLLER(16)
                     262   ; #define Can1_RxBuffer1           CAN1_CONTROLLER(17)
                     263   ; #define Can1_RxBuffer2           CAN1_CONTROLLER(18)
                     264   ; #define Can1_RxBuffer3           CAN1_CONTROLLER(19)
                     265   ; #define Can1_RxBuffer4           CAN1_CONTROLLER(20)
                     266   ; #define Can1_RxBuffer5           CAN1_CONTROLLER(21)
                     267   ; #define Can1_RxBuffer6           CAN1_CONTROLLER(22)
                     268   ; #define Can1_RxBuffer7           CAN1_CONTROLLER(23)
                     269   ; #define Can1_RxBuffer8           CAN1_CONTROLLER(24)
                     270   ; #define Can1_RxBuffer9           CAN1_CONTROLLER(25)
                     271   ; #define Can1_RxBuffer10          CAN1_CONTROLLER(26)
                     272   ; #define Can1_RxBuffer11          CAN1_CONTROLLER(27)
                     273   ; #define Can1_RxBuffer12          CAN1_CONTROLLER(28)
                     274   ; /* address definitions of the Tx-Buffer - OPERATING MODE - Write only register */
                     275   ; #define Can1_TxFrameInfo         CAN1_CONTROLLER(16)
                     276   ; #define Can1_TxBuffer1           CAN1_CONTROLLER(17)
                     277   ; #define Can1_TxBuffer2           CAN1_CONTROLLER(18)
                     278   ; #define Can1_TxBuffer3           CAN1_CONTROLLER(19)
                     279   ; #define Can1_TxBuffer4           CAN1_CONTROLLER(20)
                     280   ; #define Can1_TxBuffer5           CAN1_CONTROLLER(21)
                     281   ; #define Can1_TxBuffer6           CAN1_CONTROLLER(22)
                     282   ; #define Can1_TxBuffer7           CAN1_CONTROLLER(23)
                     283   ; #define Can1_TxBuffer8           CAN1_CONTROLLER(24)
                     284   ; #define Can1_TxBuffer9           CAN1_CONTROLLER(25)
                     285   ; #define Can1_TxBuffer10          CAN1_CONTROLLER(26)
                     286   ; #define Can1_TxBuffer11          CAN1_CONTROLLER(27)
                     287   ; #define Can1_TxBuffer12          CAN1_CONTROLLER(28)
                     288   ; /* read only addresses */
                     289   ; #define Can1_TxFrameInfoRd       CAN1_CONTROLLER(96)
                     290   ; #define Can1_TxBufferRd1         CAN1_CONTROLLER(97)
                     291   ; #define Can1_TxBufferRd2         CAN1_CONTROLLER(98)
                     292   ; #define Can1_TxBufferRd3         CAN1_CONTROLLER(99)
                     293   ; #define Can1_TxBufferRd4         CAN1_CONTROLLER(100)
                     294   ; #define Can1_TxBufferRd5         CAN1_CONTROLLER(101)
                     295   ; #define Can1_TxBufferRd6         CAN1_CONTROLLER(102)
                     296   ; #define Can1_TxBufferRd7         CAN1_CONTROLLER(103)
                     297   ; #define Can1_TxBufferRd8         CAN1_CONTROLLER(104)
                     298   ; #define Can1_TxBufferRd9         CAN1_CONTROLLER(105)
                     299   ; #define Can1_TxBufferRd10        CAN1_CONTROLLER(106)
                     300   ; #define Can1_TxBufferRd11        CAN1_CONTROLLER(107)
                     301   ; #define Can1_TxBufferRd12        CAN1_CONTROLLER(108)
                     302   ; /* bit definitions for the Mode & Control Register */
                     303   ; #define RM_RR_Bit 0x01 /* reset mode (request) bit */
                     304   ; #define LOM_Bit 0x02 /* listen only mode bit */
                     305   ; #define STM_Bit 0x04 /* self test mode bit */
                     306   ; #define AFM_Bit 0x08 /* acceptance filter mode bit */
                     307   ; #define SM_Bit  0x10 /* enter sleep mode bit */
                     308   ; /* bit definitions for the Interrupt Enable & Control Register */
                     309   ; #define RIE_Bit 0x01 /* receive interrupt enable bit */
                     310   ; #define TIE_Bit 0x02 /* transmit interrupt enable bit */
                     311   ; #define EIE_Bit 0x04 /* error warning interrupt enable bit */
                     312   ; #define DOIE_Bit 0x08 /* data overrun interrupt enable bit */
                     313   ; #define WUIE_Bit 0x10 /* wake-up interrupt enable bit */
                     314   ; #define EPIE_Bit 0x20 /* error passive interrupt enable bit */
                     315   ; #define ALIE_Bit 0x40 /* arbitration lost interr. enable bit*/
                     316   ; #define BEIE_Bit 0x80 /* bus error interrupt enable bit */
                     317   ; /* bit definitions for the Command Register */
                     318   ; #define TR_Bit 0x01 /* transmission request bit */
                     319   ; #define AT_Bit 0x02 /* abort transmission bit */
                     320   ; #define RRB_Bit 0x04 /* release receive buffer bit */
                     321   ; #define CDO_Bit 0x08 /* clear data overrun bit */
                     322   ; #define SRR_Bit 0x10 /* self reception request bit */
                     323   ; /* bit definitions for the Status Register */
                     324   ; #define RBS_Bit 0x01 /* receive buffer status bit */
                     325   ; #define DOS_Bit 0x02 /* data overrun status bit */
                     326   ; #define TBS_Bit 0x04 /* transmit buffer status bit */
                     327   ; #define TCS_Bit 0x08 /* transmission complete status bit */
                     328   ; #define RS_Bit 0x10 /* receive status bit */
                     329   ; #define TS_Bit 0x20 /* transmit status bit */
                     330   ; #define ES_Bit 0x40 /* error status bit */
                     331   ; #define BS_Bit 0x80 /* bus status bit */
                     332   ; /* bit definitions for the Interrupt Register */
                     333   ; #define RI_Bit 0x01 /* receive interrupt bit */
                     334   ; #define TI_Bit 0x02 /* transmit interrupt bit */
                     335   ; #define EI_Bit 0x04 /* error warning interrupt bit */
                     336   ; #define DOI_Bit 0x08 /* data overrun interrupt bit */
                     337   ; #define WUI_Bit 0x10 /* wake-up interrupt bit */
                     338   ; #define EPI_Bit 0x20 /* error passive interrupt bit */
                     339   ; #define ALI_Bit 0x40 /* arbitration lost interrupt bit */
                     340   ; #define BEI_Bit 0x80 /* bus error interrupt bit */
                     341   ; /* bit definitions for the Bus Timing Registers */
                     342   ; #define SAM_Bit 0x80                        /* sample mode bit 1 == the bus is sampled 3 times, 0 == the bus is sampled once */
                     343   ; /* bit definitions for the Output Control Register OCMODE1, OCMODE0 */
                     344   ; #define BiPhaseMode 0x00 /* bi-phase output mode */
                     345   ; #define NormalMode 0x02 /* normal output mode */
                     346   ; #define ClkOutMode 0x03 /* clock output mode */
                     347   ; /* output pin configuration for TX1 */
                     348   ; #define OCPOL1_Bit 0x20 /* output polarity control bit */
                     349   ; #define Tx1Float 0x00 /* configured as float */
                     350   ; #define Tx1PullDn 0x40 /* configured as pull-down */
                     351   ; #define Tx1PullUp 0x80 /* configured as pull-up */
                     352   ; #define Tx1PshPull 0xC0 /* configured as push/pull */
                     353   ; /* output pin configuration for TX0 */
                     354   ; #define OCPOL0_Bit 0x04 /* output polarity control bit */
                     355   ; #define Tx0Float 0x00 /* configured as float */
                     356   ; #define Tx0PullDn 0x08 /* configured as pull-down */
                     357   ; #define Tx0PullUp 0x10 /* configured as pull-up */
                     358   ; #define Tx0PshPull 0x18 /* configured as push/pull */
                     359   ; /* bit definitions for the Clock Divider Register */
                     360   ; #define DivBy1 0x07 /* CLKOUT = oscillator frequency */
                     361   ; #define DivBy2 0x00 /* CLKOUT = 1/2 oscillator frequency */
                     362   ; #define ClkOff_Bit 0x08 /* clock off bit, control of the CLK OUT pin */
                     363   ; #define RXINTEN_Bit 0x20 /* pin TX1 used for receive interrupt */
                     364   ; #define CBP_Bit 0x40 /* CAN comparator bypass control bit */
                     365   ; #define CANMode_Bit 0x80 /* CAN mode definition bit */
                     366   ; /*- definition of used constants ---------------------------------------*/
                     367   ; #define YES 1
                     368   ; #define NO 0
                     369   ; #define ENABLE 1
                     370   ; #define DISABLE 0
                     371   ; #define ENABLE_N 0
                     372   ; #define DISABLE_N 1
                     373   ; #define INTLEVELACT 0
                     374   ; #define INTEDGEACT 1
                     375   ; #define PRIORITY_LOW 0
                     376   ; #define PRIORITY_HIGH 1
                     377   ; /* default (reset) value for register content, clear register */
                     378   ; #define ClrByte 0x00
                     379   ; /* constant: clear Interrupt Enable Register */
                     380   ; #define ClrIntEnSJA ClrByte
                     381   ; /* definitions for the acceptance code and mask register */
                     382   ; #define DontCare 0xFF
                     383   ; /*  bus timing values for
                     384   ; **  bit-rate : 100 kBit/s
                     385   ; **  oscillator frequency : 25 MHz, 1 sample per bit, 0 tolerance %
                     386   ; **  maximum tolerated propagation delay : 4450 ns
                     387   ; **  minimum requested propagation delay : 500 ns
                     388   ; **
                     389   ; **  https://www.kvaser.com/support/calculators/bit-timing-calculator/
                     390   ; **  T1 	T2 	BTQ 	SP% 	SJW 	BIT RATE 	ERR% 	BTR0 	BTR1
                     391   ; **  17	8	25	    68	     1	      100	    0	      04	7f
                     392   ; */
                     393   ; #define BTR0 0x04
                     394   ; #define BTR1 0x7f
                     395   ; /*********************************************************************************************************************************
                     396   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     397   ; (( it's a limitation of the compiler
                     398   ; (( YOU HAVE BEEN WARNED
                     399   ; *********************************************************************************************************************************/
                     400   ; unsigned int i, x, y, z, PortA_Count;
                     401   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     402   ; /*******************************************************************************************
                     403   ; ** Function Prototypes
                     404   ; *******************************************************************************************/
                     405   ; void Wait1ms(void);
                     406   ; void Wait3ms(void);
                     407   ; void Init_LCD(void) ;
                     408   ; void LCDOutchar(int c);
                     409   ; void LCDOutMess(char *theMessage);
                     410   ; void LCDClearln(void);
                     411   ; void LCDline1Message(char *theMessage);
                     412   ; void LCDline2Message(char *theMessage);
                     413   ; int sprintf(char *out, const char *format, ...) ;
                     414   ; // initialisation for Can controller 0
                     415   ; void Init_CanBus_Controller0(void);
                     416   ; // initialisation for Can controller 1
                     417   ; void Init_CanBus_Controller1(void);
                     418   ; // Transmit for sending a message via Can controller 0
                     419   ; void CanBus0_Transmit(int id, char data);
                     420   ; // Transmit for sending a message via Can controller 1
                     421   ; void CanBus1_Transmit(int id, char data);
                     422   ; // Receive for reading a received message via Can controller 0
                     423   ; void CanBus0_Receive(void);
                     424   ; // Receive for reading a received message via Can controller 1
                     425   ; void CanBus1_Receive(void);
                     426   ; void CanBusTest(void);
                     427   ; // I2C prototypes
                     428   ; void I2C_Init(void);
                     429   ; void WriteI2CInteraction(int block, unsigned int Address, unsigned char AddressMSB, unsigned char AddressLSB, unsigned char data, int flag);
                     430   ; void PageWriteI2CInteraction(unsigned int AddressFrom, unsigned int AddressTo, unsigned char data);
                     431   ; void ReadI2CByteInteraction(int block, unsigned int Address, unsigned char AddressMSB, unsigned char AddressLSB);
                     432   ; void ReadI2CSequential(int block, int AddressTo, int AddressFrom,  unsigned int ChipAddress);
                     433   ; void DACWrite(void);
                     434   ; char ADCRead(int);
                     435   ; void WriteI2C(void);
                     436   ; void ReadI2C(void);
                     437   ; void PageWriteI2C(void);
                     438   ; void SeqReadI2C(void);
                     439   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     440   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     441   ; void FlushKeyboard(void)
                     442   ; {
                     443   _FlushKeyboard:
0800003E  4E56 FFFC  444          link      A6,#-4
                     445   ; char c ;
                     446   ; while(1)    {
                     447   FlushKeyboard_1:
                     448   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
08000042  1039 0040  449          move.b    4194368,D0
08000046  0040      
08000048  C03C 0001  450          and.b     #1,D0
0800004C  0C00 0001  451          cmp.b     #1,D0
08000050  6610       452          bne.s     FlushKeyboard_4
                     453   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
08000052  1039 0040  454          move.b    4194370,D0
08000056  0042      
08000058  C03C 007F  455          and.b     #127,D0
0800005C  1D40 FFFF  456          move.b    D0,-1(A6)
08000060  6002       457          bra.s     FlushKeyboard_5
                     458   FlushKeyboard_4:
                     459   ; else
                     460   ; return ;
08000062  6002       461          bra.s     FlushKeyboard_6
                     462   FlushKeyboard_5:
08000064  60DC       463          bra       FlushKeyboard_1
                     464   FlushKeyboard_6:
08000066  4E5E       465          unlk      A6
08000068  4E75       466          rts
                     467   ; }
                     468   ; }
                     469   ; char xtod(int c)
                     470   ; {
                     471   _xtod:
0800006A  4E56 0000  472          link      A6,#0
0800006E  2F02       473          move.l    D2,-(A7)
08000070  242E 0008  474          move.l    8(A6),D2
                     475   ; if ((char)(c) <= (char)('9'))
08000074  0C02 0039  476          cmp.b     #57,D2
08000078  6E08       477          bgt.s     xtod_1
                     478   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0800007A  1002       479          move.b    D2,D0
0800007C  0400 0030  480          sub.b     #48,D0
08000080  6014       481          bra.s     xtod_3
                     482   xtod_1:
                     483   ; else if((char)(c) > (char)('F'))    // assume lower case
08000082  0C02 0046  484          cmp.b     #70,D2
08000086  6F08       485          ble.s     xtod_4
                     486   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
08000088  1002       487          move.b    D2,D0
0800008A  0400 0057  488          sub.b     #87,D0
0800008E  6006       489          bra.s     xtod_3
                     490   xtod_4:
                     491   ; else
                     492   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
08000090  1002       493          move.b    D2,D0
08000092  0400 0037  494          sub.b     #55,D0
                     495   xtod_3:
08000096  241F       496          move.l    (A7)+,D2
08000098  4E5E       497          unlk      A6
0800009A  4E75       498          rts
                     499   ; }
                     500   ; int Get2HexDigits(char *CheckSumPtr)
                     501   ; {
                     502   _Get2HexDigits:
0800009C  4E56 0000  503          link      A6,#0
080000A0  2F02       504          move.l    D2,-(A7)
                     505   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
080000A2  2F00       506          move.l    D0,-(A7)
080000A4  4EB9 0800  507          jsr       __getch
080000A8  035C      
080000AA  2200       508          move.l    D0,D1
080000AC  201F       509          move.l    (A7)+,D0
080000AE  2F01       510          move.l    D1,-(A7)
080000B0  4EB9 0800  511          jsr       _xtod
080000B4  006A      
080000B6  584F       512          addq.w    #4,A7
080000B8  C0BC 0000  513          and.l     #255,D0
080000BC  00FF      
080000BE  E980       514          asl.l     #4,D0
080000C0  2F00       515          move.l    D0,-(A7)
080000C2  2F01       516          move.l    D1,-(A7)
080000C4  4EB9 0800  517          jsr       __getch
080000C8  035C      
080000CA  221F       518          move.l    (A7)+,D1
080000CC  2F00       519          move.l    D0,-(A7)
080000CE  4EB9 0800  520          jsr       _xtod
080000D2  006A      
080000D4  584F       521          addq.w    #4,A7
080000D6  2200       522          move.l    D0,D1
080000D8  201F       523          move.l    (A7)+,D0
080000DA  C2BC 0000  524          and.l     #255,D1
080000DE  00FF      
080000E0  8081       525          or.l      D1,D0
080000E2  2400       526          move.l    D0,D2
                     527   ; if(CheckSumPtr)
080000E4  4AAE 0008  528          tst.l     8(A6)
080000E8  6706       529          beq.s     Get2HexDigits_1
                     530   ; *CheckSumPtr += i ;
080000EA  206E 0008  531          move.l    8(A6),A0
080000EE  D510       532          add.b     D2,(A0)
                     533   Get2HexDigits_1:
                     534   ; return i ;
080000F0  2002       535          move.l    D2,D0
080000F2  241F       536          move.l    (A7)+,D2
080000F4  4E5E       537          unlk      A6
080000F6  4E75       538          rts
                     539   ; }
                     540   ; int Get4HexDigits(char *CheckSumPtr)
                     541   ; {
                     542   _Get4HexDigits:
080000F8  4E56 0000  543          link      A6,#0
                     544   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000FC  2F2E 0008  545          move.l    8(A6),-(A7)
08000100  4EB9 0800  546          jsr       _Get2HexDigits
08000104  009C      
08000106  584F       547          addq.w    #4,A7
08000108  E180       548          asl.l     #8,D0
0800010A  2F00       549          move.l    D0,-(A7)
0800010C  2F2E 0008  550          move.l    8(A6),-(A7)
08000110  4EB9 0800  551          jsr       _Get2HexDigits
08000114  009C      
08000116  584F       552          addq.w    #4,A7
08000118  2200       553          move.l    D0,D1
0800011A  201F       554          move.l    (A7)+,D0
0800011C  8081       555          or.l      D1,D0
0800011E  4E5E       556          unlk      A6
08000120  4E75       557          rts
                     558   ; }
                     559   ; int Get6HexDigits(char *CheckSumPtr)
                     560   ; {
                     561   _Get6HexDigits:
08000122  4E56 0000  562          link      A6,#0
                     563   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
08000126  2F2E 0008  564          move.l    8(A6),-(A7)
0800012A  4EB9 0800  565          jsr       _Get4HexDigits
0800012E  00F8      
08000130  584F       566          addq.w    #4,A7
08000132  E180       567          asl.l     #8,D0
08000134  2F00       568          move.l    D0,-(A7)
08000136  2F2E 0008  569          move.l    8(A6),-(A7)
0800013A  4EB9 0800  570          jsr       _Get2HexDigits
0800013E  009C      
08000140  584F       571          addq.w    #4,A7
08000142  2200       572          move.l    D0,D1
08000144  201F       573          move.l    (A7)+,D0
08000146  8081       574          or.l      D1,D0
08000148  4E5E       575          unlk      A6
0800014A  4E75       576          rts
                     577   ; }
                     578   ; int Get8HexDigits(char *CheckSumPtr)
                     579   ; {
                     580   _Get8HexDigits:
0800014C  4E56 0000  581          link      A6,#0
                     582   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
08000150  2F2E 0008  583          move.l    8(A6),-(A7)
08000154  4EB9 0800  584          jsr       _Get4HexDigits
08000158  00F8      
0800015A  584F       585          addq.w    #4,A7
0800015C  E180       586          asl.l     #8,D0
0800015E  E180       587          asl.l     #8,D0
08000160  2F00       588          move.l    D0,-(A7)
08000162  2F2E 0008  589          move.l    8(A6),-(A7)
08000166  4EB9 0800  590          jsr       _Get4HexDigits
0800016A  00F8      
0800016C  584F       591          addq.w    #4,A7
0800016E  2200       592          move.l    D0,D1
08000170  201F       593          move.l    (A7)+,D0
08000172  8081       594          or.l      D1,D0
08000174  4E5E       595          unlk      A6
08000176  4E75       596          rts
                     597   ; }
                     598   ; /*****************************************************************************************
                     599   ; **	Interrupt service routine for Timers
                     600   ; **
                     601   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     602   ; **  out which timer is producing the interrupt
                     603   ; **
                     604   ; *****************************************************************************************/
                     605   ; void Timer_ISR()
                     606   ; {
                     607   _Timer_ISR:
08000178  48E7 0030  608          movem.l   A2/A3,-(A7)
0800017C  45F9 0800  609          lea       _CanBus0_Transmit.L,A2
08000180  0D94      
08000182  47F9 0800  610          lea       _ADCRead.L,A3
08000186  0B98      
                     611   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
08000188  1039 0040  612          move.b    4194354,D0
0800018C  0032      
0800018E  0C00 0001  613          cmp.b     #1,D0
08000192  6600 00BC  614          bne       Timer_ISR_1
                     615   ; CanBus0_Transmit(0, PortA); // every 100ms
08000196  1239 0040  616          move.b    4194304,D1
0800019A  0000      
0800019C  4881       617          ext.w     D1
0800019E  48C1       618          ext.l     D1
080001A0  2F01       619          move.l    D1,-(A7)
080001A2  42A7       620          clr.l     -(A7)
080001A4  4E92       621          jsr       (A2)
080001A6  504F       622          addq.w    #8,A7
                     623   ; if (Timer1Count % 2 == 0) {
080001A8  1039 0800  624          move.b    _Timer1Count.L,D0
080001AC  2798      
080001AE  C0BC 0000  625          and.l     #65535,D0
080001B2  FFFF      
080001B4  80FC 0002  626          divu.w    #2,D0
080001B8  4840       627          swap      D0
080001BA  4A00       628          tst.b     D0
080001BC  661C       629          bne.s     Timer_ISR_3
                     630   ; CanBus0_Transmit(1, ADCRead(1)); // read the value of the ADC potentiometer(from Lab 5) every 200ms
080001BE  2F00       631          move.l    D0,-(A7)
080001C0  4878 0001  632          pea       1
080001C4  4E93       633          jsr       (A3)
080001C6  584F       634          addq.w    #4,A7
080001C8  2200       635          move.l    D0,D1
080001CA  201F       636          move.l    (A7)+,D0
080001CC  4881       637          ext.w     D1
080001CE  48C1       638          ext.l     D1
080001D0  2F01       639          move.l    D1,-(A7)
080001D2  4878 0001  640          pea       1
080001D6  4E92       641          jsr       (A2)
080001D8  504F       642          addq.w    #8,A7
                     643   Timer_ISR_3:
                     644   ; }
                     645   ; if (Timer1Count % 5 == 0) {
080001DA  1039 0800  646          move.b    _Timer1Count.L,D0
080001DE  2798      
080001E0  C0BC 0000  647          and.l     #65535,D0
080001E4  FFFF      
080001E6  80FC 0005  648          divu.w    #5,D0
080001EA  4840       649          swap      D0
080001EC  4A00       650          tst.b     D0
080001EE  661C       651          bne.s     Timer_ISR_5
                     652   ; CanBus0_Transmit(2, ADCRead(2));
080001F0  2F00       653          move.l    D0,-(A7)
080001F2  4878 0002  654          pea       2
080001F6  4E93       655          jsr       (A3)
080001F8  584F       656          addq.w    #4,A7
080001FA  2200       657          move.l    D0,D1
080001FC  201F       658          move.l    (A7)+,D0
080001FE  4881       659          ext.w     D1
08000200  48C1       660          ext.l     D1
08000202  2F01       661          move.l    D1,-(A7)
08000204  4878 0002  662          pea       2
08000208  4E92       663          jsr       (A2)
0800020A  504F       664          addq.w    #8,A7
                     665   Timer_ISR_5:
                     666   ; }
                     667   ; if (Timer1Count % 20 == 0) {
0800020C  1039 0800  668          move.b    _Timer1Count.L,D0
08000210  2798      
08000212  C0BC 0000  669          and.l     #65535,D0
08000216  FFFF      
08000218  80FC 0014  670          divu.w    #20,D0
0800021C  4840       671          swap      D0
0800021E  4A00       672          tst.b     D0
08000220  6620       673          bne.s     Timer_ISR_7
                     674   ; CanBus0_Transmit(3, ADCRead(0));
08000222  2F00       675          move.l    D0,-(A7)
08000224  42A7       676          clr.l     -(A7)
08000226  4E93       677          jsr       (A3)
08000228  584F       678          addq.w    #4,A7
0800022A  2200       679          move.l    D0,D1
0800022C  201F       680          move.l    (A7)+,D0
0800022E  4881       681          ext.w     D1
08000230  48C1       682          ext.l     D1
08000232  2F01       683          move.l    D1,-(A7)
08000234  4878 0003  684          pea       3
08000238  4E92       685          jsr       (A2)
0800023A  504F       686          addq.w    #8,A7
                     687   ; Timer1Count = 0;
0800023C  4239 0800  688          clr.b     _Timer1Count.L
08000240  2798      
                     689   Timer_ISR_7:
                     690   ; }
                     691   ; Timer1Count++ ;     
08000242  5239 0800  692          addq.b    #1,_Timer1Count.L
08000246  2798      
                     693   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000248  13FC 0003  694          move.b    #3,4194354
0800024C  0040 0032 
                     695   Timer_ISR_1:
                     696   ; }
                     697   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
08000250  1039 0040  698          move.b    4194358,D0
08000254  0036      
08000256  0C00 0001  699          cmp.b     #1,D0
0800025A  661A       700          bne.s     Timer_ISR_9
                     701   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800025C  13FC 0003  702          move.b    #3,4194358
08000260  0040 0036 
                     703   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
08000264  1039 0800  704          move.b    _Timer2Count.L,D0
08000268  279A      
0800026A  5239 0800  705          addq.b    #1,_Timer2Count.L
0800026E  279A      
08000270  13C0 0040  706          move.b    D0,4194308
08000274  0004      
                     707   Timer_ISR_9:
                     708   ; }
                     709   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
08000276  1039 0040  710          move.b    4194362,D0
0800027A  003A      
0800027C  0C00 0001  711          cmp.b     #1,D0
08000280  661A       712          bne.s     Timer_ISR_11
                     713   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000282  13FC 0003  714          move.b    #3,4194362
08000286  0040 003A 
                     715   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
0800028A  1039 0800  716          move.b    _Timer3Count.L,D0
0800028E  279C      
08000290  5239 0800  717          addq.b    #1,_Timer3Count.L
08000294  279C      
08000296  13C0 0040  718          move.b    D0,4194320
0800029A  0010      
                     719   Timer_ISR_11:
                     720   ; }
                     721   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
0800029C  1039 0040  722          move.b    4194366,D0
080002A0  003E      
080002A2  0C00 0001  723          cmp.b     #1,D0
080002A6  661A       724          bne.s     Timer_ISR_13
                     725   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080002A8  13FC 0003  726          move.b    #3,4194366
080002AC  0040 003E 
                     727   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
080002B0  1039 0800  728          move.b    _Timer4Count.L,D0
080002B4  279E      
080002B6  5239 0800  729          addq.b    #1,_Timer4Count.L
080002BA  279E      
080002BC  13C0 0040  730          move.b    D0,4194322
080002C0  0012      
                     731   Timer_ISR_13:
080002C2  4CDF 0C00  732          movem.l   (A7)+,A2/A3
080002C6  4E75       733          rts
                     734   ; }
                     735   ; }
                     736   ; /*****************************************************************************************
                     737   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     738   ; **  Add your code here to poll Status register and clear interrupt
                     739   ; *****************************************************************************************/
                     740   ; void ACIA_ISR()
                     741   ; {}
                     742   _ACIA_ISR:
080002C8  4E75       743          rts
                     744   ; /***************************************************************************************
                     745   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     746   ; **  Add your code here to poll Status register and clear interrupt
                     747   ; *****************************************************************************************/
                     748   ; void PIA_ISR()
                     749   ; {}
                     750   _PIA_ISR:
080002CA  4E75       751          rts
                     752   ; /***********************************************************************************
                     753   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     754   ; ************************************************************************************/
                     755   ; void Key2PressISR()
                     756   ; {}
                     757   _Key2PressISR:
080002CC  4E75       758          rts
                     759   ; /***********************************************************************************
                     760   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     761   ; ************************************************************************************/
                     762   ; void Key1PressISR()
                     763   ; {}
                     764   _Key1PressISR:
080002CE  4E75       765          rts
                     766   ; /************************************************************************************
                     767   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     768   ; ************************************************************************************/
                     769   ; void Wait1ms(void)
                     770   ; {
                     771   _Wait1ms:
080002D0  2F02       772          move.l    D2,-(A7)
                     773   ; int  i ;
                     774   ; for(i = 0; i < 1000; i ++)
080002D2  4282       775          clr.l     D2
                     776   Wait1ms_1:
080002D4  0C82 0000  777          cmp.l     #1000,D2
080002D8  03E8      
080002DA  6C04       778          bge.s     Wait1ms_3
080002DC  5282       779          addq.l    #1,D2
080002DE  60F4       780          bra       Wait1ms_1
                     781   Wait1ms_3:
080002E0  241F       782          move.l    (A7)+,D2
080002E2  4E75       783          rts
                     784   ; ;
                     785   ; }
                     786   ; /************************************************************************************
                     787   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     788   ; **************************************************************************************/
                     789   ; void Wait3ms(void)
                     790   ; {
                     791   _Wait3ms:
080002E4  2F02       792          move.l    D2,-(A7)
                     793   ; int i ;
                     794   ; for(i = 0; i < 3; i++)
080002E6  4282       795          clr.l     D2
                     796   Wait3ms_1:
080002E8  0C82 0000  797          cmp.l     #3,D2
080002EC  0003      
080002EE  6C0A       798          bge.s     Wait3ms_3
                     799   ; Wait1ms() ;
080002F0  4EB9 0800  800          jsr       _Wait1ms
080002F4  02D0      
080002F6  5282       801          addq.l    #1,D2
080002F8  60EE       802          bra       Wait3ms_1
                     803   Wait3ms_3:
080002FA  241F       804          move.l    (A7)+,D2
080002FC  4E75       805          rts
                     806   ; }
                     807   ; /*********************************************************************************************
                     808   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     809   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     810   ; *********************************************************************************************/
                     811   ; void Init_LCD(void)
                     812   ; {
                     813   _Init_LCD:
                     814   ; LCDcommand = 0x0c ;
080002FE  13FC 000C  815          move.b    #12,4194336
08000302  0040 0020 
                     816   ; Wait3ms() ;
08000306  4EB9 0800  817          jsr       _Wait3ms
0800030A  02E4      
                     818   ; LCDcommand = 0x38 ;
0800030C  13FC 0038  819          move.b    #56,4194336
08000310  0040 0020 
                     820   ; Wait3ms() ;
08000314  4EB9 0800  821          jsr       _Wait3ms
08000318  02E4      
0800031A  4E75       822          rts
                     823   ; }
                     824   ; /*********************************************************************************************
                     825   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     826   ; *********************************************************************************************/
                     827   ; void Init_RS232(void)
                     828   ; {
                     829   _Init_RS232:
                     830   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
0800031C  13FC 0015  831          move.b    #21,4194368
08000320  0040 0040 
                     832   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000324  13FC 0001  833          move.b    #1,4194372
08000328  0040 0044 
0800032C  4E75       834          rts
                     835   ; }
                     836   ; /*********************************************************************************************************
                     837   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     838   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     839   ; **  to allow the board to communicate with HyperTerminal Program
                     840   ; **
                     841   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     842   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     843   ; **  call _putch() also
                     844   ; *********************************************************************************************************/
                     845   ; int _putch( int c)
                     846   ; {
                     847   __putch:
0800032E  4E56 0000  848          link      A6,#0
                     849   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     850   _putch_1:
08000332  1039 0040  851          move.b    4194368,D0
08000336  0040      
08000338  C03C 0002  852          and.b     #2,D0
0800033C  0C00 0002  853          cmp.b     #2,D0
08000340  6702       854          beq.s     _putch_3
08000342  60EE       855          bra       _putch_1
                     856   _putch_3:
                     857   ; ;
                     858   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
08000344  202E 0008  859          move.l    8(A6),D0
08000348  C0BC 0000  860          and.l     #127,D0
0800034C  007F      
0800034E  13C0 0040  861          move.b    D0,4194370
08000352  0042      
                     862   ; return c ;                                              // putchar() expects the character to be returned
08000354  202E 0008  863          move.l    8(A6),D0
08000358  4E5E       864          unlk      A6
0800035A  4E75       865          rts
                     866   ; }
                     867   ; /*********************************************************************************************************
                     868   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     869   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     870   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     871   ; **
                     872   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     873   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     874   ; **  call _getch() also
                     875   ; *********************************************************************************************************/
                     876   ; int _getch( void )
                     877   ; {
                     878   __getch:
0800035C  4E56 FFFC  879          link      A6,#-4
                     880   ; char c ;
                     881   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     882   _getch_1:
08000360  1039 0040  883          move.b    4194368,D0
08000364  0040      
08000366  C03C 0001  884          and.b     #1,D0
0800036A  0C00 0001  885          cmp.b     #1,D0
0800036E  6702       886          beq.s     _getch_3
08000370  60EE       887          bra       _getch_1
                     888   _getch_3:
                     889   ; ;
                     890   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
08000372  1039 0040  891          move.b    4194370,D0
08000376  0042      
08000378  C0BC 0000  892          and.l     #255,D0
0800037C  00FF      
0800037E  C0BC 0000  893          and.l     #127,D0
08000382  007F      
08000384  4E5E       894          unlk      A6
08000386  4E75       895          rts
                     896   ; }
                     897   ; /******************************************************************************
                     898   ; **  Subroutine to output a single character to the 2 row LCD display
                     899   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     900   ; **  current cursor position
                     901   ; *******************************************************************************/
                     902   ; void LCDOutchar(int c)
                     903   ; {
                     904   _LCDOutchar:
08000388  4E56 0000  905          link      A6,#0
                     906   ; LCDdata = (char)(c);
0800038C  202E 0008  907          move.l    8(A6),D0
08000390  13C0 0040  908          move.b    D0,4194338
08000394  0022      
                     909   ; Wait1ms() ;
08000396  4EB9 0800  910          jsr       _Wait1ms
0800039A  02D0      
0800039C  4E5E       911          unlk      A6
0800039E  4E75       912          rts
                     913   ; }
                     914   ; /**********************************************************************************
                     915   ; *subroutine to output a message at the current cursor position of the LCD display
                     916   ; ************************************************************************************/
                     917   ; void LCDOutMessage(char *theMessage)
                     918   ; {
                     919   _LCDOutMessage:
080003A0  4E56 FFFC  920          link      A6,#-4
                     921   ; char c ;
                     922   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     923   LCDOutMessage_1:
080003A4  206E 0008  924          move.l    8(A6),A0
080003A8  52AE 0008  925          addq.l    #1,8(A6)
080003AC  1D50 FFFF  926          move.b    (A0),-1(A6)
080003B0  1010       927          move.b    (A0),D0
080003B2  6714       928          beq.s     LCDOutMessage_3
                     929   ; LCDOutchar(c) ;
080003B4  122E FFFF  930          move.b    -1(A6),D1
080003B8  4881       931          ext.w     D1
080003BA  48C1       932          ext.l     D1
080003BC  2F01       933          move.l    D1,-(A7)
080003BE  4EB9 0800  934          jsr       _LCDOutchar
080003C2  0388      
080003C4  584F       935          addq.w    #4,A7
080003C6  60DC       936          bra       LCDOutMessage_1
                     937   LCDOutMessage_3:
080003C8  4E5E       938          unlk      A6
080003CA  4E75       939          rts
                     940   ; }
                     941   ; /******************************************************************************
                     942   ; *subroutine to clear the line by issuing 24 space characters
                     943   ; *******************************************************************************/
                     944   ; void LCDClearln(void)
                     945   ; {
                     946   _LCDClearln:
080003CC  2F02       947          move.l    D2,-(A7)
                     948   ; int i ;
                     949   ; for(i = 0; i < 24; i ++)
080003CE  4282       950          clr.l     D2
                     951   LCDClearln_1:
080003D0  0C82 0000  952          cmp.l     #24,D2
080003D4  0018      
080003D6  6C10       953          bge.s     LCDClearln_3
                     954   ; LCDOutchar(' ') ;       // write a space char to the LCD display
080003D8  4878 0020  955          pea       32
080003DC  4EB9 0800  956          jsr       _LCDOutchar
080003E0  0388      
080003E2  584F       957          addq.w    #4,A7
080003E4  5282       958          addq.l    #1,D2
080003E6  60E8       959          bra       LCDClearln_1
                     960   LCDClearln_3:
080003E8  241F       961          move.l    (A7)+,D2
080003EA  4E75       962          rts
                     963   ; }
                     964   ; /******************************************************************************
                     965   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     966   ; *******************************************************************************/
                     967   ; void LCDLine1Message(char *theMessage)
                     968   ; {
                     969   _LCDLine1Message:
080003EC  4E56 0000  970          link      A6,#0
                     971   ; LCDcommand = 0x80 ;
080003F0  13FC 0080  972          move.b    #128,4194336
080003F4  0040 0020 
                     973   ; Wait3ms();
080003F8  4EB9 0800  974          jsr       _Wait3ms
080003FC  02E4      
                     975   ; LCDClearln() ;
080003FE  4EB9 0800  976          jsr       _LCDClearln
08000402  03CC      
                     977   ; LCDcommand = 0x80 ;
08000404  13FC 0080  978          move.b    #128,4194336
08000408  0040 0020 
                     979   ; Wait3ms() ;
0800040C  4EB9 0800  980          jsr       _Wait3ms
08000410  02E4      
                     981   ; LCDOutMessage(theMessage) ;
08000412  2F2E 0008  982          move.l    8(A6),-(A7)
08000416  4EB9 0800  983          jsr       _LCDOutMessage
0800041A  03A0      
0800041C  584F       984          addq.w    #4,A7
0800041E  4E5E       985          unlk      A6
08000420  4E75       986          rts
                     987   ; }
                     988   ; /******************************************************************************
                     989   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     990   ; *******************************************************************************/
                     991   ; void LCDLine2Message(char *theMessage)
                     992   ; {
                     993   _LCDLine2Message:
08000422  4E56 0000  994          link      A6,#0
                     995   ; LCDcommand = 0xC0 ;
08000426  13FC 00C0  996          move.b    #192,4194336
0800042A  0040 0020 
                     997   ; Wait3ms();
0800042E  4EB9 0800  998          jsr       _Wait3ms
08000432  02E4      
                     999   ; LCDClearln() ;
08000434  4EB9 0800 1000          jsr       _LCDClearln
08000438  03CC      
                    1001   ; LCDcommand = 0xC0 ;
0800043A  13FC 00C0 1002          move.b    #192,4194336
0800043E  0040 0020 
                    1003   ; Wait3ms() ;
08000442  4EB9 0800 1004          jsr       _Wait3ms
08000446  02E4      
                    1005   ; LCDOutMessage(theMessage) ;
08000448  2F2E 0008 1006          move.l    8(A6),-(A7)
0800044C  4EB9 0800 1007          jsr       _LCDOutMessage
08000450  03A0      
08000452  584F      1008          addq.w    #4,A7
08000454  4E5E      1009          unlk      A6
08000456  4E75      1010          rts
                    1011   ; }
                    1012   ; /*********************************************************************************************************************************
                    1013   ; **  IMPORTANT FUNCTION
                    1014   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                    1015   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                    1016   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                    1017   ; **  Calling this function allows you to deal with Interrupts for example
                    1018   ; ***********************************************************************************************************************************/
                    1019   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                    1020   ; {
                    1021   _InstallExceptionHandler:
08000458  4E56 FFFC 1022          link      A6,#-4
                    1023   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
0800045C  2D7C 0B00 1024          move.l    #184549376,-4(A6)
08000460  0000 FFFC 
                    1025   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
08000464  206E FFFC 1026          move.l    -4(A6),A0
08000468  202E 000C 1027          move.l    12(A6),D0
0800046C  E588      1028          lsl.l     #2,D0
0800046E  21AE 0008 1029          move.l    8(A6),0(A0,D0.L)
08000472  0800      
08000474  4E5E      1030          unlk      A6
08000476  4E75      1031          rts
                    1032   ; }
                    1033   ; void Enable_SCL(void){
                    1034   _Enable_SCL:
                    1035   ; I2C_CLK_PRESCALE_LOW = 0x31;
08000478  13FC 0031 1036          move.b    #49,4227072
0800047C  0040 8000 
                    1037   ; I2C_CLK_PRESCALE_HIGH = 0x00;
08000480  4239 0040 1038          clr.b     4227074
08000484  8002      
08000486  4E75      1039          rts
                    1040   ; }
                    1041   ; void WaitTIP(void){
                    1042   _WaitTIP:
08000488  4E56 FFFC 1043          link      A6,#-4
                    1044   ; int TIP_bit;
                    1045   ; do{
                    1046   WaitTIP_1:
                    1047   ; TIP_bit = (I2C_STAT >> 1) & 0x01; // this flag represents acknowledge from the addressed slave | ‘1’ = No acknowledge received | ‘0’ = Acknowledge received
0800048C  1039 0040 1048          move.b    4227080,D0
08000490  8008      
08000492  C0BC 0000 1049          and.l     #255,D0
08000496  00FF      
08000498  E288      1050          lsr.l     #1,D0
0800049A  C0BC 0000 1051          and.l     #1,D0
0800049E  0001      
080004A0  2D40 FFFC 1052          move.l    D0,-4(A6)
080004A4  202E FFFC 1053          move.l    -4(A6),D0
080004A8  66E2      1054          bne       WaitTIP_1
080004AA  4E5E      1055          unlk      A6
080004AC  4E75      1056          rts
                    1057   ; }while(TIP_bit != 0);
                    1058   ; }
                    1059   ; void WaitACK(void){
                    1060   _WaitACK:
080004AE  4E56 FFFC 1061          link      A6,#-4
                    1062   ; int ACK;
                    1063   ; do{
                    1064   WaitACK_1:
                    1065   ; ACK = (I2C_STAT >> 7) & 0x01;
080004B2  1039 0040 1066          move.b    4227080,D0
080004B6  8008      
080004B8  C0BC 0000 1067          and.l     #255,D0
080004BC  00FF      
080004BE  EE88      1068          lsr.l     #7,D0
080004C0  C0BC 0000 1069          and.l     #1,D0
080004C4  0001      
080004C6  2D40 FFFC 1070          move.l    D0,-4(A6)
080004CA  202E FFFC 1071          move.l    -4(A6),D0
080004CE  66E2      1072          bne       WaitACK_1
080004D0  4E5E      1073          unlk      A6
080004D2  4E75      1074          rts
                    1075   ; }while(ACK != 0);
                    1076   ; }
                    1077   ; ///////////////////////////////////
                    1078   ; // I2C controller initialization //
                    1079   ; ///////////////////////////////////
                    1080   ; void I2C_Init(void){
                    1081   _I2C_Init:
                    1082   ; Enable_SCL();
080004D4  4EB9 0800 1083          jsr       _Enable_SCL
080004D8  0478      
                    1084   ; Enable_I2C_Controller();
080004DA  13FC 0080 1085          move.b    #128,4227076
080004DE  0040 8004 
080004E2  4E75      1086          rts
                    1087   ; }
                    1088   ; ///////////////////////////////////////////////
                    1089   ; // write a single byte to the EEPROM via I2C //
                    1090   ; ///////////////////////////////////////////////
                    1091   ; void WriteI2CInteraction(int block, unsigned int Address, unsigned char AddressMSB, unsigned char AddressLSB, unsigned char data, int flag){
                    1092   _WriteI2CInteraction:
080004E4  4E56 0000 1093          link      A6,#0
080004E8  48E7 2030 1094          movem.l   D2/A2/A3,-(A7)
080004EC  45F9 0800 1095          lea       _WaitTIP.L,A2
080004F0  0488      
080004F2  47F9 0800 1096          lea       _WaitACK.L,A3
080004F6  04AE      
                    1097   ; unsigned char controlByte;
                    1098   ; // determine the block of interest 
                    1099   ; if (block == 1) {
080004F8  202E 0008 1100          move.l    8(A6),D0
080004FC  0C80 0000 1101          cmp.l     #1,D0
08000500  0001      
08000502  6606      1102          bne.s     WriteI2CInteraction_1
                    1103   ; controlByte = EEPROM_Write_Block_1;
08000504  143C 00A2 1104          move.b    #162,D2
08000508  6004      1105          bra.s     WriteI2CInteraction_2
                    1106   WriteI2CInteraction_1:
                    1107   ; } 
                    1108   ; else {
                    1109   ; controlByte = EEPROM_Write_Block_0;
0800050A  143C 00A0 1110          move.b    #160,D2
                    1111   WriteI2CInteraction_2:
                    1112   ; }
                    1113   ; // wait for TIP
                    1114   ; WaitTIP();
0800050E  4E92      1115          jsr       (A2)
                    1116   ; // store the data to TX register
                    1117   ; I2C_TX = controlByte;
08000510  13C2 0040 1118          move.b    D2,4227078
08000514  8006      
                    1119   ; // command to generate start condition, write, and clear pending interrupt 
                    1120   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
08000516  13FC 0091 1121          move.b    #145,4227080
0800051A  0040 8008 
                    1122   ; //Wait for TIP bit in Status Register
                    1123   ; WaitTIP();
0800051E  4E92      1124          jsr       (A2)
                    1125   ; //Wait RxACK bit in Status Register
                    1126   ; WaitACK();
08000520  4E93      1127          jsr       (A3)
                    1128   ; // send the most significant byte of the address
                    1129   ; I2C_TX = AddressMSB;
08000522  13EE 0013 1130          move.b    19(A6),4227078
08000526  0040 8006 
                    1131   ; // command to write and clear pending interrupt 
                    1132   ; I2C_CMD = I2C_CMD_Slave_Write;
0800052A  13FC 0011 1133          move.b    #17,4227080
0800052E  0040 8008 
                    1134   ; WaitTIP();
08000532  4E92      1135          jsr       (A2)
                    1136   ; WaitACK();
08000534  4E93      1137          jsr       (A3)
                    1138   ; // send the least significant byte of the address
                    1139   ; I2C_TX = AddressLSB;
08000536  13EE 0017 1140          move.b    23(A6),4227078
0800053A  0040 8006 
                    1141   ; I2C_CMD = I2C_CMD_Slave_Write;
0800053E  13FC 0011 1142          move.b    #17,4227080
08000542  0040 8008 
                    1143   ; WaitTIP();
08000546  4E92      1144          jsr       (A2)
                    1145   ; WaitACK();
08000548  4E93      1146          jsr       (A3)
                    1147   ; // send data
                    1148   ; I2C_TX = data;
0800054A  13EE 001B 1149          move.b    27(A6),4227078
0800054E  0040 8006 
                    1150   ; I2C_CMD = I2C_CMD_Slave_Write_Stop;
08000552  13FC 0051 1151          move.b    #81,4227080
08000556  0040 8008 
                    1152   ; WaitTIP();
0800055A  4E92      1153          jsr       (A2)
                    1154   ; WaitACK();
0800055C  4E93      1155          jsr       (A3)
                    1156   ; if(flag == 0){
0800055E  202E 001C 1157          move.l    28(A6),D0
08000562  6620      1158          bne.s     WriteI2CInteraction_3
                    1159   ; printf("\r\nWrote [%x] to Address[%x]", data, Address);
08000564  2F2E 000C 1160          move.l    12(A6),-(A7)
08000568  122E 001B 1161          move.b    27(A6),D1
0800056C  C2BC 0000 1162          and.l     #255,D1
08000570  00FF      
08000572  2F01      1163          move.l    D1,-(A7)
08000574  4879 0800 1164          pea       @mupde1_1.L
08000578  24FA      
0800057A  4EB9 0800 1165          jsr       _printf
0800057E  1A36      
08000580  DEFC 000C 1166          add.w     #12,A7
                    1167   WriteI2CInteraction_3:
08000584  4CDF 0C04 1168          movem.l   (A7)+,D2/A2/A3
08000588  4E5E      1169          unlk      A6
0800058A  4E75      1170          rts
                    1171   ; }
                    1172   ; }
                    1173   ; //////////////////////////////////////////////////
                    1174   ; // write up to 128k bytes to the EEPROM via I2C //
                    1175   ; //////////////////////////////////////////////////
                    1176   ; void PageWriteI2CInteraction(unsigned int AddressFrom, unsigned int AddressTo, unsigned char data){
                    1177   _PageWriteI2CInteraction:
0800058C  4E56 FFF4 1178          link      A6,#-12
08000590  48E7 3F3C 1179          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08000594  242E 0008 1180          move.l    8(A6),D2
08000598  45F9 0800 1181          lea       _WaitTIP.L,A2
0800059C  0488      
0800059E  47F9 0800 1182          lea       _WaitACK.L,A3
080005A2  04AE      
080005A4  1E2E 0013 1183          move.b    19(A6),D7
080005A8  CEBC 0000 1184          and.l     #255,D7
080005AC  00FF      
080005AE  286E 000C 1185          move.l    12(A6),A4
                    1186   ; int flag = 0;
080005B2  3A7C 0000 1187          move.w    #0,A5
                    1188   ; int flag_special = 0;
080005B6  42AE FFF6 1189          clr.l     -10(A6)
                    1190   ; int i = 0;
080005BA  4283      1191          clr.l     D3
                    1192   ; unsigned char controlByte;
                    1193   ; unsigned char AddressFromMSB;
                    1194   ; unsigned char AddressFromLSB;
                    1195   ; unsigned char AddressRange;
                    1196   ; unsigned int AddressFrom_Initial;
                    1197   ; AddressFrom_Initial = AddressFrom;
080005BC  2D42 FFFC 1198          move.l    D2,-4(A6)
                    1199   ; while(AddressFrom < AddressTo){
                    1200   PageWriteI2CInteraction_1:
080005C0  B48C      1201          cmp.l     A4,D2
080005C2  6400 0178 1202          bhs       PageWriteI2CInteraction_3
                    1203   ; if (AddressFrom + 128 > AddressTo) {
080005C6  2002      1204          move.l    D2,D0
080005C8  0680 0000 1205          add.l     #128,D0
080005CC  0080      
080005CE  B08C      1206          cmp.l     A4,D0
080005D0  6304      1207          bls.s     PageWriteI2CInteraction_4
                    1208   ; flag = 1;
080005D2  3A7C 0001 1209          move.w    #1,A5
                    1210   PageWriteI2CInteraction_4:
                    1211   ; }
                    1212   ; if (AddressFrom > 0xFFFF) {
080005D6  0C82 0000 1213          cmp.l     #65535,D2
080005DA  FFFF      
080005DC  6328      1214          bls.s     PageWriteI2CInteraction_6
                    1215   ; controlByte = EEPROM_Write_Block_1;
080005DE  1C3C 00A2 1216          move.b    #162,D6
                    1217   ; AddressFromMSB = ((AddressFrom - 0x10000) >> 8) & 0xFF;
080005E2  2002      1218          move.l    D2,D0
080005E4  0480 0001 1219          sub.l     #65536,D0
080005E8  0000      
080005EA  E088      1220          lsr.l     #8,D0
080005EC  C0BC 0000 1221          and.l     #255,D0
080005F0  00FF      
080005F2  1A00      1222          move.b    D0,D5
                    1223   ; AddressFromLSB = (AddressFrom - 0x10000) & 0xFF;
080005F4  2002      1224          move.l    D2,D0
080005F6  0480 0001 1225          sub.l     #65536,D0
080005FA  0000      
080005FC  C0BC 0000 1226          and.l     #255,D0
08000600  00FF      
08000602  1800      1227          move.b    D0,D4
08000604  601A      1228          bra.s     PageWriteI2CInteraction_7
                    1229   PageWriteI2CInteraction_6:
                    1230   ; }
                    1231   ; else {
                    1232   ; controlByte = EEPROM_Write_Block_0;
08000606  1C3C 00A0 1233          move.b    #160,D6
                    1234   ; AddressFromMSB = (AddressFrom >> 8) & 0xFF;
0800060A  2002      1235          move.l    D2,D0
0800060C  E088      1236          lsr.l     #8,D0
0800060E  C0BC 0000 1237          and.l     #255,D0
08000612  00FF      
08000614  1A00      1238          move.b    D0,D5
                    1239   ; AddressFromLSB = AddressFrom & 0xFF;
08000616  2002      1240          move.l    D2,D0
08000618  C0BC 0000 1241          and.l     #255,D0
0800061C  00FF      
0800061E  1800      1242          move.b    D0,D4
                    1243   PageWriteI2CInteraction_7:
                    1244   ; }
                    1245   ; WaitTIP();
08000620  4E92      1246          jsr       (A2)
                    1247   ; I2C_TX = controlByte;
08000622  13C6 0040 1248          move.b    D6,4227078
08000626  8006      
                    1249   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
08000628  13FC 0091 1250          move.b    #145,4227080
0800062C  0040 8008 
                    1251   ; WaitTIP();
08000630  4E92      1252          jsr       (A2)
                    1253   ; WaitACK();
08000632  4E93      1254          jsr       (A3)
                    1255   ; I2C_TX = AddressFromMSB;
08000634  13C5 0040 1256          move.b    D5,4227078
08000638  8006      
                    1257   ; I2C_CMD = I2C_CMD_Slave_Write;
0800063A  13FC 0011 1258          move.b    #17,4227080
0800063E  0040 8008 
                    1259   ; WaitTIP();
08000642  4E92      1260          jsr       (A2)
                    1261   ; WaitACK();
08000644  4E93      1262          jsr       (A3)
                    1263   ; I2C_TX = AddressFromLSB;
08000646  13C4 0040 1264          move.b    D4,4227078
0800064A  8006      
                    1265   ; I2C_CMD = I2C_CMD_Slave_Write;
0800064C  13FC 0011 1266          move.b    #17,4227080
08000650  0040 8008 
                    1267   ; WaitTIP();
08000654  4E92      1268          jsr       (A2)
                    1269   ; WaitACK();
08000656  4E93      1270          jsr       (A3)
                    1271   ; if(flag == 0){
08000658  200D      1272          move.l    A5,D0
0800065A  6600 0052 1273          bne       PageWriteI2CInteraction_8
                    1274   ; for (i = 0; i < 128; i++){  // limit write to 128 bytes
0800065E  4283      1275          clr.l     D3
                    1276   PageWriteI2CInteraction_10:
08000660  0C83 0000 1277          cmp.l     #128,D3
08000664  0080      
08000666  6C00 0042 1278          bge       PageWriteI2CInteraction_12
                    1279   ; I2C_TX = data;
0800066A  13C7 0040 1280          move.b    D7,4227078
0800066E  8006      
                    1281   ; I2C_CMD = I2C_CMD_Slave_Write;
08000670  13FC 0011 1282          move.b    #17,4227080
08000674  0040 8008 
                    1283   ; WaitTIP();
08000678  4E92      1284          jsr       (A2)
                    1285   ; WaitACK();
0800067A  4E93      1286          jsr       (A3)
                    1287   ; if((AddressFrom + i) % 128 == 0){
0800067C  2002      1288          move.l    D2,D0
0800067E  D083      1289          add.l     D3,D0
08000680  2F00      1290          move.l    D0,-(A7)
08000682  4878 0080 1291          pea       128
08000686  4EB9 0800 1292          jsr       ULDIV
0800068A  10C0      
0800068C  202F 0004 1293          move.l    4(A7),D0
08000690  504F      1294          addq.w    #8,A7
08000692  4A80      1295          tst.l     D0
08000694  6602      1296          bne.s     PageWriteI2CInteraction_13
                    1297   ; break;
08000696  6012      1298          bra.s     PageWriteI2CInteraction_12
                    1299   PageWriteI2CInteraction_13:
                    1300   ; }
                    1301   ; // check if need to switch blocks
                    1302   ; if(AddressFrom + i == 0xFFFF){
08000698  2002      1303          move.l    D2,D0
0800069A  D083      1304          add.l     D3,D0
0800069C  0C80 0000 1305          cmp.l     #65535,D0
080006A0  FFFF      
080006A2  6602      1306          bne.s     PageWriteI2CInteraction_15
                    1307   ; break;
080006A4  6004      1308          bra.s     PageWriteI2CInteraction_12
                    1309   PageWriteI2CInteraction_15:
080006A6  5283      1310          addq.l    #1,D3
080006A8  60B6      1311          bra       PageWriteI2CInteraction_10
                    1312   PageWriteI2CInteraction_12:
080006AA  6000 005C 1313          bra       PageWriteI2CInteraction_19
                    1314   PageWriteI2CInteraction_8:
                    1315   ; }
                    1316   ; }
                    1317   ; }
                    1318   ; else {
                    1319   ; AddressRange = AddressTo - AddressFrom;
080006AE  200C      1320          move.l    A4,D0
080006B0  9082      1321          sub.l     D2,D0
080006B2  1D40 FFFB 1322          move.b    D0,-5(A6)
                    1323   ; for(i = 0; i < AddressRange; i++){                
080006B6  4283      1324          clr.l     D3
                    1325   PageWriteI2CInteraction_17:
080006B8  102E FFFB 1326          move.b    -5(A6),D0
080006BC  C0BC 0000 1327          and.l     #255,D0
080006C0  00FF      
080006C2  B680      1328          cmp.l     D0,D3
080006C4  6400 0042 1329          bhs       PageWriteI2CInteraction_19
                    1330   ; I2C_TX = data;
080006C8  13C7 0040 1331          move.b    D7,4227078
080006CC  8006      
                    1332   ; I2C_CMD = I2C_CMD_Slave_Write;
080006CE  13FC 0011 1333          move.b    #17,4227080
080006D2  0040 8008 
                    1334   ; WaitTIP();
080006D6  4E92      1335          jsr       (A2)
                    1336   ; WaitACK();
080006D8  4E93      1337          jsr       (A3)
                    1338   ; if((AddressFrom + i) % 128 == 0){
080006DA  2002      1339          move.l    D2,D0
080006DC  D083      1340          add.l     D3,D0
080006DE  2F00      1341          move.l    D0,-(A7)
080006E0  4878 0080 1342          pea       128
080006E4  4EB9 0800 1343          jsr       ULDIV
080006E8  10C0      
080006EA  202F 0004 1344          move.l    4(A7),D0
080006EE  504F      1345          addq.w    #8,A7
080006F0  4A80      1346          tst.l     D0
080006F2  6602      1347          bne.s     PageWriteI2CInteraction_20
                    1348   ; break;
080006F4  6012      1349          bra.s     PageWriteI2CInteraction_19
                    1350   PageWriteI2CInteraction_20:
                    1351   ; }
                    1352   ; // check if need to switch blocks
                    1353   ; if(AddressFrom + i == 0xFFFF){
080006F6  2002      1354          move.l    D2,D0
080006F8  D083      1355          add.l     D3,D0
080006FA  0C80 0000 1356          cmp.l     #65535,D0
080006FE  FFFF      
08000700  6602      1357          bne.s     PageWriteI2CInteraction_22
                    1358   ; break;
08000702  6004      1359          bra.s     PageWriteI2CInteraction_19
                    1360   PageWriteI2CInteraction_22:
08000704  5283      1361          addq.l    #1,D3
08000706  60B0      1362          bra       PageWriteI2CInteraction_17
                    1363   PageWriteI2CInteraction_19:
                    1364   ; }
                    1365   ; }
                    1366   ; }
                    1367   ; I2C_CMD = I2C_CMD_Slave_Write_Stop;
08000708  13FC 0051 1368          move.b    #81,4227080
0800070C  0040 8008 
                    1369   ; WaitTIP();
08000710  4E92      1370          jsr       (A2)
                    1371   ; WaitACK();
08000712  4E93      1372          jsr       (A3)
                    1373   ; do {
                    1374   PageWriteI2CInteraction_24:
                    1375   ; I2C_TX = controlByte;
08000714  13C6 0040 1376          move.b    D6,4227078
08000718  8006      
                    1377   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
0800071A  13FC 0091 1378          move.b    #145,4227080
0800071E  0040 8008 
                    1379   ; WaitTIP();
08000722  4E92      1380          jsr       (A2)
08000724  1039 0040 1381          move.b    4227080,D0
08000728  8008      
0800072A  EE08      1382          lsr.b     #7,D0
0800072C  C03C 0001 1383          and.b     #1,D0
08000730  66E2      1384          bne       PageWriteI2CInteraction_24
                    1385   ; } while (((I2C_STAT >> 7) & 0x01) != 0); // wait for acknowledgement from the slave
                    1386   ; AddressFrom += (i + 1);
08000732  2003      1387          move.l    D3,D0
08000734  5280      1388          addq.l    #1,D0
08000736  D480      1389          add.l     D0,D2
08000738  6000 FE86 1390          bra       PageWriteI2CInteraction_1
                    1391   PageWriteI2CInteraction_3:
                    1392   ; }
                    1393   ; // special case for end address being the first byte of the next/last page
                    1394   ; if (((AddressFrom + i) % 128 == 0) && (flag == 1)) {
0800073C  2002      1395          move.l    D2,D0
0800073E  D083      1396          add.l     D3,D0
08000740  2F00      1397          move.l    D0,-(A7)
08000742  4878 0080 1398          pea       128
08000746  4EB9 0800 1399          jsr       ULDIV
0800074A  10C0      
0800074C  202F 0004 1400          move.l    4(A7),D0
08000750  504F      1401          addq.w    #8,A7
08000752  4A80      1402          tst.l     D0
08000754  6600 00C6 1403          bne       PageWriteI2CInteraction_29
08000758  200D      1404          move.l    A5,D0
0800075A  0C80 0000 1405          cmp.l     #1,D0
0800075E  0001      
08000760  6600 00BA 1406          bne       PageWriteI2CInteraction_29
                    1407   ; if((AddressFrom + i) > 0xFFFF){
08000764  2002      1408          move.l    D2,D0
08000766  D083      1409          add.l     D3,D0
08000768  0C80 0000 1410          cmp.l     #65535,D0
0800076C  FFFF      
0800076E  6300 0060 1411          bls       PageWriteI2CInteraction_28
                    1412   ; controlByte = EEPROM_Write_Block_1;
08000772  1C3C 00A2 1413          move.b    #162,D6
                    1414   ; AddressFromMSB = (((AddressFrom + i) - 0x10000) >> 8) & 0xFF;
08000776  2002      1415          move.l    D2,D0
08000778  D083      1416          add.l     D3,D0
0800077A  0480 0001 1417          sub.l     #65536,D0
0800077E  0000      
08000780  E088      1418          lsr.l     #8,D0
08000782  C0BC 0000 1419          and.l     #255,D0
08000786  00FF      
08000788  1A00      1420          move.b    D0,D5
                    1421   ; AddressFromLSB = ((AddressFrom + i) - 0x10000) & 0xFF;
0800078A  2002      1422          move.l    D2,D0
0800078C  D083      1423          add.l     D3,D0
0800078E  0480 0001 1424          sub.l     #65536,D0
08000792  0000      
08000794  C0BC 0000 1425          and.l     #255,D0
08000798  00FF      
0800079A  1800      1426          move.b    D0,D4
                    1427   ; WriteI2CInteraction(1, (AddressFrom + i), AddressFromMSB, AddressFromLSB, data, 1);
0800079C  4878 0001 1428          pea       1
080007A0  CEBC 0000 1429          and.l     #255,D7
080007A4  00FF      
080007A6  2F07      1430          move.l    D7,-(A7)
080007A8  C8BC 0000 1431          and.l     #255,D4
080007AC  00FF      
080007AE  2F04      1432          move.l    D4,-(A7)
080007B0  CABC 0000 1433          and.l     #255,D5
080007B4  00FF      
080007B6  2F05      1434          move.l    D5,-(A7)
080007B8  2202      1435          move.l    D2,D1
080007BA  D283      1436          add.l     D3,D1
080007BC  2F01      1437          move.l    D1,-(A7)
080007BE  4878 0001 1438          pea       1
080007C2  4EB9 0800 1439          jsr       _WriteI2CInteraction
080007C6  04E4      
080007C8  DEFC 0018 1440          add.w     #24,A7
080007CC  6000 004E 1441          bra       PageWriteI2CInteraction_29
                    1442   PageWriteI2CInteraction_28:
                    1443   ; }
                    1444   ; else {
                    1445   ; controlByte = EEPROM_Write_Block_0;
080007D0  1C3C 00A0 1446          move.b    #160,D6
                    1447   ; AddressFromMSB = ((AddressFrom + i) >> 8) & 0xFF;
080007D4  2002      1448          move.l    D2,D0
080007D6  D083      1449          add.l     D3,D0
080007D8  E088      1450          lsr.l     #8,D0
080007DA  C0BC 0000 1451          and.l     #255,D0
080007DE  00FF      
080007E0  1A00      1452          move.b    D0,D5
                    1453   ; AddressFromLSB = (AddressFrom + i) & 0xFF;
080007E2  2002      1454          move.l    D2,D0
080007E4  D083      1455          add.l     D3,D0
080007E6  C0BC 0000 1456          and.l     #255,D0
080007EA  00FF      
080007EC  1800      1457          move.b    D0,D4
                    1458   ; WriteI2CInteraction(0, (AddressFrom + i), AddressFromMSB, AddressFromLSB, data, 1);
080007EE  4878 0001 1459          pea       1
080007F2  CEBC 0000 1460          and.l     #255,D7
080007F6  00FF      
080007F8  2F07      1461          move.l    D7,-(A7)
080007FA  C8BC 0000 1462          and.l     #255,D4
080007FE  00FF      
08000800  2F04      1463          move.l    D4,-(A7)
08000802  CABC 0000 1464          and.l     #255,D5
08000806  00FF      
08000808  2F05      1465          move.l    D5,-(A7)
0800080A  2202      1466          move.l    D2,D1
0800080C  D283      1467          add.l     D3,D1
0800080E  2F01      1468          move.l    D1,-(A7)
08000810  42A7      1469          clr.l     -(A7)
08000812  4EB9 0800 1470          jsr       _WriteI2CInteraction
08000816  04E4      
08000818  DEFC 0018 1471          add.w     #24,A7
                    1472   PageWriteI2CInteraction_29:
                    1473   ; }
                    1474   ; }
                    1475   ; printf("\r\nWrote [%x] from Address[%x] to Address[%x]", data, AddressFrom_Initial, AddressTo);
0800081C  2F0C      1476          move.l    A4,-(A7)
0800081E  2F2E FFFC 1477          move.l    -4(A6),-(A7)
08000822  CEBC 0000 1478          and.l     #255,D7
08000826  00FF      
08000828  2F07      1479          move.l    D7,-(A7)
0800082A  4879 0800 1480          pea       @mupde1_2.L
0800082E  2516      
08000830  4EB9 0800 1481          jsr       _printf
08000834  1A36      
08000836  DEFC 0010 1482          add.w     #16,A7
0800083A  4CDF 3CFC 1483          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0800083E  4E5E      1484          unlk      A6
08000840  4E75      1485          rts
                    1486   ; }
                    1487   ; ///////////////////////////////////////////////
                    1488   ; // read a single byte to the EEPROM via I2C //
                    1489   ; ///////////////////////////////////////////////
                    1490   ; void ReadI2CByteInteraction(int block, unsigned int Address, unsigned char AddressMSB, unsigned char AddressLSB){
                    1491   _ReadI2CByteInteraction:
08000842  4E56 FFFC 1492          link      A6,#-4
08000846  48E7 3030 1493          movem.l   D2/D3/A2/A3,-(A7)
0800084A  45F9 0800 1494          lea       _WaitTIP.L,A2
0800084E  0488      
08000850  47F9 0800 1495          lea       _WaitACK.L,A3
08000854  04AE      
                    1496   ; unsigned char controleByte_ForWrite;
                    1497   ; unsigned char controlByte_ForRead;
                    1498   ; unsigned char readData;
                    1499   ; if(block == 1){
08000856  202E 0008 1500          move.l    8(A6),D0
0800085A  0C80 0000 1501          cmp.l     #1,D0
0800085E  0001      
08000860  660A      1502          bne.s     ReadI2CByteInteraction_1
                    1503   ; controleByte_ForWrite= 162;
08000862  163C 00A2 1504          move.b    #162,D3
                    1505   ; controlByte_ForRead = 163;
08000866  143C 00A3 1506          move.b    #163,D2
0800086A  6008      1507          bra.s     ReadI2CByteInteraction_2
                    1508   ReadI2CByteInteraction_1:
                    1509   ; }else{
                    1510   ; controleByte_ForWrite = 160;
0800086C  163C 00A0 1511          move.b    #160,D3
                    1512   ; controlByte_ForRead = 161;
08000870  143C 00A1 1513          move.b    #161,D2
                    1514   ReadI2CByteInteraction_2:
                    1515   ; }
                    1516   ; WaitTIP();
08000874  4E92      1517          jsr       (A2)
                    1518   ; I2C_TX = controleByte_ForWrite;
08000876  13C3 0040 1519          move.b    D3,4227078
0800087A  8006      
                    1520   ; I2C_CMD = 145;
0800087C  13FC 0091 1521          move.b    #145,4227080
08000880  0040 8008 
                    1522   ; WaitTIP();
08000884  4E92      1523          jsr       (A2)
                    1524   ; WaitACK();
08000886  4E93      1525          jsr       (A3)
                    1526   ; I2C_TX = AddressMSB;
08000888  13EE 0013 1527          move.b    19(A6),4227078
0800088C  0040 8006 
                    1528   ; I2C_CMD = 17;
08000890  13FC 0011 1529          move.b    #17,4227080
08000894  0040 8008 
                    1530   ; WaitTIP();
08000898  4E92      1531          jsr       (A2)
                    1532   ; WaitACK();
0800089A  4E93      1533          jsr       (A3)
                    1534   ; I2C_TX = AddressLSB;
0800089C  13EE 0017 1535          move.b    23(A6),4227078
080008A0  0040 8006 
                    1536   ; I2C_CMD = 17;
080008A4  13FC 0011 1537          move.b    #17,4227080
080008A8  0040 8008 
                    1538   ; WaitTIP();
080008AC  4E92      1539          jsr       (A2)
                    1540   ; WaitACK();
080008AE  4E93      1541          jsr       (A3)
                    1542   ; I2C_TX = controlByte_ForRead;
080008B0  13C2 0040 1543          move.b    D2,4227078
080008B4  8006      
                    1544   ; I2C_CMD = 145;
080008B6  13FC 0091 1545          move.b    #145,4227080
080008BA  0040 8008 
                    1546   ; WaitTIP();
080008BE  4E92      1547          jsr       (A2)
                    1548   ; WaitACK();
080008C0  4E93      1549          jsr       (A3)
                    1550   ; I2C_CMD = 105;
080008C2  13FC 0069 1551          move.b    #105,4227080
080008C6  0040 8008 
                    1552   ; WaitTIP();
080008CA  4E92      1553          jsr       (A2)
                    1554   ; while((I2C_STAT & 0x01) != 0x01) {
                    1555   ReadI2CByteInteraction_3:
080008CC  1039 0040 1556          move.b    4227080,D0
080008D0  8008      
080008D2  C03C 0001 1557          and.b     #1,D0
080008D6  0C00 0001 1558          cmp.b     #1,D0
080008DA  6702      1559          beq.s     ReadI2CByteInteraction_5
                    1560   ; }
080008DC  60EE      1561          bra       ReadI2CByteInteraction_3
                    1562   ReadI2CByteInteraction_5:
                    1563   ; I2C_STAT = 0;
080008DE  4239 0040 1564          clr.b     4227080
080008E2  8008      
                    1565   ; readData = I2C_RX;
080008E4  1D79 0040 1566          move.b    4227078,-1(A6)
080008E8  8006 FFFF 
                    1567   ; printf("\r\nRead [%x] from Address[%x]", readData, Address);
080008EC  2F2E 000C 1568          move.l    12(A6),-(A7)
080008F0  122E FFFF 1569          move.b    -1(A6),D1
080008F4  C2BC 0000 1570          and.l     #255,D1
080008F8  00FF      
080008FA  2F01      1571          move.l    D1,-(A7)
080008FC  4879 0800 1572          pea       @mupde1_3.L
08000900  2544      
08000902  4EB9 0800 1573          jsr       _printf
08000906  1A36      
08000908  DEFC 000C 1574          add.w     #12,A7
                    1575   ; return;
0800090C  4CDF 0C0C 1576          movem.l   (A7)+,D2/D3/A2/A3
08000910  4E5E      1577          unlk      A6
08000912  4E75      1578          rts
                    1579   ; }
                    1580   ; //////////////////////////////////////////////////
                    1581   ; // read up to 128k bytes to the EEPROM via I2C //
                    1582   ; //////////////////////////////////////////////////
                    1583   ; void ReadI2CSequential(int block, int AddressTo, int AddressFrom,  unsigned int ChipAddress){
                    1584   _ReadI2CSequential:
08000914  4E56 FFF8 1585          link      A6,#-8
08000918  48E7 3F3C 1586          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0800091C  45F9 0800 1587          lea       _WaitTIP.L,A2
08000920  0488      
08000922  47F9 0800 1588          lea       _WaitACK.L,A3
08000926  04AE      
08000928  242E 0014 1589          move.l    20(A6),D2
                    1590   ; unsigned char controleWriteByte;
                    1591   ; unsigned char controlReadByte;
                    1592   ; unsigned char readData;
                    1593   ; unsigned char AddressLSB;
                    1594   ; unsigned char AddressMSB;
                    1595   ; int i;
                    1596   ; int size;
                    1597   ; int block_change_flag = 0;
0800092C  387C 0000 1598          move.w    #0,A4
                    1599   ; int block_address;
                    1600   ; size = AddressTo - AddressFrom;
08000930  202E 000C 1601          move.l    12(A6),D0
08000934  90AE 0010 1602          sub.l     16(A6),D0
08000938  2D40 FFFC 1603          move.l    D0,-4(A6)
                    1604   ; AddressMSB = (ChipAddress >> 8) & 0xFF;
0800093C  2002      1605          move.l    D2,D0
0800093E  E088      1606          lsr.l     #8,D0
08000940  C0BC 0000 1607          and.l     #255,D0
08000944  00FF      
08000946  1C00      1608          move.b    D0,D6
                    1609   ; AddressLSB = ChipAddress & 0xFF;
08000948  2002      1610          move.l    D2,D0
0800094A  C0BC 0000 1611          and.l     #255,D0
0800094E  00FF      
08000950  1A00      1612          move.b    D0,D5
                    1613   ; if(block == 1){
08000952  202E 0008 1614          move.l    8(A6),D0
08000956  0C80 0000 1615          cmp.l     #1,D0
0800095A  0001      
0800095C  662C      1616          bne.s     ReadI2CSequential_1
                    1617   ; controleWriteByte = EEPROM_Write_Block_1;
0800095E  183C 00A2 1618          move.b    #162,D4
                    1619   ; controlReadByte = EEPROM_Read_Block_1;
08000962  163C 00A3 1620          move.b    #163,D3
                    1621   ; AddressMSB = ((ChipAddress-0x10000) >> 8) & 0xFF;
08000966  2002      1622          move.l    D2,D0
08000968  0480 0001 1623          sub.l     #65536,D0
0800096C  0000      
0800096E  E088      1624          lsr.l     #8,D0
08000970  C0BC 0000 1625          and.l     #255,D0
08000974  00FF      
08000976  1C00      1626          move.b    D0,D6
                    1627   ; AddressLSB = (ChipAddress-0x10000) & 0xFF;
08000978  2002      1628          move.l    D2,D0
0800097A  0480 0001 1629          sub.l     #65536,D0
0800097E  0000      
08000980  C0BC 0000 1630          and.l     #255,D0
08000984  00FF      
08000986  1A00      1631          move.b    D0,D5
08000988  6008      1632          bra.s     ReadI2CSequential_2
                    1633   ReadI2CSequential_1:
                    1634   ; }else{
                    1635   ; controleWriteByte = EEPROM_Write_Block_0;
0800098A  183C 00A0 1636          move.b    #160,D4
                    1637   ; controlReadByte = EEPROM_Read_Block_0;
0800098E  163C 00A1 1638          move.b    #161,D3
                    1639   ReadI2CSequential_2:
                    1640   ; }
                    1641   ; WaitTIP();
08000992  4E92      1642          jsr       (A2)
                    1643   ; I2C_TX = controleWriteByte;
08000994  13C4 0040 1644          move.b    D4,4227078
08000998  8006      
                    1645   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
0800099A  13FC 0091 1646          move.b    #145,4227080
0800099E  0040 8008 
                    1647   ; WaitTIP();
080009A2  4E92      1648          jsr       (A2)
                    1649   ; WaitACK();
080009A4  4E93      1650          jsr       (A3)
                    1651   ; I2C_TX = AddressMSB;
080009A6  13C6 0040 1652          move.b    D6,4227078
080009AA  8006      
                    1653   ; I2C_CMD = I2C_CMD_Slave_Write;
080009AC  13FC 0011 1654          move.b    #17,4227080
080009B0  0040 8008 
                    1655   ; WaitTIP();
080009B4  4E92      1656          jsr       (A2)
                    1657   ; WaitACK();
080009B6  4E93      1658          jsr       (A3)
                    1659   ; I2C_TX = AddressLSB;
080009B8  13C5 0040 1660          move.b    D5,4227078
080009BC  8006      
                    1661   ; I2C_CMD = I2C_CMD_Slave_Write;
080009BE  13FC 0011 1662          move.b    #17,4227080
080009C2  0040 8008 
                    1663   ; WaitTIP();
080009C6  4E92      1664          jsr       (A2)
                    1665   ; WaitACK();
080009C8  4E93      1666          jsr       (A3)
                    1667   ; I2C_TX = controlReadByte;
080009CA  13C3 0040 1668          move.b    D3,4227078
080009CE  8006      
                    1669   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
080009D0  13FC 0091 1670          move.b    #145,4227080
080009D4  0040 8008 
                    1671   ; WaitTIP();
080009D8  4E92      1672          jsr       (A2)
                    1673   ; WaitACK();
080009DA  4E93      1674          jsr       (A3)
                    1675   ; block_address = ChipAddress;
080009DC  2E02      1676          move.l    D2,D7
                    1677   ; for (i = 0; i < size; i++){
080009DE  3A7C 0000 1678          move.w    #0,A5
                    1679   ReadI2CSequential_3:
080009E2  200D      1680          move.l    A5,D0
080009E4  B0AE FFFC 1681          cmp.l     -4(A6),D0
080009E8  6C00 00E2 1682          bge       ReadI2CSequential_5
                    1683   ; if(block_address == 0x10000){ // if need to switch blocks 
080009EC  0C87 0001 1684          cmp.l     #65536,D7
080009F0  0000      
080009F2  6624      1685          bne.s     ReadI2CSequential_6
                    1686   ; I2C_CMD = I2C_CMD_Slave_Read_Ack;
080009F4  13FC 0029 1687          move.b    #41,4227080
080009F8  0040 8008 
                    1688   ; WaitTIP();
080009FC  4E92      1689          jsr       (A2)
                    1690   ; while(I2C_STAT & 0x01 == 0x00);
                    1691   ; readData = I2C_RX;
080009FE  1D79 0040 1692          move.b    4227078,-5(A6)
08000A02  8006 FFFB 
                    1693   ; I2C_CMD = I2C_CMD_Slave_Read_Stop; // instead of sending a stop command
08000A06  13FC 0049 1694          move.b    #73,4227080
08000A0A  0040 8008 
                    1695   ; // printf("\r\nADDR: %x, DATA: %x\r\n",ChipAddress,readData);
                    1696   ; WaitTIP();
08000A0E  4E92      1697          jsr       (A2)
                    1698   ; block_change_flag = 1;
08000A10  387C 0001 1699          move.w    #1,A4
08000A14  6000 004E 1700          bra       ReadI2CSequential_7
                    1701   ReadI2CSequential_6:
                    1702   ; } else {
                    1703   ; I2C_CMD = I2C_CMD_Slave_Read;
08000A18  13FC 0021 1704          move.b    #33,4227080
08000A1C  0040 8008 
                    1705   ; WaitTIP();
08000A20  4E92      1706          jsr       (A2)
                    1707   ; while((I2C_STAT & 0x01) != 0x01) {
                    1708   ReadI2CSequential_11:
08000A22  1039 0040 1709          move.b    4227080,D0
08000A26  8008      
08000A28  C03C 0001 1710          and.b     #1,D0
08000A2C  0C00 0001 1711          cmp.b     #1,D0
08000A30  6702      1712          beq.s     ReadI2CSequential_13
                    1713   ; }
08000A32  60EE      1714          bra       ReadI2CSequential_11
                    1715   ReadI2CSequential_13:
                    1716   ; I2C_STAT = 0;
08000A34  4239 0040 1717          clr.b     4227080
08000A38  8008      
                    1718   ; readData = I2C_RX;
08000A3A  1D79 0040 1719          move.b    4227078,-5(A6)
08000A3E  8006 FFFB 
                    1720   ; printf("\r\nRead [%x] from Address[%x]", readData, ChipAddress);
08000A42  2F02      1721          move.l    D2,-(A7)
08000A44  122E FFFB 1722          move.b    -5(A6),D1
08000A48  C2BC 0000 1723          and.l     #255,D1
08000A4C  00FF      
08000A4E  2F01      1724          move.l    D1,-(A7)
08000A50  4879 0800 1725          pea       @mupde1_3.L
08000A54  2544      
08000A56  4EB9 0800 1726          jsr       _printf
08000A5A  1A36      
08000A5C  DEFC 000C 1727          add.w     #12,A7
                    1728   ; ChipAddress++;
08000A60  5282      1729          addq.l    #1,D2
                    1730   ; block_address++;
08000A62  5287      1731          addq.l    #1,D7
                    1732   ReadI2CSequential_7:
                    1733   ; }
                    1734   ; if (block_change_flag) {
08000A64  200C      1735          move.l    A4,D0
08000A66  6700 005E 1736          beq       ReadI2CSequential_14
                    1737   ; controleWriteByte = EEPROM_Write_Block_1;
08000A6A  183C 00A2 1738          move.b    #162,D4
                    1739   ; controlReadByte = EEPROM_Read_Block_1;
08000A6E  163C 00A3 1740          move.b    #163,D3
                    1741   ; AddressMSB = 0;
08000A72  4206      1742          clr.b     D6
                    1743   ; AddressLSB = 0;
08000A74  4205      1744          clr.b     D5
                    1745   ; WaitTIP();
08000A76  4E92      1746          jsr       (A2)
                    1747   ; I2C_TX = controleWriteByte;
08000A78  13C4 0040 1748          move.b    D4,4227078
08000A7C  8006      
                    1749   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
08000A7E  13FC 0091 1750          move.b    #145,4227080
08000A82  0040 8008 
                    1751   ; WaitTIP();
08000A86  4E92      1752          jsr       (A2)
                    1753   ; WaitACK();
08000A88  4E93      1754          jsr       (A3)
                    1755   ; I2C_TX = AddressMSB;
08000A8A  13C6 0040 1756          move.b    D6,4227078
08000A8E  8006      
                    1757   ; I2C_CMD = I2C_CMD_Slave_Write;
08000A90  13FC 0011 1758          move.b    #17,4227080
08000A94  0040 8008 
                    1759   ; WaitTIP();
08000A98  4E92      1760          jsr       (A2)
                    1761   ; WaitACK();
08000A9A  4E93      1762          jsr       (A3)
                    1763   ; I2C_TX = AddressLSB;
08000A9C  13C5 0040 1764          move.b    D5,4227078
08000AA0  8006      
                    1765   ; I2C_CMD = I2C_CMD_Slave_Write;
08000AA2  13FC 0011 1766          move.b    #17,4227080
08000AA6  0040 8008 
                    1767   ; WaitTIP();
08000AAA  4E92      1768          jsr       (A2)
                    1769   ; WaitACK();
08000AAC  4E93      1770          jsr       (A3)
                    1771   ; I2C_TX = controlReadByte;
08000AAE  13C3 0040 1772          move.b    D3,4227078
08000AB2  8006      
                    1773   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
08000AB4  13FC 0091 1774          move.b    #145,4227080
08000AB8  0040 8008 
                    1775   ; WaitTIP();
08000ABC  4E92      1776          jsr       (A2)
                    1777   ; WaitACK();
08000ABE  4E93      1778          jsr       (A3)
                    1779   ; block_change_flag = 0;
08000AC0  387C 0000 1780          move.w    #0,A4
                    1781   ; block_address = 0;
08000AC4  7E00      1782          moveq     #0,D7
                    1783   ReadI2CSequential_14:
08000AC6  524D      1784          addq.w    #1,A5
08000AC8  6000 FF18 1785          bra       ReadI2CSequential_3
                    1786   ReadI2CSequential_5:
                    1787   ; }
                    1788   ; }
                    1789   ; I2C_CMD = I2C_CMD_Slave_Read_Ack;
08000ACC  13FC 0029 1790          move.b    #41,4227080
08000AD0  0040 8008 
                    1791   ; WaitTIP();
08000AD4  4E92      1792          jsr       (A2)
                    1793   ; while(I2C_STAT & 0x01 == 0x00);
                    1794   ; I2C_CMD = I2C_CMD_Slave_Read_Stop;
08000AD6  13FC 0049 1795          move.b    #73,4227080
08000ADA  0040 8008 
                    1796   ; printf("\r\nBlock Read operation complete\r\n");
08000ADE  4879 0800 1797          pea       @mupde1_4.L
08000AE2  2562      
08000AE4  4EB9 0800 1798          jsr       _printf
08000AE8  1A36      
08000AEA  584F      1799          addq.w    #4,A7
                    1800   ; return;
08000AEC  4CDF 3CFC 1801          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000AF0  4E5E      1802          unlk      A6
08000AF2  4E75      1803          rts
                    1804   ; }
                    1805   ; ///////////////////////////////////////////////
                    1806   ; // generate a waveform (square wave) via DAC //
                    1807   ; ///////////////////////////////////////////////
                    1808   ; void DACWrite(void) {
                    1809   _DACWrite:
08000AF4  48E7 3830 1810          movem.l   D2/D3/D4/A2/A3,-(A7)
08000AF8  45F9 0800 1811          lea       _WaitTIP.L,A2
08000AFC  0488      
08000AFE  47F9 0800 1812          lea       _WaitACK.L,A3
08000B02  04AE      
                    1813   ; int i;
                    1814   ; unsigned int delay = 0xFFFFF;
08000B04  283C 000F 1815          move.l    #1048575,D4
08000B08  FFFF      
                    1816   ; printf("\nI2C DAC Write: Please check LED\n");
08000B0A  4879 0800 1817          pea       @mupde1_5.L
08000B0E  2584      
08000B10  4EB9 0800 1818          jsr       _printf
08000B14  1A36      
08000B16  584F      1819          addq.w    #4,A7
                    1820   ; WaitTIP();
08000B18  4E92      1821          jsr       (A2)
                    1822   ; I2C_TX = ADC_DAC_Write_Address;
08000B1A  13FC 0090 1823          move.b    #144,4227078
08000B1E  0040 8006 
                    1824   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
08000B22  13FC 0091 1825          move.b    #145,4227080
08000B26  0040 8008 
                    1826   ; WaitTIP();
08000B2A  4E92      1827          jsr       (A2)
                    1828   ; WaitACK();
08000B2C  4E93      1829          jsr       (A3)
                    1830   ; I2C_TX = DAC_CMD_Enable;
08000B2E  13FC 0040 1831          move.b    #64,4227078
08000B32  0040 8006 
                    1832   ; I2C_CMD = I2C_CMD_Slave_Write;
08000B36  13FC 0011 1833          move.b    #17,4227080
08000B3A  0040 8008 
                    1834   ; WaitTIP();
08000B3E  4E92      1835          jsr       (A2)
                    1836   ; WaitACK();
08000B40  4E93      1837          jsr       (A3)
                    1838   ; I2C_TX = 0xFF; 
08000B42  13FC 00FF 1839          move.b    #255,4227078
08000B46  0040 8006 
                    1840   ; I2C_CMD = I2C_CMD_Slave_Write;
08000B4A  13FC 0011 1841          move.b    #17,4227080
08000B4E  0040 8008 
                    1842   ; WaitTIP();
08000B52  4E92      1843          jsr       (A2)
                    1844   ; WaitACK();
08000B54  4E93      1845          jsr       (A3)
                    1846   ; while(1) { // keep blinking the LED
                    1847   DACWrite_1:
                    1848   ; unsigned int val = 0xFF; // digital high
08000B56  263C 0000 1849          move.l    #255,D3
08000B5A  00FF      
                    1850   ; I2C_TX = val; 
08000B5C  13C3 0040 1851          move.b    D3,4227078
08000B60  8006      
                    1852   ; I2C_CMD = I2C_CMD_Slave_Write;
08000B62  13FC 0011 1853          move.b    #17,4227080
08000B66  0040 8008 
                    1854   ; WaitTIP();
08000B6A  4E92      1855          jsr       (A2)
                    1856   ; WaitACK();
08000B6C  4E93      1857          jsr       (A3)
                    1858   ; for(i = 0; i < delay; i++);
08000B6E  4282      1859          clr.l     D2
                    1860   DACWrite_4:
08000B70  B484      1861          cmp.l     D4,D2
08000B72  6404      1862          bhs.s     DACWrite_6
08000B74  5282      1863          addq.l    #1,D2
08000B76  60F8      1864          bra       DACWrite_4
                    1865   DACWrite_6:
                    1866   ; val = 0x00; // digital low
08000B78  4283      1867          clr.l     D3
                    1868   ; I2C_TX = val;
08000B7A  13C3 0040 1869          move.b    D3,4227078
08000B7E  8006      
                    1870   ; I2C_CMD = I2C_CMD_Slave_Write;
08000B80  13FC 0011 1871          move.b    #17,4227080
08000B84  0040 8008 
                    1872   ; WaitTIP();
08000B88  4E92      1873          jsr       (A2)
                    1874   ; WaitACK();
08000B8A  4E93      1875          jsr       (A3)
                    1876   ; for(i = 0; i < delay; i++);
08000B8C  4282      1877          clr.l     D2
                    1878   DACWrite_7:
08000B8E  B484      1879          cmp.l     D4,D2
08000B90  6404      1880          bhs.s     DACWrite_9
08000B92  5282      1881          addq.l    #1,D2
08000B94  60F8      1882          bra       DACWrite_7
                    1883   DACWrite_9:
08000B96  60BE      1884          bra       DACWrite_1
                    1885   ; }
                    1886   ; }
                    1887   ; ///////////////////////////////////////////////
                    1888   ; // generate a waveform (square wave) via DAC //
                    1889   ; ///////////////////////////////////////////////
                    1890   ; char ADCRead(int arg){
                    1891   _ADCRead:
08000B98  4E56 FFF8 1892          link      A6,#-8
08000B9C  48E7 3030 1893          movem.l   D2/D3/A2/A3,-(A7)
08000BA0  45F9 0800 1894          lea       _WaitTIP.L,A2
08000BA4  0488      
08000BA6  262E 0008 1895          move.l    8(A6),D3
08000BAA  47F9 0800 1896          lea       _WaitACK.L,A3
08000BAE  04AE      
                    1897   ; unsigned char thermistor_value;
                    1898   ; unsigned char potentiometer_value;
                    1899   ; unsigned char photo_resistor_value;
                    1900   ; unsigned int delay = 0xFFFFF;
08000BB0  2D7C 000F 1901          move.l    #1048575,-4(A6)
08000BB4  FFFF FFFC 
                    1902   ; unsigned char result;
                    1903   ; WaitTIP();
08000BB8  4E92      1904          jsr       (A2)
                    1905   ; I2C_TX = ADC_DAC_Write_Address;
08000BBA  13FC 0090 1906          move.b    #144,4227078
08000BBE  0040 8006 
                    1907   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
08000BC2  13FC 0091 1908          move.b    #145,4227080
08000BC6  0040 8008 
                    1909   ; WaitTIP();
08000BCA  4E92      1910          jsr       (A2)
                    1911   ; WaitACK();
08000BCC  4E93      1912          jsr       (A3)
                    1913   ; I2C_TX = ADC_CMD_Enable;
08000BCE  13FC 0044 1914          move.b    #68,4227078
08000BD2  0040 8006 
                    1915   ; I2C_CMD = I2C_CMD_Slave_Write;
08000BD6  13FC 0011 1916          move.b    #17,4227080
08000BDA  0040 8008 
                    1917   ; WaitTIP();
08000BDE  4E92      1918          jsr       (A2)
                    1919   ; WaitACK();
08000BE0  4E93      1920          jsr       (A3)
                    1921   ; I2C_TX = ADC_Read_Address;
08000BE2  13FC 0091 1922          move.b    #145,4227078
08000BE6  0040 8006 
                    1923   ; I2C_CMD = I2C_CMD_Slave_Write_With_Start;
08000BEA  13FC 0091 1924          move.b    #145,4227080
08000BEE  0040 8008 
                    1925   ; WaitTIP();
08000BF2  4E92      1926          jsr       (A2)
                    1927   ; WaitACK();
08000BF4  4E93      1928          jsr       (A3)
                    1929   ; I2C_CMD = I2C_CMD_Slave_Read;
08000BF6  13FC 0021 1930          move.b    #33,4227080
08000BFA  0040 8008 
                    1931   ; WaitTIP();
08000BFE  4E92      1932          jsr       (A2)
                    1933   ; // measure thermistor 
                    1934   ; I2C_CMD = I2C_CMD_Slave_Read;
08000C00  13FC 0021 1935          move.b    #33,4227080
08000C04  0040 8008 
                    1936   ; WaitTIP();
08000C08  4E92      1937          jsr       (A2)
                    1938   ; thermistor_value = I2C_RX;
08000C0A  1D79 0040 1939          move.b    4227078,-7(A6)
08000C0E  8006 FFF9 
                    1940   ; // measure potentiometer 
                    1941   ; I2C_CMD = I2C_CMD_Slave_Read;
08000C12  13FC 0021 1942          move.b    #33,4227080
08000C16  0040 8008 
                    1943   ; WaitTIP();
08000C1A  4E92      1944          jsr       (A2)
                    1945   ; potentiometer_value = I2C_RX;
08000C1C  1D79 0040 1946          move.b    4227078,-6(A6)
08000C20  8006 FFFA 
                    1947   ; // measure photo resistor 
                    1948   ; I2C_CMD = I2C_CMD_Slave_Read;
08000C24  13FC 0021 1949          move.b    #33,4227080
08000C28  0040 8008 
                    1950   ; WaitTIP();
08000C2C  4E92      1951          jsr       (A2)
                    1952   ; photo_resistor_value = I2C_RX;
08000C2E  1D79 0040 1953          move.b    4227078,-5(A6)
08000C32  8006 FFFB 
                    1954   ; result = 0;
08000C36  4202      1955          clr.b     D2
                    1956   ; if (arg == 0) {
08000C38  4A83      1957          tst.l     D3
08000C3A  6606      1958          bne.s     ADCRead_1
                    1959   ; // printf("Value of Thermistor: %d\n", thermistor_value);
                    1960   ; result = thermistor_value;
08000C3C  142E FFF9 1961          move.b    -7(A6),D2
08000C40  6028      1962          bra.s     ADCRead_7
                    1963   ADCRead_1:
                    1964   ; } else if (arg == 1) {
08000C42  0C83 0000 1965          cmp.l     #1,D3
08000C46  0001      
08000C48  6606      1966          bne.s     ADCRead_3
                    1967   ; // printf("Value of Potentiometer: %d\n", potentiometer_value);
                    1968   ; result = potentiometer_value;
08000C4A  142E FFFA 1969          move.b    -6(A6),D2
08000C4E  601A      1970          bra.s     ADCRead_7
                    1971   ADCRead_3:
                    1972   ; } else if (arg == 2) {
08000C50  0C83 0000 1973          cmp.l     #2,D3
08000C54  0002      
08000C56  6606      1974          bne.s     ADCRead_5
                    1975   ; // printf("Value of Photo-resister: %d\n", photo_resistor_value);
                    1976   ; result = photo_resistor_value;
08000C58  142E FFFB 1977          move.b    -5(A6),D2
08000C5C  600C      1978          bra.s     ADCRead_7
                    1979   ADCRead_5:
                    1980   ; } else if (arg == 3) {
08000C5E  0C83 0000 1981          cmp.l     #3,D3
08000C62  0003      
08000C64  6604      1982          bne.s     ADCRead_7
                    1983   ; // printf("Value of Thermistor: %d Potentiometer: %d Photo-resister: %d\n", thermistor_value, potentiometer_value, photo_resistor_value);
                    1984   ; result = 0xff;
08000C66  143C 00FF 1985          move.b    #255,D2
                    1986   ADCRead_7:
                    1987   ; } 
                    1988   ; return result;
08000C6A  1002      1989          move.b    D2,D0
08000C6C  4CDF 0C0C 1990          movem.l   (A7)+,D2/D3/A2/A3
08000C70  4E5E      1991          unlk      A6
08000C72  4E75      1992          rts
                    1993   ; }
                    1994   ; // initialisation for Can controller 0
                    1995   ; void Init_CanBus_Controller0(void)
                    1996   ; {
                    1997   _Init_CanBus_Controller0:
                    1998   ; // TODO - put your Canbus initialisation code for CanController 0 here
                    1999   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                    2000   ; /* define interrupt priority & control (level-activated, see chapter 4.2.5) */
                    2001   ; // PX0 = PRIORITY_HIGH; /* CAN HAS A HIGH PRIORITY INTERRUPT */
                    2002   ; // IT0 = INTLEVELACT; /* set interrupt0 to level activated */
                    2003   ; // /* enable the communication interface of the SJA1000 */
                    2004   ; // CS = ENABLE_N; /* Enable the SJA1000 interface */
                    2005   ; // /* disable interrupts, if used (not necessary after power-on) */
                    2006   ; // EA = DISABLE; /* disable all interrupts */
                    2007   ; // SJAIntEn = DISABLE; /* disable external interrupt from SJA1000 */
                    2008   ; // /* set reset mode/request (Note: after power-on SJA1000 is in BasicCAN mode)
                    2009   ; // leave loop after a time out and signal an error */
                    2010   ; while ((Can0_ModeControlReg & RM_RR_Bit) == ClrByte){
                    2011   Init_CanBus_Controller0_1:
08000C74  1039 0050 2012          move.b    5242880,D0
08000C78  0000      
08000C7A  C03C 0001 2013          and.b     #1,D0
08000C7E  6612      2014          bne.s     Init_CanBus_Controller0_3
                    2015   ; /* other bits than the reset mode/request bit are unchanged */
                    2016   ; Can0_ModeControlReg = Can0_ModeControlReg | RM_RR_Bit;
08000C80  1039 0050 2017          move.b    5242880,D0
08000C84  0000      
08000C86  803C 0001 2018          or.b      #1,D0
08000C8A  13C0 0050 2019          move.b    D0,5242880
08000C8E  0000      
08000C90  60E2      2020          bra       Init_CanBus_Controller0_1
                    2021   Init_CanBus_Controller0_3:
                    2022   ; }
                    2023   ; // Set clock divide register to use pelican mode and bypass CAN input comparator (possible only in reset mode)
                    2024   ; Can0_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy2;
08000C92  13FC 00C0 2025          move.b    #192,5242942
08000C96  0050 003E 
                    2026   ; /* disable CAN interrupts, if required (always necessary after power-on)
                    2027   ; (write to SJA1000 Interrupt Enable / Control Register) */
                    2028   ; Can0_InterruptEnReg = ClrIntEnSJA;
08000C9A  4239 0050 2029          clr.b     5242888
08000C9E  0008      
                    2030   ; /* define acceptance code and mask */
                    2031   ; Can0_AcceptCode0Reg = ClrByte;
08000CA0  4239 0050 2032          clr.b     5242912
08000CA4  0020      
                    2033   ; Can0_AcceptCode1Reg = ClrByte;
08000CA6  4239 0050 2034          clr.b     5242914
08000CAA  0022      
                    2035   ; Can0_AcceptCode2Reg = ClrByte;
08000CAC  4239 0050 2036          clr.b     5242916
08000CB0  0024      
                    2037   ; Can0_AcceptCode3Reg = ClrByte;
08000CB2  4239 0050 2038          clr.b     5242918
08000CB6  0026      
                    2039   ; Can0_AcceptMask0Reg = DontCare; /* every identifier is accepted */
08000CB8  13FC 00FF 2040          move.b    #255,5242920
08000CBC  0050 0028 
                    2041   ; Can0_AcceptMask1Reg = DontCare; /* every identifier is accepted */
08000CC0  13FC 00FF 2042          move.b    #255,5242922
08000CC4  0050 002A 
                    2043   ; Can0_AcceptMask2Reg = DontCare; /* every identifier is accepted */
08000CC8  13FC 00FF 2044          move.b    #255,5242924
08000CCC  0050 002C 
                    2045   ; Can0_AcceptMask3Reg = DontCare; /* every identifier is accepted */
08000CD0  13FC 00FF 2046          move.b    #255,5242926
08000CD4  0050 002E 
                    2047   ; /* configure bus timing */
                    2048   ; /* bit-rate = 100 kbit/s @ 25 MHz, the bus is sampled once */
                    2049   ; Can0_BusTiming0Reg = BTR0;
08000CD8  13FC 0004 2050          move.b    #4,5242892
08000CDC  0050 000C 
                    2051   ; Can0_BusTiming1Reg = BTR1;
08000CE0  13FC 007F 2052          move.b    #127,5242894
08000CE4  0050 000E 
                    2053   ; /* configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode */
                    2054   ; Can0_OutControlReg = Tx0Float | Tx0PshPull | NormalMode;
08000CE8  13FC 001A 2055          move.b    #26,5242896
08000CEC  0050 0010 
                    2056   ; // Set mode control to clr
                    2057   ; do {
                    2058   Init_CanBus_Controller0_4:
                    2059   ; Can0_ModeControlReg = ClrByte;
08000CF0  4239 0050 2060          clr.b     5242880
08000CF4  0000      
08000CF6  1039 0050 2061          move.b    5242880,D0
08000CFA  0000      
08000CFC  C03C 0001 2062          and.b     #1,D0
08000D00  66EE      2063          bne       Init_CanBus_Controller0_4
08000D02  4E75      2064          rts
                    2065   ; } while ((Can0_ModeControlReg & RM_RR_Bit) != ClrByte);
                    2066   ; }
                    2067   ; // initialisation for Can controller 1
                    2068   ; void Init_CanBus_Controller1(void)
                    2069   ; {
                    2070   _Init_CanBus_Controller1:
                    2071   ; // TODO - put your Canbus initialisation code for CanController 1 here
                    2072   ; // See section 4.2.1 in the application note for details (PELICAN MODE)
                    2073   ; while ((Can1_ModeControlReg & RM_RR_Bit) == ClrByte){
                    2074   Init_CanBus_Controller1_1:
08000D04  1039 0050 2075          move.b    5243392,D0
08000D08  0200      
08000D0A  C03C 0001 2076          and.b     #1,D0
08000D0E  6612      2077          bne.s     Init_CanBus_Controller1_3
                    2078   ; /* other bits than the reset mode/request bit are unchanged */
                    2079   ; Can1_ModeControlReg = Can1_ModeControlReg | RM_RR_Bit;
08000D10  1039 0050 2080          move.b    5243392,D0
08000D14  0200      
08000D16  803C 0001 2081          or.b      #1,D0
08000D1A  13C0 0050 2082          move.b    D0,5243392
08000D1E  0200      
08000D20  60E2      2083          bra       Init_CanBus_Controller1_1
                    2084   Init_CanBus_Controller1_3:
                    2085   ; }
                    2086   ; // Set clock divide register to use pelican mode and bypass CAN input comparator (possible only in reset mode)
                    2087   ; Can1_ClockDivideReg = CANMode_Bit | CBP_Bit | DivBy2;
08000D22  13FC 00C0 2088          move.b    #192,5243454
08000D26  0050 023E 
                    2089   ; /* disable CAN interrupts, if required (always necessary after power-on)
                    2090   ; (write to SJA1000 Interrupt Enable / Control Register) */
                    2091   ; Can1_InterruptEnReg = ClrIntEnSJA;
08000D2A  4239 0050 2092          clr.b     5243400
08000D2E  0208      
                    2093   ; /* define acceptance code and mask */
                    2094   ; Can1_AcceptCode0Reg = ClrByte;
08000D30  4239 0050 2095          clr.b     5243424
08000D34  0220      
                    2096   ; Can1_AcceptCode1Reg = ClrByte;
08000D36  4239 0050 2097          clr.b     5243426
08000D3A  0222      
                    2098   ; Can1_AcceptCode2Reg = ClrByte;
08000D3C  4239 0050 2099          clr.b     5243428
08000D40  0224      
                    2100   ; Can1_AcceptCode3Reg = ClrByte;
08000D42  4239 0050 2101          clr.b     5243430
08000D46  0226      
                    2102   ; Can1_AcceptMask0Reg = DontCare; /* every identifier is accepted */
08000D48  13FC 00FF 2103          move.b    #255,5243432
08000D4C  0050 0228 
                    2104   ; Can1_AcceptMask1Reg = DontCare; /* every identifier is accepted */
08000D50  13FC 00FF 2105          move.b    #255,5243434
08000D54  0050 022A 
                    2106   ; Can1_AcceptMask2Reg = DontCare; /* every identifier is accepted */
08000D58  13FC 00FF 2107          move.b    #255,5243436
08000D5C  0050 022C 
                    2108   ; Can1_AcceptMask3Reg = DontCare; /* every identifier is accepted */
08000D60  13FC 00FF 2109          move.b    #255,5243438
08000D64  0050 022E 
                    2110   ; /* configure bus timing */
                    2111   ; /* bit-rate = 100 kbit/s @ 25 MHz, the bus is sampled once */
                    2112   ; Can1_BusTiming0Reg = BTR0;
08000D68  13FC 0004 2113          move.b    #4,5243404
08000D6C  0050 020C 
                    2114   ; Can1_BusTiming1Reg = BTR1;
08000D70  13FC 007F 2115          move.b    #127,5243406
08000D74  0050 020E 
                    2116   ; /* configure CAN outputs: float on TX1, Push/Pull on TX0, normal output mode */
                    2117   ; Can1_OutControlReg = Tx0Float | Tx0PshPull | NormalMode;
08000D78  13FC 001A 2118          move.b    #26,5243408
08000D7C  0050 0210 
                    2119   ; // Set mode control to clr
                    2120   ; do {
                    2121   Init_CanBus_Controller1_4:
                    2122   ; Can1_ModeControlReg = ClrByte;
08000D80  4239 0050 2123          clr.b     5243392
08000D84  0200      
08000D86  1039 0050 2124          move.b    5243392,D0
08000D8A  0200      
08000D8C  C03C 0001 2125          and.b     #1,D0
08000D90  66EE      2126          bne       Init_CanBus_Controller1_4
08000D92  4E75      2127          rts
                    2128   ; } while ((Can1_ModeControlReg & RM_RR_Bit) != ClrByte);
                    2129   ; }
                    2130   ; // Transmit for sending a message via Can controller 0
                    2131   ; void CanBus0_Transmit(int id, char data)
                    2132   ; {
                    2133   _CanBus0_Transmit:
08000D94  4E56 0000 2134          link      A6,#0
                    2135   ; // TODO - put your Canbus transmit code for CanController 0 here
                    2136   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                    2137   ; /* wait until the Transmit Buffer is released */
                    2138   ; do
                    2139   ; {
                    2140   CanBus0_Transmit_1:
                    2141   ; /* start a polling timer and run some tasks while waiting
                    2142   ; break the loop and signal an error if time too long */
                    2143   ; } while((Can0_StatusReg & TBS_Bit ) != TBS_Bit );
08000D98  1039 0050 2144          move.b    5242884,D0
08000D9C  0004      
08000D9E  C03C 0004 2145          and.b     #4,D0
08000DA2  0C00 0004 2146          cmp.b     #4,D0
08000DA6  66F0      2147          bne       CanBus0_Transmit_1
                    2148   ; /* Transmit Buffer is released, a message may be written into the buffer */
                    2149   ; /* in this example a Standard Frame message shall be transmitted */
                    2150   ; Can0_TxFrameInfo = 0x08; /* SFF (data), DLC=8 */
08000DA8  13FC 0008 2151          move.b    #8,5242912
08000DAC  0050 0020 
                    2152   ; Can0_TxBuffer1 = 0xA5; /* ID1 = A5, (1010 0101) */
08000DB0  13FC 00A5 2153          move.b    #165,5242914
08000DB4  0050 0022 
                    2154   ; Can0_TxBuffer2 = 0x20; /* ID2 = 20, (0010 0000) */
08000DB8  13FC 0020 2155          move.b    #32,5242916
08000DBC  0050 0024 
                    2156   ; Can0_TxBuffer3 = id; 
08000DC0  202E 0008 2157          move.l    8(A6),D0
08000DC4  13C0 0050 2158          move.b    D0,5242918
08000DC8  0026      
                    2159   ; Can0_TxBuffer4 = data; 
08000DCA  13EE 000F 2160          move.b    15(A6),5242920
08000DCE  0050 0028 
                    2161   ; /* Start the transmission */
                    2162   ; Can0_CommandReg = TR_Bit ; /* Set Transmission Request bit */
08000DD2  13FC 0001 2163          move.b    #1,5242882
08000DD6  0050 0002 
08000DDA  4E5E      2164          unlk      A6
08000DDC  4E75      2165          rts
                    2166   ; }
                    2167   ; // Transmit for sending a message via Can controller 1
                    2168   ; void CanBus1_Transmit(int id, char data)
                    2169   ; {
                    2170   _CanBus1_Transmit:
08000DDE  4E56 0000 2171          link      A6,#0
                    2172   ; // TODO - put your Canbus transmit code for CanController 1 here
                    2173   ; // See section 4.2.2 in the application note for details (PELICAN MODE)
                    2174   ; /* wait until the Transmit Buffer is released */
                    2175   ; do
                    2176   ; {
                    2177   CanBus1_Transmit_1:
                    2178   ; /* start a polling timer and run some tasks while waiting
                    2179   ; break the loop and signal an error if time too long */
                    2180   ; } while((Can1_StatusReg & TBS_Bit ) != TBS_Bit );
08000DE2  1039 0050 2181          move.b    5243396,D0
08000DE6  0204      
08000DE8  C03C 0004 2182          and.b     #4,D0
08000DEC  0C00 0004 2183          cmp.b     #4,D0
08000DF0  66F0      2184          bne       CanBus1_Transmit_1
                    2185   ; /* Transmit Buffer is released, a message may be written into the buffer */
                    2186   ; /* in this example a Standard Frame message shall be transmitted */
                    2187   ; Can1_TxFrameInfo = 0x08; /* SFF (data), DLC=8 */
08000DF2  13FC 0008 2188          move.b    #8,5243424
08000DF6  0050 0220 
                    2189   ; Can1_TxBuffer1 = 0xA5; /* ID1 = A5, (1010 0101) */
08000DFA  13FC 00A5 2190          move.b    #165,5243426
08000DFE  0050 0222 
                    2191   ; Can1_TxBuffer2 = 0x20; /* ID2 = 20, (0010 0000) */
08000E02  13FC 0020 2192          move.b    #32,5243428
08000E06  0050 0224 
                    2193   ; Can1_TxBuffer3 = 0x32; /* data1 = 51 */
08000E0A  13FC 0032 2194          move.b    #50,5243430
08000E0E  0050 0226 
                    2195   ; Can1_TxBuffer4 = 0x42; /* data2 = 52*/
08000E12  13FC 0042 2196          move.b    #66,5243432
08000E16  0050 0228 
                    2197   ; Can1_TxBuffer10 = 0x12; /* data8 = 58 */
08000E1A  13FC 0012 2198          move.b    #18,5243444
08000E1E  0050 0234 
                    2199   ; /* Start the transmission */
                    2200   ; Can1_CommandReg = TR_Bit ; /* Set Transmission Request bit */
08000E22  13FC 0001 2201          move.b    #1,5243394
08000E26  0050 0202 
08000E2A  4E5E      2202          unlk      A6
08000E2C  4E75      2203          rts
                    2204   ; }
                    2205   ; // Receive for reading a received message via Can controller 0
                    2206   ; void CanBus0_Receive(void)
                    2207   ; {
                    2208   _CanBus0_Receive:
08000E2E  4E56 FFF4 2209          link      A6,#-12
08000E32  2F0A      2210          move.l    A2,-(A7)
08000E34  45EE FFF6 2211          lea       -10(A6),A2
                    2212   ; // TODO - put your Canbus receive code for CanController 0 here
                    2213   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                    2214   ; unsigned char numArray[2];
                    2215   ; unsigned char dataArray[10];
                    2216   ; do{ }while((Can0_StatusReg & RBS_Bit) != RBS_Bit);
                    2217   CanBus0_Receive_1:
08000E38  1039 0050 2218          move.b    5242884,D0
08000E3C  0004      
08000E3E  C03C 0001 2219          and.b     #1,D0
08000E42  0C00 0001 2220          cmp.b     #1,D0
08000E46  66F0      2221          bne       CanBus0_Receive_1
                    2222   ; numArray[0] = Can0_RxBuffer1 & 0xff;
08000E48  1039 0050 2223          move.b    5242914,D0
08000E4C  0022      
08000E4E  C07C 00FF 2224          and.w     #255,D0
08000E52  C07C 00FF 2225          and.w     #255,D0
08000E56  1D40 FFF4 2226          move.b    D0,-12+0(A6)
                    2227   ; numArray[1] = Can0_RxBuffer2 & 0xff;
08000E5A  1039 0050 2228          move.b    5242916,D0
08000E5E  0024      
08000E60  C07C 00FF 2229          and.w     #255,D0
08000E64  C07C 00FF 2230          and.w     #255,D0
08000E68  1D40 FFF5 2231          move.b    D0,-12+1(A6)
                    2232   ; //data bits
                    2233   ; dataArray[0] = Can0_RxBuffer3;
08000E6C  14B9 0050 2234          move.b    5242918,(A2)
08000E70  0026      
                    2235   ; dataArray[1] = Can0_RxBuffer4;
08000E72  1579 0050 2236          move.b    5242920,1(A2)
08000E76  0028 0001 
                    2237   ; Can0_CommandReg = RRB_Bit;
08000E7A  13FC 0004 2238          move.b    #4,5242882
08000E7E  0050 0002 
                    2239   ; printf("Can0 recieve data at index 0: %d\n", dataArray[0]);
08000E82  1212      2240          move.b    (A2),D1
08000E84  C2BC 0000 2241          and.l     #255,D1
08000E88  00FF      
08000E8A  2F01      2242          move.l    D1,-(A7)
08000E8C  4879 0800 2243          pea       @mupde1_6.L
08000E90  25A6      
08000E92  4EB9 0800 2244          jsr       _printf
08000E96  1A36      
08000E98  504F      2245          addq.w    #8,A7
                    2246   ; printf("Can0 recieve data at index 1: %d\n", dataArray[1]);
08000E9A  122A 0001 2247          move.b    1(A2),D1
08000E9E  C2BC 0000 2248          and.l     #255,D1
08000EA2  00FF      
08000EA4  2F01      2249          move.l    D1,-(A7)
08000EA6  4879 0800 2250          pea       @mupde1_7.L
08000EAA  25C8      
08000EAC  4EB9 0800 2251          jsr       _printf
08000EB0  1A36      
08000EB2  504F      2252          addq.w    #8,A7
08000EB4  245F      2253          move.l    (A7)+,A2
08000EB6  4E5E      2254          unlk      A6
08000EB8  4E75      2255          rts
                    2256   ; }
                    2257   ; // Receive for reading a received message via Can controller 1
                    2258   ; void CanBus1_Receive(void)
                    2259   ; {
                    2260   _CanBus1_Receive:
08000EBA  4E56 FFF4 2261          link      A6,#-12
08000EBE  2F0A      2262          move.l    A2,-(A7)
08000EC0  45EE FFF6 2263          lea       -10(A6),A2
                    2264   ; // TODO - put your Canbus receive code for CanController 0 here
                    2265   ; // See section 4.2.4 in the application note for details (PELICAN MODE)
                    2266   ; unsigned char numArray[2];
                    2267   ; unsigned char dataArray[10];
                    2268   ; do{ }while((Can1_StatusReg & RBS_Bit) != RBS_Bit);
                    2269   CanBus1_Receive_1:
08000EC4  1039 0050 2270          move.b    5243396,D0
08000EC8  0204      
08000ECA  C03C 0001 2271          and.b     #1,D0
08000ECE  0C00 0001 2272          cmp.b     #1,D0
08000ED2  66F0      2273          bne       CanBus1_Receive_1
                    2274   ; numArray[0] = Can1_RxBuffer1 & 0xff;
08000ED4  1039 0050 2275          move.b    5243426,D0
08000ED8  0222      
08000EDA  C07C 00FF 2276          and.w     #255,D0
08000EDE  C07C 00FF 2277          and.w     #255,D0
08000EE2  1D40 FFF4 2278          move.b    D0,-12+0(A6)
                    2279   ; numArray[1] = Can1_RxBuffer2 & 0xff;
08000EE6  1039 0050 2280          move.b    5243428,D0
08000EEA  0224      
08000EEC  C07C 00FF 2281          and.w     #255,D0
08000EF0  C07C 00FF 2282          and.w     #255,D0
08000EF4  1D40 FFF5 2283          move.b    D0,-12+1(A6)
                    2284   ; //data bits
                    2285   ; dataArray[0] = Can1_RxBuffer3;
08000EF8  14B9 0050 2286          move.b    5243430,(A2)
08000EFC  0226      
                    2287   ; dataArray[1] = Can1_RxBuffer4;
08000EFE  1579 0050 2288          move.b    5243432,1(A2)
08000F02  0228 0001 
                    2289   ; Can1_CommandReg = RRB_Bit;
08000F06  13FC 0004 2290          move.b    #4,5243394
08000F0A  0050 0202 
                    2291   ; printf("Can1 recieve data at index 0: %d\n", dataArray[0]);
08000F0E  1212      2292          move.b    (A2),D1
08000F10  C2BC 0000 2293          and.l     #255,D1
08000F14  00FF      
08000F16  2F01      2294          move.l    D1,-(A7)
08000F18  4879 0800 2295          pea       @mupde1_8.L
08000F1C  25EA      
08000F1E  4EB9 0800 2296          jsr       _printf
08000F22  1A36      
08000F24  504F      2297          addq.w    #8,A7
                    2298   ; printf("Can1 recieve data at index 1: %d\n", dataArray[1]);
08000F26  122A 0001 2299          move.b    1(A2),D1
08000F2A  C2BC 0000 2300          and.l     #255,D1
08000F2E  00FF      
08000F30  2F01      2301          move.l    D1,-(A7)
08000F32  4879 0800 2302          pea       @mupde1_9.L
08000F36  260C      
08000F38  4EB9 0800 2303          jsr       _printf
08000F3C  1A36      
08000F3E  504F      2304          addq.w    #8,A7
08000F40  245F      2305          move.l    (A7)+,A2
08000F42  4E5E      2306          unlk      A6
08000F44  4E75      2307          rts
                    2308   ; }
                    2309   ; void CanBusTest(void)
                    2310   ; {
                    2311   _CanBusTest:
08000F46  48E7 2020 2312          movem.l   D2/A2,-(A7)
08000F4A  45F9 0800 2313          lea       _printf.L,A2
08000F4E  1A36      
                    2314   ; int i;
                    2315   ; // initialise the two Can controllers
                    2316   ; Init_CanBus_Controller0();
08000F50  4EB9 0800 2317          jsr       _Init_CanBus_Controller0
08000F54  0C74      
                    2318   ; Init_CanBus_Controller1();
08000F56  4EB9 0800 2319          jsr       _Init_CanBus_Controller1
08000F5A  0D04      
                    2320   ; printf("\r\n\r\n---- CANBUS Test ----\r\n") ;
08000F5C  4879 0800 2321          pea       @mupde1_10.L
08000F60  262E      
08000F62  4E92      2322          jsr       (A2)
08000F64  584F      2323          addq.w    #4,A7
                    2324   ; // simple application to alternately transmit and receive messages from each of two nodes
                    2325   ; while (1) {
                    2326   CanBusTest_1:
                    2327   ; for (i = 0; i < 500; i++) {
08000F66  4282      2328          clr.l     D2
                    2329   CanBusTest_4:
08000F68  0C82 0000 2330          cmp.l     #500,D2
08000F6C  01F4      
08000F6E  6C0A      2331          bge.s     CanBusTest_6
                    2332   ; Wait1ms();
08000F70  4EB9 0800 2333          jsr       _Wait1ms
08000F74  02D0      
08000F76  5282      2334          addq.l    #1,D2
08000F78  60EE      2335          bra       CanBusTest_4
                    2336   CanBusTest_6:
                    2337   ; }
                    2338   ; CanBus0_Transmit(1, 0x10) ;       // transmit a message via Controller 0
08000F7A  4878 0010 2339          pea       16
08000F7E  4878 0001 2340          pea       1
08000F82  4EB9 0800 2341          jsr       _CanBus0_Transmit
08000F86  0D94      
08000F88  504F      2342          addq.w    #8,A7
                    2343   ; CanBus1_Receive() ;        // receive a message via Controller 1 (and display it)
08000F8A  4EB9 0800 2344          jsr       _CanBus1_Receive
08000F8E  0EBA      
                    2345   ; printf("\r\n") ;
08000F90  4879 0800 2346          pea       @mupde1_11.L
08000F94  264A      
08000F96  4E92      2347          jsr       (A2)
08000F98  584F      2348          addq.w    #4,A7
                    2349   ; for (i = 0; i < 500; i++) {
08000F9A  4282      2350          clr.l     D2
                    2351   CanBusTest_7:
08000F9C  0C82 0000 2352          cmp.l     #500,D2
08000FA0  01F4      
08000FA2  6C0A      2353          bge.s     CanBusTest_9
                    2354   ; Wait1ms();
08000FA4  4EB9 0800 2355          jsr       _Wait1ms
08000FA8  02D0      
08000FAA  5282      2356          addq.l    #1,D2
08000FAC  60EE      2357          bra       CanBusTest_7
                    2358   CanBusTest_9:
                    2359   ; }
                    2360   ; CanBus1_Transmit(1, 0x11) ;        // transmit a message via Controller 1
08000FAE  4878 0011 2361          pea       17
08000FB2  4878 0001 2362          pea       1
08000FB6  4EB9 0800 2363          jsr       _CanBus1_Transmit
08000FBA  0DDE      
08000FBC  504F      2364          addq.w    #8,A7
                    2365   ; CanBus0_Receive() ;         // receive a message via Controller 0 (and display it)
08000FBE  4EB9 0800 2366          jsr       _CanBus0_Receive
08000FC2  0E2E      
                    2367   ; printf("\r\n") ;
08000FC4  4879 0800 2368          pea       @mupde1_11.L
08000FC8  264A      
08000FCA  4E92      2369          jsr       (A2)
08000FCC  584F      2370          addq.w    #4,A7
08000FCE  6096      2371          bra       CanBusTest_1
                    2372   ; }
                    2373   ; }
                    2374   ; /******************************************************************************************************************************
                    2375   ; * Start of user program
                    2376   ; ******************************************************************************************************************************/
                    2377   ; void main()
                    2378   ; {
                    2379   _main:
08000FD0  4E56 FF54 2380          link      A6,#-172
08000FD4  2F0A      2381          move.l    A2,-(A7)
08000FD6  45F9 0800 2382          lea       _InstallExceptionHandler.L,A2
08000FDA  0458      
                    2383   ; unsigned int row, i=0, count=0, counter1=1;
08000FDC  42AE FF58 2384          clr.l     -168(A6)
08000FE0  42AE FF5C 2385          clr.l     -164(A6)
08000FE4  2D7C 0000 2386          move.l    #1,-160(A6)
08000FE8  0001 FF60 
                    2387   ; char c, text[150] ;
                    2388   ; // unsigned int start ;
                    2389   ; // unsigned int end ;
                    2390   ; // char input_char;
                    2391   ; // unsigned long int data;
                    2392   ; // unsigned long int write_data;
                    2393   ; // unsigned long long int *ramptr;
                    2394   ; int PassFailFlag = 1 ;
08000FEC  2D7C 0000 2395          move.l    #1,-4(A6)
08000FF0  0001 FFFC 
                    2396   ; i = x = y = z = PortA_Count =0;
08000FF4  42B9 0800 2397          clr.l     _PortA_Count.L
08000FF8  2794      
08000FFA  42B9 0800 2398          clr.l     _z.L
08000FFE  2790      
08001000  42B9 0800 2399          clr.l     _y.L
08001004  278C      
08001006  42B9 0800 2400          clr.l     _x.L
0800100A  2788      
0800100C  42AE FF58 2401          clr.l     -168(A6)
                    2402   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
08001010  4239 0800 2403          clr.b     _Timer4Count.L
08001014  279E      
08001016  4239 0800 2404          clr.b     _Timer3Count.L
0800101A  279C      
0800101C  4239 0800 2405          clr.b     _Timer2Count.L
08001020  279A      
08001022  4239 0800 2406          clr.b     _Timer1Count.L
08001026  2798      
                    2407   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
08001028  4878 0019 2408          pea       25
0800102C  4879 0800 2409          pea       _PIA_ISR.L
08001030  02CA      
08001032  4E92      2410          jsr       (A2)
08001034  504F      2411          addq.w    #8,A7
                    2412   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
08001036  4878 001A 2413          pea       26
0800103A  4879 0800 2414          pea       _ACIA_ISR.L
0800103E  02C8      
08001040  4E92      2415          jsr       (A2)
08001042  504F      2416          addq.w    #8,A7
                    2417   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
08001044  4878 001B 2418          pea       27
08001048  4879 0800 2419          pea       _Timer_ISR.L
0800104C  0178      
0800104E  4E92      2420          jsr       (A2)
08001050  504F      2421          addq.w    #8,A7
                    2422   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
08001052  4878 001C 2423          pea       28
08001056  4879 0800 2424          pea       _Key2PressISR.L
0800105A  02CC      
0800105C  4E92      2425          jsr       (A2)
0800105E  504F      2426          addq.w    #8,A7
                    2427   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
08001060  4878 001D 2428          pea       29
08001064  4879 0800 2429          pea       _Key1PressISR.L
08001068  02CE      
0800106A  4E92      2430          jsr       (A2)
0800106C  504F      2431          addq.w    #8,A7
                    2432   ; // InstallExceptionHandler(Timer_ISR, 30);
                    2433   ; Timer1Data = 0x25;		// program time delay into timers 1-4
0800106E  13FC 0025 2434          move.b    #37,4194352
08001072  0040 0030 
                    2435   ; // Timer2Data = 0x20;
                    2436   ; // Timer3Data = 0x15;
                    2437   ; // Timer4Data = 0x25;
                    2438   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
08001076  13FC 0003 2439          move.b    #3,4194354
0800107A  0040 0032 
                    2440   ; Init_CanBus_Controller0();
0800107E  4EB9 0800 2441          jsr       _Init_CanBus_Controller0
08001082  0C74      
                    2442   ; Init_CanBus_Controller1();
08001084  4EB9 0800 2443          jsr       _Init_CanBus_Controller1
08001088  0D04      
                    2444   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
0800108A  4EB9 0800 2445          jsr       _Init_LCD
0800108E  02FE      
                    2446   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
08001090  4EB9 0800 2447          jsr       _Init_RS232
08001094  031C      
                    2448   ; /*************************************************************************************************
                    2449   ; **  Test of scanf function
                    2450   ; *************************************************************************************************/
                    2451   ; scanflush() ;                       // flush any text that may have been typed ahead
08001096  4EB9 0800 2452          jsr       _scanflush
0800109A  142A      
                    2453   ; // printf("\r\nEnter Integer: ") ;
                    2454   ; // scanf("%d", &i) ;
                    2455   ; // printf("You entered %d", i) ;
                    2456   ; // sprintf(text, "Hello CPEN 412 Student") ;
                    2457   ; // LCDLine1Message(text) ;
                    2458   ; // printf("\r\nHello CPEN 412 Student\r\nYour LEDs should be Flashing") ;
                    2459   ; // printf("\r\nYour LCD should be displaying") ;
                    2460   ; // while(1)
                    2461   ; //     ;
                    2462   ; // programs should NOT exit as there is nothing to Exit TO !!!!!!
                    2463   ; // There is no OS - just press the reset button to end program and call debug
                    2464   ; /*************************************************************************************************
                    2465   ; **  Test of SPI function
                    2466   ; *************************************************************************************************/
                    2467   ; printf("User program here \r\n");
0800109C  4879 0800 2468          pea       @mupde1_12.L
080010A0  264E      
080010A2  4EB9 0800 2469          jsr       _printf
080010A6  1A36      
080010A8  584F      2470          addq.w    #4,A7
                    2471   ; while(1) {
                    2472   main_1:
                    2473   ; CanBus1_Receive() ;        // receive a message via Controller 1 (and display it)
080010AA  4EB9 0800 2474          jsr       _CanBus1_Receive
080010AE  0EBA      
                    2475   ; // for (i = 0; i < 100; i++) {
                    2476   ; //     Wait1ms();
                    2477   ; // }
                    2478   ; printf("\r\n") ;
080010B0  4879 0800 2479          pea       @mupde1_11.L
080010B4  264A      
080010B6  4EB9 0800 2480          jsr       _printf
080010BA  1A36      
080010BC  584F      2481          addq.w    #4,A7
080010BE  60EA      2482          bra       main_1
                    2483   ; };
                    2484   ; }
                    2485   ULDIV:
080010C0  4E56 0000 2486          link    A6,#0
080010C4  48E7 C000 2487          movem.l D0/D1,-(A7)
080010C8  222E 0008 2488          move.l  8(A6),D1
080010CC  202E 000C 2489          move.l  12(A6),D0
080010D0  6036      2490          bra.s   ldiv_3
                    2491   LDIV:
080010D2  4E56 0000 2492          link    A6,#0
080010D6  48E7 C000 2493          movem.l D0/D1,-(A7)
080010DA  222E 0008 2494          move.l  8(A6),D1
080010DE  202E 000C 2495          move.l  12(A6),D0
080010E2  4A80      2496          tst.l   D0
080010E4  6A0E      2497          bpl.s   ldiv_1
080010E6  4480      2498          neg.l   D0
080010E8  4A81      2499          tst.l   D1
080010EA  6A14      2500          bpl.s   ldiv_2
080010EC  4481      2501          neg.l   D1
080010EE  612A      2502          bsr.s   dodiv
080010F0  4481      2503          neg.l   D1
080010F2  6016      2504          bra.s   ldiv_4
                    2505   ldiv_1:
080010F4  4A81      2506          tst.l   D1
080010F6  6A10      2507          bpl.s   ldiv_3
080010F8  4481      2508          neg.l   D1
080010FA  611E      2509          bsr.s   dodiv
080010FC  4480      2510          neg.l   D0
080010FE  600A      2511          bra.s   ldiv_4
                    2512   ldiv_2:
08001100  6118      2513          bsr.s   dodiv
08001102  4480      2514          neg.l   D0
08001104  4481      2515          neg.l   D1
08001106  6002      2516          bra.s   ldiv_4
                    2517   ldiv_3:
08001108  6110      2518          bsr.s   dodiv
                    2519   ldiv_4:
0800110A  2D40 0008 2520          move.l  D0,8(A6)
0800110E  2D41 000C 2521          move.l  D1,12(A6)
08001112  4CDF 0003 2522          movem.l (A7)+,D0/D1
08001116  4E5E      2523          unlk    A6
08001118  4E75      2524          rts
                    2525   dodiv:
0800111A  0C81 0000 2526          cmpi.l  #$FFFF,D1
0800111E  FFFF      
08001120  6236      2527          bhi.s   dodiv_2
08001122  0C80 0000 2528          cmpi.l  #$FFFF,D0
08001126  FFFF      
08001128  6210      2529          bhi.s   dodiv_1
0800112A  80C1      2530          divu    D1,D0
0800112C  2200      2531          move.l  D0,D1
0800112E  4241      2532          clr.w   D1
08001130  4841      2533          swap    D1
08001132  0280 0000 2534          andi.l  #$FFFF,D0
08001136  FFFF      
08001138  4E75      2535          rts
                    2536   dodiv_1:
0800113A  48A7 A000 2537          movem.w D0/D2,-(A7)
0800113E  4240      2538          clr.w   D0
08001140  4840      2539          swap    D0
08001142  80C1      2540          divu    D1,D0
08001144  3400      2541          move.w  D0,D2
08001146  301F      2542          move.w  (A7)+,D0
08001148  80C1      2543          divu    D1,D0
0800114A  4840      2544          swap    D0
0800114C  4281      2545          clr.l   D1
0800114E  3200      2546          move.w  D0,D1
08001150  3002      2547          move.w  D2,D0
08001152  4840      2548          swap    D0
08001154  341F      2549          move.w  (A7)+,D2
08001156  4E75      2550          rts
                    2551   dodiv_2:
08001158  48E7 3800 2552          movem.l D2/D3/D4,-(A7)
0800115C  2401      2553          move.l  D1,D2
0800115E  4242      2554          clr.w   D2
08001160  4842      2555          swap    D2
08001162  5282      2556          addq.l  #1,D2
08001164  2600      2557          move.l  D0,D3
08001166  2801      2558          move.l  D1,D4
08001168  2202      2559          move.l  D2,D1
0800116A  61CE      2560          bsr.s   dodiv_1
0800116C  2204      2561          move.l  D4,D1
0800116E  82C2      2562          divu    D2,D1
08001170  80C1      2563          divu    D1,D0
08001172  0280 0000 2564          andi.l  #$FFFF,D0
08001176  FFFF      
                    2565   dodiv_3:
08001178  2204      2566          move.l  D4,D1
0800117A  2404      2567          move.l  D4,D2
0800117C  4842      2568          swap    D2
0800117E  C2C0      2569          mulu    D0,D1
08001180  C4C0      2570          mulu    D0,D2
08001182  4842      2571          swap    D2
08001184  D282      2572          add.l   D2,D1
08001186  9283      2573          sub.l   D3,D1
08001188  620A      2574          bhi.s   dodiv_4
0800118A  4481      2575          neg.l   D1
0800118C  B881      2576          cmp.l   D1,D4
0800118E  6208      2577          bhi.s   dodiv_5
08001190  5280      2578          addq.l  #1,D0
08001192  60E4      2579          bra.s   dodiv_3
                    2580   dodiv_4:
08001194  5380      2581          subq.l  #1,D0
08001196  60E0      2582          bra.s   dodiv_3
                    2583   dodiv_5:
08001198  4CDF 001C 2584          movem.l (A7)+,D2/D3/D4
0800119C  4E75      2585          rts
                    2586   @vsscanf_scanread:
0800119E  4E56 FFFC 2587          link      A6,#-4
080011A2  48E7 0020 2588          movem.l   A2,-(A7)
080011A6  45F9 0800 2589          lea       @vsscanf_bufx,A2
080011AA  2670      
080011AC  4AAE 0008 2590          tst.l     8(A6)
080011B0  6722      2591          beq.s     @vsscanf_scanread_1
080011B2  206E 0008 2592          move.l    8(A6),A0
080011B6  58AE 0008 2593          addq.l    #4,8(A6)
080011BA  2050      2594          move.l    (A0),A0
080011BC  1010      2595          move.b    (A0),D0
080011BE  4880      2596          ext.w     D0
080011C0  48C0      2597          ext.l     D0
080011C2  2D40 FFFC 2598          move.l    D0,-4(A6)
080011C6  6706      2599          beq.s     @vsscanf_scanread_3
080011C8  202E FFFC 2600          move.l    -4(A6),D0
080011CC  6002      2601          bra.s     @vsscanf_scanread_4
                    2602   @vsscanf_scanread_3:
080011CE  70FF      2603          moveq     #-1,D0
                    2604   @vsscanf_scanread_4:
080011D0  6000 0032 2605          bra       @vsscanf_scanread_5
                    2606   @vsscanf_scanread_1:
080011D4  2052      2607          move.l    (A2),A0
080011D6  1010      2608          move.b    (A0),D0
080011D8  6620      2609          bne.s     @vsscanf_scanread_6
080011DA  4879 0800 2610          pea       @vsscanf_buf
080011DE  27A0      
080011E0  6100 0926 2611          bsr       _gets
080011E4  584F      2612          addq.w    #4,A7
080011E6  2480      2613          move.l    D0,(A2)
080011E8  4879 0800 2614          pea       @vsscanf_1
080011EC  2674      
080011EE  4879 0800 2615          pea       @vsscanf_buf
080011F2  27A0      
080011F4  6100 09B2 2616          bsr       _strcat
080011F8  504F      2617          addq.w    #8,A7
                    2618   @vsscanf_scanread_6:
080011FA  2052      2619          move.l    (A2),A0
080011FC  5292      2620          addq.l    #1,(A2)
080011FE  1010      2621          move.b    (A0),D0
08001200  4880      2622          ext.w     D0
08001202  48C0      2623          ext.l     D0
                    2624   @vsscanf_scanread_5:
08001204  4CDF 0400 2625          movem.l   (A7)+,A2
08001208  4E5E      2626          unlk      A6
0800120A  4E75      2627          rts
                    2628   @vsscanf_scanputback:
0800120C  4E56 0000 2629          link      A6,#0
08001210  48E7 3000 2630          movem.l   D2/D3,-(A7)
08001214  242E 000C 2631          move.l    12(A6),D2
08001218  262E 0008 2632          move.l    8(A6),D3
0800121C  6718      2633          beq.s     @vsscanf_scanputback_1
0800121E  0C82 FFFF 2634          cmp.l     #-1,D2
08001222  FFFF      
08001224  670A      2635          beq.s     @vsscanf_scanputback_3
08001226  5983      2636          subq.l    #4,D3
08001228  2043      2637          move.l    D3,A0
0800122A  2050      2638          move.l    (A0),A0
0800122C  1082      2639          move.b    D2,(A0)
0800122E  6004      2640          bra.s     @vsscanf_scanputback_4
                    2641   @vsscanf_scanputback_3:
08001230  2043      2642          move.l    D3,A0
08001232  5390      2643          subq.l    #1,(A0)
                    2644   @vsscanf_scanputback_4:
08001234  602E      2645          bra.s     @vsscanf_scanputback_6
                    2646   @vsscanf_scanputback_1:
08001236  41F9 0800 2647          lea       @vsscanf_buf,A0
0800123A  27A0      
0800123C  2008      2648          move.l    A0,D0
0800123E  B0B9 0800 2649          cmp.l     @vsscanf_bufx,D0
08001242  2670      
08001244  6610      2650          bne.s     @vsscanf_scanputback_5
08001246  4239 0800 2651          clr.b     @vsscanf_buf
0800124A  27A0      
0800124C  2F02      2652          move.l    D2,-(A7)
0800124E  6100 099A 2653          bsr       _ungetch
08001252  584F      2654          addq.w    #4,A7
08001254  600E      2655          bra.s     @vsscanf_scanputback_6
                    2656   @vsscanf_scanputback_5:
08001256  53B9 0800 2657          subq.l    #1,@vsscanf_bufx
0800125A  2670      
0800125C  2079 0800 2658          move.l    @vsscanf_bufx,A0
08001260  2670      
08001262  1082      2659          move.b    D2,(A0)
                    2660   @vsscanf_scanputback_6:
08001264  2002      2661          move.l    D2,D0
08001266  4CDF 000C 2662          movem.l   (A7)+,D2/D3
0800126A  4E5E      2663          unlk      A6
0800126C  4E75      2664          rts
                    2665   @vsscanf_scanspace:
0800126E  4E56 0000 2666          link      A6,#0
08001272  48E7 2000 2667          movem.l   D2,-(A7)
                    2668   @vsscanf_scanspace_1:
08001276  2F2E 0008 2669          move.l    8(A6),-(A7)
0800127A  6100 FF22 2670          bsr       @vsscanf_scanread
0800127E  584F      2671          addq.w    #4,A7
08001280  2400      2672          move.l    D0,D2
08001282  206E 000C 2673          move.l    12(A6),A0
08001286  5290      2674          addq.l    #1,(A0)
08001288  2042      2675          move.l    D2,A0
0800128A  43F9 0800 2676          lea       __ctype,A1
0800128E  2676      
08001290  1030 9801 2677          move.b    1(A0,A1.L),D0
08001294  C03C 0010 2678          and.b     #16,D0
08001298  66DC      2679          bne       @vsscanf_scanspace_1
0800129A  2002      2680          move.l    D2,D0
0800129C  4CDF 0004 2681          movem.l   (A7)+,D2
080012A0  4E5E      2682          unlk      A6
080012A2  4E75      2683          rts
                    2684   @vsscanf_scanselect:
080012A4  4E56 0000 2685          link      A6,#0
080012A8  48E7 3F20 2686          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
080012AC  262E 000C 2687          move.l    12(A6),D3
080012B0  2C2E 0018 2688          move.l    24(A6),D6
080012B4  2E2E 0014 2689          move.l    20(A6),D7
080012B8  2043      2690          move.l    D3,A0
080012BA  1010      2691          move.b    (A0),D0
080012BC  4880      2692          ext.w     D0
080012BE  48C0      2693          ext.l     D0
080012C0  0C80 0000 2694          cmp.l     #94,D0
080012C4  005E      
080012C6  6608      2695          bne.s     @vsscanf_scanselect_1
080012C8  347C 0001 2696          move.w    #1,A2
080012CC  5283      2697          addq.l    #1,D3
080012CE  6004      2698          bra.s     @vsscanf_scanselect_2
                    2699   @vsscanf_scanselect_1:
080012D0  347C 0000 2700          move.w    #0,A2
                    2701   @vsscanf_scanselect_2:
080012D4  202E 0010 2702          move.l    16(A6),D0
080012D8  53AE 0010 2703          subq.l    #1,16(A6)
080012DC  4A80      2704          tst.l     D0
080012DE  6700 0108 2705          beq       @vsscanf_scanselect_5
080012E2  2F2E 0008 2706          move.l    8(A6),-(A7)
080012E6  6100 FEB6 2707          bsr       @vsscanf_scanread
080012EA  584F      2708          addq.w    #4,A7
080012EC  2800      2709          move.l    D0,D4
080012EE  0C84 FFFF 2710          cmp.l     #-1,D4
080012F2  FFFF      
080012F4  6604      2711          bne.s     @vsscanf_scanselect_6
080012F6  6000 00F0 2712          bra       @vsscanf_scanselect_5
                    2713   @vsscanf_scanselect_6:
080012FA  206E 001C 2714          move.l    28(A6),A0
080012FE  5290      2715          addq.l    #1,(A0)
08001300  4285      2716          clr.l     D5
08001302  4282      2717          clr.l     D2
                    2718   @vsscanf_scanselect_8:
08001304  2043      2719          move.l    D3,A0
08001306  1030 2800 2720          move.b    0(A0,D2.L),D0
0800130A  4880      2721          ext.w     D0
0800130C  48C0      2722          ext.l     D0
0800130E  0C80 0000 2723          cmp.l     #93,D0
08001312  005D      
08001314  6700 008E 2724          beq       @vsscanf_scanselect_10
08001318  4A82      2725          tst.l     D2
0800131A  6716      2726          beq.s     @vsscanf_scanselect_11
0800131C  2043      2727          move.l    D3,A0
0800131E  1030 2800 2728          move.b    0(A0,D2.L),D0
08001322  4880      2729          ext.w     D0
08001324  48C0      2730          ext.l     D0
08001326  0C80 0000 2731          cmp.l     #93,D0
0800132A  005D      
0800132C  6604      2732          bne.s     @vsscanf_scanselect_11
0800132E  6000 0074 2733          bra       @vsscanf_scanselect_10
                    2734   @vsscanf_scanselect_11:
08001332  4A82      2735          tst.l     D2
08001334  6700 0058 2736          beq       @vsscanf_scanselect_15
08001338  2043      2737          move.l    D3,A0
0800133A  1030 2800 2738          move.b    0(A0,D2.L),D0
0800133E  4880      2739          ext.w     D0
08001340  48C0      2740          ext.l     D0
08001342  0C80 0000 2741          cmp.l     #45,D0
08001346  002D      
08001348  6600 0044 2742          bne       @vsscanf_scanselect_15
0800134C  2043      2743          move.l    D3,A0
0800134E  2002      2744          move.l    D2,D0
08001350  5380      2745          subq.l    #1,D0
08001352  2243      2746          move.l    D3,A1
08001354  2F08      2747          move.l    A0,-(A7)
08001356  2042      2748          move.l    D2,A0
08001358  1230 0800 2749          move.b    0(A0,D0.L),D1
0800135C  B230 9801 2750          cmp.b     1(A0,A1.L),D1
08001360  6C00 002C 2751          bge       @vsscanf_scanselect_15
08001364  205F      2752          move.l    (A7)+,A0
08001366  2043      2753          move.l    D3,A0
08001368  2002      2754          move.l    D2,D0
0800136A  5380      2755          subq.l    #1,D0
0800136C  1030 0800 2756          move.b    0(A0,D0.L),D0
08001370  4880      2757          ext.w     D0
08001372  48C0      2758          ext.l     D0
08001374  B880      2759          cmp.l     D0,D4
08001376  6D12      2760          blt.s     @vsscanf_scanselect_17
08001378  2043      2761          move.l    D3,A0
0800137A  2242      2762          move.l    D2,A1
0800137C  1031 8801 2763          move.b    1(A1,A0.L),D0
08001380  4880      2764          ext.w     D0
08001382  48C0      2765          ext.l     D0
08001384  B880      2766          cmp.l     D0,D4
08001386  6E02      2767          bgt.s     @vsscanf_scanselect_17
08001388  601A      2768          bra.s     @vsscanf_scanselect_10
                    2769   @vsscanf_scanselect_17:
0800138A  5282      2770          addq.l    #1,D2
0800138C  6010      2771          bra.s     @vsscanf_scanselect_19
                    2772   @vsscanf_scanselect_15:
0800138E  2043      2773          move.l    D3,A0
08001390  1030 2800 2774          move.b    0(A0,D2.L),D0
08001394  4880      2775          ext.w     D0
08001396  48C0      2776          ext.l     D0
08001398  B880      2777          cmp.l     D0,D4
0800139A  6602      2778          bne.s     @vsscanf_scanselect_19
0800139C  6006      2779          bra.s     @vsscanf_scanselect_10
                    2780   @vsscanf_scanselect_19:
0800139E  5282      2781          addq.l    #1,D2
080013A0  6000 FF62 2782          bra       @vsscanf_scanselect_8
                    2783   @vsscanf_scanselect_10:
080013A4  4A82      2784          tst.l     D2
080013A6  6712      2785          beq.s     @vsscanf_scanselect_23
080013A8  2043      2786          move.l    D3,A0
080013AA  1030 2800 2787          move.b    0(A0,D2.L),D0
080013AE  4880      2788          ext.w     D0
080013B0  48C0      2789          ext.l     D0
080013B2  0C80 0000 2790          cmp.l     #93,D0
080013B6  005D      
080013B8  6702      2791          beq.s     @vsscanf_scanselect_21
                    2792   @vsscanf_scanselect_23:
080013BA  7A01      2793          moveq     #1,D5
                    2794   @vsscanf_scanselect_21:
080013BC  200A      2795          move.l    A2,D0
080013BE  6712      2796          beq.s     @vsscanf_scanselect_24
080013C0  4A85      2797          tst.l     D5
080013C2  660C      2798          bne.s     @vsscanf_scanselect_26
080013C4  4A87      2799          tst.l     D7
080013C6  6606      2800          bne.s     @vsscanf_scanselect_28
080013C8  2046      2801          move.l    D6,A0
080013CA  5286      2802          addq.l    #1,D6
080013CC  1084      2803          move.b    D4,(A0)
                    2804   @vsscanf_scanselect_28:
080013CE  6014      2805          bra.s     @vsscanf_scanselect_4
                    2806   @vsscanf_scanselect_26:
080013D0  6016      2807          bra.s     @vsscanf_scanselect_5
                    2808   @vsscanf_scanselect_24:
080013D2  4A85      2809          tst.l     D5
080013D4  670C      2810          beq.s     @vsscanf_scanselect_30
080013D6  4A87      2811          tst.l     D7
080013D8  6606      2812          bne.s     @vsscanf_scanselect_32
080013DA  2046      2813          move.l    D6,A0
080013DC  5286      2814          addq.l    #1,D6
080013DE  1084      2815          move.b    D4,(A0)
                    2816   @vsscanf_scanselect_32:
080013E0  6002      2817          bra.s     @vsscanf_scanselect_4
                    2818   @vsscanf_scanselect_30:
080013E2  6004      2819          bra.s     @vsscanf_scanselect_5
                    2820   @vsscanf_scanselect_4:
080013E4  6000 FEEE 2821          bra       @vsscanf_scanselect_2
                    2822   @vsscanf_scanselect_5:
080013E8  0C84 FFFF 2823          cmp.l     #-1,D4
080013EC  FFFF      
080013EE  6712      2824          beq.s     @vsscanf_scanselect_34
080013F0  2F04      2825          move.l    D4,-(A7)
080013F2  2F2E 0008 2826          move.l    8(A6),-(A7)
080013F6  6100 FE14 2827          bsr       @vsscanf_scanputback
080013FA  504F      2828          addq.w    #8,A7
080013FC  206E 001C 2829          move.l    28(A6),A0
08001400  5390      2830          subq.l    #1,(A0)
                    2831   @vsscanf_scanselect_34:
08001402  4A87      2832          tst.l     D7
08001404  6604      2833          bne.s     @vsscanf_scanselect_36
08001406  2046      2834          move.l    D6,A0
08001408  4210      2835          clr.b     (A0)
                    2836   @vsscanf_scanselect_36:
0800140A  5283      2837          addq.l    #1,D3
0800140C  2043      2838          move.l    D3,A0
0800140E  1010      2839          move.b    (A0),D0
08001410  4880      2840          ext.w     D0
08001412  48C0      2841          ext.l     D0
08001414  0C80 0000 2842          cmp.l     #93,D0
08001418  005D      
0800141A  6702      2843          beq.s     @vsscanf_scanselect_40
0800141C  60EC      2844          bra       @vsscanf_scanselect_36
                    2845   @vsscanf_scanselect_40:
0800141E  5283      2846          addq.l    #1,D3
08001420  2003      2847          move.l    D3,D0
08001422  4CDF 04FC 2848          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
08001426  4E5E      2849          unlk      A6
08001428  4E75      2850          rts
                    2851   _scanflush:
0800142A  41F9 0800 2852          lea       @vsscanf_buf,A0
0800142E  27A0      
08001430  23C8 0800 2853          move.l    A0,@vsscanf_bufx
08001434  2670      
08001436  4239 0800 2854          clr.b     @vsscanf_buf
0800143A  27A0      
0800143C  4878 FFFF 2855          pea       -1
08001440  6100 07A8 2856          bsr       _ungetch
08001444  584F      2857          addq.w    #4,A7
08001446  4E75      2858          rts
                    2859   _vsscanf:
08001448  4E56 FF88 2860          link      A6,#-120
0800144C  48E7 3F3C 2861          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08001450  47F9 0800 2862          lea       @vsscanf_scanread,A3
08001454  119E      
08001456  4AAE 0008 2863          tst.l     8(A6)
0800145A  6706      2864          beq.s     vsscanf_1
0800145C  41EE 0008 2865          lea       8(A6),A0
08001460  6004      2866          bra.s     vsscanf_2
                    2867   vsscanf_1:
08001462  4280      2868          clr.l     D0
08001464  2040      2869          move.l    D0,A0
                    2870   vsscanf_2:
08001466  2A08      2871          move.l    A0,D5
08001468  42AE FFE4 2872          clr.l     -28(A6)
0800146C  4284      2873          clr.l     D4
                    2874   vsscanf_3:
0800146E  206E 000C 2875          move.l    12(A6),A0
08001472  52AE 000C 2876          addq.l    #1,12(A6)
08001476  1010      2877          move.b    (A0),D0
08001478  4880      2878          ext.w     D0
0800147A  48C0      2879          ext.l     D0
0800147C  2600      2880          move.l    D0,D3
0800147E  6700 05AC 2881          beq       vsscanf_5
08001482  4286      2882          clr.l     D6
08001484  387C 0000 2883          move.w    #0,A4
08001488  0C83 0000 2884          cmp.l     #32,D3
0800148C  0020      
0800148E  6712      2885          beq.s     vsscanf_8
08001490  0C83 0000 2886          cmp.l     #9,D3
08001494  0009      
08001496  670A      2887          beq.s     vsscanf_8
08001498  0C83 0000 2888          cmp.l     #10,D3
0800149C  000A      
0800149E  6600 0048 2889          bne       vsscanf_6
                    2890   vsscanf_8:
080014A2  2F05      2891          move.l    D5,-(A7)
080014A4  4E93      2892          jsr       (A3)
080014A6  584F      2893          addq.w    #4,A7
080014A8  2400      2894          move.l    D0,D2
080014AA  52AE FFE4 2895          addq.l    #1,-28(A6)
080014AE  0C82 FFFF 2896          cmp.l     #-1,D2
080014B2  FFFF      
080014B4  660E      2897          bne.s     vsscanf_11
080014B6  4A84      2898          tst.l     D4
080014B8  6704      2899          beq.s     vsscanf_13
080014BA  2004      2900          move.l    D4,D0
080014BC  6002      2901          bra.s     vsscanf_14
                    2902   vsscanf_13:
080014BE  70FF      2903          moveq     #-1,D0
                    2904   vsscanf_14:
080014C0  6000 056C 2905          bra       vsscanf_15
                    2906   vsscanf_11:
080014C4  2042      2907          move.l    D2,A0
080014C6  43F9 0800 2908          lea       __ctype,A1
080014CA  2676      
080014CC  1030 9801 2909          move.b    1(A0,A1.L),D0
080014D0  C03C 0010 2910          and.b     #16,D0
080014D4  66CC      2911          bne       vsscanf_8
080014D6  53AE FFE4 2912          subq.l    #1,-28(A6)
080014DA  2F02      2913          move.l    D2,-(A7)
080014DC  2F05      2914          move.l    D5,-(A7)
080014DE  6100 FD2C 2915          bsr       @vsscanf_scanputback
080014E2  504F      2916          addq.w    #8,A7
080014E4  6000 0542 2917          bra       vsscanf_139
                    2918   vsscanf_6:
080014E8  0C83 0000 2919          cmp.l     #37,D3
080014EC  0025      
080014EE  6600 0502 2920          bne       vsscanf_127
080014F2  206E 000C 2921          move.l    12(A6),A0
080014F6  52AE 000C 2922          addq.l    #1,12(A6)
080014FA  1010      2923          move.b    (A0),D0
080014FC  4880      2924          ext.w     D0
080014FE  48C0      2925          ext.l     D0
08001500  2600      2926          move.l    D0,D3
08001502  42AE FFEC 2927          clr.l     -20(A6)
08001506  4286      2928          clr.l     D6
08001508  42AE FFE8 2929          clr.l     -24(A6)
0800150C  347C 7FFF 2930          move.w    #32767,A2
08001510  0C83 0000 2931          cmp.l     #42,D3
08001514  002A      
08001516  6612      2932          bne.s     vsscanf_18
08001518  7C01      2933          moveq     #1,D6
0800151A  206E 000C 2934          move.l    12(A6),A0
0800151E  52AE 000C 2935          addq.l    #1,12(A6)
08001522  1010      2936          move.b    (A0),D0
08001524  4880      2937          ext.w     D0
08001526  48C0      2938          ext.l     D0
08001528  2600      2939          move.l    D0,D3
                    2940   vsscanf_18:
0800152A  2043      2941          move.l    D3,A0
0800152C  43F9 0800 2942          lea       __ctype,A1
08001530  2676      
08001532  1030 9801 2943          move.b    1(A0,A1.L),D0
08001536  C03C 0004 2944          and.b     #4,D0
0800153A  6700 004E 2945          beq       vsscanf_24
0800153E  2003      2946          move.l    D3,D0
08001540  0480 0000 2947          sub.l     #48,D0
08001544  0030      
08001546  2440      2948          move.l    D0,A2
                    2949   vsscanf_22:
08001548  206E 000C 2950          move.l    12(A6),A0
0800154C  52AE 000C 2951          addq.l    #1,12(A6)
08001550  1010      2952          move.b    (A0),D0
08001552  4880      2953          ext.w     D0
08001554  48C0      2954          ext.l     D0
08001556  2600      2955          move.l    D0,D3
08001558  2040      2956          move.l    D0,A0
0800155A  43F9 0800 2957          lea       __ctype,A1
0800155E  2676      
08001560  1030 9801 2958          move.b    1(A0,A1.L),D0
08001564  C0BC 0000 2959          and.l     #255,D0
08001568  00FF      
0800156A  C0BC 0000 2960          and.l     #4,D0
0800156E  0004      
08001570  6718      2961          beq.s     vsscanf_24
08001572  70D0      2962          moveq     #-48,D0
08001574  2F0A      2963          move.l    A2,-(A7)
08001576  4878 000A 2964          pea       10
0800157A  6100 04FE 2965          bsr       LMUL
0800157E  2217      2966          move.l    (A7),D1
08001580  504F      2967          addq.w    #8,A7
08001582  D283      2968          add.l     D3,D1
08001584  D081      2969          add.l     D1,D0
08001586  2440      2970          move.l    D0,A2
08001588  60BE      2971          bra       vsscanf_22
                    2972   vsscanf_24:
0800158A  0C83 0000 2973          cmp.l     #108,D3
0800158E  006C      
08001590  6708      2974          beq.s     vsscanf_27
08001592  0C83 0000 2975          cmp.l     #76,D3
08001596  004C      
08001598  661A      2976          bne.s     vsscanf_25
                    2977   vsscanf_27:
0800159A  2D7C 0000 2978          move.l    #1,-24(A6)
0800159E  0001 FFE8 
080015A2  206E 000C 2979          move.l    12(A6),A0
080015A6  52AE 000C 2980          addq.l    #1,12(A6)
080015AA  1010      2981          move.b    (A0),D0
080015AC  4880      2982          ext.w     D0
080015AE  48C0      2983          ext.l     D0
080015B0  2600      2984          move.l    D0,D3
080015B2  6020      2985          bra.s     vsscanf_28
                    2986   vsscanf_25:
080015B4  0C83 0000 2987          cmp.l     #104,D3
080015B8  0068      
080015BA  6618      2988          bne.s     vsscanf_28
080015BC  2D7C 0000 2989          move.l    #1,-20(A6)
080015C0  0001 FFEC 
080015C4  206E 000C 2990          move.l    12(A6),A0
080015C8  52AE 000C 2991          addq.l    #1,12(A6)
080015CC  1010      2992          move.b    (A0),D0
080015CE  4880      2993          ext.w     D0
080015D0  48C0      2994          ext.l     D0
080015D2  2600      2995          move.l    D0,D3
                    2996   vsscanf_28:
080015D4  0C83 0000 2997          cmp.l     #91,D3
080015D8  005B      
080015DA  6600 0036 2998          bne       vsscanf_30
080015DE  4A86      2999          tst.l     D6
080015E0  660A      3000          bne.s     vsscanf_32
080015E2  206E 0010 3001          move.l    16(A6),A0
080015E6  58AE 0010 3002          addq.l    #4,16(A6)
080015EA  2E10      3003          move.l    (A0),D7
                    3004   vsscanf_32:
080015EC  486E FFE4 3005          pea       -28(A6)
080015F0  2F07      3006          move.l    D7,-(A7)
080015F2  2F06      3007          move.l    D6,-(A7)
080015F4  2F0A      3008          move.l    A2,-(A7)
080015F6  2F2E 000C 3009          move.l    12(A6),-(A7)
080015FA  2F05      3010          move.l    D5,-(A7)
080015FC  6100 FCA6 3011          bsr       @vsscanf_scanselect
08001600  DEFC 0018 3012          add.w     #24,A7
08001604  2D40 000C 3013          move.l    D0,12(A6)
08001608  4A86      3014          tst.l     D6
0800160A  6602      3015          bne.s     vsscanf_34
0800160C  5284      3016          addq.l    #1,D4
                    3017   vsscanf_34:
0800160E  6000 0418 3018          bra       vsscanf_139
                    3019   vsscanf_30:
08001612  0C83 0000 3020          cmp.l     #110,D3
08001616  006E      
08001618  661A      3021          bne.s     vsscanf_36
0800161A  4A86      3022          tst.l     D6
0800161C  6612      3023          bne.s     vsscanf_38
0800161E  206E 0010 3024          move.l    16(A6),A0
08001622  58AE 0010 3025          addq.l    #4,16(A6)
08001626  2E10      3026          move.l    (A0),D7
08001628  2047      3027          move.l    D7,A0
0800162A  20AE FFE4 3028          move.l    -28(A6),(A0)
0800162E  5284      3029          addq.l    #1,D4
                    3030   vsscanf_38:
08001630  6000 03F6 3031          bra       vsscanf_139
                    3032   vsscanf_36:
08001634  0C83 0000 3033          cmp.l     #115,D3
08001638  0073      
0800163A  6600 00AC 3034          bne       vsscanf_40
0800163E  486E FFE4 3035          pea       -28(A6)
08001642  2F05      3036          move.l    D5,-(A7)
08001644  6100 FC28 3037          bsr       @vsscanf_scanspace
08001648  504F      3038          addq.w    #8,A7
0800164A  2400      3039          move.l    D0,D2
0800164C  4A86      3040          tst.l     D6
0800164E  660A      3041          bne.s     vsscanf_42
08001650  206E 0010 3042          move.l    16(A6),A0
08001654  58AE 0010 3043          addq.l    #4,16(A6)
08001658  2E10      3044          move.l    (A0),D7
                    3045   vsscanf_42:
0800165A  52AE FFE4 3046          addq.l    #1,-28(A6)
                    3047   vsscanf_44:
0800165E  200A      3048          move.l    A2,D0
08001660  534A      3049          subq.w    #1,A2
08001662  4A80      3050          tst.l     D0
08001664  6700 0038 3051          beq       vsscanf_46
08001668  2042      3052          move.l    D2,A0
0800166A  43F9 0800 3053          lea       __ctype,A1
0800166E  2676      
08001670  1030 9801 3054          move.b    1(A0,A1.L),D0
08001674  C03C 0010 3055          and.b     #16,D0
08001678  6624      3056          bne.s     vsscanf_46
0800167A  0C82 FFFF 3057          cmp.l     #-1,D2
0800167E  FFFF      
08001680  671C      3058          beq.s     vsscanf_46
08001682  387C 0001 3059          move.w    #1,A4
08001686  4A86      3060          tst.l     D6
08001688  6606      3061          bne.s     vsscanf_47
0800168A  2047      3062          move.l    D7,A0
0800168C  5287      3063          addq.l    #1,D7
0800168E  1082      3064          move.b    D2,(A0)
                    3065   vsscanf_47:
08001690  2F05      3066          move.l    D5,-(A7)
08001692  4E93      3067          jsr       (A3)
08001694  584F      3068          addq.w    #4,A7
08001696  2400      3069          move.l    D0,D2
08001698  52AE FFE4 3070          addq.l    #1,-28(A6)
0800169C  60C0      3071          bra       vsscanf_44
                    3072   vsscanf_46:
0800169E  4A86      3073          tst.l     D6
080016A0  660A      3074          bne.s     vsscanf_51
080016A2  2047      3075          move.l    D7,A0
080016A4  4210      3076          clr.b     (A0)
080016A6  200C      3077          move.l    A4,D0
080016A8  6702      3078          beq.s     vsscanf_51
080016AA  5284      3079          addq.l    #1,D4
                    3080   vsscanf_51:
080016AC  0C82 FFFF 3081          cmp.l     #-1,D2
080016B0  FFFF      
080016B2  6708      3082          beq.s     vsscanf_55
080016B4  4A86      3083          tst.l     D6
080016B6  661E      3084          bne.s     vsscanf_53
080016B8  200C      3085          move.l    A4,D0
080016BA  661A      3086          bne.s     vsscanf_53
                    3087   vsscanf_55:
080016BC  4A84      3088          tst.l     D4
080016BE  6704      3089          beq.s     vsscanf_56
080016C0  2004      3090          move.l    D4,D0
080016C2  600E      3091          bra.s     vsscanf_59
                    3092   vsscanf_56:
080016C4  0C82 FFFF 3093          cmp.l     #-1,D2
080016C8  FFFF      
080016CA  6604      3094          bne.s     vsscanf_58
080016CC  70FF      3095          moveq     #-1,D0
080016CE  6002      3096          bra.s     vsscanf_59
                    3097   vsscanf_58:
080016D0  2004      3098          move.l    D4,D0
                    3099   vsscanf_59:
080016D2  6000 035A 3100          bra       vsscanf_15
                    3101   vsscanf_53:
080016D6  53AE FFE4 3102          subq.l    #1,-28(A6)
080016DA  2F02      3103          move.l    D2,-(A7)
080016DC  2F05      3104          move.l    D5,-(A7)
080016DE  6100 FB2C 3105          bsr       @vsscanf_scanputback
080016E2  504F      3106          addq.w    #8,A7
080016E4  6000 0342 3107          bra       vsscanf_139
                    3108   vsscanf_40:
080016E8  0C83 0000 3109          cmp.l     #99,D3
080016EC  0063      
080016EE  6600 008E 3110          bne       vsscanf_60
080016F2  4A86      3111          tst.l     D6
080016F4  660A      3112          bne.s     vsscanf_62
080016F6  206E 0010 3113          move.l    16(A6),A0
080016FA  58AE 0010 3114          addq.l    #4,16(A6)
080016FE  2E10      3115          move.l    (A0),D7
                    3116   vsscanf_62:
08001700  2F05      3117          move.l    D5,-(A7)
08001702  4E93      3118          jsr       (A3)
08001704  584F      3119          addq.w    #4,A7
08001706  2400      3120          move.l    D0,D2
08001708  52AE FFE4 3121          addq.l    #1,-28(A6)
0800170C  200A      3122          move.l    A2,D0
0800170E  0C80 0000 3123          cmp.l     #32767,D0
08001712  7FFF      
08001714  6604      3124          bne.s     vsscanf_64
08001716  347C 0001 3125          move.w    #1,A2
                    3126   vsscanf_64:
0800171A  0C82 FFFF 3127          cmp.l     #-1,D2
0800171E  FFFF      
08001720  6606      3128          bne.s     vsscanf_66
08001722  4A86      3129          tst.l     D6
08001724  6602      3130          bne.s     vsscanf_66
08001726  5384      3131          subq.l    #1,D4
                    3132   vsscanf_66:
08001728  200A      3133          move.l    A2,D0
0800172A  534A      3134          subq.w    #1,A2
0800172C  4A80      3135          tst.l     D0
0800172E  6720      3136          beq.s     vsscanf_70
08001730  0C82 FFFF 3137          cmp.l     #-1,D2
08001734  FFFF      
08001736  6718      3138          beq.s     vsscanf_70
08001738  4A86      3139          tst.l     D6
0800173A  6606      3140          bne.s     vsscanf_71
0800173C  2047      3141          move.l    D7,A0
0800173E  5287      3142          addq.l    #1,D7
08001740  1082      3143          move.b    D2,(A0)
                    3144   vsscanf_71:
08001742  2F05      3145          move.l    D5,-(A7)
08001744  4E93      3146          jsr       (A3)
08001746  584F      3147          addq.w    #4,A7
08001748  2400      3148          move.l    D0,D2
0800174A  52AE FFE4 3149          addq.l    #1,-28(A6)
0800174E  60D8      3150          bra       vsscanf_66
                    3151   vsscanf_70:
08001750  0C82 FFFF 3152          cmp.l     #-1,D2
08001754  FFFF      
08001756  660E      3153          bne.s     vsscanf_73
08001758  4A84      3154          tst.l     D4
0800175A  6704      3155          beq.s     vsscanf_75
0800175C  2004      3156          move.l    D4,D0
0800175E  6002      3157          bra.s     vsscanf_76
                    3158   vsscanf_75:
08001760  70FF      3159          moveq     #-1,D0
                    3160   vsscanf_76:
08001762  6000 02CA 3161          bra       vsscanf_15
                    3162   vsscanf_73:
08001766  4A86      3163          tst.l     D6
08001768  6602      3164          bne.s     vsscanf_77
0800176A  5284      3165          addq.l    #1,D4
                    3166   vsscanf_77:
0800176C  53AE FFE4 3167          subq.l    #1,-28(A6)
08001770  2F02      3168          move.l    D2,-(A7)
08001772  2F05      3169          move.l    D5,-(A7)
08001774  6100 FA96 3170          bsr       @vsscanf_scanputback
08001778  504F      3171          addq.w    #8,A7
0800177A  6000 02AC 3172          bra       vsscanf_139
                    3173   vsscanf_60:
0800177E  0C83 0000 3174          cmp.l     #105,D3
08001782  0069      
08001784  6600 0060 3175          bne       vsscanf_82
08001788  486E FFE4 3176          pea       -28(A6)
0800178C  2F05      3177          move.l    D5,-(A7)
0800178E  6100 FADE 3178          bsr       @vsscanf_scanspace
08001792  504F      3179          addq.w    #8,A7
08001794  2400      3180          move.l    D0,D2
08001796  0C82 0000 3181          cmp.l     #48,D2
0800179A  0030      
0800179C  6600 0038 3182          bne       vsscanf_81
080017A0  387C 0001 3183          move.w    #1,A4
080017A4  2F05      3184          move.l    D5,-(A7)
080017A6  4E93      3185          jsr       (A3)
080017A8  584F      3186          addq.w    #4,A7
080017AA  2400      3187          move.l    D0,D2
080017AC  2F02      3188          move.l    D2,-(A7)
080017AE  6100 03CC 3189          bsr       _tolower
080017B2  584F      3190          addq.w    #4,A7
080017B4  0C80 0000 3191          cmp.l     #120,D0
080017B8  0078      
080017BA  6604      3192          bne.s     vsscanf_83
080017BC  7678      3193          moveq     #120,D3
080017BE  6010      3194          bra.s     vsscanf_84
                    3195   vsscanf_83:
080017C0  53AE FFE4 3196          subq.l    #1,-28(A6)
080017C4  2F02      3197          move.l    D2,-(A7)
080017C6  2F05      3198          move.l    D5,-(A7)
080017C8  6100 FA42 3199          bsr       @vsscanf_scanputback
080017CC  504F      3200          addq.w    #8,A7
080017CE  766F      3201          moveq     #111,D3
                    3202   vsscanf_84:
080017D0  52AE FFE4 3203          addq.l    #1,-28(A6)
080017D4  6010      3204          bra.s     vsscanf_82
                    3205   vsscanf_81:
080017D6  53AE FFE4 3206          subq.l    #1,-28(A6)
080017DA  2F02      3207          move.l    D2,-(A7)
080017DC  2F05      3208          move.l    D5,-(A7)
080017DE  6100 FA2C 3209          bsr       @vsscanf_scanputback
080017E2  504F      3210          addq.w    #8,A7
080017E4  7664      3211          moveq     #100,D3
                    3212   vsscanf_82:
080017E6  0C83 0000 3213          cmp.l     #100,D3
080017EA  0064      
080017EC  671A      3214          beq.s     vsscanf_87
080017EE  0C83 0000 3215          cmp.l     #117,D3
080017F2  0075      
080017F4  6712      3216          beq.s     vsscanf_87
080017F6  0C83 0000 3217          cmp.l     #120,D3
080017FA  0078      
080017FC  670A      3218          beq.s     vsscanf_87
080017FE  0C83 0000 3219          cmp.l     #111,D3
08001802  006F      
08001804  6600 01A4 3220          bne       vsscanf_85
                    3221   vsscanf_87:
08001808  486E FFE4 3222          pea       -28(A6)
0800180C  2F05      3223          move.l    D5,-(A7)
0800180E  6100 FA5E 3224          bsr       @vsscanf_scanspace
08001812  504F      3225          addq.w    #8,A7
08001814  2400      3226          move.l    D0,D2
08001816  2D7C 0000 3227          move.l    #10,-4(A6)
0800181A  000A FFFC 
0800181E  0C83 0000 3228          cmp.l     #120,D3
08001822  0078      
08001824  6608      3229          bne.s     vsscanf_88
08001826  2D7C 0000 3230          move.l    #16,-4(A6)
0800182A  0010 FFFC 
                    3231   vsscanf_88:
0800182E  0C83 0000 3232          cmp.l     #111,D3
08001832  006F      
08001834  6608      3233          bne.s     vsscanf_90
08001836  2D7C 0000 3234          move.l    #8,-4(A6)
0800183A  0008 FFFC 
                    3235   vsscanf_90:
0800183E  4A86      3236          tst.l     D6
08001840  660A      3237          bne.s     vsscanf_92
08001842  206E 0010 3238          move.l    16(A6),A0
08001846  58AE 0010 3239          addq.l    #4,16(A6)
0800184A  2E10      3240          move.l    (A0),D7
                    3241   vsscanf_92:
0800184C  42AE FFE0 3242          clr.l     -32(A6)
08001850  52AE FFE4 3243          addq.l    #1,-28(A6)
08001854  0C83 0000 3244          cmp.l     #117,D3
08001858  0075      
0800185A  6720      3245          beq.s     vsscanf_94
0800185C  0C82 0000 3246          cmp.l     #45,D2
08001860  002D      
08001862  6618      3247          bne.s     vsscanf_94
08001864  2F05      3248          move.l    D5,-(A7)
08001866  4E93      3249          jsr       (A3)
08001868  584F      3250          addq.w    #4,A7
0800186A  2400      3251          move.l    D0,D2
0800186C  52AE FFE4 3252          addq.l    #1,-28(A6)
08001870  2D7C 0000 3253          move.l    #1,-32(A6)
08001874  0001 FFE0 
08001878  387C 0001 3254          move.w    #1,A4
                    3255   vsscanf_94:
0800187C  3A7C 0000 3256          move.w    #0,A5
08001880  0C82 FFFF 3257          cmp.l     #-1,D2
08001884  FFFF      
08001886  660E      3258          bne.s     vsscanf_96
08001888  4A84      3259          tst.l     D4
0800188A  6704      3260          beq.s     vsscanf_98
0800188C  2004      3261          move.l    D4,D0
0800188E  6002      3262          bra.s     vsscanf_99
                    3263   vsscanf_98:
08001890  70FF      3264          moveq     #-1,D0
                    3265   vsscanf_99:
08001892  6000 019A 3266          bra       vsscanf_15
                    3267   vsscanf_96:
08001896  200A      3268          move.l    A2,D0
08001898  534A      3269          subq.w    #1,A2
0800189A  4A80      3270          tst.l     D0
0800189C  6700 0090 3271          beq       vsscanf_102
080018A0  0C83 0000 3272          cmp.l     #120,D3
080018A4  0078      
080018A6  6620      3273          bne.s     vsscanf_104
080018A8  2F02      3274          move.l    D2,-(A7)
080018AA  6100 0312 3275          bsr       _toupper
080018AE  584F      3276          addq.w    #4,A7
080018B0  0C80 0000 3277          cmp.l     #65,D0
080018B4  0041      
080018B6  6D10      3278          blt.s     vsscanf_104
080018B8  2F02      3279          move.l    D2,-(A7)
080018BA  6100 0302 3280          bsr       _toupper
080018BE  584F      3281          addq.w    #4,A7
080018C0  0C80 0000 3282          cmp.l     #70,D0
080018C4  0046      
080018C6  6F14      3283          ble.s     vsscanf_103
                    3284   vsscanf_104:
080018C8  2042      3285          move.l    D2,A0
080018CA  43F9 0800 3286          lea       __ctype,A1
080018CE  2676      
080018D0  1030 9801 3287          move.b    1(A0,A1.L),D0
080018D4  C03C 0004 3288          and.b     #4,D0
080018D8  6700 0054 3289          beq       vsscanf_102
                    3290   vsscanf_103:
080018DC  2042      3291          move.l    D2,A0
080018DE  43F9 0800 3292          lea       __ctype,A1
080018E2  2676      
080018E4  1030 9801 3293          move.b    1(A0,A1.L),D0
080018E8  C03C 0004 3294          and.b     #4,D0
080018EC  6614      3295          bne.s     vsscanf_105
080018EE  70F9      3296          moveq     #-7,D0
080018F0  2F00      3297          move.l    D0,-(A7)
080018F2  2F02      3298          move.l    D2,-(A7)
080018F4  6100 02C8 3299          bsr       _toupper
080018F8  584F      3300          addq.w    #4,A7
080018FA  2200      3301          move.l    D0,D1
080018FC  201F      3302          move.l    (A7)+,D0
080018FE  D081      3303          add.l     D1,D0
08001900  2400      3304          move.l    D0,D2
                    3305   vsscanf_105:
08001902  2F0D      3306          move.l    A5,-(A7)
08001904  2F2E FFFC 3307          move.l    -4(A6),-(A7)
08001908  6100 0170 3308          bsr       LMUL
0800190C  2017      3309          move.l    (A7),D0
0800190E  504F      3310          addq.w    #8,A7
08001910  D082      3311          add.l     D2,D0
08001912  0480 0000 3312          sub.l     #48,D0
08001916  0030      
08001918  2A40      3313          move.l    D0,A5
0800191A  2F05      3314          move.l    D5,-(A7)
0800191C  4E93      3315          jsr       (A3)
0800191E  584F      3316          addq.w    #4,A7
08001920  2400      3317          move.l    D0,D2
08001922  52AE FFE4 3318          addq.l    #1,-28(A6)
08001926  387C 0001 3319          move.w    #1,A4
0800192A  6000 FF6A 3320          bra       vsscanf_96
                    3321   vsscanf_102:
0800192E  0C82 FFFF 3322          cmp.l     #-1,D2
08001932  FFFF      
08001934  671A      3323          beq.s     vsscanf_107
08001936  2F02      3324          move.l    D2,-(A7)
08001938  2F05      3325          move.l    D5,-(A7)
0800193A  6100 F8D0 3326          bsr       @vsscanf_scanputback
0800193E  504F      3327          addq.w    #8,A7
08001940  53AE FFE4 3328          subq.l    #1,-28(A6)
08001944  200C      3329          move.l    A4,D0
08001946  6606      3330          bne.s     vsscanf_109
08001948  2004      3331          move.l    D4,D0
0800194A  6000 00E2 3332          bra       vsscanf_15
                    3333   vsscanf_109:
0800194E  6012      3334          bra.s     vsscanf_111
                    3335   vsscanf_107:
08001950  200C      3336          move.l    A4,D0
08001952  660E      3337          bne.s     vsscanf_111
08001954  4A84      3338          tst.l     D4
08001956  6704      3339          beq.s     vsscanf_113
08001958  2004      3340          move.l    D4,D0
0800195A  6002      3341          bra.s     vsscanf_114
                    3342   vsscanf_113:
0800195C  70FF      3343          moveq     #-1,D0
                    3344   vsscanf_114:
0800195E  6000 00CE 3345          bra       vsscanf_15
                    3346   vsscanf_111:
08001962  4AAE FFE0 3347          tst.l     -32(A6)
08001966  6706      3348          beq.s     vsscanf_115
08001968  200D      3349          move.l    A5,D0
0800196A  4480      3350          neg.l     D0
0800196C  2A40      3351          move.l    D0,A5
                    3352   vsscanf_115:
0800196E  4A86      3353          tst.l     D6
08001970  661E      3354          bne.s     vsscanf_117
08001972  4AAE FFE8 3355          tst.l     -24(A6)
08001976  6706      3356          beq.s     vsscanf_119
08001978  2047      3357          move.l    D7,A0
0800197A  208D      3358          move.l    A5,(A0)
0800197C  6010      3359          bra.s     vsscanf_122
                    3360   vsscanf_119:
0800197E  4AAE FFEC 3361          tst.l     -20(A6)
08001982  6706      3362          beq.s     vsscanf_121
08001984  2047      3363          move.l    D7,A0
08001986  308D      3364          move.w    A5,(A0)
08001988  6004      3365          bra.s     vsscanf_122
                    3366   vsscanf_121:
0800198A  2047      3367          move.l    D7,A0
0800198C  208D      3368          move.l    A5,(A0)
                    3369   vsscanf_122:
0800198E  5284      3370          addq.l    #1,D4
                    3371   vsscanf_117:
08001990  0C82 FFFF 3372          cmp.l     #-1,D2
08001994  FFFF      
08001996  660E      3373          bne.s     vsscanf_123
08001998  4A84      3374          tst.l     D4
0800199A  6704      3375          beq.s     vsscanf_125
0800199C  2004      3376          move.l    D4,D0
0800199E  6002      3377          bra.s     vsscanf_126
                    3378   vsscanf_125:
080019A0  70FF      3379          moveq     #-1,D0
                    3380   vsscanf_126:
080019A2  6000 008A 3381          bra       vsscanf_15
                    3382   vsscanf_123:
080019A6  6000 0080 3383          bra       vsscanf_139
                    3384   vsscanf_85:
080019AA  0C83 0000 3385          cmp.l     #37,D3
080019AE  0025      
080019B0  6600 0040 3386          bne       vsscanf_127
080019B4  2F05      3387          move.l    D5,-(A7)
080019B6  4E93      3388          jsr       (A3)
080019B8  584F      3389          addq.w    #4,A7
080019BA  2400      3390          move.l    D0,D2
080019BC  0C82 FFFF 3391          cmp.l     #-1,D2
080019C0  FFFF      
080019C2  660E      3392          bne.s     vsscanf_129
080019C4  4A84      3393          tst.l     D4
080019C6  6704      3394          beq.s     vsscanf_131
080019C8  2004      3395          move.l    D4,D0
080019CA  6002      3396          bra.s     vsscanf_132
                    3397   vsscanf_131:
080019CC  70FF      3398          moveq     #-1,D0
                    3399   vsscanf_132:
080019CE  6000 005E 3400          bra       vsscanf_15
                    3401   vsscanf_129:
080019D2  52AE FFE4 3402          addq.l    #1,-28(A6)
080019D6  B483      3403          cmp.l     D3,D2
080019D8  6714      3404          beq.s     vsscanf_133
080019DA  2F02      3405          move.l    D2,-(A7)
080019DC  2F05      3406          move.l    D5,-(A7)
080019DE  6100 F82C 3407          bsr       @vsscanf_scanputback
080019E2  504F      3408          addq.w    #8,A7
080019E4  53AE FFE4 3409          subq.l    #1,-28(A6)
080019E8  2004      3410          move.l    D4,D0
080019EA  6000 0042 3411          bra       vsscanf_15
                    3412   vsscanf_133:
080019EE  6000 0038 3413          bra       vsscanf_139
                    3414   vsscanf_127:
080019F2  2F05      3415          move.l    D5,-(A7)
080019F4  4E93      3416          jsr       (A3)
080019F6  584F      3417          addq.w    #4,A7
080019F8  2400      3418          move.l    D0,D2
080019FA  52AE FFE4 3419          addq.l    #1,-28(A6)
080019FE  0C82 FFFF 3420          cmp.l     #-1,D2
08001A02  FFFF      
08001A04  660C      3421          bne.s     vsscanf_135
08001A06  4A84      3422          tst.l     D4
08001A08  6704      3423          beq.s     vsscanf_137
08001A0A  2004      3424          move.l    D4,D0
08001A0C  6002      3425          bra.s     vsscanf_138
                    3426   vsscanf_137:
08001A0E  70FF      3427          moveq     #-1,D0
                    3428   vsscanf_138:
08001A10  601C      3429          bra.s     vsscanf_15
                    3430   vsscanf_135:
08001A12  B483      3431          cmp.l     D3,D2
08001A14  6712      3432          beq.s     vsscanf_139
08001A16  2F02      3433          move.l    D2,-(A7)
08001A18  2F05      3434          move.l    D5,-(A7)
08001A1A  6100 F7F0 3435          bsr       @vsscanf_scanputback
08001A1E  504F      3436          addq.w    #8,A7
08001A20  53AE FFE4 3437          subq.l    #1,-28(A6)
08001A24  2004      3438          move.l    D4,D0
08001A26  6006      3439          bra.s     vsscanf_15
                    3440   vsscanf_139:
08001A28  6000 FA44 3441          bra       vsscanf_3
                    3442   vsscanf_5:
08001A2C  2004      3443          move.l    D4,D0
                    3444   vsscanf_15:
08001A2E  4CDF 3CFC 3445          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08001A32  4E5E      3446          unlk      A6
08001A34  4E75      3447          rts
                    3448   _printf:
08001A36  4E56 FFFC 3449          link      A6,#-4
08001A3A  48E7 2000 3450          movem.l   D2,-(A7)
08001A3E  41EE 0008 3451          lea       8(A6),A0
08001A42  5848      3452          addq.w    #4,A0
08001A44  2408      3453          move.l    A0,D2
08001A46  2F02      3454          move.l    D2,-(A7)
08001A48  2F2E 0008 3455          move.l    8(A6),-(A7)
08001A4C  42A7      3456          clr.l     -(A7)
08001A4E  6100 0260 3457          bsr       _vsprintf
08001A52  DEFC 000C 3458          add.w     #12,A7
08001A56  2D40 FFFC 3459          move.l    D0,-4(A6)
08001A5A  4282      3460          clr.l     D2
08001A5C  202E FFFC 3461          move.l    -4(A6),D0
08001A60  4CDF 0004 3462          movem.l   (A7)+,D2
08001A64  4E5E      3463          unlk      A6
08001A66  4E75      3464          rts
                    3465   ULMUL:
08001A68  4E56 0000 3466          link    A6,#0
08001A6C  48E7 C000 3467          movem.l D0/D1,-(A7)
08001A70  222E 0008 3468          move.l  8(A6),D1
08001A74  202E 000C 3469          move.l  12(A6),D0
08001A78  602C      3470          bra.s   lmul_3
                    3471   LMUL:
08001A7A  4E56 0000 3472          link    A6,#0
08001A7E  48E7 C000 3473          movem.l D0/D1,-(A7)
08001A82  222E 0008 3474          move.l  8(A6),D1
08001A86  202E 000C 3475          move.l  12(A6),D0
08001A8A  4A80      3476          tst.l   D0
08001A8C  6A0A      3477          bpl.s   lmul_1
08001A8E  4480      3478          neg.l   D0
08001A90  4A81      3479          tst.l   D1
08001A92  6A0A      3480          bpl.s   lmul_2
08001A94  4481      3481          neg.l   D1
08001A96  600E      3482          bra.s   lmul_3
                    3483   lmul_1:
08001A98  4A81      3484          tst.l   D1
08001A9A  6A0A      3485          bpl.s   lmul_3
08001A9C  4481      3486          neg.l   D1
                    3487   lmul_2:
08001A9E  6114      3488          bsr.s   domul
08001AA0  4481      3489          neg.l   D1
08001AA2  4080      3490          negx.l  D0
08001AA4  6002      3491          bra.s   lmul_4
                    3492   lmul_3:
08001AA6  610C      3493          bsr.s   domul
                    3494   lmul_4:
08001AA8  2D41 0008 3495          move.l  D1,8(A6)
08001AAC  4CDF 0003 3496          movem.l (A7)+,D0/D1
08001AB0  4E5E      3497          unlk    A6
08001AB2  4E75      3498          rts
                    3499   domul:
08001AB4  0C81 0000 3500          cmpi.l  #$FFFF,D1
08001AB8  FFFF      
08001ABA  620C      3501          bhi.s   domul_1
08001ABC  0C80 0000 3502          cmpi.l  #$FFFF,D0
08001AC0  FFFF      
08001AC2  620E      3503          bhi.s   domul_2
08001AC4  C2C0      3504          mulu    D0,D1
08001AC6  4E75      3505          rts
                    3506   domul_1:
08001AC8  0C80 0000 3507          cmpi.l  #$FFFF,D0
08001ACC  FFFF      
08001ACE  6218      3508          bhi.s   domul_4
08001AD0  6002      3509          bra.s   domul_3
                    3510   domul_2
08001AD2  C141      3511          exg     D0,D1
                    3512   domul_3:
08001AD4  2F02      3513          move.l  D2,-(A7)
08001AD6  2401      3514          move.l  D1,D2
08001AD8  4842      3515          swap    D2
08001ADA  C2C0      3516          mulu    D0,D1
08001ADC  C4C0      3517          mulu    D0,D2
08001ADE  4842      3518          swap    D2
08001AE0  4242      3519          clr.w   D2
08001AE2  D282      3520          add.l   D2,D1
08001AE4  241F      3521          move.l  (A7)+,D2
08001AE6  4E75      3522          rts
                    3523   domul_4:
08001AE8  48E7 3000 3524          movem.l D2/D3,-(A7)
08001AEC  2401      3525          move.l  D1,D2
08001AEE  2601      3526          move.l  D1,D3
08001AF0  C2C0      3527          mulu    D0,D1
08001AF2  4842      3528          swap    D2
08001AF4  C4C0      3529          mulu    D0,D2
08001AF6  4840      3530          swap    D0
08001AF8  C6C0      3531          mulu    D0,D3
08001AFA  D483      3532          add.l   D3,D2
08001AFC  4842      3533          swap    D2
08001AFE  4242      3534          clr.w   D2
08001B00  D282      3535          add.l   D2,D1
08001B02  4CDF 000C 3536          movem.l (A7)+,D2/D3
08001B06  4E75      3537          rts
                    3538   _gets:
08001B08  4E56 0000 3539          link      A6,#0
08001B0C  48E7 3820 3540          movem.l   D2/D3/D4/A2,-(A7)
08001B10  45F9 0800 3541          lea       _putch,A2
08001B14  2314      
08001B16  282E 0008 3542          move.l    8(A6),D4
08001B1A  2404      3543          move.l    D4,D2
                    3544   gets_1:
08001B1C  6100 0826 3545          bsr       _getch
08001B20  2600      3546          move.l    D0,D3
08001B22  0C80 0000 3547          cmp.l     #10,D0
08001B26  000A      
08001B28  6700 003C 3548          beq       gets_3
08001B2C  0C83 0000 3549          cmp.l     #8,D3
08001B30  0008      
08001B32  6712      3550          beq.s     gets_4
08001B34  2042      3551          move.l    D2,A0
08001B36  5282      3552          addq.l    #1,D2
08001B38  1083      3553          move.b    D3,(A0)
08001B3A  4883      3554          ext.w     D3
08001B3C  48C3      3555          ext.l     D3
08001B3E  2F03      3556          move.l    D3,-(A7)
08001B40  4E92      3557          jsr       (A2)
08001B42  584F      3558          addq.w    #4,A7
08001B44  601E      3559          bra.s     gets_6
                    3560   gets_4:
08001B46  B484      3561          cmp.l     D4,D2
08001B48  631A      3562          bls.s     gets_6
08001B4A  4878 0008 3563          pea       8
08001B4E  4E92      3564          jsr       (A2)
08001B50  584F      3565          addq.w    #4,A7
08001B52  4878 0020 3566          pea       32
08001B56  4E92      3567          jsr       (A2)
08001B58  584F      3568          addq.w    #4,A7
08001B5A  4878 0008 3569          pea       8
08001B5E  4E92      3570          jsr       (A2)
08001B60  584F      3571          addq.w    #4,A7
08001B62  5382      3572          subq.l    #1,D2
                    3573   gets_6:
08001B64  60B6      3574          bra       gets_1
                    3575   gets_3:
08001B66  4878 000A 3576          pea       10
08001B6A  4E92      3577          jsr       (A2)
08001B6C  584F      3578          addq.w    #4,A7
08001B6E  2042      3579          move.l    D2,A0
08001B70  4210      3580          clr.b     (A0)
08001B72  2004      3581          move.l    D4,D0
08001B74  4CDF 041C 3582          movem.l   (A7)+,D2/D3/D4/A2
08001B78  4E5E      3583          unlk      A6
08001B7A  4E75      3584          rts
                    3585   _tolower:
08001B7C  4E56 0000 3586          link      A6,#0
08001B80  48E7 2000 3587          movem.l   D2,-(A7)
08001B84  242E 0008 3588          move.l    8(A6),D2
08001B88  0C82 0000 3589          cmp.l     #65,D2
08001B8C  0041      
08001B8E  6D0E      3590          blt.s     tolower_1
08001B90  0C82 0000 3591          cmp.l     #90,D2
08001B94  005A      
08001B96  6E06      3592          bgt.s     tolower_1
08001B98  84BC 0000 3593          or.l      #32,D2
08001B9C  0020      
                    3594   tolower_1:
08001B9E  2002      3595          move.l    D2,D0
08001BA0  4CDF 0004 3596          movem.l   (A7)+,D2
08001BA4  4E5E      3597          unlk      A6
08001BA6  4E75      3598          rts
                    3599   _strcat:
08001BA8  206F 0004 3600          move.l    (4,A7),A0	
08001BAC  226F 0008 3601          move.l    (8,A7),A1	
08001BB0  2008      3602          move.l    A0,D0		
                    3603   strcat_0:
08001BB2  4A18      3604          tst.b     (A0)+
08001BB4  66FC      3605          bne       strcat_0
08001BB6  5348      3606          subq      #1,A0
                    3607   strcat_1:
08001BB8  10D9      3608          move.b    (A1)+,(A0)+
08001BBA  66FC      3609          bne       strcat_1
08001BBC  4E75      3610          rts
                    3611   _toupper:
08001BBE  4E56 0000 3612          link      A6,#0
08001BC2  48E7 2000 3613          movem.l   D2,-(A7)
08001BC6  242E 0008 3614          move.l    8(A6),D2
08001BCA  0C82 0000 3615          cmp.l     #97,D2
08001BCE  0061      
08001BD0  6D0E      3616          blt.s     toupper_1
08001BD2  0C82 0000 3617          cmp.l     #122,D2
08001BD6  007A      
08001BD8  6E06      3618          bgt.s     toupper_1
08001BDA  C4BC 0000 3619          and.l     #95,D2
08001BDE  005F      
                    3620   toupper_1:
08001BE0  2002      3621          move.l    D2,D0
08001BE2  4CDF 0004 3622          movem.l   (A7)+,D2
08001BE6  4E5E      3623          unlk      A6
08001BE8  4E75      3624          rts
                    3625   _ungetch:
08001BEA  4E56 0000 3626          link      A6,#0
08001BEE  23EE 0008 3627          move.l    8(A6),__ungetbuf
08001BF2  0800 2664 
08001BF6  202E 0008 3628          move.l    8(A6),D0
08001BFA  4E5E      3629          unlk      A6
08001BFC  4E75      3630          rts
                    3631   @vsprintf_copy:
08001BFE  4E56 0000 3632          link      A6,#0
08001C02  206E 0008 3633          move.l    8(A6),A0
08001C06  4A90      3634          tst.l     (A0)
08001C08  6710      3635          beq.s     @vsprintf_copy_1
08001C0A  202E 000C 3636          move.l    12(A6),D0
08001C0E  206E 0008 3637          move.l    8(A6),A0
08001C12  2250      3638          move.l    (A0),A1
08001C14  5290      3639          addq.l    #1,(A0)
08001C16  1280      3640          move.b    D0,(A1)
08001C18  600A      3641          bra.s     @vsprintf_copy_2
                    3642   @vsprintf_copy_1:
08001C1A  2F2E 000C 3643          move.l    12(A6),-(A7)
08001C1E  6100 06F4 3644          bsr       _putch
08001C22  584F      3645          addq.w    #4,A7
                    3646   @vsprintf_copy_2:
08001C24  4E5E      3647          unlk      A6
08001C26  4E75      3648          rts
                    3649   @vsprintf_getval:
08001C28  4E56 0000 3650          link      A6,#0
08001C2C  48E7 3000 3651          movem.l   D2/D3,-(A7)
08001C30  242E 0008 3652          move.l    8(A6),D2
08001C34  4283      3653          clr.l     D3
08001C36  2042      3654          move.l    D2,A0
08001C38  2050      3655          move.l    (A0),A0
08001C3A  1010      3656          move.b    (A0),D0
08001C3C  4880      3657          ext.w     D0
08001C3E  48C0      3658          ext.l     D0
08001C40  0C80 0000 3659          cmp.l     #42,D0
08001C44  002A      
08001C46  6612      3660          bne.s     @vsprintf_getval_1
08001C48  206E 000C 3661          move.l    12(A6),A0
08001C4C  2250      3662          move.l    (A0),A1
08001C4E  5890      3663          addq.l    #4,(A0)
08001C50  2611      3664          move.l    (A1),D3
08001C52  2042      3665          move.l    D2,A0
08001C54  5290      3666          addq.l    #1,(A0)
08001C56  6000 004E 3667          bra       @vsprintf_getval_5
                    3668   @vsprintf_getval_1:
08001C5A  2042      3669          move.l    D2,A0
08001C5C  2050      3670          move.l    (A0),A0
08001C5E  1010      3671          move.b    (A0),D0
08001C60  4880      3672          ext.w     D0
08001C62  48C0      3673          ext.l     D0
08001C64  0C80 0000 3674          cmp.l     #48,D0
08001C68  0030      
08001C6A  6D00 003A 3675          blt       @vsprintf_getval_5
08001C6E  2042      3676          move.l    D2,A0
08001C70  2050      3677          move.l    (A0),A0
08001C72  1010      3678          move.b    (A0),D0
08001C74  4880      3679          ext.w     D0
08001C76  48C0      3680          ext.l     D0
08001C78  0C80 0000 3681          cmp.l     #57,D0
08001C7C  0039      
08001C7E  6E26      3682          bgt.s     @vsprintf_getval_5
08001C80  2F03      3683          move.l    D3,-(A7)
08001C82  4878 000A 3684          pea       10
08001C86  6100 FDF2 3685          bsr       LMUL
08001C8A  2017      3686          move.l    (A7),D0
08001C8C  504F      3687          addq.w    #8,A7
08001C8E  2042      3688          move.l    D2,A0
08001C90  2250      3689          move.l    (A0),A1
08001C92  5290      3690          addq.l    #1,(A0)
08001C94  1211      3691          move.b    (A1),D1
08001C96  4881      3692          ext.w     D1
08001C98  48C1      3693          ext.l     D1
08001C9A  D081      3694          add.l     D1,D0
08001C9C  0480 0000 3695          sub.l     #48,D0
08001CA0  0030      
08001CA2  2600      3696          move.l    D0,D3
08001CA4  60B4      3697          bra       @vsprintf_getval_1
                    3698   @vsprintf_getval_5:
08001CA6  2003      3699          move.l    D3,D0
08001CA8  4CDF 000C 3700          movem.l   (A7)+,D2/D3
08001CAC  4E5E      3701          unlk      A6
08001CAE  4E75      3702          rts
                    3703   _vsprintf:
08001CB0  4E56 FFCC 3704          link      A6,#-52
08001CB4  48E7 3F3C 3705          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08001CB8  45EE 0008 3706          lea       8(A6),A2
08001CBC  47F9 0800 3707          lea       @vsprintf_copy,A3
08001CC0  1BFE      
08001CC2  49F9 0800 3708          lea       _ultoa,A4
08001CC6  2476      
08001CC8  4286      3709          clr.l     D6
                    3710   vsprintf_1:
08001CCA  206E 000C 3711          move.l    12(A6),A0
08001CCE  4A10      3712          tst.b     (A0)
08001CD0  6700 0624 3713          beq       vsprintf_3
08001CD4  206E 000C 3714          move.l    12(A6),A0
08001CD8  1010      3715          move.b    (A0),D0
08001CDA  4880      3716          ext.w     D0
08001CDC  48C0      3717          ext.l     D0
08001CDE  0C80 0000 3718          cmp.l     #37,D0
08001CE2  0025      
08001CE4  671C      3719          beq.s     vsprintf_4
08001CE6  206E 000C 3720          move.l    12(A6),A0
08001CEA  52AE 000C 3721          addq.l    #1,12(A6)
08001CEE  1210      3722          move.b    (A0),D1
08001CF0  4881      3723          ext.w     D1
08001CF2  48C1      3724          ext.l     D1
08001CF4  2F01      3725          move.l    D1,-(A7)
08001CF6  2F0A      3726          move.l    A2,-(A7)
08001CF8  4E93      3727          jsr       (A3)
08001CFA  504F      3728          addq.w    #8,A7
08001CFC  5286      3729          addq.l    #1,D6
08001CFE  6000 05F2 3730          bra       vsprintf_2
                    3731   vsprintf_4:
08001D02  52AE 000C 3732          addq.l    #1,12(A6)
08001D06  422E FFD3 3733          clr.b     -45(A6)
08001D0A  422E FFD2 3734          clr.b     -46(A6)
08001D0E  422E FFD0 3735          clr.b     -48(A6)
08001D12  422E FFCF 3736          clr.b     -49(A6)
08001D16  422E FFCE 3737          clr.b     -50(A6)
08001D1A  422E FFCD 3738          clr.b     -51(A6)
08001D1E  42AE FFFC 3739          clr.l     -4(A6)
08001D22  7AFF      3740          moveq     #-1,D5
08001D24  41EE FFDC 3741          lea       -36(A6),A0
08001D28  2608      3742          move.l    A0,D3
08001D2A  2408      3743          move.l    A0,D2
                    3744   vsprintf_6:
08001D2C  206E 000C 3745          move.l    12(A6),A0
08001D30  1010      3746          move.b    (A0),D0
08001D32  4880      3747          ext.w     D0
08001D34  48C0      3748          ext.l     D0
08001D36  0C80 0000 3749          cmp.l     #43,D0
08001D3A  002B      
08001D3C  6730      3750          beq.s     vsprintf_12
08001D3E  6E18      3751          bgt.s     vsprintf_15
08001D40  0C80 0000 3752          cmp.l     #35,D0
08001D44  0023      
08001D46  6700 003E 3753          beq       vsprintf_14
08001D4A  6E00 0046 3754          bgt       vsprintf_9
08001D4E  0C80 0000 3755          cmp.l     #32,D0
08001D52  0020      
08001D54  6724      3756          beq.s     vsprintf_13
08001D56  603A      3757          bra.s     vsprintf_9
                    3758   vsprintf_15:
08001D58  0C80 0000 3759          cmp.l     #45,D0
08001D5C  002D      
08001D5E  6702      3760          beq.s     vsprintf_11
08001D60  6030      3761          bra.s     vsprintf_9
                    3762   vsprintf_11:
08001D62  1D7C 0001 3763          move.b    #1,-51(A6)
08001D66  FFCD      
08001D68  52AE 000C 3764          addq.l    #1,12(A6)
08001D6C  6026      3765          bra.s     vsprintf_7
                    3766   vsprintf_12:
08001D6E  1D7C 0001 3767          move.b    #1,-50(A6)
08001D72  FFCE      
08001D74  52AE 000C 3768          addq.l    #1,12(A6)
08001D78  601A      3769          bra.s     vsprintf_7
                    3770   vsprintf_13:
08001D7A  1D7C 0001 3771          move.b    #1,-49(A6)
08001D7E  FFCF      
08001D80  52AE 000C 3772          addq.l    #1,12(A6)
08001D84  600E      3773          bra.s     vsprintf_7
                    3774   vsprintf_14:
08001D86  1D7C 0001 3775          move.b    #1,-48(A6)
08001D8A  FFD0      
08001D8C  52AE 000C 3776          addq.l    #1,12(A6)
08001D90  6002      3777          bra.s     vsprintf_7
                    3778   vsprintf_9:
08001D92  6002      3779          bra.s     vsprintf_8
                    3780   vsprintf_7:
08001D94  6096      3781          bra       vsprintf_6
                    3782   vsprintf_8:
08001D96  206E 000C 3783          move.l    12(A6),A0
08001D9A  1010      3784          move.b    (A0),D0
08001D9C  4880      3785          ext.w     D0
08001D9E  48C0      3786          ext.l     D0
08001DA0  0C80 0000 3787          cmp.l     #48,D0
08001DA4  0030      
08001DA6  660A      3788          bne.s     vsprintf_16
08001DA8  52AE 000C 3789          addq.l    #1,12(A6)
08001DAC  1D7C 0001 3790          move.b    #1,-46(A6)
08001DB0  FFD2      
                    3791   vsprintf_16:
08001DB2  486E 0010 3792          pea       16(A6)
08001DB6  486E 000C 3793          pea       12(A6)
08001DBA  6100 FE6C 3794          bsr       @vsprintf_getval
08001DBE  504F      3795          addq.w    #8,A7
08001DC0  2A40      3796          move.l    D0,A5
08001DC2  206E 000C 3797          move.l    12(A6),A0
08001DC6  1010      3798          move.b    (A0),D0
08001DC8  4880      3799          ext.w     D0
08001DCA  48C0      3800          ext.l     D0
08001DCC  0C80 0000 3801          cmp.l     #46,D0
08001DD0  002E      
08001DD2  6614      3802          bne.s     vsprintf_18
08001DD4  52AE 000C 3803          addq.l    #1,12(A6)
08001DD8  486E 0010 3804          pea       16(A6)
08001DDC  486E 000C 3805          pea       12(A6)
08001DE0  6100 FE46 3806          bsr       @vsprintf_getval
08001DE4  504F      3807          addq.w    #8,A7
08001DE6  2A00      3808          move.l    D0,D5
                    3809   vsprintf_18:
08001DE8  206E 000C 3810          move.l    12(A6),A0
08001DEC  1010      3811          move.b    (A0),D0
08001DEE  4880      3812          ext.w     D0
08001DF0  48C0      3813          ext.l     D0
08001DF2  0C80 0000 3814          cmp.l     #108,D0
08001DF6  006C      
08001DF8  660A      3815          bne.s     vsprintf_20
08001DFA  52AE 000C 3816          addq.l    #1,12(A6)
08001DFE  1D7C 0001 3817          move.b    #1,-45(A6)
08001E02  FFD3      
                    3818   vsprintf_20:
08001E04  206E 000C 3819          move.l    12(A6),A0
08001E08  1010      3820          move.b    (A0),D0
08001E0A  4880      3821          ext.w     D0
08001E0C  48C0      3822          ext.l     D0
08001E0E  0C80 0000 3823          cmp.l     #111,D0
08001E12  006F      
08001E14  6700 00D4 3824          beq       vsprintf_27
08001E18  6E34      3825          bgt.s     vsprintf_33
08001E1A  0C80 0000 3826          cmp.l     #100,D0
08001E1E  0064      
08001E20  6700 0054 3827          beq       vsprintf_24
08001E24  6E1C      3828          bgt.s     vsprintf_34
08001E26  0C80 0000 3829          cmp.l     #99,D0
08001E2A  0063      
08001E2C  6700 012C 3830          beq       vsprintf_30
08001E30  6E00 016A 3831          bgt       vsprintf_22
08001E34  0C80 0000 3832          cmp.l     #88,D0
08001E38  0058      
08001E3A  6700 00E6 3833          beq       vsprintf_28
08001E3E  6000 015C 3834          bra       vsprintf_22
                    3835   vsprintf_34:
08001E42  0C80 0000 3836          cmp.l     #105,D0
08001E46  0069      
08001E48  672C      3837          beq.s     vsprintf_24
08001E4A  6000 0150 3838          bra       vsprintf_22
                    3839   vsprintf_33:
08001E4E  0C80 0000 3840          cmp.l     #117,D0
08001E52  0075      
08001E54  6700 005C 3841          beq       vsprintf_26
08001E58  6E0E      3842          bgt.s     vsprintf_35
08001E5A  0C80 0000 3843          cmp.l     #115,D0
08001E5E  0073      
08001E60  6700 011C 3844          beq       vsprintf_31
08001E64  6000 0136 3845          bra       vsprintf_22
                    3846   vsprintf_35:
08001E68  0C80 0000 3847          cmp.l     #120,D0
08001E6C  0078      
08001E6E  6700 00B2 3848          beq       vsprintf_28
08001E72  6000 0128 3849          bra       vsprintf_22
                    3850   vsprintf_24:
08001E76  4A2E FFD3 3851          tst.b     -45(A6)
08001E7A  671A      3852          beq.s     vsprintf_36
08001E7C  4878 000A 3853          pea       10
08001E80  2F03      3854          move.l    D3,-(A7)
08001E82  206E 0010 3855          move.l    16(A6),A0
08001E86  58AE 0010 3856          addq.l    #4,16(A6)
08001E8A  2F10      3857          move.l    (A0),-(A7)
08001E8C  6100 0564 3858          bsr       _ltoa
08001E90  DEFC 000C 3859          add.w     #12,A7
08001E94  6018      3860          bra.s     vsprintf_37
                    3861   vsprintf_36:
08001E96  4878 000A 3862          pea       10
08001E9A  2F03      3863          move.l    D3,-(A7)
08001E9C  206E 0010 3864          move.l    16(A6),A0
08001EA0  58AE 0010 3865          addq.l    #4,16(A6)
08001EA4  2F10      3866          move.l    (A0),-(A7)
08001EA6  6100 054A 3867          bsr       _ltoa
08001EAA  DEFC 000C 3868          add.w     #12,A7
                    3869   vsprintf_37:
08001EAE  6000 00FA 3870          bra       vsprintf_23
                    3871   vsprintf_26:
08001EB2  4A2E FFD3 3872          tst.b     -45(A6)
08001EB6  6718      3873          beq.s     vsprintf_38
08001EB8  4878 000A 3874          pea       10
08001EBC  2F03      3875          move.l    D3,-(A7)
08001EBE  206E 0010 3876          move.l    16(A6),A0
08001EC2  58AE 0010 3877          addq.l    #4,16(A6)
08001EC6  2F10      3878          move.l    (A0),-(A7)
08001EC8  4E94      3879          jsr       (A4)
08001ECA  DEFC 000C 3880          add.w     #12,A7
08001ECE  6016      3881          bra.s     vsprintf_39
                    3882   vsprintf_38:
08001ED0  4878 000A 3883          pea       10
08001ED4  2F03      3884          move.l    D3,-(A7)
08001ED6  206E 0010 3885          move.l    16(A6),A0
08001EDA  58AE 0010 3886          addq.l    #4,16(A6)
08001EDE  2F10      3887          move.l    (A0),-(A7)
08001EE0  4E94      3888          jsr       (A4)
08001EE2  DEFC 000C 3889          add.w     #12,A7
                    3890   vsprintf_39:
08001EE6  6000 00C2 3891          bra       vsprintf_23
                    3892   vsprintf_27:
08001EEA  4A2E FFD3 3893          tst.b     -45(A6)
08001EEE  6718      3894          beq.s     vsprintf_40
08001EF0  4878 0008 3895          pea       8
08001EF4  2F03      3896          move.l    D3,-(A7)
08001EF6  206E 0010 3897          move.l    16(A6),A0
08001EFA  58AE 0010 3898          addq.l    #4,16(A6)
08001EFE  2F10      3899          move.l    (A0),-(A7)
08001F00  4E94      3900          jsr       (A4)
08001F02  DEFC 000C 3901          add.w     #12,A7
08001F06  6016      3902          bra.s     vsprintf_41
                    3903   vsprintf_40:
08001F08  4878 0008 3904          pea       8
08001F0C  2F03      3905          move.l    D3,-(A7)
08001F0E  206E 0010 3906          move.l    16(A6),A0
08001F12  58AE 0010 3907          addq.l    #4,16(A6)
08001F16  2F10      3908          move.l    (A0),-(A7)
08001F18  4E94      3909          jsr       (A4)
08001F1A  DEFC 000C 3910          add.w     #12,A7
                    3911   vsprintf_41:
08001F1E  6000 008A 3912          bra       vsprintf_23
                    3913   vsprintf_28:
08001F22  4A2E FFD3 3914          tst.b     -45(A6)
08001F26  6718      3915          beq.s     vsprintf_42
08001F28  4878 0010 3916          pea       16
08001F2C  2F03      3917          move.l    D3,-(A7)
08001F2E  206E 0010 3918          move.l    16(A6),A0
08001F32  58AE 0010 3919          addq.l    #4,16(A6)
08001F36  2F10      3920          move.l    (A0),-(A7)
08001F38  4E94      3921          jsr       (A4)
08001F3A  DEFC 000C 3922          add.w     #12,A7
08001F3E  6016      3923          bra.s     vsprintf_43
                    3924   vsprintf_42:
08001F40  4878 0010 3925          pea       16
08001F44  2F03      3926          move.l    D3,-(A7)
08001F46  206E 0010 3927          move.l    16(A6),A0
08001F4A  58AE 0010 3928          addq.l    #4,16(A6)
08001F4E  2F10      3929          move.l    (A0),-(A7)
08001F50  4E94      3930          jsr       (A4)
08001F52  DEFC 000C 3931          add.w     #12,A7
                    3932   vsprintf_43:
08001F56  6000 0052 3933          bra       vsprintf_23
                    3934   vsprintf_30:
08001F5A  206E 0010 3935          move.l    16(A6),A0
08001F5E  58AE 0010 3936          addq.l    #4,16(A6)
08001F62  2010      3937          move.l    (A0),D0
08001F64  2042      3938          move.l    D2,A0
08001F66  5282      3939          addq.l    #1,D2
08001F68  1080      3940          move.b    D0,(A0)
08001F6A  2042      3941          move.l    D2,A0
08001F6C  4210      3942          clr.b     (A0)
08001F6E  200D      3943          move.l    A5,D0
08001F70  6704      3944          beq.s     vsprintf_44
08001F72  200D      3945          move.l    A5,D0
08001F74  6002      3946          bra.s     vsprintf_45
                    3947   vsprintf_44:
08001F76  7001      3948          moveq     #1,D0
                    3949   vsprintf_45:
08001F78  2A00      3950          move.l    D0,D5
08001F7A  6000 002E 3951          bra       vsprintf_23
                    3952   vsprintf_31:
08001F7E  206E 0010 3953          move.l    16(A6),A0
08001F82  58AE 0010 3954          addq.l    #4,16(A6)
08001F86  2610      3955          move.l    (A0),D3
08001F88  0C85 FFFF 3956          cmp.l     #-1,D5
08001F8C  FFFF      
08001F8E  660A      3957          bne.s     vsprintf_46
08001F90  2F03      3958          move.l    D3,-(A7)
08001F92  6100 0544 3959          bsr       _strlen
08001F96  584F      3960          addq.w    #4,A7
08001F98  2A00      3961          move.l    D0,D5
                    3962   vsprintf_46:
08001F9A  600E      3963          bra.s     vsprintf_23
                    3964   vsprintf_22:
08001F9C  206E 000C 3965          move.l    12(A6),A0
08001FA0  2242      3966          move.l    D2,A1
08001FA2  5282      3967          addq.l    #1,D2
08001FA4  1290      3968          move.b    (A0),(A1)
08001FA6  2042      3969          move.l    D2,A0
08001FA8  4210      3970          clr.b     (A0)
                    3971   vsprintf_23:
08001FAA  2F03      3972          move.l    D3,-(A7)
08001FAC  6100 052A 3973          bsr       _strlen
08001FB0  584F      3974          addq.w    #4,A7
08001FB2  1800      3975          move.b    D0,D4
08001FB4  206E 000C 3976          move.l    12(A6),A0
08001FB8  1010      3977          move.b    (A0),D0
08001FBA  4880      3978          ext.w     D0
08001FBC  48C0      3979          ext.l     D0
08001FBE  0C80 0000 3980          cmp.l     #115,D0
08001FC2  0073      
08001FC4  6618      3981          bne.s     vsprintf_48
08001FC6  0C85 0000 3982          cmp.l     #0,D5
08001FCA  0000      
08001FCC  6D10      3983          blt.s     vsprintf_48
08001FCE  4884      3984          ext.w     D4
08001FD0  48C4      3985          ext.l     D4
08001FD2  B885      3986          cmp.l     D5,D4
08001FD4  6F04      3987          ble.s     vsprintf_50
08001FD6  1005      3988          move.b    D5,D0
08001FD8  6002      3989          bra.s     vsprintf_51
                    3990   vsprintf_50:
08001FDA  1004      3991          move.b    D4,D0
                    3992   vsprintf_51:
08001FDC  1800      3993          move.b    D0,D4
                    3994   vsprintf_48:
08001FDE  206E 000C 3995          move.l    12(A6),A0
08001FE2  1010      3996          move.b    (A0),D0
08001FE4  4880      3997          ext.w     D0
08001FE6  48C0      3998          ext.l     D0
08001FE8  0C80 0000 3999          cmp.l     #88,D0
08001FEC  0058      
08001FEE  6600 0026 4000          bne       vsprintf_56
08001FF2  41EE FFDC 4001          lea       -36(A6),A0
08001FF6  2408      4002          move.l    A0,D2
                    4003   vsprintf_54:
08001FF8  2042      4004          move.l    D2,A0
08001FFA  4A10      4005          tst.b     (A0)
08001FFC  6718      4006          beq.s     vsprintf_56
08001FFE  2042      4007          move.l    D2,A0
08002000  1210      4008          move.b    (A0),D1
08002002  4881      4009          ext.w     D1
08002004  48C1      4010          ext.l     D1
08002006  2F01      4011          move.l    D1,-(A7)
08002008  6100 FBB4 4012          bsr       _toupper
0800200C  584F      4013          addq.w    #4,A7
0800200E  2042      4014          move.l    D2,A0
08002010  1080      4015          move.b    D0,(A0)
08002012  5282      4016          addq.l    #1,D2
08002014  60E2      4017          bra       vsprintf_54
                    4018   vsprintf_56:
08002016  7E00      4019          moveq     #0,D7
08002018  41EE FFD4 4020          lea       -44(A6),A0
0800201C  2408      4021          move.l    A0,D2
0800201E  206E 000C 4022          move.l    12(A6),A0
08002022  1010      4023          move.b    (A0),D0
08002024  4880      4024          ext.w     D0
08002026  48C0      4025          ext.l     D0
08002028  0C80 0000 4026          cmp.l     #100,D0
0800202C  0064      
0800202E  6714      4027          beq.s     vsprintf_59
08002030  206E 000C 4028          move.l    12(A6),A0
08002034  1010      4029          move.b    (A0),D0
08002036  4880      4030          ext.w     D0
08002038  48C0      4031          ext.l     D0
0800203A  0C80 0000 4032          cmp.l     #105,D0
0800203E  0069      
08002040  6600 0076 4033          bne       vsprintf_65
                    4034   vsprintf_59:
08002044  4A2E FFCE 4035          tst.b     -50(A6)
08002048  6612      4036          bne.s     vsprintf_62
0800204A  2043      4037          move.l    D3,A0
0800204C  1010      4038          move.b    (A0),D0
0800204E  4880      4039          ext.w     D0
08002050  48C0      4040          ext.l     D0
08002052  0C80 0000 4041          cmp.l     #45,D0
08002056  002D      
08002058  6600 002E 4042          bne       vsprintf_60
                    4043   vsprintf_62:
0800205C  2043      4044          move.l    D3,A0
0800205E  1010      4045          move.b    (A0),D0
08002060  4880      4046          ext.w     D0
08002062  48C0      4047          ext.l     D0
08002064  0C80 0000 4048          cmp.l     #45,D0
08002068  002D      
0800206A  660E      4049          bne.s     vsprintf_63
0800206C  2043      4050          move.l    D3,A0
0800206E  5283      4051          addq.l    #1,D3
08002070  2242      4052          move.l    D2,A1
08002072  5282      4053          addq.l    #1,D2
08002074  1290      4054          move.b    (A0),(A1)
08002076  5304      4055          subq.b    #1,D4
08002078  6008      4056          bra.s     vsprintf_64
                    4057   vsprintf_63:
0800207A  2042      4058          move.l    D2,A0
0800207C  5282      4059          addq.l    #1,D2
0800207E  10BC 002B 4060          move.b    #43,(A0)
                    4061   vsprintf_64:
08002082  5287      4062          addq.l    #1,D7
08002084  6000 0032 4063          bra       vsprintf_65
                    4064   vsprintf_60:
08002088  4A2E FFCF 4065          tst.b     -49(A6)
0800208C  6700 002A 4066          beq       vsprintf_65
08002090  2043      4067          move.l    D3,A0
08002092  1010      4068          move.b    (A0),D0
08002094  4880      4069          ext.w     D0
08002096  48C0      4070          ext.l     D0
08002098  0C80 0000 4071          cmp.l     #45,D0
0800209C  002D      
0800209E  660E      4072          bne.s     vsprintf_67
080020A0  2043      4073          move.l    D3,A0
080020A2  5283      4074          addq.l    #1,D3
080020A4  2242      4075          move.l    D2,A1
080020A6  5282      4076          addq.l    #1,D2
080020A8  1290      4077          move.b    (A0),(A1)
080020AA  5304      4078          subq.b    #1,D4
080020AC  6008      4079          bra.s     vsprintf_68
                    4080   vsprintf_67:
080020AE  2042      4081          move.l    D2,A0
080020B0  5282      4082          addq.l    #1,D2
080020B2  10BC 0020 4083          move.b    #32,(A0)
                    4084   vsprintf_68:
080020B6  5287      4085          addq.l    #1,D7
                    4086   vsprintf_65:
080020B8  4A2E FFD0 4087          tst.b     -48(A6)
080020BC  6700 0066 4088          beq       vsprintf_77
080020C0  206E 000C 4089          move.l    12(A6),A0
080020C4  1010      4090          move.b    (A0),D0
080020C6  4880      4091          ext.w     D0
080020C8  48C0      4092          ext.l     D0
080020CA  0C80 0000 4093          cmp.l     #111,D0
080020CE  006F      
080020D0  671A      4094          beq.s     vsprintf_73
080020D2  6E0C      4095          bgt.s     vsprintf_76
080020D4  0C80 0000 4096          cmp.l     #88,D0
080020D8  0058      
080020DA  6710      4097          beq.s     vsprintf_73
080020DC  6000 0046 4098          bra       vsprintf_77
                    4099   vsprintf_76:
080020E0  0C80 0000 4100          cmp.l     #120,D0
080020E4  0078      
080020E6  6704      4101          beq.s     vsprintf_73
080020E8  6000 003A 4102          bra       vsprintf_77
                    4103   vsprintf_73:
080020EC  2042      4104          move.l    D2,A0
080020EE  5282      4105          addq.l    #1,D2
080020F0  10BC 0030 4106          move.b    #48,(A0)
080020F4  5287      4107          addq.l    #1,D7
080020F6  206E 000C 4108          move.l    12(A6),A0
080020FA  1010      4109          move.b    (A0),D0
080020FC  4880      4110          ext.w     D0
080020FE  48C0      4111          ext.l     D0
08002100  0C80 0000 4112          cmp.l     #120,D0
08002104  0078      
08002106  6712      4113          beq.s     vsprintf_79
08002108  206E 000C 4114          move.l    12(A6),A0
0800210C  1010      4115          move.b    (A0),D0
0800210E  4880      4116          ext.w     D0
08002110  48C0      4117          ext.l     D0
08002112  0C80 0000 4118          cmp.l     #88,D0
08002116  0058      
08002118  660A      4119          bne.s     vsprintf_77
                    4120   vsprintf_79:
0800211A  2042      4121          move.l    D2,A0
0800211C  5282      4122          addq.l    #1,D2
0800211E  10BC 0078 4123          move.b    #120,(A0)
08002122  5287      4124          addq.l    #1,D7
                    4125   vsprintf_77:
08002124  2042      4126          move.l    D2,A0
08002126  4210      4127          clr.b     (A0)
08002128  206E 000C 4128          move.l    12(A6),A0
0800212C  1010      4129          move.b    (A0),D0
0800212E  4880      4130          ext.w     D0
08002130  48C0      4131          ext.l     D0
08002132  0C80 0000 4132          cmp.l     #105,D0
08002136  0069      
08002138  6700 0076 4133          beq       vsprintf_82
0800213C  6E42      4134          bgt.s     vsprintf_93
0800213E  0C80 0000 4135          cmp.l     #99,D0
08002142  0063      
08002144  6700 0084 4136          beq       vsprintf_96
08002148  6E1C      4137          bgt.s     vsprintf_94
0800214A  0C80 0000 4138          cmp.l     #88,D0
0800214E  0058      
08002150  6700 005E 4139          beq       vsprintf_82
08002154  6E00 0184 4140          bgt       vsprintf_80
08002158  0C80 0000 4141          cmp.l     #69,D0
0800215C  0045      
0800215E  6700 0050 4142          beq       vsprintf_82
08002162  6000 0176 4143          bra       vsprintf_80
                    4144   vsprintf_94:
08002166  0C80 0000 4145          cmp.l     #101,D0
0800216A  0065      
0800216C  6700 0042 4146          beq       vsprintf_82
08002170  6E00 0168 4147          bgt       vsprintf_80
08002174  0C80 0000 4148          cmp.l     #100,D0
08002178  0064      
0800217A  6734      4149          beq.s     vsprintf_82
0800217C  6000 015C 4150          bra       vsprintf_80
                    4151   vsprintf_93:
08002180  0C80 0000 4152          cmp.l     #117,D0
08002184  0075      
08002186  6728      4153          beq.s     vsprintf_82
08002188  6E1A      4154          bgt.s     vsprintf_95
0800218A  0C80 0000 4155          cmp.l     #115,D0
0800218E  0073      
08002190  6700 0038 4156          beq       vsprintf_96
08002194  6E00 0144 4157          bgt       vsprintf_80
08002198  0C80 0000 4158          cmp.l     #111,D0
0800219C  006F      
0800219E  6710      4159          beq.s     vsprintf_82
080021A0  6000 0138 4160          bra       vsprintf_80
                    4161   vsprintf_95:
080021A4  0C80 0000 4162          cmp.l     #120,D0
080021A8  0078      
080021AA  6704      4163          beq.s     vsprintf_82
080021AC  6000 012C 4164          bra       vsprintf_80
                    4165   vsprintf_82:
080021B0  4A2E FFD2 4166          tst.b     -46(A6)
080021B4  6714      4167          beq.s     vsprintf_96
080021B6  4A2E FFCD 4168          tst.b     -51(A6)
080021BA  660E      4169          bne.s     vsprintf_96
080021BC  200D      4170          move.l    A5,D0
080021BE  9087      4171          sub.l     D7,D0
080021C0  4884      4172          ext.w     D4
080021C2  48C4      4173          ext.l     D4
080021C4  9084      4174          sub.l     D4,D0
080021C6  2D40 FFFC 4175          move.l    D0,-4(A6)
                    4176   vsprintf_96:
080021CA  202E FFFC 4177          move.l    -4(A6),D0
080021CE  0C80 0000 4178          cmp.l     #0,D0
080021D2  0000      
080021D4  6C04      4179          bge.s     vsprintf_98
080021D6  42AE FFFC 4180          clr.l     -4(A6)
                    4181   vsprintf_98:
080021DA  4A2E FFCD 4182          tst.b     -51(A6)
080021DE  6600 0030 4183          bne       vsprintf_104
080021E2  4884      4184          ext.w     D4
080021E4  48C4      4185          ext.l     D4
080021E6  2004      4186          move.l    D4,D0
080021E8  D0AE FFFC 4187          add.l     -4(A6),D0
080021EC  D087      4188          add.l     D7,D0
080021EE  1D40 FFD1 4189          move.b    D0,-47(A6)
                    4190   vsprintf_102:
080021F2  102E FFD1 4191          move.b    -47(A6),D0
080021F6  4880      4192          ext.w     D0
080021F8  48C0      4193          ext.l     D0
080021FA  220D      4194          move.l    A5,D1
080021FC  534D      4195          subq.w    #1,A5
080021FE  B081      4196          cmp.l     D1,D0
08002200  6C0E      4197          bge.s     vsprintf_104
08002202  4878 0020 4198          pea       32
08002206  2F0A      4199          move.l    A2,-(A7)
08002208  4E93      4200          jsr       (A3)
0800220A  504F      4201          addq.w    #8,A7
0800220C  5286      4202          addq.l    #1,D6
0800220E  60E2      4203          bra       vsprintf_102
                    4204   vsprintf_104:
08002210  41EE FFD4 4205          lea       -44(A6),A0
08002214  2408      4206          move.l    A0,D2
                    4207   vsprintf_105:
08002216  2042      4208          move.l    D2,A0
08002218  4A10      4209          tst.b     (A0)
0800221A  6716      4210          beq.s     vsprintf_107
0800221C  2042      4211          move.l    D2,A0
0800221E  5282      4212          addq.l    #1,D2
08002220  1210      4213          move.b    (A0),D1
08002222  4881      4214          ext.w     D1
08002224  48C1      4215          ext.l     D1
08002226  2F01      4216          move.l    D1,-(A7)
08002228  2F0A      4217          move.l    A2,-(A7)
0800222A  4E93      4218          jsr       (A3)
0800222C  504F      4219          addq.w    #8,A7
0800222E  5286      4220          addq.l    #1,D6
08002230  60E4      4221          bra       vsprintf_105
                    4222   vsprintf_107:
08002232  202E FFFC 4223          move.l    -4(A6),D0
08002236  1D40 FFD1 4224          move.b    D0,-47(A6)
                    4225   vsprintf_108:
0800223A  102E FFD1 4226          move.b    -47(A6),D0
0800223E  532E FFD1 4227          subq.b    #1,-47(A6)
08002242  4A00      4228          tst.b     D0
08002244  670E      4229          beq.s     vsprintf_110
08002246  4878 0030 4230          pea       48
0800224A  2F0A      4231          move.l    A2,-(A7)
0800224C  4E93      4232          jsr       (A3)
0800224E  504F      4233          addq.w    #8,A7
08002250  5286      4234          addq.l    #1,D6
08002252  60E6      4235          bra       vsprintf_108
                    4236   vsprintf_110:
08002254  2043      4237          move.l    D3,A0
08002256  4A10      4238          tst.b     (A0)
08002258  6700 0048 4239          beq       vsprintf_113
0800225C  206E 000C 4240          move.l    12(A6),A0
08002260  1010      4241          move.b    (A0),D0
08002262  4880      4242          ext.w     D0
08002264  48C0      4243          ext.l     D0
08002266  0C80 0000 4244          cmp.l     #115,D0
0800226A  0073      
0800226C  670C      4245          beq.s     vsprintf_116
0800226E  6E18      4246          bgt.s     vsprintf_119
08002270  0C80 0000 4247          cmp.l     #99,D0
08002274  0063      
08002276  6702      4248          beq.s     vsprintf_116
08002278  600E      4249          bra.s     vsprintf_119
                    4250   vsprintf_116:
0800227A  2005      4251          move.l    D5,D0
0800227C  5385      4252          subq.l    #1,D5
0800227E  0C80 0000 4253          cmp.l     #0,D0
08002282  0000      
08002284  6E02      4254          bgt.s     vsprintf_119
08002286  6016      4255          bra.s     vsprintf_115
                    4256   vsprintf_119:
08002288  2043      4257          move.l    D3,A0
0800228A  5283      4258          addq.l    #1,D3
0800228C  1210      4259          move.b    (A0),D1
0800228E  4881      4260          ext.w     D1
08002290  48C1      4261          ext.l     D1
08002292  2F01      4262          move.l    D1,-(A7)
08002294  2F0A      4263          move.l    A2,-(A7)
08002296  4E93      4264          jsr       (A3)
08002298  504F      4265          addq.w    #8,A7
0800229A  5286      4266          addq.l    #1,D6
0800229C  6002      4267          bra.s     vsprintf_112
                    4268   vsprintf_115:
0800229E  6002      4269          bra.s     vsprintf_113
                    4270   vsprintf_112:
080022A0  60B2      4271          bra       vsprintf_110
                    4272   vsprintf_113:
080022A2  4A2E FFCD 4273          tst.b     -51(A6)
080022A6  6700 0030 4274          beq       vsprintf_125
080022AA  4884      4275          ext.w     D4
080022AC  48C4      4276          ext.l     D4
080022AE  2004      4277          move.l    D4,D0
080022B0  D0AE FFFC 4278          add.l     -4(A6),D0
080022B4  D087      4279          add.l     D7,D0
080022B6  1D40 FFD1 4280          move.b    D0,-47(A6)
                    4281   vsprintf_123:
080022BA  102E FFD1 4282          move.b    -47(A6),D0
080022BE  4880      4283          ext.w     D0
080022C0  48C0      4284          ext.l     D0
080022C2  220D      4285          move.l    A5,D1
080022C4  534D      4286          subq.w    #1,A5
080022C6  B081      4287          cmp.l     D1,D0
080022C8  6C0E      4288          bge.s     vsprintf_125
080022CA  4878 0020 4289          pea       32
080022CE  2F0A      4290          move.l    A2,-(A7)
080022D0  4E93      4291          jsr       (A3)
080022D2  504F      4292          addq.w    #8,A7
080022D4  5386      4293          subq.l    #1,D6
080022D6  60E2      4294          bra       vsprintf_123
                    4295   vsprintf_125:
080022D8  6014      4296          bra.s     vsprintf_81
                    4297   vsprintf_80:
080022DA  206E 000C 4298          move.l    12(A6),A0
080022DE  1210      4299          move.b    (A0),D1
080022E0  4881      4300          ext.w     D1
080022E2  48C1      4301          ext.l     D1
080022E4  2F01      4302          move.l    D1,-(A7)
080022E6  2F0A      4303          move.l    A2,-(A7)
080022E8  4E93      4304          jsr       (A3)
080022EA  504F      4305          addq.w    #8,A7
080022EC  5286      4306          addq.l    #1,D6
                    4307   vsprintf_81:
080022EE  52AE 000C 4308          addq.l    #1,12(A6)
                    4309   vsprintf_2:
080022F2  6000 F9D6 4310          bra       vsprintf_1
                    4311   vsprintf_3:
080022F6  4A92      4312          tst.l     (A2)
080022F8  6710      4313          beq.s     vsprintf_126
080022FA  4201      4314          clr.b     D1
080022FC  C2BC 0000 4315          and.l     #255,D1
08002300  00FF      
08002302  2F01      4316          move.l    D1,-(A7)
08002304  2F0A      4317          move.l    A2,-(A7)
08002306  4E93      4318          jsr       (A3)
08002308  504F      4319          addq.w    #8,A7
                    4320   vsprintf_126:
0800230A  2006      4321          move.l    D6,D0
0800230C  4CDF 3CFC 4322          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08002310  4E5E      4323          unlk      A6
08002312  4E75      4324          rts
                    4325   _putch:
08002314  4E56 0000 4326          link      A6,#0
08002318  48E7 2000 4327          movem.l   D2,-(A7)
0800231C  242E 0008 4328          move.l    8(A6),D2
08002320  0C82 0000 4329          cmp.l     #10,D2
08002324  000A      
08002326  660A      4330          bne.s     putch_1
08002328  4878 000D 4331          pea       13
0800232C  6100 E000 4332          bsr       __putch
08002330  584F      4333          addq.w    #4,A7
                    4334   putch_1:
08002332  2F02      4335          move.l    D2,-(A7)
08002334  6100 DFF8 4336          bsr       __putch
08002338  584F      4337          addq.w    #4,A7
0800233A  2002      4338          move.l    D2,D0
0800233C  4CDF 0004 4339          movem.l   (A7)+,D2
08002340  4E5E      4340          unlk      A6
08002342  4E75      4341          rts
                    4342   _getch:
08002344  48E7 2000 4343          movem.l   D2,-(A7)
08002348  2439 0800 4344          move.l    __ungetbuf,D2
0800234C  2664      
0800234E  2039 0800 4345          move.l    __ungetbuf,D0
08002352  2664      
08002354  0C80 FFFF 4346          cmp.l     #-1,D0
08002358  FFFF      
0800235A  670C      4347          beq.s     getch_1
0800235C  23FC FFFF 4348          move.l    #-1,__ungetbuf
08002360  FFFF 0800 
08002364  2664      
08002366  6010      4349          bra.s     getch_3
                    4350   getch_1:
08002368  6100 DFF2 4351          bsr       __getch
0800236C  2400      4352          move.l    D0,D2
0800236E  0C80 0000 4353          cmp.l     #13,D0
08002372  000D      
08002374  6602      4354          bne.s     getch_3
08002376  740A      4355          moveq     #10,D2
                    4356   getch_3:
08002378  2002      4357          move.l    D2,D0
0800237A  4CDF 0004 4358          movem.l   (A7)+,D2
0800237E  4E75      4359          rts
                    4360   @itoa_convert:
08002380  4E56 0000 4361          link      A6,#0
08002384  48E7 3C00 4362          movem.l   D2/D3/D4/D5,-(A7)
08002388  242E 0008 4363          move.l    8(A6),D2
0800238C  262E 0010 4364          move.l    16(A6),D3
08002390  2A2E 000C 4365          move.l    12(A6),D5
08002394  2F05      4366          move.l    D5,-(A7)
08002396  2F03      4367          move.l    D3,-(A7)
08002398  6100 ED26 4368          bsr       ULDIV
0800239C  202F 0004 4369          move.l    4(A7),D0
080023A0  504F      4370          addq.w    #8,A7
080023A2  2800      4371          move.l    D0,D4
080023A4  BA83      4372          cmp.l     D3,D5
080023A6  651A      4373          blo.s     @itoa_convert_1
080023A8  2F03      4374          move.l    D3,-(A7)
080023AA  2F05      4375          move.l    D5,-(A7)
080023AC  2F03      4376          move.l    D3,-(A7)
080023AE  6100 ED10 4377          bsr       ULDIV
080023B2  2217      4378          move.l    (A7),D1
080023B4  504F      4379          addq.w    #8,A7
080023B6  2F01      4380          move.l    D1,-(A7)
080023B8  2F02      4381          move.l    D2,-(A7)
080023BA  61C4      4382          bsr       @itoa_convert
080023BC  DEFC 000C 4383          add.w     #12,A7
080023C0  2400      4384          move.l    D0,D2
                    4385   @itoa_convert_1:
080023C2  0C84 0000 4386          cmp.l     #9,D4
080023C6  0009      
080023C8  6E0A      4387          bgt.s     @itoa_convert_3
080023CA  2004      4388          move.l    D4,D0
080023CC  0680 0000 4389          add.l     #48,D0
080023D0  0030      
080023D2  600E      4390          bra.s     @itoa_convert_4
                    4391   @itoa_convert_3:
080023D4  2004      4392          move.l    D4,D0
080023D6  0680 0000 4393          add.l     #97,D0
080023DA  0061      
080023DC  0480 0000 4394          sub.l     #10,D0
080023E0  000A      
                    4395   @itoa_convert_4:
080023E2  2042      4396          move.l    D2,A0
080023E4  1080      4397          move.b    D0,(A0)
080023E6  2002      4398          move.l    D2,D0
080023E8  5280      4399          addq.l    #1,D0
080023EA  4CDF 003C 4400          movem.l   (A7)+,D2/D3/D4/D5
080023EE  4E5E      4401          unlk      A6
080023F0  4E75      4402          rts
                    4403   _ltoa:
080023F2  4E56 0000 4404          link      A6,#0
080023F6  48E7 3C00 4405          movem.l   D2/D3/D4/D5,-(A7)
080023FA  242E 0008 4406          move.l    8(A6),D2
080023FE  262E 000C 4407          move.l    12(A6),D3
08002402  2A2E 0010 4408          move.l    16(A6),D5
08002406  2803      4409          move.l    D3,D4
08002408  0C85 0000 4410          cmp.l     #2,D5
0800240C  0002      
0800240E  6D08      4411          blt.s     ltoa_3
08002410  0C85 0000 4412          cmp.l     #36,D5
08002414  0024      
08002416  6F06      4413          ble.s     ltoa_1
                    4414   ltoa_3:
08002418  2003      4415          move.l    D3,D0
0800241A  6000 0052 4416          bra       ltoa_4
                    4417   ltoa_1:
0800241E  0C85 0000 4418          cmp.l     #10,D5
08002422  000A      
08002424  6600 0032 4419          bne       ltoa_5
08002428  0C82 0000 4420          cmp.l     #0,D2
0800242C  0000      
0800242E  6C28      4421          bge.s     ltoa_5
08002430  2002      4422          move.l    D2,D0
08002432  4480      4423          neg.l     D0
08002434  2400      4424          move.l    D0,D2
08002436  0C82 0000 4425          cmp.l     #0,D2
0800243A  0000      
0800243C  6C12      4426          bge.s     ltoa_7
0800243E  4879 0800 4427          pea       @itoa_1
08002442  2778      
08002444  2F03      4428          move.l    D3,-(A7)
08002446  6100 00A2 4429          bsr       _strcpy
0800244A  504F      4430          addq.w    #8,A7
0800244C  2003      4431          move.l    D3,D0
0800244E  601E      4432          bra.s     ltoa_4
                    4433   ltoa_7:
08002450  2044      4434          move.l    D4,A0
08002452  5284      4435          addq.l    #1,D4
08002454  10BC 002D 4436          move.b    #45,(A0)
                    4437   ltoa_5:
08002458  2F05      4438          move.l    D5,-(A7)
0800245A  2F02      4439          move.l    D2,-(A7)
0800245C  2F04      4440          move.l    D4,-(A7)
0800245E  6100 FF20 4441          bsr       @itoa_convert
08002462  DEFC 000C 4442          add.w     #12,A7
08002466  2800      4443          move.l    D0,D4
08002468  2044      4444          move.l    D4,A0
0800246A  4210      4445          clr.b     (A0)
0800246C  2003      4446          move.l    D3,D0
                    4447   ltoa_4:
0800246E  4CDF 003C 4448          movem.l   (A7)+,D2/D3/D4/D5
08002472  4E5E      4449          unlk      A6
08002474  4E75      4450          rts
                    4451   _ultoa:
08002476  4E56 0000 4452          link      A6,#0
0800247A  48E7 3800 4453          movem.l   D2/D3/D4,-(A7)
0800247E  262E 0010 4454          move.l    16(A6),D3
08002482  282E 000C 4455          move.l    12(A6),D4
08002486  2404      4456          move.l    D4,D2
08002488  0C83 0000 4457          cmp.l     #2,D3
0800248C  0002      
0800248E  6D08      4458          blt.s     ultoa_3
08002490  0C83 0000 4459          cmp.l     #36,D3
08002494  0024      
08002496  6F04      4460          ble.s     ultoa_1
                    4461   ultoa_3:
08002498  2004      4462          move.l    D4,D0
0800249A  6018      4463          bra.s     ultoa_4
                    4464   ultoa_1:
0800249C  2F03      4465          move.l    D3,-(A7)
0800249E  2F2E 0008 4466          move.l    8(A6),-(A7)
080024A2  2F02      4467          move.l    D2,-(A7)
080024A4  6100 FEDA 4468          bsr       @itoa_convert
080024A8  DEFC 000C 4469          add.w     #12,A7
080024AC  2400      4470          move.l    D0,D2
080024AE  2042      4471          move.l    D2,A0
080024B0  4210      4472          clr.b     (A0)
080024B2  2004      4473          move.l    D4,D0
                    4474   ultoa_4:
080024B4  4CDF 001C 4475          movem.l   (A7)+,D2/D3/D4
080024B8  4E5E      4476          unlk      A6
080024BA  4E75      4477          rts
                    4478   _itoa:
080024BC  4E56 0000 4479          link      A6,#0
080024C0  2F2E 0010 4480          move.l    16(A6),-(A7)
080024C4  2F2E 000C 4481          move.l    12(A6),-(A7)
080024C8  2F2E 0008 4482          move.l    8(A6),-(A7)
080024CC  6100 FF24 4483          bsr       _ltoa
080024D0  DEFC 000C 4484          add.w     #12,A7
080024D4  4E5E      4485          unlk      A6
080024D6  4E75      4486          rts
                    4487   _strlen:
080024D8  206F 0004 4488          move.l    (4,A7),A0
080024DC  2248      4489          move.l    A0,A1
                    4490   strlen_1:
080024DE  4A19      4491          tst.b     (A1)+
080024E0  66FC      4492          bne       strlen_1
080024E2  2009      4493          move.l    A1,D0
080024E4  9088      4494          sub.l     A0,D0
080024E6  5380      4495          subq.l    #1,D0
080024E8  4E75      4496          rts
                    4497   _strcpy:
080024EA  206F 0004 4498          move.l    (4,A7),A0
080024EE  226F 0008 4499          move.l    (8,A7),A1
080024F2  2008      4500          move.l    A0,D0
                    4501   strcpy_1:
080024F4  10D9      4502          move.b    (A1)+,(A0)+
080024F6  66FC      4503          bne       strcpy_1
080024F8  4E75      4504          rts
                    4505          section   const
080024FA            4506                   align
                    4507   
                    4508   
                    4509   @mupde1_1:
080024FA  0D0A 5772 4510          dc.b      13,10,87,114,111,116,101,32,91,37,120,93,32
080024FE  6F74 6520 
08002502  5B25 785D 
08002506  20        
08002507  746F 2041 4511          dc.b      116,111,32,65,100,100,114,101,115,115,91,37
0800250B  6464 7265 
0800250F  7373 5B25 
08002513  785D 00   4512          dc.b      120,93,0
                    4513   @mupde1_2:
08002516  0D0A 5772 4514          dc.b      13,10,87,114,111,116,101,32,91,37,120,93,32
0800251A  6F74 6520 
0800251E  5B25 785D 
08002522  20        
08002523  6672 6F6D 4515          dc.b      102,114,111,109,32,65,100,100,114,101,115,115
08002527  2041 6464 
0800252B  7265 7373 
0800252F  5B25 785D 4516          dc.b      91,37,120,93,32,116,111,32,65,100,100,114,101
08002533  2074 6F20 
08002537  4164 6472 
0800253B  65        
0800253C  7373 5B25 4517          dc.b      115,115,91,37,120,93,0
08002540  785D 00   
                    4518   @mupde1_3:
08002544  0D0A 5265 4519          dc.b      13,10,82,101,97,100,32,91,37,120,93,32,102,114
08002548  6164 205B 
0800254C  2578 5D20 
08002550  6672      
08002552  6F6D 2041 4520          dc.b      111,109,32,65,100,100,114,101,115,115,91,37
08002556  6464 7265 
0800255A  7373 5B25 
0800255E  785D 00   4521          dc.b      120,93,0
                    4522   @mupde1_4:
08002562  0D0A 426C 4523          dc.b      13,10,66,108,111,99,107,32,82,101,97,100,32
08002566  6F63 6B20 
0800256A  5265 6164 
0800256E  20        
0800256F  6F70 6572 4524          dc.b      111,112,101,114,97,116,105,111,110,32,99,111
08002573  6174 696F 
08002577  6E20 636F 
0800257B  6D70 6C65 4525          dc.b      109,112,108,101,116,101,13,10,0
0800257F  7465 0D0A 
08002583  00        
                    4526   @mupde1_5:
08002584  0A49 3243 4527          dc.b      10,73,50,67,32,68,65,67,32,87,114,105,116,101
08002588  2044 4143 
0800258C  2057 7269 
08002590  7465      
08002592  3A20 506C 4528          dc.b      58,32,80,108,101,97,115,101,32,99,104,101,99
08002596  6561 7365 
0800259A  2063 6865 
0800259E  63        
0800259F  6B20 4C45 4529          dc.b      107,32,76,69,68,10,0
080025A3  440A 00   
                    4530   @mupde1_6:
080025A6  4361 6E30 4531          dc.b      67,97,110,48,32,114,101,99,105,101,118,101,32
080025AA  2072 6563 
080025AE  6965 7665 
080025B2  20        
080025B3  6461 7461 4532          dc.b      100,97,116,97,32,97,116,32,105,110,100,101,120
080025B7  2061 7420 
080025BB  696E 6465 
080025BF  78        
080025C0  2030 3A20 4533          dc.b      32,48,58,32,37,100,10,0
080025C4  2564 0A00 
                    4534   @mupde1_7:
080025C8  4361 6E30 4535          dc.b      67,97,110,48,32,114,101,99,105,101,118,101,32
080025CC  2072 6563 
080025D0  6965 7665 
080025D4  20        
080025D5  6461 7461 4536          dc.b      100,97,116,97,32,97,116,32,105,110,100,101,120
080025D9  2061 7420 
080025DD  696E 6465 
080025E1  78        
080025E2  2031 3A20 4537          dc.b      32,49,58,32,37,100,10,0
080025E6  2564 0A00 
                    4538   @mupde1_8:
080025EA  4361 6E31 4539          dc.b      67,97,110,49,32,114,101,99,105,101,118,101,32
080025EE  2072 6563 
080025F2  6965 7665 
080025F6  20        
080025F7  6461 7461 4540          dc.b      100,97,116,97,32,97,116,32,105,110,100,101,120
080025FB  2061 7420 
080025FF  696E 6465 
08002603  78        
08002604  2030 3A20 4541          dc.b      32,48,58,32,37,100,10,0
08002608  2564 0A00 
                    4542   @mupde1_9:
0800260C  4361 6E31 4543          dc.b      67,97,110,49,32,114,101,99,105,101,118,101,32
08002610  2072 6563 
08002614  6965 7665 
08002618  20        
08002619  6461 7461 4544          dc.b      100,97,116,97,32,97,116,32,105,110,100,101,120
0800261D  2061 7420 
08002621  696E 6465 
08002625  78        
08002626  2031 3A20 4545          dc.b      32,49,58,32,37,100,10,0
0800262A  2564 0A00 
                    4546   @mupde1_10:
0800262E  0D0A 0D0A 4547          dc.b      13,10,13,10,45,45,45,45,32,67,65,78,66,85,83
08002632  2D2D 2D2D 
08002636  2043 414E 
0800263A  4255 53   
0800263D  2054 6573 4548          dc.b      32,84,101,115,116,32,45,45,45,45,13,10,0
08002641  7420 2D2D 
08002645  2D2D 0D0A 
08002649  00        
                    4549   @mupde1_11:
0800264A  0D0A 00   4550          dc.b      13,10,0
                    4551   @mupde1_12:
0800264E  5573 6572 4552          dc.b      85,115,101,114,32,112,114,111,103,114,97,109
08002652  2070 726F 
08002656  6772 616D 
0800265A  2068 6572 4553          dc.b      32,104,101,114,101,32,13,10,0
0800265E  6520 0D0A 
08002662  00        
                    4554          section   data
08002664            4555                   align
                    4556   
                    4557   *********************************************************************************************************************************************************
                    4558   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    4559   ********************************************************************************************************************************************************
                    4560   
          0800 2664 4561   DataStart       equ       *
08002664            4562   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08002668            4563   __allocp:       ds.l      1                    start of free memory block list
0800266C            4564   __heap:         ds.l      1                    begin of free memory
                    4565   
                    4566   
                    4567   @vsscanf_bufx:
08002670  0800 27A0 4568          dc.l      @vsscanf_buf
                    4569   @vsscanf_1:
08002674  0A00      4570          dc.b      10,0
                    4571   __ctype:
08002676  0040 4040 4572          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
0800267A  4040 4040 
0800267E  4040 5050 
08002682  5050 50   
08002685  4040 4040 4573          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
08002689  4040 4040 
0800268D  4040 4040 
08002691  4040 40   
08002694  4040 40D0 4574          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
08002698  A0A0 A0A0 
0800269C  A0A0 A0A0 
080026A0  A0A0 A0A0 4575          dc.b      160,160,160,160,160,160,160,140,140,140,140
080026A4  A0A0 A08C 
080026A8  8C8C 8C   
080026AB  8C8C 8C8C 4576          dc.b      140,140,140,140,140,140,160,160,160,160,160
080026AF  8C8C A0A0 
080026B3  A0A0 A0   
080026B6  A0A0 8A8A 4577          dc.b      160,160,138,138,138,138,138,138,130,130,130
080026BA  8A8A 8A8A 
080026BE  8282 82   
080026C1  8282 8282 4578          dc.b      130,130,130,130,130,130,130,130,130,130,130
080026C5  8282 8282 
080026C9  8282 82   
080026CC  8282 8282 4579          dc.b      130,130,130,130,130,130,160,160,160,160,160
080026D0  8282 A0A0 
080026D4  A0A0 A0   
080026D7  A089 8989 4580          dc.b      160,137,137,137,137,137,137,129,129,129,129
080026DB  8989 8981 
080026DF  8181 81   
080026E2  8181 8181 4581          dc.b      129,129,129,129,129,129,129,129,129,129,129
080026E6  8181 8181 
080026EA  8181 81   
080026ED  8181 8181 4582          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
080026F1  81A0 A0A0 
080026F5  A040 0000 
080026F9  00        
080026FA  0000 0000 4583          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080026FE  0000 0000 
08002702  0000 0000 
08002706  0000 0000 
0800270A  0000 0000 
0800270E  0000      
08002710  0000 0000 4584          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08002714  0000 0000 
08002718  0000 0000 
0800271C  0000 0000 
08002720  0000 0000 
08002724  0000      
08002726  0000 0000 4585          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800272A  0000 0000 
0800272E  0000 0000 
08002732  0000 0000 
08002736  0000 0000 
0800273A  0000      
0800273C  0000 0000 4586          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08002740  0000 0000 
08002744  0000 0000 
08002748  0000 0000 
0800274C  0000 0000 
08002750  0000      
08002752  0000 0000 4587          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08002756  0000 0000 
0800275A  0000 0000 
0800275E  0000 0000 
08002762  0000 0000 
08002766  0000      
08002768  0000 0000 4588          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800276C  0000 0000 
08002770  0000 0000 
08002774  0000 00   
                    4589   @itoa_1:
08002778  2D32 3134 4590          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0800277C  3734 3833 
08002780  3634 3800 
                    4591          section   bss
08002784            4592                   align
                    4593   
          0800 2784 4594   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0120 4595   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    4596   
                    4597   *********************************************************************************************************
                    4598   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    4599   *********************************************************************************************************
          0800 2784 4600   BssStart       equ       *
                    4601   
                    4602   _i:
08002784            4603          ds.b      4
                    4604   _x:
08002788            4605          ds.b      4
                    4606   _y:
0800278C            4607          ds.b      4
                    4608   _z:
08002790            4609          ds.b      4
                    4610   _PortA_Count:
08002794            4611          ds.b      4
                    4612   _Timer1Count:
08002798            4613          ds.b      1
                    4614   _Timer2Count:
0800279A            4615          ds.b      1
                    4616   _Timer3Count:
0800279C            4617          ds.b      1
                    4618   _Timer4Count:
0800279E            4619          ds.b      1
                    4620   @vsscanf_buf:
080027A0            4621          ds.b      80
                    4622          section   heap
080027F0            4623                  align
                    4624   
          0800 27F0 4625   BssEnd         equ       *
          0000 006C 4626   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    4627   
                    4628   *********************************************************************************************************
                    4629   * Section for Heap
                    4630   *********************************************************************************************************
                    4631   
          0800 27F0 4632   heap           equ       *
080027F0            4633                  align
          0800 0000

Assembly errors: 0
