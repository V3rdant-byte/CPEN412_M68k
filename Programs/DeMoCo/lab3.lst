680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 29 Feb 2024      Time: 22:33:14          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB3.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  30D8      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2356      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB3.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DM.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; // #define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /*************************************************************
                     478   ; ** SPI Controller registers
                     479   ; **************************************************************/
                     480   ; // SPI Registers
                     481   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                     482   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                     483   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                     484   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                     485   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                     486   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                     487   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                     488   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                     489   ; // and write FF to disable it
                     490   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     491   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     492   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     493   ; unsigned int i, x, y, z, PortA_Count;
                     494   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     495   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     496   ; unsigned int d0, d1, d2, d3, d4, d5, d6, d7;
                     497   ; unsigned int a0, a1, a2, a3, a4, a5, a6;
                     498   ; unsigned int PC, SSP, USP;
                     499   ; unsigned short int SR;
                     500   ; // Breakpoint variables
                     501   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     502   ; unsigned short int BreakPointInstruction[8];           // to hold the instruction opcode at the breakpoint
                     503   ; unsigned int BreakPointSetOrCleared[8];
                     504   ; unsigned int InstructionSize;
                     505   ; // watchpoint variables
                     506   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     507   ; unsigned int WatchPointSetOrCleared[8];
                     508   ; char WatchPointString[8][100];
                     509   ; char    TempString[100];
                     510   ; /************************************************************************************
                     511   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     512   ; ************************************************************************************/
                     513   ; void Wait1ms(void)
                     514   ; {
                     515   _Wait1ms:
00000932  2F02       516          move.l    D2,-(A7)
                     517   ; long int  i;
                     518   ; for (i = 0; i < 1000; i++)
00000934  4282       519          clr.l     D2
                     520   Wait1ms_1:
00000936  0C82 0000  521          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       522          bge.s     Wait1ms_3
0000093E  5282       523          addq.l    #1,D2
00000940  60F4       524          bra       Wait1ms_1
                     525   Wait1ms_3:
00000942  241F       526          move.l    (A7)+,D2
00000944  4E75       527          rts
                     528   ; ;
                     529   ; }
                     530   ; /************************************************************************************
                     531   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     532   ; **************************************************************************************/
                     533   ; void Wait3ms(void)
                     534   ; {
                     535   _Wait3ms:
00000946  2F02       536          move.l    D2,-(A7)
                     537   ; int i;
                     538   ; for (i = 0; i < 3; i++)
00000948  4282       539          clr.l     D2
                     540   Wait3ms_1:
0000094A  0C82 0000  541          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       542          bge.s     Wait3ms_3
                     543   ; Wait1ms();
00000952  4EB8 0932  544          jsr       _Wait1ms
00000956  5282       545          addq.l    #1,D2
00000958  60F0       546          bra       Wait3ms_1
                     547   Wait3ms_3:
0000095A  241F       548          move.l    (A7)+,D2
0000095C  4E75       549          rts
                     550   ; }
                     551   ; /*********************************************************************************************
                     552   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     553   ; *********************************************************************************************/
                     554   ; void Init_LCD(void)
                     555   ; {
                     556   _Init_LCD:
                     557   ; LCDcommand = (char)(0x0c);
0000095E  13FC 000C  558          move.b    #12,4194336
00000962  0040 0020 
                     559   ; Wait3ms();
00000966  4EB8 0946  560          jsr       _Wait3ms
                     561   ; LCDcommand = (char)(0x38);
0000096A  13FC 0038  562          move.b    #56,4194336
0000096E  0040 0020 
                     563   ; Wait3ms();
00000972  4EB8 0946  564          jsr       _Wait3ms
00000976  4E75       565          rts
                     566   ; }
                     567   ; /******************************************************************************
                     568   ; *subroutine to output a single character held in d1 to the LCD display
                     569   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     570   ; *current cursor position
                     571   ; *******************************************************************************/
                     572   ; void Outchar(int c)
                     573   ; {
                     574   _Outchar:
00000978  4E56 0000  575          link      A6,#0
                     576   ; LCDdata = (char)(c);
0000097C  202E 0008  577          move.l    8(A6),D0
00000980  13C0 0040  578          move.b    D0,4194338
00000984  0022      
                     579   ; Wait1ms();
00000986  4EB8 0932  580          jsr       _Wait1ms
0000098A  4E5E       581          unlk      A6
0000098C  4E75       582          rts
                     583   ; }
                     584   ; /**********************************************************************************
                     585   ; *subroutine to output a message at the current cursor position of the LCD display
                     586   ; ************************************************************************************/
                     587   ; void OutMess(char* theMessage)
                     588   ; {
                     589   _OutMess:
0000098E  4E56 FFFC  590          link      A6,#-4
                     591   ; char c;
                     592   ; while ((c = *theMessage++) != (char)(0))
                     593   OutMess_1:
00000992  206E 0008  594          move.l    8(A6),A0
00000996  52AE 0008  595          addq.l    #1,8(A6)
0000099A  1D50 FFFF  596          move.b    (A0),-1(A6)
0000099E  1010       597          move.b    (A0),D0
000009A0  6712       598          beq.s     OutMess_3
                     599   ; Outchar(c);
000009A2  122E FFFF  600          move.b    -1(A6),D1
000009A6  4881       601          ext.w     D1
000009A8  48C1       602          ext.l     D1
000009AA  2F01       603          move.l    D1,-(A7)
000009AC  4EB8 0978  604          jsr       _Outchar
000009B0  584F       605          addq.w    #4,A7
000009B2  60DE       606          bra       OutMess_1
                     607   OutMess_3:
000009B4  4E5E       608          unlk      A6
000009B6  4E75       609          rts
                     610   ; }
                     611   ; /******************************************************************************
                     612   ; *subroutine to clear the line by issuing 24 space characters
                     613   ; *******************************************************************************/
                     614   ; void Clearln(void)
                     615   ; {
                     616   _Clearln:
000009B8  2F02       617          move.l    D2,-(A7)
                     618   ; unsigned char i;
                     619   ; for (i = 0; i < 24; i++)
000009BA  4202       620          clr.b     D2
                     621   Clearln_1:
000009BC  0C02 0018  622          cmp.b     #24,D2
000009C0  640E       623          bhs.s     Clearln_3
                     624   ; Outchar(' ');  /* write a space char to the LCD display */
000009C2  4878 0020  625          pea       32
000009C6  4EB8 0978  626          jsr       _Outchar
000009CA  584F       627          addq.w    #4,A7
000009CC  5202       628          addq.b    #1,D2
000009CE  60EC       629          bra       Clearln_1
                     630   Clearln_3:
000009D0  241F       631          move.l    (A7)+,D2
000009D2  4E75       632          rts
                     633   ; }
                     634   ; /******************************************************************************
                     635   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     636   ; *******************************************************************************/
                     637   ; void Oline0(char* theMessage)
                     638   ; {
                     639   _Oline0:
000009D4  4E56 0000  640          link      A6,#0
                     641   ; LCDcommand = (char)(0x80);
000009D8  13FC 0080  642          move.b    #128,4194336
000009DC  0040 0020 
                     643   ; Wait3ms();
000009E0  4EB8 0946  644          jsr       _Wait3ms
                     645   ; Clearln();
000009E4  4EB8 09B8  646          jsr       _Clearln
                     647   ; LCDcommand = (char)(0x80);
000009E8  13FC 0080  648          move.b    #128,4194336
000009EC  0040 0020 
                     649   ; Wait3ms();
000009F0  4EB8 0946  650          jsr       _Wait3ms
                     651   ; OutMess(theMessage);
000009F4  2F2E 0008  652          move.l    8(A6),-(A7)
000009F8  4EB8 098E  653          jsr       _OutMess
000009FC  584F       654          addq.w    #4,A7
000009FE  4E5E       655          unlk      A6
00000A00  4E75       656          rts
                     657   ; }
                     658   ; /******************************************************************************
                     659   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     660   ; *******************************************************************************/
                     661   ; void Oline1(char* theMessage)
                     662   ; {
                     663   _Oline1:
00000A02  4E56 0000  664          link      A6,#0
                     665   ; LCDcommand = (char)(0xC0);
00000A06  13FC 00C0  666          move.b    #192,4194336
00000A0A  0040 0020 
                     667   ; Wait3ms();
00000A0E  4EB8 0946  668          jsr       _Wait3ms
                     669   ; Clearln();
00000A12  4EB8 09B8  670          jsr       _Clearln
                     671   ; LCDcommand = (char)(0xC0);
00000A16  13FC 00C0  672          move.b    #192,4194336
00000A1A  0040 0020 
                     673   ; Wait3ms();
00000A1E  4EB8 0946  674          jsr       _Wait3ms
                     675   ; OutMess(theMessage);
00000A22  2F2E 0008  676          move.l    8(A6),-(A7)
00000A26  4EB8 098E  677          jsr       _OutMess
00000A2A  584F       678          addq.w    #4,A7
00000A2C  4E5E       679          unlk      A6
00000A2E  4E75       680          rts
                     681   ; }
                     682   ; void InstallExceptionHandler(void (*function_ptr)(), int level)
                     683   ; {
                     684   _InstallExceptionHandler:
00000A30  4E56 FFFC  685          link      A6,#-4
                     686   ; volatile long int* RamVectorAddress = (volatile long int*)(StartOfExceptionVectorTable);   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  687          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     688   ; RamVectorAddress[level] = (long int*)(function_ptr);
00000A3C  206E FFFC  689          move.l    -4(A6),A0
00000A40  202E 000C  690          move.l    12(A6),D0
00000A44  E588       691          lsl.l     #2,D0
00000A46  21AE 0008  692          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       693          unlk      A6
00000A4E  4E75       694          rts
                     695   ; }
                     696   ; void TestLEDS(void)
                     697   ; {
                     698   _TestLEDS:
00000A50  48E7 3000  699          movem.l   D2/D3,-(A7)
                     700   ; int delay;
                     701   ; unsigned char count = 0;
00000A54  4202       702          clr.b     D2
                     703   ; while (1) {
                     704   TestLEDS_1:
                     705   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f));
00000A56  1002       706          move.b    D2,D0
00000A58  E908       707          lsl.b     #4,D0
00000A5A  1202       708          move.b    D2,D1
00000A5C  C23C 000F  709          and.b     #15,D1
00000A60  D001       710          add.b     D1,D0
00000A62  13C0 0040  711          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  712          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  713          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  714          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  715          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  716          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  717          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  718          move.b    D0,4194304
00000A90  0000      
                     719   ; for (delay = 0; delay < 200000; delay++)
00000A92  4283       720          clr.l     D3
                     721   TestLEDS_4:
00000A94  0C83 0003  722          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       723          bge.s     TestLEDS_6
00000A9C  5283       724          addq.l    #1,D3
00000A9E  60F4       725          bra       TestLEDS_4
                     726   TestLEDS_6:
                     727   ; ;
                     728   ; count++;
00000AA0  5202       729          addq.b    #1,D2
00000AA2  60B2       730          bra       TestLEDS_1
                     731   ; }
                     732   ; }
                     733   ; void SwitchTest(void)
                     734   ; {
                     735   _SwitchTest:
00000AA4  48E7 3020  736          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  737          lea       _printf.L,A2
00000AAC  35A0      
                     738   ; int i, switches = 0;
00000AAE  4283       739          clr.l     D3
                     740   ; printf("\r\n");
00000AB0  4879 0000  741          pea       @lab3_1.L
00000AB4  3EF0      
00000AB6  4E92       742          jsr       (A2)
00000AB8  584F       743          addq.w    #4,A7
                     744   ; while (1) {
                     745   SwitchTest_1:
                     746   ; switches = (PortB << 8) | (PortA);
00000ABA  1039 0040  747          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  748          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       749          lsl.l     #8,D0
00000AC8  1239 0040  750          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  751          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       752          or.l      D1,D0
00000AD6  2600       753          move.l    D0,D3
                     754   ; printf("\rSwitches SW[7-0] = ");
00000AD8  4879 0000  755          pea       @lab3_2.L
00000ADC  3EF4      
00000ADE  4E92       756          jsr       (A2)
00000AE0  584F       757          addq.w    #4,A7
                     758   ; for (i = (int)(0x00000080); i > 0; i = i >> 1) {
00000AE2  243C 0000  759          move.l    #128,D2
00000AE6  0080      
                     760   SwitchTest_4:
00000AE8  0C82 0000  761          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       762          ble.s     SwitchTest_6
                     763   ; if ((switches & i) == 0)
00000AF0  2003       764          move.l    D3,D0
00000AF2  C082       765          and.l     D2,D0
00000AF4  660C       766          bne.s     SwitchTest_7
                     767   ; printf("0");
00000AF6  4879 0000  768          pea       @lab3_3.L
00000AFA  3F0A      
00000AFC  4E92       769          jsr       (A2)
00000AFE  584F       770          addq.w    #4,A7
00000B00  600A       771          bra.s     SwitchTest_8
                     772   SwitchTest_7:
                     773   ; else
                     774   ; printf("1");
00000B02  4879 0000  775          pea       @lab3_4.L
00000B06  3F0C      
00000B08  4E92       776          jsr       (A2)
00000B0A  584F       777          addq.w    #4,A7
                     778   SwitchTest_8:
00000B0C  E282       779          asr.l     #1,D2
00000B0E  60D8       780          bra       SwitchTest_4
                     781   SwitchTest_6:
00000B10  60A8       782          bra       SwitchTest_1
                     783   ; }
                     784   ; }
                     785   ; }
                     786   ; /*********************************************************************************************
                     787   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     788   ; *********************************************************************************************/
                     789   ; void Init_RS232(void)
                     790   ; {
                     791   _Init_RS232:
                     792   ; RS232_Control = (char)(0x15); //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  793          move.b    #21,4194368
00000B16  0040 0040 
                     794   ; RS232_Baud = (char)(0x1);      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  795          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       796          rts
                     797   ; }
                     798   ; int kbhit(void)
                     799   ; {
                     800   _kbhit:
                     801   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  802          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  803          and.b     #1,D0
00000B2E  0C00 0001  804          cmp.b     #1,D0
00000B32  6604       805          bne.s     kbhit_1
                     806   ; return 1;
00000B34  7001       807          moveq     #1,D0
00000B36  6002       808          bra.s     kbhit_3
                     809   kbhit_1:
                     810   ; else
                     811   ; return 0;
00000B38  4280       812          clr.l     D0
                     813   kbhit_3:
00000B3A  4E75       814          rts
                     815   ; }
                     816   ; /*********************************************************************************************************
                     817   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     818   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     819   ; **  to allow the board to communicate with HyperTerminal Program
                     820   ; **
                     821   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     822   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     823   ; **  call _putch() also
                     824   ; *********************************************************************************************************/
                     825   ; int _putch(int c)
                     826   ; {
                     827   __putch:
00000B3C  4E56 0000  828          link      A6,#0
                     829   ; while (((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     830   _putch_1:
00000B40  1039 0040  831          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  832          and.b     #2,D0
00000B4A  0C00 0002  833          cmp.b     #2,D0
00000B4E  6702       834          beq.s     _putch_3
00000B50  60EE       835          bra       _putch_1
                     836   _putch_3:
                     837   ; ;
                     838   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  839          move.l    8(A6),D0
00000B56  C03C 007F  840          and.b     #127,D0
00000B5A  13C0 0040  841          move.b    D0,4194370
00000B5E  0042      
                     842   ; return c;                                              // putchar() expects the character to be returned
00000B60  202E 0008  843          move.l    8(A6),D0
00000B64  4E5E       844          unlk      A6
00000B66  4E75       845          rts
                     846   ; }
                     847   ; /*********************************************************************************************************
                     848   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     849   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     850   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     851   ; **
                     852   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     853   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     854   ; **  call _getch() also
                     855   ; *********************************************************************************************************/
                     856   ; int _getch(void)
                     857   ; {
                     858   __getch:
00000B68  2F02       859          move.l    D2,-(A7)
                     860   ; int c;
                     861   ; while (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     862   _getch_1:
00000B6A  1039 0040  863          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  864          and.b     #1,D0
00000B74  0C00 0001  865          cmp.b     #1,D0
00000B78  6702       866          beq.s     _getch_3
00000B7A  60EE       867          bra       _getch_1
                     868   _getch_3:
                     869   ; ;
                     870   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  871          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  872          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  873          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       874          move.l    D0,D2
                     875   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     876   ; if (Echo)
00000B90  4AB9 0B00  877          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       878          beq.s     _getch_4
                     879   ; _putch(c);
00000B98  2F02       880          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  881          jsr       __putch
00000B9E  584F       882          addq.w    #4,A7
                     883   _getch_4:
                     884   ; return c;
00000BA0  2002       885          move.l    D2,D0
00000BA2  241F       886          move.l    (A7)+,D2
00000BA4  4E75       887          rts
                     888   ; }
                     889   ; // flush the input stream for any unread characters
                     890   ; void FlushKeyboard(void)
                     891   ; {
                     892   _FlushKeyboard:
00000BA6  4E56 FFFC  893          link      A6,#-4
                     894   ; char c;
                     895   ; while (1) {
                     896   FlushKeyboard_1:
                     897   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  898          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  899          and.b     #1,D0
00000BB4  0C00 0001  900          cmp.b     #1,D0
00000BB8  6610       901          bne.s     FlushKeyboard_4
                     902   ; c = ((char)(RS232_RxData) & (char)(0x7f));
00000BBA  1039 0040  903          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  904          and.b     #127,D0
00000BC4  1D40 FFFF  905          move.b    D0,-1(A6)
00000BC8  6002       906          bra.s     FlushKeyboard_5
                     907   FlushKeyboard_4:
                     908   ; else
                     909   ; return;
00000BCA  6002       910          bra.s     FlushKeyboard_6
                     911   FlushKeyboard_5:
00000BCC  60DC       912          bra       FlushKeyboard_1
                     913   FlushKeyboard_6:
00000BCE  4E5E       914          unlk      A6
00000BD0  4E75       915          rts
                     916   ; }
                     917   ; }
                     918   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     919   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     920   ; char xtod(int c)
                     921   ; {
                     922   _xtod:
00000BD2  4E56 0000  923          link      A6,#0
00000BD6  2F02       924          move.l    D2,-(A7)
00000BD8  242E 0008  925          move.l    8(A6),D2
                     926   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  927          cmp.b     #57,D2
00000BE0  6E08       928          bgt.s     xtod_1
                     929   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       930          move.b    D2,D0
00000BE4  0400 0030  931          sub.b     #48,D0
00000BE8  6014       932          bra.s     xtod_3
                     933   xtod_1:
                     934   ; else if ((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  935          cmp.b     #70,D2
00000BEE  6F08       936          ble.s     xtod_4
                     937   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       938          move.b    D2,D0
00000BF2  0400 0057  939          sub.b     #87,D0
00000BF6  6006       940          bra.s     xtod_3
                     941   xtod_4:
                     942   ; else
                     943   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       944          move.b    D2,D0
00000BFA  0400 0037  945          sub.b     #55,D0
                     946   xtod_3:
00000BFE  241F       947          move.l    (A7)+,D2
00000C00  4E5E       948          unlk      A6
00000C02  4E75       949          rts
                     950   ; }
                     951   ; int Get2HexDigits(char* CheckSumPtr)
                     952   ; {
                     953   _Get2HexDigits:
00000C04  4E56 0000  954          link      A6,#0
00000C08  2F02       955          move.l    D2,-(A7)
                     956   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       957          move.l    D0,-(A7)
00000C0C  4EB8 0B68  958          jsr       __getch
00000C10  2200       959          move.l    D0,D1
00000C12  201F       960          move.l    (A7)+,D0
00000C14  2F01       961          move.l    D1,-(A7)
00000C16  4EB8 0BD2  962          jsr       _xtod
00000C1A  584F       963          addq.w    #4,A7
00000C1C  C0BC 0000  964          and.l     #255,D0
00000C20  00FF      
00000C22  E980       965          asl.l     #4,D0
00000C24  2F00       966          move.l    D0,-(A7)
00000C26  2F01       967          move.l    D1,-(A7)
00000C28  4EB8 0B68  968          jsr       __getch
00000C2C  221F       969          move.l    (A7)+,D1
00000C2E  2F00       970          move.l    D0,-(A7)
00000C30  4EB8 0BD2  971          jsr       _xtod
00000C34  584F       972          addq.w    #4,A7
00000C36  2200       973          move.l    D0,D1
00000C38  201F       974          move.l    (A7)+,D0
00000C3A  C2BC 0000  975          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       976          or.l      D1,D0
00000C42  2400       977          move.l    D0,D2
                     978   ; if (CheckSumPtr)
00000C44  4AAE 0008  979          tst.l     8(A6)
00000C48  6706       980          beq.s     Get2HexDigits_1
                     981   ; *CheckSumPtr += i;
00000C4A  206E 0008  982          move.l    8(A6),A0
00000C4E  D510       983          add.b     D2,(A0)
                     984   Get2HexDigits_1:
                     985   ; return i;
00000C50  2002       986          move.l    D2,D0
00000C52  241F       987          move.l    (A7)+,D2
00000C54  4E5E       988          unlk      A6
00000C56  4E75       989          rts
                     990   ; }
                     991   ; int Get4HexDigits(char* CheckSumPtr)
                     992   ; {
                     993   _Get4HexDigits:
00000C58  4E56 0000  994          link      A6,#0
                     995   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  996          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  997          jsr       _Get2HexDigits
00000C64  584F       998          addq.w    #4,A7
00000C66  E180       999          asl.l     #8,D0
00000C68  2F00      1000          move.l    D0,-(A7)
00000C6A  2F2E 0008 1001          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04 1002          jsr       _Get2HexDigits
00000C72  584F      1003          addq.w    #4,A7
00000C74  2200      1004          move.l    D0,D1
00000C76  201F      1005          move.l    (A7)+,D0
00000C78  8081      1006          or.l      D1,D0
00000C7A  4E5E      1007          unlk      A6
00000C7C  4E75      1008          rts
                    1009   ; }
                    1010   ; int Get6HexDigits(char* CheckSumPtr)
                    1011   ; {
                    1012   _Get6HexDigits:
00000C7E  4E56 0000 1013          link      A6,#0
                    1014   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1015          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1016          jsr       _Get4HexDigits
00000C8A  584F      1017          addq.w    #4,A7
00000C8C  E180      1018          asl.l     #8,D0
00000C8E  2F00      1019          move.l    D0,-(A7)
00000C90  2F2E 0008 1020          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1021          jsr       _Get2HexDigits
00000C98  584F      1022          addq.w    #4,A7
00000C9A  2200      1023          move.l    D0,D1
00000C9C  201F      1024          move.l    (A7)+,D0
00000C9E  8081      1025          or.l      D1,D0
00000CA0  4E5E      1026          unlk      A6
00000CA2  4E75      1027          rts
                    1028   ; }
                    1029   ; int Get8HexDigits(char* CheckSumPtr)
                    1030   ; {
                    1031   _Get8HexDigits:
00000CA4  4E56 0000 1032          link      A6,#0
                    1033   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1034          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1035          jsr       _Get4HexDigits
00000CB0  584F      1036          addq.w    #4,A7
00000CB2  E180      1037          asl.l     #8,D0
00000CB4  E180      1038          asl.l     #8,D0
00000CB6  2F00      1039          move.l    D0,-(A7)
00000CB8  2F2E 0008 1040          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1041          jsr       _Get4HexDigits
00000CC0  584F      1042          addq.w    #4,A7
00000CC2  2200      1043          move.l    D0,D1
00000CC4  201F      1044          move.l    (A7)+,D0
00000CC6  8081      1045          or.l      D1,D0
00000CC8  4E5E      1046          unlk      A6
00000CCA  4E75      1047          rts
                    1048   ; }
                    1049   ; void DumpMemory(void)   // simple dump memory fn
                    1050   ; {
                    1051   _DumpMemory:
00000CCC  48E7 3C30 1052          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1053          lea       _printf.L,A2
00000CD4  35A0      
00000CD6  47F9 0000 1054          lea       _putch.L,A3
00000CDA  3492      
                    1055   ; int i, j;
                    1056   ; unsigned char* RamPtr, c; // pointer to where the program is download (assumed)
                    1057   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue");
00000CDC  4879 0000 1058          pea       @lab3_5.L
00000CE0  3F0E      
00000CE2  4E92      1059          jsr       (A2)
00000CE4  584F      1060          addq.w    #4,A7
                    1061   ; printf("\r\nEnter Start Address: ");
00000CE6  4879 0000 1062          pea       @lab3_6.L
00000CEA  3F48      
00000CEC  4E92      1063          jsr       (A2)
00000CEE  584F      1064          addq.w    #4,A7
                    1065   ; RamPtr = Get8HexDigits(0);
00000CF0  42A7      1066          clr.l     -(A7)
00000CF2  4EB8 0CA4 1067          jsr       _Get8HexDigits
00000CF6  584F      1068          addq.w    #4,A7
00000CF8  2600      1069          move.l    D0,D3
                    1070   ; while (1) {
                    1071   DumpMemory_1:
                    1072   ; for (i = 0; i < 16; i++) {
00000CFA  4285      1073          clr.l     D5
                    1074   DumpMemory_4:
00000CFC  0C85 0000 1075          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1076          bge       DumpMemory_6
                    1077   ; printf("\r\n%08x ", RamPtr);
00000D06  2F03      1078          move.l    D3,-(A7)
00000D08  4879 0000 1079          pea       @lab3_7.L
00000D0C  3F60      
00000D0E  4E92      1080          jsr       (A2)
00000D10  504F      1081          addq.w    #8,A7
                    1082   ; for (j = 0; j < 16; j++) {
00000D12  4282      1083          clr.l     D2
                    1084   DumpMemory_7:
00000D14  0C82 0000 1085          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1086          bge.s     DumpMemory_9
                    1087   ; printf("%02X", RamPtr[j]);
00000D1C  2043      1088          move.l    D3,A0
00000D1E  1230 2800 1089          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1090          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1091          move.l    D1,-(A7)
00000D2A  4879 0000 1092          pea       @lab3_8.L
00000D2E  3F68      
00000D30  4E92      1093          jsr       (A2)
00000D32  504F      1094          addq.w    #8,A7
                    1095   ; putchar(' ');
00000D34  4878 0020 1096          pea       32
00000D38  4E93      1097          jsr       (A3)
00000D3A  584F      1098          addq.w    #4,A7
00000D3C  5282      1099          addq.l    #1,D2
00000D3E  60D4      1100          bra       DumpMemory_7
                    1101   DumpMemory_9:
                    1102   ; }
                    1103   ; // now display the data as ASCII at the end
                    1104   ; printf("  ");
00000D40  4879 0000 1105          pea       @lab3_9.L
00000D44  3F6E      
00000D46  4E92      1106          jsr       (A2)
00000D48  584F      1107          addq.w    #4,A7
                    1108   ; for (j = 0; j < 16; j++) {
00000D4A  4282      1109          clr.l     D2
                    1110   DumpMemory_10:
00000D4C  0C82 0000 1111          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1112          bge       DumpMemory_12
                    1113   ; c = ((char)(RamPtr[j]) & 0x7f);
00000D56  2043      1114          move.l    D3,A0
00000D58  1030 2800 1115          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1116          and.b     #127,D0
00000D60  1800      1117          move.b    D0,D4
                    1118   ; if ((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1119          cmp.b     #127,D4
00000D66  6206      1120          bhi.s     DumpMemory_15
00000D68  0C04 0020 1121          cmp.b     #32,D4
00000D6C  640A      1122          bhs.s     DumpMemory_13
                    1123   DumpMemory_15:
                    1124   ; putchar('.');
00000D6E  4878 002E 1125          pea       46
00000D72  4E93      1126          jsr       (A3)
00000D74  584F      1127          addq.w    #4,A7
00000D76  6012      1128          bra.s     DumpMemory_14
                    1129   DumpMemory_13:
                    1130   ; else
                    1131   ; putchar(RamPtr[j]);
00000D78  2043      1132          move.l    D3,A0
00000D7A  1230 2800 1133          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1134          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1135          move.l    D1,-(A7)
00000D86  4E93      1136          jsr       (A3)
00000D88  584F      1137          addq.w    #4,A7
                    1138   DumpMemory_14:
00000D8A  5282      1139          addq.l    #1,D2
00000D8C  60BE      1140          bra       DumpMemory_10
                    1141   DumpMemory_12:
                    1142   ; }
                    1143   ; RamPtr = RamPtr + 16;
00000D8E  0683 0000 1144          add.l     #16,D3
00000D92  0010      
00000D94  5285      1145          addq.l    #1,D5
00000D96  6000 FF64 1146          bra       DumpMemory_4
                    1147   DumpMemory_6:
                    1148   ; }
                    1149   ; printf("\r\n");
00000D9A  4879 0000 1150          pea       @lab3_1.L
00000D9E  3EF0      
00000DA0  4E92      1151          jsr       (A2)
00000DA2  584F      1152          addq.w    #4,A7
                    1153   ; c = _getch();
00000DA4  4EB8 0B68 1154          jsr       __getch
00000DA8  1800      1155          move.b    D0,D4
                    1156   ; if (c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1157          cmp.b     #27,D4
00000DAE  6602      1158          bne.s     DumpMemory_16
                    1159   ; break;
00000DB0  6004      1160          bra.s     DumpMemory_3
                    1161   DumpMemory_16:
00000DB2  6000 FF46 1162          bra       DumpMemory_1
                    1163   DumpMemory_3:
00000DB6  4CDF 0C3C 1164          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1165          rts
                    1166   ; }
                    1167   ; }
                    1168   ; void FillMemory()
                    1169   ; {
                    1170   _FillMemory:
00000DBC  48E7 3820 1171          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1172          lea       _printf.L,A2
00000DC4  35A0      
                    1173   ; char* StartRamPtr, * EndRamPtr;
                    1174   ; unsigned char FillData;
                    1175   ; printf("\r\nFill Memory Block");
00000DC6  4879 0000 1176          pea       @lab3_10.L
00000DCA  3F72      
00000DCC  4E92      1177          jsr       (A2)
00000DCE  584F      1178          addq.w    #4,A7
                    1179   ; printf("\r\nEnter Start Address: ");
00000DD0  4879 0000 1180          pea       @lab3_6.L
00000DD4  3F48      
00000DD6  4E92      1181          jsr       (A2)
00000DD8  584F      1182          addq.w    #4,A7
                    1183   ; StartRamPtr = Get8HexDigits(0);
00000DDA  42A7      1184          clr.l     -(A7)
00000DDC  4EB8 0CA4 1185          jsr       _Get8HexDigits
00000DE0  584F      1186          addq.w    #4,A7
00000DE2  2400      1187          move.l    D0,D2
                    1188   ; printf("\r\nEnter End Address: ");
00000DE4  4879 0000 1189          pea       @lab3_11.L
00000DE8  3F86      
00000DEA  4E92      1190          jsr       (A2)
00000DEC  584F      1191          addq.w    #4,A7
                    1192   ; EndRamPtr = Get8HexDigits(0);
00000DEE  42A7      1193          clr.l     -(A7)
00000DF0  4EB8 0CA4 1194          jsr       _Get8HexDigits
00000DF4  584F      1195          addq.w    #4,A7
00000DF6  2800      1196          move.l    D0,D4
                    1197   ; printf("\r\nEnter Fill Data: ");
00000DF8  4879 0000 1198          pea       @lab3_12.L
00000DFC  3F9C      
00000DFE  4E92      1199          jsr       (A2)
00000E00  584F      1200          addq.w    #4,A7
                    1201   ; FillData = Get2HexDigits(0);
00000E02  42A7      1202          clr.l     -(A7)
00000E04  4EB8 0C04 1203          jsr       _Get2HexDigits
00000E08  584F      1204          addq.w    #4,A7
00000E0A  1600      1205          move.b    D0,D3
                    1206   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00000E0C  C6BC 0000 1207          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1208          move.l    D3,-(A7)
00000E14  2F04      1209          move.l    D4,-(A7)
00000E16  2F02      1210          move.l    D2,-(A7)
00000E18  4879 0000 1211          pea       @lab3_13.L
00000E1C  3FB0      
00000E1E  4E92      1212          jsr       (A2)
00000E20  DEFC 0010 1213          add.w     #16,A7
                    1214   ; while (StartRamPtr < EndRamPtr)
                    1215   FillMemory_1:
00000E24  B484      1216          cmp.l     D4,D2
00000E26  6408      1217          bhs.s     FillMemory_3
                    1218   ; *StartRamPtr++ = FillData;
00000E28  2042      1219          move.l    D2,A0
00000E2A  5282      1220          addq.l    #1,D2
00000E2C  1083      1221          move.b    D3,(A0)
00000E2E  60F4      1222          bra       FillMemory_1
                    1223   FillMemory_3:
00000E30  4CDF 041C 1224          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1225          rts
                    1226   ; }
                    1227   ; void Load_SRecordFile()
                    1228   ; {
                    1229   _Load_SRecordFile:
00000E36  4E56 FFDC 1230          link      A6,#-36
00000E3A  48E7 3F3C 1231          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1232          lea       -6(A6),A2
00000E42  47F8 0C04 1233          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1234          lea       _printf.L,A4
00000E4A  35A0      
                    1235   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0;
00000E4C  42AE FFEE 1236          clr.l     -18(A6)
00000E50  3A7C 0000 1237          move.w    #0,A5
                    1238   ; int result, ByteCount;
                    1239   ; char c, CheckSum, ReadCheckSum, HeaderType;
                    1240   ; char* RamPtr;                          // pointer to Memory where downloaded program will be stored
                    1241   ; LoadFailed = 0;                        //assume LOAD operation will pass
00000E54  7E00      1242          moveq     #0,D7
                    1243   ; AddressFail = 0;
00000E56  42AE FFEA 1244          clr.l     -22(A6)
                    1245   ; Echo = 0;                              // don't echo S records during download
00000E5A  42B9 0B00 1246          clr.l     _Echo.L
00000E5E  00E0      
                    1247   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n");
00000E60  4879 0000 1248          pea       @lab3_14.L
00000E64  3FE0      
00000E66  4E94      1249          jsr       (A4)
00000E68  584F      1250          addq.w    #4,A7
                    1251   ; while (1) {
                    1252   Load_SRecordFile_1:
                    1253   ; CheckSum = 0;
00000E6A  4212      1254          clr.b     (A2)
                    1255   ; do {
                    1256   Load_SRecordFile_4:
                    1257   ; c = toupper(_getch());
00000E6C  2F00      1258          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1259          jsr       __getch
00000E72  2200      1260          move.l    D0,D1
00000E74  201F      1261          move.l    (A7)+,D0
00000E76  2F01      1262          move.l    D1,-(A7)
00000E78  4EB9 0000 1263          jsr       _toupper
00000E7C  3574      
00000E7E  584F      1264          addq.w    #4,A7
00000E80  1C00      1265          move.b    D0,D6
                    1266   ; if (c == 0x1b)      // if break
00000E82  0C06 001B 1267          cmp.b     #27,D6
00000E86  6604      1268          bne.s     Load_SRecordFile_6
                    1269   ; return;
00000E88  6000 0132 1270          bra       Load_SRecordFile_8
                    1271   Load_SRecordFile_6:
00000E8C  0C06 0053 1272          cmp.b     #83,D6
00000E90  66DA      1273          bne       Load_SRecordFile_4
                    1274   ; } while (c != (char)('S'));   // wait for S start of header
                    1275   ; HeaderType = _getch();
00000E92  4EB8 0B68 1276          jsr       __getch
00000E96  1600      1277          move.b    D0,D3
                    1278   ; if (HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1279          cmp.b     #48,D3
00000E9C  6706      1280          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1281          cmp.b     #53,D3
00000EA2  6604      1282          bne.s     Load_SRecordFile_9
                    1283   Load_SRecordFile_11:
                    1284   ; continue;
00000EA4  6000 00D2 1285          bra       Load_SRecordFile_23
                    1286   Load_SRecordFile_9:
                    1287   ; if (HeaderType >= (char)('7'))
00000EA8  0C03 0037 1288          cmp.b     #55,D3
00000EAC  6D04      1289          blt.s     Load_SRecordFile_12
                    1290   ; break;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1291          bra       Load_SRecordFile_3
                    1292   Load_SRecordFile_12:
                    1293   ; // get the bytecount
                    1294   ; ByteCount = Get2HexDigits(&CheckSum);
00000EB2  2F0A      1295          move.l    A2,-(A7)
00000EB4  4E93      1296          jsr       (A3)
00000EB6  584F      1297          addq.w    #4,A7
00000EB8  2D40 FFF6 1298          move.l    D0,-10(A6)
                    1299   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1300   ; if (HeaderType == (char)('1')) {
00000EBC  0C03 0031 1301          cmp.b     #49,D3
00000EC0  660E      1302          bne.s     Load_SRecordFile_14
                    1303   ; AddressSize = 2;       // 2 byte address
00000EC2  7A02      1304          moveq     #2,D5
                    1305   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1306          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1307          jsr       _Get4HexDigits
00000ECA  584F      1308          addq.w    #4,A7
00000ECC  2800      1309          move.l    D0,D4
00000ECE  6020      1310          bra.s     Load_SRecordFile_17
                    1311   Load_SRecordFile_14:
                    1312   ; }
                    1313   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1314          cmp.b     #50,D3
00000ED4  660E      1315          bne.s     Load_SRecordFile_16
                    1316   ; AddressSize = 3;       // 3 byte address
00000ED6  7A03      1317          moveq     #3,D5
                    1318   ; Address = Get6HexDigits(&CheckSum);
00000ED8  2F0A      1319          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1320          jsr       _Get6HexDigits
00000EDE  584F      1321          addq.w    #4,A7
00000EE0  2800      1322          move.l    D0,D4
00000EE2  600C      1323          bra.s     Load_SRecordFile_17
                    1324   Load_SRecordFile_16:
                    1325   ; }
                    1326   ; else {
                    1327   ; AddressSize = 4;       // 4 byte address
00000EE4  7A04      1328          moveq     #4,D5
                    1329   ; Address = Get8HexDigits(&CheckSum);
00000EE6  2F0A      1330          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1331          jsr       _Get8HexDigits
00000EEC  584F      1332          addq.w    #4,A7
00000EEE  2800      1333          move.l    D0,D4
                    1334   Load_SRecordFile_17:
                    1335   ; }
                    1336   ; RamPtr = (char*)(Address);                            // point to download area
00000EF0  2D44 FFFC 1337          move.l    D4,-4(A6)
                    1338   ; NumDataBytesToRead = ByteCount - AddressSize - 1;
00000EF4  202E FFF6 1339          move.l    -10(A6),D0
00000EF8  9085      1340          sub.l     D5,D0
00000EFA  5380      1341          subq.l    #1,D0
00000EFC  2D40 FFE2 1342          move.l    D0,-30(A6)
                    1343   ; for (i = 0; i < NumDataBytesToRead; i++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1344          clr.l     D2
                    1345   Load_SRecordFile_18:
00000F02  B4AE FFE2 1346          cmp.l     -30(A6),D2
00000F06  6C1E      1347          bge.s     Load_SRecordFile_20
                    1348   ; DataByte = Get2HexDigits(&CheckSum);
00000F08  2F0A      1349          move.l    A2,-(A7)
00000F0A  4E93      1350          jsr       (A3)
00000F0C  584F      1351          addq.w    #4,A7
00000F0E  2D40 FFDE 1352          move.l    D0,-34(A6)
                    1353   ; *RamPtr++ = DataByte;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1354          move.l    -34(A6),D0
00000F16  206E FFFC 1355          move.l    -4(A6),A0
00000F1A  52AE FFFC 1356          addq.l    #1,-4(A6)
00000F1E  1080      1357          move.b    D0,(A0)
                    1358   ; ByteTotal++;
00000F20  524D      1359          addq.w    #1,A5
00000F22  5282      1360          addq.l    #1,D2
00000F24  60DC      1361          bra       Load_SRecordFile_18
                    1362   Load_SRecordFile_20:
                    1363   ; }
                    1364   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1365   ; ReadCheckSum = Get2HexDigits(0);
00000F26  42A7      1366          clr.l     -(A7)
00000F28  4E93      1367          jsr       (A3)
00000F2A  584F      1368          addq.w    #4,A7
00000F2C  1D40 FFFB 1369          move.b    D0,-5(A6)
                    1370   ; if ((~CheckSum & 0Xff) != (ReadCheckSum & 0Xff)) {
00000F30  1012      1371          move.b    (A2),D0
00000F32  4600      1372          not.b     D0
00000F34  4880      1373          ext.w     D0
00000F36  C07C 00FF 1374          and.w     #255,D0
00000F3A  122E FFFB 1375          move.b    -5(A6),D1
00000F3E  4881      1376          ext.w     D1
00000F40  C27C 00FF 1377          and.w     #255,D1
00000F44  B041      1378          cmp.w     D1,D0
00000F46  6708      1379          beq.s     Load_SRecordFile_21
                    1380   ; LoadFailed = 1;
00000F48  7E01      1381          moveq     #1,D7
                    1382   ; FailedAddress = Address;
00000F4A  2D44 FFE6 1383          move.l    D4,-26(A6)
                    1384   ; break;
00000F4E  602C      1385          bra.s     Load_SRecordFile_3
                    1386   Load_SRecordFile_21:
                    1387   ; }
                    1388   ; SRecordCount++;
00000F50  52AE FFEE 1389          addq.l    #1,-18(A6)
                    1390   ; // display feedback on progress
                    1391   ; if (SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1392          move.l    -18(A6),-(A7)
00000F58  4878 0019 1393          pea       25
00000F5C  4EB9 0000 1394          jsr       LDIV
00000F60  33C6      
00000F62  202F 0004 1395          move.l    4(A7),D0
00000F66  504F      1396          addq.w    #8,A7
00000F68  4A80      1397          tst.l     D0
00000F6A  660C      1398          bne.s     Load_SRecordFile_23
                    1399   ; putchar('.');
00000F6C  4878 002E 1400          pea       46
00000F70  4EB9 0000 1401          jsr       _putch
00000F74  3492      
00000F76  584F      1402          addq.w    #4,A7
                    1403   Load_SRecordFile_23:
00000F78  6000 FEF0 1404          bra       Load_SRecordFile_1
                    1405   Load_SRecordFile_3:
                    1406   ; }
                    1407   ; if (LoadFailed == 1) {
00000F7C  0C87 0000 1408          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1409          bne.s     Load_SRecordFile_25
                    1410   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress);
00000F84  2F2E FFE6 1411          move.l    -26(A6),-(A7)
00000F88  4879 0000 1412          pea       @lab3_15.L
00000F8C  4010      
00000F8E  4E94      1413          jsr       (A4)
00000F90  504F      1414          addq.w    #8,A7
00000F92  600C      1415          bra.s     Load_SRecordFile_26
                    1416   Load_SRecordFile_25:
                    1417   ; }
                    1418   ; else
                    1419   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal);
00000F94  2F0D      1420          move.l    A5,-(A7)
00000F96  4879 0000 1421          pea       @lab3_16.L
00000F9A  4036      
00000F9C  4E94      1422          jsr       (A4)
00000F9E  504F      1423          addq.w    #8,A7
                    1424   Load_SRecordFile_26:
                    1425   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1426   ; for (i = 0; i < 400000; i++)
00000FA0  4282      1427          clr.l     D2
                    1428   Load_SRecordFile_27:
00000FA2  0C82 0006 1429          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1430          bge.s     Load_SRecordFile_29
00000FAA  5282      1431          addq.l    #1,D2
00000FAC  60F4      1432          bra       Load_SRecordFile_27
                    1433   Load_SRecordFile_29:
                    1434   ; ;
                    1435   ; FlushKeyboard();
00000FAE  4EB8 0BA6 1436          jsr       _FlushKeyboard
                    1437   ; Echo = 1;
00000FB2  23FC 0000 1438          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1439   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1440          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1441          unlk      A6
00000FC2  4E75      1442          rts
                    1443   ; }
                    1444   ; void MemoryChange(void)
                    1445   ; {
                    1446   _MemoryChange:
00000FC4  48E7 3820 1447          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1448          lea       _printf.L,A2
00000FCC  35A0      
                    1449   ; unsigned char* RamPtr, c; // pointer to memory
                    1450   ; int Data;
                    1451   ; printf("\r\nExamine and Change Memory");
00000FCE  4879 0000 1452          pea       @lab3_17.L
00000FD2  4058      
00000FD4  4E92      1453          jsr       (A2)
00000FD6  584F      1454          addq.w    #4,A7
                    1455   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change");
00000FD8  4879 0000 1456          pea       @lab3_18.L
00000FDC  4074      
00000FDE  4E92      1457          jsr       (A2)
00000FE0  584F      1458          addq.w    #4,A7
                    1459   ; printf("\r\nEnter Address: ");
00000FE2  4879 0000 1460          pea       @lab3_19.L
00000FE6  40BA      
00000FE8  4E92      1461          jsr       (A2)
00000FEA  584F      1462          addq.w    #4,A7
                    1463   ; RamPtr = Get8HexDigits(0);
00000FEC  42A7      1464          clr.l     -(A7)
00000FEE  4EB8 0CA4 1465          jsr       _Get8HexDigits
00000FF2  584F      1466          addq.w    #4,A7
00000FF4  2600      1467          move.l    D0,D3
                    1468   ; while (1) {
                    1469   MemoryChange_1:
                    1470   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr);
00000FF6  2043      1471          move.l    D3,A0
00000FF8  1210      1472          move.b    (A0),D1
00000FFA  C2BC 0000 1473          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1474          move.l    D1,-(A7)
00001002  2F03      1475          move.l    D3,-(A7)
00001004  4879 0000 1476          pea       @lab3_20.L
00001008  40CC      
0000100A  4E92      1477          jsr       (A2)
0000100C  DEFC 000C 1478          add.w     #12,A7
                    1479   ; c = tolower(_getch());
00001010  2F00      1480          move.l    D0,-(A7)
00001012  4EB8 0B68 1481          jsr       __getch
00001016  2200      1482          move.l    D0,D1
00001018  201F      1483          move.l    (A7)+,D0
0000101A  2F01      1484          move.l    D1,-(A7)
0000101C  4EB9 0000 1485          jsr       _tolower
00001020  34FE      
00001022  584F      1486          addq.w    #4,A7
00001024  1400      1487          move.b    D0,D2
                    1488   ; if (c == (char)(0x1b))
00001026  0C02 001B 1489          cmp.b     #27,D2
0000102A  6604      1490          bne.s     MemoryChange_4
                    1491   ; return;                                // abort on escape
0000102C  6000 0090 1492          bra       MemoryChange_6
                    1493   MemoryChange_4:
                    1494   ; else if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1495          cmp.b     #48,D2
00001034  6506      1496          blo.s     MemoryChange_10
00001036  0C02 0039 1497          cmp.b     #57,D2
0000103A  6310      1498          bls.s     MemoryChange_9
                    1499   MemoryChange_10:
0000103C  0C02 0061 1500          cmp.b     #97,D2
00001040  6500 006E 1501          blo       MemoryChange_7
00001044  0C02 0066 1502          cmp.b     #102,D2
00001048  6200 0066 1503          bhi       MemoryChange_7
                    1504   MemoryChange_9:
                    1505   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1506          and.l     #255,D2
00001050  00FF      
00001052  2F02      1507          move.l    D2,-(A7)
00001054  4EB8 0BD2 1508          jsr       _xtod
00001058  584F      1509          addq.w    #4,A7
0000105A  C0BC 0000 1510          and.l     #255,D0
0000105E  00FF      
00001060  E980      1511          asl.l     #4,D0
00001062  2F00      1512          move.l    D0,-(A7)
00001064  2F01      1513          move.l    D1,-(A7)
00001066  4EB8 0B68 1514          jsr       __getch
0000106A  221F      1515          move.l    (A7)+,D1
0000106C  2F00      1516          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1517          jsr       _xtod
00001072  584F      1518          addq.w    #4,A7
00001074  2200      1519          move.l    D0,D1
00001076  201F      1520          move.l    (A7)+,D0
00001078  C2BC 0000 1521          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1522          or.l      D1,D0
00001080  2800      1523          move.l    D0,D4
                    1524   ; *RamPtr = (char)(Data);
00001082  2043      1525          move.l    D3,A0
00001084  1084      1526          move.b    D4,(A0)
                    1527   ; if (*RamPtr != Data) {
00001086  2043      1528          move.l    D3,A0
00001088  1010      1529          move.b    (A0),D0
0000108A  C0BC 0000 1530          and.l     #255,D0
0000108E  00FF      
00001090  B084      1531          cmp.l     D4,D0
00001092  671A      1532          beq.s     MemoryChange_11
                    1533   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr);
00001094  2043      1534          move.l    D3,A0
00001096  1210      1535          move.b    (A0),D1
00001098  C2BC 0000 1536          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1537          move.l    D1,-(A7)
000010A0  2F04      1538          move.l    D4,-(A7)
000010A2  4879 0000 1539          pea       @lab3_21.L
000010A6  40DE      
000010A8  4E92      1540          jsr       (A2)
000010AA  DEFC 000C 1541          add.w     #12,A7
                    1542   MemoryChange_11:
000010AE  6008      1543          bra.s     MemoryChange_13
                    1544   MemoryChange_7:
                    1545   ; }
                    1546   ; }
                    1547   ; else if (c == (char)('-'))
000010B0  0C02 002D 1548          cmp.b     #45,D2
000010B4  6602      1549          bne.s     MemoryChange_13
                    1550   ; RamPtr -= 2; ;
000010B6  5583      1551          subq.l    #2,D3
                    1552   MemoryChange_13:
                    1553   ; RamPtr++;
000010B8  5283      1554          addq.l    #1,D3
000010BA  6000 FF3A 1555          bra       MemoryChange_1
                    1556   MemoryChange_6:
000010BE  4CDF 041C 1557          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1558          rts
                    1559   ; }
                    1560   ; }
                    1561   ; /******************************************************************************************
                    1562   ; ** The following code is for the SPI controller
                    1563   ; *******************************************************************************************/
                    1564   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1565   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1566   ; int TestForSPITransmitDataComplete(void)    {
                    1567   _TestForSPITransmitDataComplete:
000010C4  4E56 FFFC 1568          link      A6,#-4
                    1569   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1570   ; int SPIF = SPI_Status >> 7;
000010C8  1039 0040 1571          move.b    4227106,D0
000010CC  8022      
000010CE  C0BC 0000 1572          and.l     #255,D0
000010D2  00FF      
000010D4  EE88      1573          lsr.l     #7,D0
000010D6  2D40 FFFC 1574          move.l    D0,-4(A6)
                    1575   ; return SPIF;
000010DA  202E FFFC 1576          move.l    -4(A6),D0
000010DE  4E5E      1577          unlk      A6
000010E0  4E75      1578          rts
                    1579   ; }
                    1580   ; /************************************************************************************
                    1581   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1582   ; ************************************************************************************/
                    1583   ; void SPI_Init(void)
                    1584   ; {
                    1585   _SPI_Init:
                    1586   ; //TODO
                    1587   ; //
                    1588   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1589   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1590   ; //
                    1591   ; // Here are some settings we want to create
                    1592   ; //
                    1593   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    1594   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1595   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    1596   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1597   ; SPI_Control = (unsigned char) 0x53; // 0101_0011
000010E2  13FC 0053 1598          move.b    #83,4227104
000010E6  0040 8020 
                    1599   ; SPI_Ext = (unsigned char) 0x00; // 00_0000_00
000010EA  4239 0040 1600          clr.b     4227110
000010EE  8026      
                    1601   ; Disable_SPI_CS();
000010F0  13FC 00FF 1602          move.b    #255,4227112
000010F4  0040 8028 
                    1603   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
000010F8  13FC 00C0 1604          move.b    #192,4227106
000010FC  0040 8022 
00001100  4E75      1605          rts
                    1606   ; }
                    1607   ; /************************************************************************************
                    1608   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1609   ; ************************************************************************************/
                    1610   ; void WaitForSPITransmitComplete(void)
                    1611   ; {
                    1612   _WaitForSPITransmitComplete:
                    1613   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1614   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1615   ; // just in case they were set
                    1616   ; while(!TestForSPITransmitDataComplete()) {}
                    1617   WaitForSPITransmitComplete_1:
00001102  4EB8 10C4 1618          jsr       _TestForSPITransmitDataComplete
00001106  4A80      1619          tst.l     D0
00001108  6602      1620          bne.s     WaitForSPITransmitComplete_3
0000110A  60F6      1621          bra       WaitForSPITransmitComplete_1
                    1622   WaitForSPITransmitComplete_3:
                    1623   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
0000110C  13FC 00C0 1624          move.b    #192,4227106
00001110  0040 8022 
00001114  4E75      1625          rts
                    1626   ; }
                    1627   ; /************************************************************************************
                    1628   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1629   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1630   ; ************************************************************************************/
                    1631   ; int WriteSPIChar(int c)
                    1632   ; {
                    1633   _WriteSPIChar:
00001116  4E56 FFFC 1634          link      A6,#-4
                    1635   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1636   ; // wait for completion of transmission
                    1637   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1638   ; // by reading fom the SPI controller Data Register.
                    1639   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1640   ; //
                    1641   ; // modify '0' below to return back read byte from data register
                    1642   ; //
                    1643   ; int read_data;
                    1644   ; SPI_Data = c;
0000111A  202E 0008 1645          move.l    8(A6),D0
0000111E  13C0 0040 1646          move.b    D0,4227108
00001122  8024      
                    1647   ; WaitForSPITransmitComplete();
00001124  4EB8 1102 1648          jsr       _WaitForSPITransmitComplete
                    1649   ; read_data = SPI_Data;
00001128  1039 0040 1650          move.b    4227108,D0
0000112C  8024      
0000112E  C0BC 0000 1651          and.l     #255,D0
00001132  00FF      
00001134  2D40 FFFC 1652          move.l    D0,-4(A6)
                    1653   ; return read_data;            
00001138  202E FFFC 1654          move.l    -4(A6),D0
0000113C  4E5E      1655          unlk      A6
0000113E  4E75      1656          rts
                    1657   ; }
                    1658   ; void SendFlashCmd(int cmd)
                    1659   ; {
                    1660   _SendFlashCmd:
00001140  4E56 0000 1661          link      A6,#0
                    1662   ; Enable_SPI_CS();
00001144  13FC 00FE 1663          move.b    #254,4227112
00001148  0040 8028 
                    1664   ; WriteSPIChar(cmd); 
0000114C  2F2E 0008 1665          move.l    8(A6),-(A7)
00001150  4EB8 1116 1666          jsr       _WriteSPIChar
00001154  584F      1667          addq.w    #4,A7
                    1668   ; Disable_SPI_CS();
00001156  13FC 00FF 1669          move.b    #255,4227112
0000115A  0040 8028 
0000115E  4E5E      1670          unlk      A6
00001160  4E75      1671          rts
                    1672   ; }
                    1673   ; void SendFlashCmdAndAddr(int cmd, int addr)
                    1674   ; {
                    1675   _SendFlashCmdAndAddr:
00001162  4E56 0000 1676          link      A6,#0
00001166  48E7 2020 1677          movem.l   D2/A2,-(A7)
0000116A  45F8 1116 1678          lea       _WriteSPIChar.L,A2
0000116E  242E 000C 1679          move.l    12(A6),D2
                    1680   ; WriteSPIChar(cmd);
00001172  2F2E 0008 1681          move.l    8(A6),-(A7)
00001176  4E92      1682          jsr       (A2)
00001178  584F      1683          addq.w    #4,A7
                    1684   ; WriteSPIChar(addr >> 16);
0000117A  2202      1685          move.l    D2,D1
0000117C  E081      1686          asr.l     #8,D1
0000117E  E081      1687          asr.l     #8,D1
00001180  2F01      1688          move.l    D1,-(A7)
00001182  4E92      1689          jsr       (A2)
00001184  584F      1690          addq.w    #4,A7
                    1691   ; WriteSPIChar(addr >> 8);
00001186  2202      1692          move.l    D2,D1
00001188  E081      1693          asr.l     #8,D1
0000118A  2F01      1694          move.l    D1,-(A7)
0000118C  4E92      1695          jsr       (A2)
0000118E  584F      1696          addq.w    #4,A7
                    1697   ; WriteSPIChar(addr);
00001190  2F02      1698          move.l    D2,-(A7)
00001192  4E92      1699          jsr       (A2)
00001194  584F      1700          addq.w    #4,A7
00001196  4CDF 0404 1701          movem.l   (A7)+,D2/A2
0000119A  4E5E      1702          unlk      A6
0000119C  4E75      1703          rts
                    1704   ; }
                    1705   ; void WaitFlashIdle(void)
                    1706   ; {
                    1707   _WaitFlashIdle:
                    1708   ; Enable_SPI_CS();
0000119E  13FC 00FE 1709          move.b    #254,4227112
000011A2  0040 8028 
                    1710   ; WriteSPIChar(0x05);  // read status
000011A6  4878 0005 1711          pea       5
000011AA  4EB8 1116 1712          jsr       _WriteSPIChar
000011AE  584F      1713          addq.w    #4,A7
                    1714   ; while(WriteSPIChar(0x00) & 0x01){}; // wait until idle
                    1715   WaitFlashIdle_1:
000011B0  42A7      1716          clr.l     -(A7)
000011B2  4EB8 1116 1717          jsr       _WriteSPIChar
000011B6  584F      1718          addq.w    #4,A7
000011B8  C0BC 0000 1719          and.l     #1,D0
000011BC  0001      
000011BE  6702      1720          beq.s     WaitFlashIdle_3
000011C0  60EE      1721          bra       WaitFlashIdle_1
                    1722   WaitFlashIdle_3:
                    1723   ; Disable_SPI_CS();
000011C2  13FC 00FF 1724          move.b    #255,4227112
000011C6  0040 8028 
000011CA  4E75      1725          rts
                    1726   ; }
                    1727   ; void EraseSPIFlashChip(void)
                    1728   ; {
                    1729   _EraseSPIFlashChip:
                    1730   ; SendFlashCmd(0x06);  // write enable
000011CC  4878 0006 1731          pea       6
000011D0  4EB8 1140 1732          jsr       _SendFlashCmd
000011D4  584F      1733          addq.w    #4,A7
                    1734   ; SendFlashCmd(0xC7);  // erase chip
000011D6  4878 00C7 1735          pea       199
000011DA  4EB8 1140 1736          jsr       _SendFlashCmd
000011DE  584F      1737          addq.w    #4,A7
                    1738   ; WaitFlashIdle();
000011E0  4EB8 119E 1739          jsr       _WaitFlashIdle
000011E4  4E75      1740          rts
                    1741   ; }
                    1742   ; void SPIFlashProgram(int AddressOffset, int ByteData)
                    1743   ; {
                    1744   _SPIFlashProgram:
000011E6  4E56 FFFC 1745          link      A6,#-4
                    1746   ; int readbackdata;
                    1747   ; SendFlashCmd(0x06);  // write enable
000011EA  4878 0006 1748          pea       6
000011EE  4EB8 1140 1749          jsr       _SendFlashCmd
000011F2  584F      1750          addq.w    #4,A7
                    1751   ; Enable_SPI_CS();
000011F4  13FC 00FE 1752          move.b    #254,4227112
000011F8  0040 8028 
                    1753   ; SendFlashCmdAndAddr(0x02, AddressOffset); // page program
000011FC  2F2E 0008 1754          move.l    8(A6),-(A7)
00001200  4878 0002 1755          pea       2
00001204  4EB8 1162 1756          jsr       _SendFlashCmdAndAddr
00001208  504F      1757          addq.w    #8,A7
                    1758   ; // if (AddressOffset == 0) {
                    1759   ; //     printf("ByteData: 0x%08x", ByteData);
                    1760   ; // }
                    1761   ; readbackdata = WriteSPIChar(ByteData); // write byte data
0000120A  2F2E 000C 1762          move.l    12(A6),-(A7)
0000120E  4EB8 1116 1763          jsr       _WriteSPIChar
00001212  584F      1764          addq.w    #4,A7
00001214  2D40 FFFC 1765          move.l    D0,-4(A6)
                    1766   ; Disable_SPI_CS();
00001218  13FC 00FF 1767          move.b    #255,4227112
0000121C  0040 8028 
                    1768   ; WaitFlashIdle();  // wait idle
00001220  4EB8 119E 1769          jsr       _WaitFlashIdle
00001224  4E5E      1770          unlk      A6
00001226  4E75      1771          rts
                    1772   ; }
                    1773   ; void WriteSPIFlashData(int FlashAddress, unsigned char *MemoryAddress, int size)
                    1774   ; {
                    1775   _WriteSPIFlashData:
00001228  4E56 0000 1776          link      A6,#0
0000122C  2F02      1777          move.l    D2,-(A7)
                    1778   ; int addressOffset = 0;
0000122E  4282      1779          clr.l     D2
                    1780   ; for (addressOffset = 0; addressOffset < size; addressOffset++) {
00001230  4282      1781          clr.l     D2
                    1782   WriteSPIFlashData_1:
00001232  B4AE 0010 1783          cmp.l     16(A6),D2
00001236  6C00 003C 1784          bge       WriteSPIFlashData_3
                    1785   ; SPIFlashProgram(addressOffset + FlashAddress, MemoryAddress[addressOffset]);
0000123A  206E 000C 1786          move.l    12(A6),A0
0000123E  1230 2800 1787          move.b    0(A0,D2.L),D1
00001242  C2BC 0000 1788          and.l     #255,D1
00001246  00FF      
00001248  2F01      1789          move.l    D1,-(A7)
0000124A  2202      1790          move.l    D2,D1
0000124C  D2AE 0008 1791          add.l     8(A6),D1
00001250  2F01      1792          move.l    D1,-(A7)
00001252  4EB8 11E6 1793          jsr       _SPIFlashProgram
00001256  504F      1794          addq.w    #8,A7
                    1795   ; if (addressOffset % 32768 == 0){
00001258  2002      1796          move.l    D2,D0
0000125A  C0BC 0000 1797          and.l     #32767,D0
0000125E  7FFF      
00001260  660E      1798          bne.s     WriteSPIFlashData_4
                    1799   ; printf(".");
00001262  4879 0000 1800          pea       @lab3_22.L
00001266  4112      
00001268  4EB9 0000 1801          jsr       _printf
0000126C  35A0      
0000126E  584F      1802          addq.w    #4,A7
                    1803   WriteSPIFlashData_4:
00001270  5282      1804          addq.l    #1,D2
00001272  60BE      1805          bra       WriteSPIFlashData_1
                    1806   WriteSPIFlashData_3:
00001274  241F      1807          move.l    (A7)+,D2
00001276  4E5E      1808          unlk      A6
00001278  4E75      1809          rts
                    1810   ; }
                    1811   ; }
                    1812   ; }
                    1813   ; int SPIFlashRead(int AddressOffset)
                    1814   ; {
                    1815   _SPIFlashRead:
0000127A  4E56 FFFC 1816          link      A6,#-4
                    1817   ; int data;
                    1818   ; Enable_SPI_CS();
0000127E  13FC 00FE 1819          move.b    #254,4227112
00001282  0040 8028 
                    1820   ; SendFlashCmdAndAddr(0x03, AddressOffset); // read
00001286  2F2E 0008 1821          move.l    8(A6),-(A7)
0000128A  4878 0003 1822          pea       3
0000128E  4EB8 1162 1823          jsr       _SendFlashCmdAndAddr
00001292  504F      1824          addq.w    #8,A7
                    1825   ; data = WriteSPIChar(0x00); // dummy
00001294  42A7      1826          clr.l     -(A7)
00001296  4EB8 1116 1827          jsr       _WriteSPIChar
0000129A  584F      1828          addq.w    #4,A7
0000129C  2D40 FFFC 1829          move.l    D0,-4(A6)
                    1830   ; // if (AddressOffset == 0) {
                    1831   ; //     printf("ByteData: 0x%08x", data);
                    1832   ; // }
                    1833   ; Disable_SPI_CS();
000012A0  13FC 00FF 1834          move.b    #255,4227112
000012A4  0040 8028 
                    1835   ; return data;
000012A8  202E FFFC 1836          move.l    -4(A6),D0
000012AC  4E5E      1837          unlk      A6
000012AE  4E75      1838          rts
                    1839   ; }
                    1840   ; void ReadSPIFlashData(int FlashAddress, unsigned char *MemoryAddress, int size)
                    1841   ; {
                    1842   _ReadSPIFlashData:
000012B0  4E56 0000 1843          link      A6,#0
000012B4  2F02      1844          move.l    D2,-(A7)
                    1845   ; int addressOffset;
                    1846   ; for (addressOffset = 0; addressOffset < size; addressOffset++)
000012B6  4282      1847          clr.l     D2
                    1848   ReadSPIFlashData_1:
000012B8  B4AE 0010 1849          cmp.l     16(A6),D2
000012BC  6C1A      1850          bge.s     ReadSPIFlashData_3
                    1851   ; {
                    1852   ; MemoryAddress[addressOffset] = SPIFlashRead(FlashAddress+addressOffset);
000012BE  222E 0008 1853          move.l    8(A6),D1
000012C2  D282      1854          add.l     D2,D1
000012C4  2F01      1855          move.l    D1,-(A7)
000012C6  4EB8 127A 1856          jsr       _SPIFlashRead
000012CA  584F      1857          addq.w    #4,A7
000012CC  206E 000C 1858          move.l    12(A6),A0
000012D0  1180 2800 1859          move.b    D0,0(A0,D2.L)
000012D4  5282      1860          addq.l    #1,D2
000012D6  60E0      1861          bra       ReadSPIFlashData_1
                    1862   ReadSPIFlashData_3:
000012D8  241F      1863          move.l    (A7)+,D2
000012DA  4E5E      1864          unlk      A6
000012DC  4E75      1865          rts
                    1866   ; }
                    1867   ; }
                    1868   ; /*******************************************************************
                    1869   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1870   ; ********************************************************************/
                    1871   ; void ProgramFlashChip(void)
                    1872   ; {
                    1873   _ProgramFlashChip:
000012DE  4E56 FF00 1874          link      A6,#-256
000012E2  48E7 3C30 1875          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
000012E6  45F9 0000 1876          lea       _printf.L,A2
000012EA  35A0      
000012EC  47EE FF00 1877          lea       -256(A6),A3
                    1878   ; //
                    1879   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1880   ; // TODO : then verify by reading it back and comparing to memory
                    1881   ; //
                    1882   ; unsigned char * dataPtr = 0x08000000;
000012F0  263C 0800 1883          move.l    #134217728,D3
000012F4  0000      
                    1884   ; int flashAddress = 0;
000012F6  4285      1885          clr.l     D5
                    1886   ; int i = 0;
000012F8  4284      1887          clr.l     D4
                    1888   ; unsigned char readBuffer[256];
                    1889   ; int bufferOffset = 0;
000012FA  4282      1890          clr.l     D2
                    1891   ; printf("\n\rErasing\n\r");
000012FC  4879 0000 1892          pea       @lab3_23.L
00001300  4114      
00001302  4E92      1893          jsr       (A2)
00001304  584F      1894          addq.w    #4,A7
                    1895   ; EraseSPIFlashChip();
00001306  4EB8 11CC 1896          jsr       _EraseSPIFlashChip
                    1897   ; printf("Writing Program to memory \n\r");
0000130A  4879 0000 1898          pea       @lab3_24.L
0000130E  4120      
00001310  4E92      1899          jsr       (A2)
00001312  584F      1900          addq.w    #4,A7
                    1901   ; WriteSPIFlashData(0, dataPtr, 262144); // 256kB = 256 * 1024 = 262144
00001314  4879 0004 1902          pea       262144
00001318  0000      
0000131A  2F03      1903          move.l    D3,-(A7)
0000131C  42A7      1904          clr.l     -(A7)
0000131E  4EB8 1228 1905          jsr       _WriteSPIFlashData
00001322  DEFC 000C 1906          add.w     #12,A7
                    1907   ; printf("Writing Done\n\r");
00001326  4879 0000 1908          pea       @lab3_25.L
0000132A  413E      
0000132C  4E92      1909          jsr       (A2)
0000132E  584F      1910          addq.w    #4,A7
                    1911   ; dataPtr = 0x08000000; // reset address
00001330  263C 0800 1912          move.l    #134217728,D3
00001334  0000      
                    1913   ; printf("Reading Program from memory\n\r");
00001336  4879 0000 1914          pea       @lab3_26.L
0000133A  414E      
0000133C  4E92      1915          jsr       (A2)
0000133E  584F      1916          addq.w    #4,A7
                    1917   ; for (i = 0; i < 1024; i++) {
00001340  4284      1918          clr.l     D4
                    1919   ProgramFlashChip_1:
00001342  0C84 0000 1920          cmp.l     #1024,D4
00001346  0400      
00001348  6C00 0090 1921          bge       ProgramFlashChip_3
                    1922   ; ReadSPIFlashData(flashAddress, readBuffer, 256);
0000134C  4878 0100 1923          pea       256
00001350  2F0B      1924          move.l    A3,-(A7)
00001352  2F05      1925          move.l    D5,-(A7)
00001354  4EB8 12B0 1926          jsr       _ReadSPIFlashData
00001358  DEFC 000C 1927          add.w     #12,A7
                    1928   ; for (bufferOffset = 0; bufferOffset < 256; bufferOffset++){
0000135C  4282      1929          clr.l     D2
                    1930   ProgramFlashChip_4:
0000135E  0C82 0000 1931          cmp.l     #256,D2
00001362  0100      
00001364  6C00 0042 1932          bge       ProgramFlashChip_6
                    1933   ; if (dataPtr[bufferOffset] != readBuffer[bufferOffset]){
00001368  2043      1934          move.l    D3,A0
0000136A  1030 2800 1935          move.b    0(A0,D2.L),D0
0000136E  B033 2800 1936          cmp.b     0(A3,D2.L),D0
00001372  6730      1937          beq.s     ProgramFlashChip_7
                    1938   ; printf("\r\nERROR: DATA Mismatch at addr 0x%08x. WRITE: 0x%02x READ: 0x%02x\r\n", &dataPtr[bufferOffset], dataPtr[bufferOffset], readBuffer[bufferOffset]);
00001374  1233 2800 1939          move.b    0(A3,D2.L),D1
00001378  C2BC 0000 1940          and.l     #255,D1
0000137C  00FF      
0000137E  2F01      1941          move.l    D1,-(A7)
00001380  2043      1942          move.l    D3,A0
00001382  1230 2800 1943          move.b    0(A0,D2.L),D1
00001386  C2BC 0000 1944          and.l     #255,D1
0000138A  00FF      
0000138C  2F01      1945          move.l    D1,-(A7)
0000138E  2203      1946          move.l    D3,D1
00001390  D282      1947          add.l     D2,D1
00001392  2F01      1948          move.l    D1,-(A7)
00001394  4879 0000 1949          pea       @lab3_27.L
00001398  416C      
0000139A  4E92      1950          jsr       (A2)
0000139C  DEFC 0010 1951          add.w     #16,A7
                    1952   ; return;
000013A0  6000 0042 1953          bra       ProgramFlashChip_9
                    1954   ProgramFlashChip_7:
000013A4  5282      1955          addq.l    #1,D2
000013A6  60B6      1956          bra       ProgramFlashChip_4
                    1957   ProgramFlashChip_6:
                    1958   ; }
                    1959   ; }
                    1960   ; flashAddress += 256;
000013A8  0685 0000 1961          add.l     #256,D5
000013AC  0100      
                    1962   ; dataPtr += 256;
000013AE  0683 0000 1963          add.l     #256,D3
000013B2  0100      
                    1964   ; if (i % 128 == 0){
000013B4  2F04      1965          move.l    D4,-(A7)
000013B6  4878 0080 1966          pea       128
000013BA  4EB9 0000 1967          jsr       LDIV
000013BE  33C6      
000013C0  202F 0004 1968          move.l    4(A7),D0
000013C4  504F      1969          addq.w    #8,A7
000013C6  4A80      1970          tst.l     D0
000013C8  660A      1971          bne.s     ProgramFlashChip_10
                    1972   ; printf(".");
000013CA  4879 0000 1973          pea       @lab3_22.L
000013CE  4112      
000013D0  4E92      1974          jsr       (A2)
000013D2  584F      1975          addq.w    #4,A7
                    1976   ProgramFlashChip_10:
000013D4  5284      1977          addq.l    #1,D4
000013D6  6000 FF6A 1978          bra       ProgramFlashChip_1
                    1979   ProgramFlashChip_3:
                    1980   ; }
                    1981   ; }
                    1982   ; printf("PASS\n\r");
000013DA  4879 0000 1983          pea       @lab3_28.L
000013DE  41B0      
000013E0  4E92      1984          jsr       (A2)
000013E2  584F      1985          addq.w    #4,A7
                    1986   ProgramFlashChip_9:
000013E4  4CDF 0C3C 1987          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
000013E8  4E5E      1988          unlk      A6
000013EA  4E75      1989          rts
                    1990   ; }
                    1991   ; /*************************************************************************
                    1992   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1993   ; **************************************************************************/
                    1994   ; void LoadFromFlashChip(void)
                    1995   ; {
                    1996   _LoadFromFlashChip:
000013EC  4E56 FF00 1997          link      A6,#-256
000013F0  48E7 3C30 1998          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
000013F4  45F9 0000 1999          lea       _printf.L,A2
000013F8  35A0      
000013FA  47EE FF00 2000          lea       -256(A6),A3
                    2001   ; unsigned int flashAddress = 0;
000013FE  4285      2002          clr.l     D5
                    2003   ; unsigned char * dataPtr = 0x08000000;
00001400  283C 0800 2004          move.l    #134217728,D4
00001404  0000      
                    2005   ; unsigned int i = 0, j = 0;
00001406  4283      2006          clr.l     D3
00001408  4282      2007          clr.l     D2
                    2008   ; unsigned char readBuffer[256];
                    2009   ; printf("\r\nLoading Program From SPI Flash....");
0000140A  4879 0000 2010          pea       @lab3_29.L
0000140E  41B8      
00001410  4E92      2011          jsr       (A2)
00001412  584F      2012          addq.w    #4,A7
                    2013   ; //
                    2014   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2015   ; //
                    2016   ; for (i = 0; i < 1024; i++){
00001414  4283      2017          clr.l     D3
                    2018   LoadFromFlashChip_1:
00001416  0C83 0000 2019          cmp.l     #1024,D3
0000141A  0400      
0000141C  6400 0076 2020          bhs       LoadFromFlashChip_3
                    2021   ; ReadSPIFlashData(flashAddress, readBuffer, 256);
00001420  4878 0100 2022          pea       256
00001424  2F0B      2023          move.l    A3,-(A7)
00001426  2F05      2024          move.l    D5,-(A7)
00001428  4EB8 12B0 2025          jsr       _ReadSPIFlashData
0000142C  DEFC 000C 2026          add.w     #12,A7
                    2027   ; if (i == 0) {
00001430  4A83      2028          tst.l     D3
00001432  661A      2029          bne.s     LoadFromFlashChip_6
                    2030   ; if (readBuffer[0] == 0xFF) {
00001434  1013      2031          move.b    (A3),D0
00001436  C07C 00FF 2032          and.w     #255,D0
0000143A  0C40 00FF 2033          cmp.w     #255,D0
0000143E  660E      2034          bne.s     LoadFromFlashChip_6
                    2035   ; printf("garbage value read!\r\n");
00001440  4879 0000 2036          pea       @lab3_30.L
00001444  41DE      
00001446  4E92      2037          jsr       (A2)
00001448  584F      2038          addq.w    #4,A7
                    2039   ; return;
0000144A  6000 0052 2040          bra       LoadFromFlashChip_8
                    2041   LoadFromFlashChip_6:
                    2042   ; }
                    2043   ; }
                    2044   ; for (j = 0; j < 256; j++){
0000144E  4282      2045          clr.l     D2
                    2046   LoadFromFlashChip_9:
00001450  0C82 0000 2047          cmp.l     #256,D2
00001454  0100      
00001456  640C      2048          bhs.s     LoadFromFlashChip_11
                    2049   ; dataPtr[j] = readBuffer[j];
00001458  2044      2050          move.l    D4,A0
0000145A  11B3 2800 2051          move.b    0(A3,D2.L),0(A0,D2.L)
0000145E  2800      
00001460  5282      2052          addq.l    #1,D2
00001462  60EC      2053          bra       LoadFromFlashChip_9
                    2054   LoadFromFlashChip_11:
                    2055   ; }
                    2056   ; dataPtr+=256;
00001464  0684 0000 2057          add.l     #256,D4
00001468  0100      
                    2058   ; flashAddress+=256;
0000146A  0685 0000 2059          add.l     #256,D5
0000146E  0100      
                    2060   ; if (i % 128 == 0){
00001470  2F03      2061          move.l    D3,-(A7)
00001472  4878 0080 2062          pea       128
00001476  4EB9 0000 2063          jsr       ULDIV
0000147A  33B4      
0000147C  202F 0004 2064          move.l    4(A7),D0
00001480  504F      2065          addq.w    #8,A7
00001482  4A80      2066          tst.l     D0
00001484  660A      2067          bne.s     LoadFromFlashChip_12
                    2068   ; printf(".");
00001486  4879 0000 2069          pea       @lab3_22.L
0000148A  4112      
0000148C  4E92      2070          jsr       (A2)
0000148E  584F      2071          addq.w    #4,A7
                    2072   LoadFromFlashChip_12:
00001490  5283      2073          addq.l    #1,D3
00001492  6082      2074          bra       LoadFromFlashChip_1
                    2075   LoadFromFlashChip_3:
                    2076   ; }
                    2077   ; }
                    2078   ; printf("\r\nDone loading.\r\n");
00001494  4879 0000 2079          pea       @lab3_31.L
00001498  41F4      
0000149A  4E92      2080          jsr       (A2)
0000149C  584F      2081          addq.w    #4,A7
                    2082   LoadFromFlashChip_8:
0000149E  4CDF 0C3C 2083          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
000014A2  4E5E      2084          unlk      A6
000014A4  4E75      2085          rts
                    2086   ; }
                    2087   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2088   ; // IMPORTANT
                    2089   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2090   ; // has to be done with an interrupt (IRQ Level 6)
                    2091   ; //
                    2092   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2093   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2094   ; //
                    2095   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2096   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2097   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2098   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2099   ; // program area
                    2100   ; //
                    2101   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2102   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2103   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2104   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2105   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2106   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2107   ; void DumpRegisters()
                    2108   ; {
                    2109   _DumpRegisters:
000014A6  48E7 3F3C 2110          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000014AA  45F9 0000 2111          lea       _putch.L,A2
000014AE  3492      
000014B0  47F9 0000 2112          lea       _printf.L,A3
000014B4  35A0      
000014B6  49F9 0B00 2113          lea       _SR.L,A4
000014BA  012C      
000014BC  4BF9 0B00 2114          lea       _WatchPointString.L,A5
000014C0  01C2      
                    2115   ; short i, x, j, k;
                    2116   ; unsigned char c, * BytePointer;
                    2117   ; // buld up strings for displaying watchpoints
                    2118   ; for (x = 0; x < (short)(8); x++)
000014C2  4242      2119          clr.w     D2
                    2120   DumpRegisters_1:
000014C4  0C42 0008 2121          cmp.w     #8,D2
000014C8  6C00 01C6 2122          bge       DumpRegisters_3
                    2123   ; {
                    2124   ; if (WatchPointSetOrCleared[x] == 1)
000014CC  48C2      2125          ext.l     D2
000014CE  2002      2126          move.l    D2,D0
000014D0  E588      2127          lsl.l     #2,D0
000014D2  41F9 0B00 2128          lea       _WatchPointSetOrCleared.L,A0
000014D6  01A2      
000014D8  2030 0800 2129          move.l    0(A0,D0.L),D0
000014DC  0C80 0000 2130          cmp.l     #1,D0
000014E0  0001      
000014E2  6600 0186 2131          bne       DumpRegisters_4
                    2132   ; {
                    2133   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]);
000014E6  48C2      2134          ext.l     D2
000014E8  2202      2135          move.l    D2,D1
000014EA  E589      2136          lsl.l     #2,D1
000014EC  41F9 0B00 2137          lea       _WatchPointAddress.L,A0
000014F0  0182      
000014F2  2F30 1800 2138          move.l    0(A0,D1.L),-(A7)
000014F6  4879 0000 2139          pea       @lab3_32.L
000014FA  4206      
000014FC  220D      2140          move.l    A5,D1
000014FE  48C2      2141          ext.l     D2
00001500  2F00      2142          move.l    D0,-(A7)
00001502  2002      2143          move.l    D2,D0
00001504  C1FC 0064 2144          muls      #100,D0
00001508  D280      2145          add.l     D0,D1
0000150A  201F      2146          move.l    (A7)+,D0
0000150C  2F01      2147          move.l    D1,-(A7)
0000150E  4EB9 0000 2148          jsr       _sprintf
00001512  352A      
00001514  DEFC 000C 2149          add.w     #12,A7
                    2150   ; BytePointer = (char*)(WatchPointAddress[x]);
00001518  48C2      2151          ext.l     D2
0000151A  2002      2152          move.l    D2,D0
0000151C  E588      2153          lsl.l     #2,D0
0000151E  41F9 0B00 2154          lea       _WatchPointAddress.L,A0
00001522  0182      
00001524  2A30 0800 2155          move.l    0(A0,D0.L),D5
                    2156   ; for (j = 0; j < (short)(16); j += 2)
00001528  4243      2157          clr.w     D3
                    2158   DumpRegisters_6:
0000152A  0C43 0010 2159          cmp.w     #16,D3
0000152E  6C00 0082 2160          bge       DumpRegisters_8
                    2161   ; {
                    2162   ; for (k = 0; k < (short)(2); k++)
00001532  4246      2163          clr.w     D6
                    2164   DumpRegisters_9:
00001534  0C46 0002 2165          cmp.w     #2,D6
00001538  6C00 0052 2166          bge       DumpRegisters_11
                    2167   ; {
                    2168   ; sprintf(TempString, "%02X", BytePointer[j + k]);
0000153C  2045      2169          move.l    D5,A0
0000153E  48C3      2170          ext.l     D3
00001540  2203      2171          move.l    D3,D1
00001542  48C6      2172          ext.l     D6
00001544  D286      2173          add.l     D6,D1
00001546  1230 1800 2174          move.b    0(A0,D1.L),D1
0000154A  C2BC 0000 2175          and.l     #255,D1
0000154E  00FF      
00001550  2F01      2176          move.l    D1,-(A7)
00001552  4879 0000 2177          pea       @lab3_8.L
00001556  3F68      
00001558  4879 0B00 2178          pea       _TempString.L
0000155C  04E2      
0000155E  4EB9 0000 2179          jsr       _sprintf
00001562  352A      
00001564  DEFC 000C 2180          add.w     #12,A7
                    2181   ; strcat(WatchPointString[x], TempString);
00001568  4879 0B00 2182          pea       _TempString.L
0000156C  04E2      
0000156E  220D      2183          move.l    A5,D1
00001570  48C2      2184          ext.l     D2
00001572  2F00      2185          move.l    D0,-(A7)
00001574  2002      2186          move.l    D2,D0
00001576  C1FC 0064 2187          muls      #100,D0
0000157A  D280      2188          add.l     D0,D1
0000157C  201F      2189          move.l    (A7)+,D0
0000157E  2F01      2190          move.l    D1,-(A7)
00001580  4EB9 0000 2191          jsr       _strcat
00001584  355E      
00001586  504F      2192          addq.w    #8,A7
00001588  5246      2193          addq.w    #1,D6
0000158A  60A8      2194          bra       DumpRegisters_9
                    2195   DumpRegisters_11:
                    2196   ; }
                    2197   ; strcat(WatchPointString[x], " ");
0000158C  4879 0000 2198          pea       @lab3_33.L
00001590  420E      
00001592  220D      2199          move.l    A5,D1
00001594  48C2      2200          ext.l     D2
00001596  2F00      2201          move.l    D0,-(A7)
00001598  2002      2202          move.l    D2,D0
0000159A  C1FC 0064 2203          muls      #100,D0
0000159E  D280      2204          add.l     D0,D1
000015A0  201F      2205          move.l    (A7)+,D0
000015A2  2F01      2206          move.l    D1,-(A7)
000015A4  4EB9 0000 2207          jsr       _strcat
000015A8  355E      
000015AA  504F      2208          addq.w    #8,A7
000015AC  5443      2209          addq.w    #2,D3
000015AE  6000 FF7A 2210          bra       DumpRegisters_6
                    2211   DumpRegisters_8:
                    2212   ; }
                    2213   ; strcat(WatchPointString[x], "  ");
000015B2  4879 0000 2214          pea       @lab3_9.L
000015B6  3F6E      
000015B8  220D      2215          move.l    A5,D1
000015BA  48C2      2216          ext.l     D2
000015BC  2F00      2217          move.l    D0,-(A7)
000015BE  2002      2218          move.l    D2,D0
000015C0  C1FC 0064 2219          muls      #100,D0
000015C4  D280      2220          add.l     D0,D1
000015C6  201F      2221          move.l    (A7)+,D0
000015C8  2F01      2222          move.l    D1,-(A7)
000015CA  4EB9 0000 2223          jsr       _strcat
000015CE  355E      
000015D0  504F      2224          addq.w    #8,A7
                    2225   ; BytePointer = (char*)(WatchPointAddress[x]);
000015D2  48C2      2226          ext.l     D2
000015D4  2002      2227          move.l    D2,D0
000015D6  E588      2228          lsl.l     #2,D0
000015D8  41F9 0B00 2229          lea       _WatchPointAddress.L,A0
000015DC  0182      
000015DE  2A30 0800 2230          move.l    0(A0,D0.L),D5
                    2231   ; for (j = 0; j < (short)(16); j++)
000015E2  4243      2232          clr.w     D3
                    2233   DumpRegisters_12:
000015E4  0C43 0010 2234          cmp.w     #16,D3
000015E8  6C00 007E 2235          bge       DumpRegisters_14
                    2236   ; {
                    2237   ; c = ((char)(BytePointer[j]) & 0x7f);
000015EC  2045      2238          move.l    D5,A0
000015EE  48C3      2239          ext.l     D3
000015F0  1030 3800 2240          move.b    0(A0,D3.L),D0
000015F4  C03C 007F 2241          and.b     #127,D0
000015F8  1E00      2242          move.b    D0,D7
                    2243   ; if ((c > (char)(0x7f)) || (c < (char)(' ')))
000015FA  0C07 007F 2244          cmp.b     #127,D7
000015FE  6206      2245          bhi.s     DumpRegisters_17
00001600  0C07 0020 2246          cmp.b     #32,D7
00001604  6416      2247          bhs.s     DumpRegisters_15
                    2248   DumpRegisters_17:
                    2249   ; sprintf(TempString, ".");
00001606  4879 0000 2250          pea       @lab3_22.L
0000160A  4112      
0000160C  4879 0B00 2251          pea       _TempString.L
00001610  04E2      
00001612  4EB9 0000 2252          jsr       _sprintf
00001616  352A      
00001618  504F      2253          addq.w    #8,A7
0000161A  6026      2254          bra.s     DumpRegisters_16
                    2255   DumpRegisters_15:
                    2256   ; else
                    2257   ; sprintf(TempString, "%c", BytePointer[j]);
0000161C  2045      2258          move.l    D5,A0
0000161E  48C3      2259          ext.l     D3
00001620  1230 3800 2260          move.b    0(A0,D3.L),D1
00001624  C2BC 0000 2261          and.l     #255,D1
00001628  00FF      
0000162A  2F01      2262          move.l    D1,-(A7)
0000162C  4879 0000 2263          pea       @lab3_34.L
00001630  4210      
00001632  4879 0B00 2264          pea       _TempString.L
00001636  04E2      
00001638  4EB9 0000 2265          jsr       _sprintf
0000163C  352A      
0000163E  DEFC 000C 2266          add.w     #12,A7
                    2267   DumpRegisters_16:
                    2268   ; strcat(WatchPointString[x], TempString);
00001642  4879 0B00 2269          pea       _TempString.L
00001646  04E2      
00001648  220D      2270          move.l    A5,D1
0000164A  48C2      2271          ext.l     D2
0000164C  2F00      2272          move.l    D0,-(A7)
0000164E  2002      2273          move.l    D2,D0
00001650  C1FC 0064 2274          muls      #100,D0
00001654  D280      2275          add.l     D0,D1
00001656  201F      2276          move.l    (A7)+,D0
00001658  2F01      2277          move.l    D1,-(A7)
0000165A  4EB9 0000 2278          jsr       _strcat
0000165E  355E      
00001660  504F      2279          addq.w    #8,A7
00001662  5243      2280          addq.w    #1,D3
00001664  6000 FF7E 2281          bra       DumpRegisters_12
                    2282   DumpRegisters_14:
00001668  6020      2283          bra.s     DumpRegisters_5
                    2284   DumpRegisters_4:
                    2285   ; }
                    2286   ; }
                    2287   ; else
                    2288   ; strcpy(WatchPointString[x], "");
0000166A  4879 0000 2289          pea       @lab3_35.L
0000166E  4214      
00001670  220D      2290          move.l    A5,D1
00001672  48C2      2291          ext.l     D2
00001674  2F00      2292          move.l    D0,-(A7)
00001676  2002      2293          move.l    D2,D0
00001678  C1FC 0064 2294          muls      #100,D0
0000167C  D280      2295          add.l     D0,D1
0000167E  201F      2296          move.l    (A7)+,D0
00001680  2F01      2297          move.l    D1,-(A7)
00001682  4EB9 0000 2298          jsr       _strcpy
00001686  33A4      
00001688  504F      2299          addq.w    #8,A7
                    2300   DumpRegisters_5:
0000168A  5242      2301          addq.w    #1,D2
0000168C  6000 FE36 2302          bra       DumpRegisters_1
                    2303   DumpRegisters_3:
                    2304   ; }
                    2305   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X", d0, a0);
00001690  2F39 0B00 2306          move.l    _a0.L,-(A7)
00001694  0104      
00001696  2F39 0B00 2307          move.l    _d0.L,-(A7)
0000169A  00E4      
0000169C  4879 0000 2308          pea       @lab3_36.L
000016A0  4216      
000016A2  4E93      2309          jsr       (A3)
000016A4  DEFC 000C 2310          add.w     #12,A7
                    2311   ; printf("\r\n D1 = $%08X  A1 = $%08X", d1, a1);
000016A8  2F39 0B00 2312          move.l    _a1.L,-(A7)
000016AC  0108      
000016AE  2F39 0B00 2313          move.l    _d1.L,-(A7)
000016B2  00E8      
000016B4  4879 0000 2314          pea       @lab3_37.L
000016B8  4232      
000016BA  4E93      2315          jsr       (A3)
000016BC  DEFC 000C 2316          add.w     #12,A7
                    2317   ; printf("\r\n D2 = $%08X  A2 = $%08X", d2, a2);
000016C0  2F39 0B00 2318          move.l    _a2.L,-(A7)
000016C4  010C      
000016C6  2F39 0B00 2319          move.l    _d2.L,-(A7)
000016CA  00EC      
000016CC  4879 0000 2320          pea       @lab3_38.L
000016D0  424C      
000016D2  4E93      2321          jsr       (A3)
000016D4  DEFC 000C 2322          add.w     #12,A7
                    2323   ; printf("\r\n D3 = $%08X  A3 = $%08X", d3, a3);
000016D8  2F39 0B00 2324          move.l    _a3.L,-(A7)
000016DC  0110      
000016DE  2F39 0B00 2325          move.l    _d3.L,-(A7)
000016E2  00F0      
000016E4  4879 0000 2326          pea       @lab3_39.L
000016E8  4266      
000016EA  4E93      2327          jsr       (A3)
000016EC  DEFC 000C 2328          add.w     #12,A7
                    2329   ; printf("\r\n D4 = $%08X  A4 = $%08X", d4, a4);
000016F0  2F39 0B00 2330          move.l    _a4.L,-(A7)
000016F4  0114      
000016F6  2F39 0B00 2331          move.l    _d4.L,-(A7)
000016FA  00F4      
000016FC  4879 0000 2332          pea       @lab3_40.L
00001700  4280      
00001702  4E93      2333          jsr       (A3)
00001704  DEFC 000C 2334          add.w     #12,A7
                    2335   ; printf("\r\n D5 = $%08X  A5 = $%08X", d5, a5);
00001708  2F39 0B00 2336          move.l    _a5.L,-(A7)
0000170C  0118      
0000170E  2F39 0B00 2337          move.l    _d5.L,-(A7)
00001712  00F8      
00001714  4879 0000 2338          pea       @lab3_41.L
00001718  429A      
0000171A  4E93      2339          jsr       (A3)
0000171C  DEFC 000C 2340          add.w     #12,A7
                    2341   ; printf("\r\n D6 = $%08X  A6 = $%08X", d6, a6);
00001720  2F39 0B00 2342          move.l    _a6.L,-(A7)
00001724  011C      
00001726  2F39 0B00 2343          move.l    _d6.L,-(A7)
0000172A  00FC      
0000172C  4879 0000 2344          pea       @lab3_42.L
00001730  42B4      
00001732  4E93      2345          jsr       (A3)
00001734  DEFC 000C 2346          add.w     #12,A7
                    2347   ; printf("\r\n D7 = $%08X  A7 = $%08X", d7, ((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP);
00001738  3214      2348          move.w    (A4),D1
0000173A  C27C 2000 2349          and.w     #8192,D1
0000173E  0C41 2000 2350          cmp.w     #8192,D1
00001742  6608      2351          bne.s     DumpRegisters_18
00001744  2239 0B00 2352          move.l    _SSP.L,D1
00001748  0124      
0000174A  6006      2353          bra.s     DumpRegisters_19
                    2354   DumpRegisters_18:
0000174C  2239 0B00 2355          move.l    _USP.L,D1
00001750  0128      
                    2356   DumpRegisters_19:
00001752  2F01      2357          move.l    D1,-(A7)
00001754  2F39 0B00 2358          move.l    _d7.L,-(A7)
00001758  0100      
0000175A  4879 0000 2359          pea       @lab3_43.L
0000175E  42CE      
00001760  4E93      2360          jsr       (A3)
00001762  DEFC 000C 2361          add.w     #12,A7
                    2362   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP);
00001766  2F39 0B00 2363          move.l    _USP.L,-(A7)
0000176A  0128      
0000176C  4879 0000 2364          pea       @lab3_44.L
00001770  42E8      
00001772  4E93      2365          jsr       (A3)
00001774  504F      2366          addq.w    #8,A7
                    2367   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP);
00001776  2F39 0B00 2368          move.l    _SSP.L,-(A7)
0000177A  0124      
0000177C  4879 0000 2369          pea       @lab3_45.L
00001780  4306      
00001782  4E93      2370          jsr       (A3)
00001784  504F      2371          addq.w    #8,A7
                    2372   ; printf("\r\n SR = $%04X   ", SR);
00001786  3214      2373          move.w    (A4),D1
00001788  C2BC 0000 2374          and.l     #65535,D1
0000178C  FFFF      
0000178E  2F01      2375          move.l    D1,-(A7)
00001790  4879 0000 2376          pea       @lab3_46.L
00001794  4328      
00001796  4E93      2377          jsr       (A3)
00001798  504F      2378          addq.w    #8,A7
                    2379   ; // display the status word in characters etc.
                    2380   ; printf("   [");
0000179A  4879 0000 2381          pea       @lab3_47.L
0000179E  433A      
000017A0  4E93      2382          jsr       (A3)
000017A2  584F      2383          addq.w    #4,A7
                    2384   ; if ((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T'); else putchar('-');      // Trace bit(bit 15)
000017A4  3014      2385          move.w    (A4),D0
000017A6  C07C 8000 2386          and.w     #32768,D0
000017AA  0C40 8000 2387          cmp.w     #32768,D0
000017AE  660A      2388          bne.s     DumpRegisters_20
000017B0  4878 0054 2389          pea       84
000017B4  4E92      2390          jsr       (A2)
000017B6  584F      2391          addq.w    #4,A7
000017B8  6008      2392          bra.s     DumpRegisters_21
                    2393   DumpRegisters_20:
000017BA  4878 002D 2394          pea       45
000017BE  4E92      2395          jsr       (A2)
000017C0  584F      2396          addq.w    #4,A7
                    2397   DumpRegisters_21:
                    2398   ; if ((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S'); else putchar('U');      // supervisor bit  (bit 13)
000017C2  3014      2399          move.w    (A4),D0
000017C4  C07C 2000 2400          and.w     #8192,D0
000017C8  0C40 2000 2401          cmp.w     #8192,D0
000017CC  660A      2402          bne.s     DumpRegisters_22
000017CE  4878 0053 2403          pea       83
000017D2  4E92      2404          jsr       (A2)
000017D4  584F      2405          addq.w    #4,A7
000017D6  6008      2406          bra.s     DumpRegisters_23
                    2407   DumpRegisters_22:
000017D8  4878 0055 2408          pea       85
000017DC  4E92      2409          jsr       (A2)
000017DE  584F      2410          addq.w    #4,A7
                    2411   DumpRegisters_23:
                    2412   ; if ((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1'); else putchar('0');      // IRQ2 Bit (bit 10)
000017E0  3014      2413          move.w    (A4),D0
000017E2  C07C 0400 2414          and.w     #1024,D0
000017E6  0C40 0400 2415          cmp.w     #1024,D0
000017EA  660A      2416          bne.s     DumpRegisters_24
000017EC  4878 0031 2417          pea       49
000017F0  4E92      2418          jsr       (A2)
000017F2  584F      2419          addq.w    #4,A7
000017F4  6008      2420          bra.s     DumpRegisters_25
                    2421   DumpRegisters_24:
000017F6  4878 0030 2422          pea       48
000017FA  4E92      2423          jsr       (A2)
000017FC  584F      2424          addq.w    #4,A7
                    2425   DumpRegisters_25:
                    2426   ; if ((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1'); else putchar('0');      // IRQ1 Bit (bit 9)
000017FE  3014      2427          move.w    (A4),D0
00001800  C07C 0200 2428          and.w     #512,D0
00001804  0C40 0200 2429          cmp.w     #512,D0
00001808  660A      2430          bne.s     DumpRegisters_26
0000180A  4878 0031 2431          pea       49
0000180E  4E92      2432          jsr       (A2)
00001810  584F      2433          addq.w    #4,A7
00001812  6008      2434          bra.s     DumpRegisters_27
                    2435   DumpRegisters_26:
00001814  4878 0030 2436          pea       48
00001818  4E92      2437          jsr       (A2)
0000181A  584F      2438          addq.w    #4,A7
                    2439   DumpRegisters_27:
                    2440   ; if ((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1'); else putchar('0');      // IRQ0 Bit (bit 8)
0000181C  3014      2441          move.w    (A4),D0
0000181E  C07C 0100 2442          and.w     #256,D0
00001822  0C40 0100 2443          cmp.w     #256,D0
00001826  660A      2444          bne.s     DumpRegisters_28
00001828  4878 0031 2445          pea       49
0000182C  4E92      2446          jsr       (A2)
0000182E  584F      2447          addq.w    #4,A7
00001830  6008      2448          bra.s     DumpRegisters_29
                    2449   DumpRegisters_28:
00001832  4878 0030 2450          pea       48
00001836  4E92      2451          jsr       (A2)
00001838  584F      2452          addq.w    #4,A7
                    2453   DumpRegisters_29:
                    2454   ; if ((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X'); else putchar('-');      // X Bit (bit 4)
0000183A  3014      2455          move.w    (A4),D0
0000183C  C07C 0010 2456          and.w     #16,D0
00001840  0C40 0010 2457          cmp.w     #16,D0
00001844  660A      2458          bne.s     DumpRegisters_30
00001846  4878 0058 2459          pea       88
0000184A  4E92      2460          jsr       (A2)
0000184C  584F      2461          addq.w    #4,A7
0000184E  6008      2462          bra.s     DumpRegisters_31
                    2463   DumpRegisters_30:
00001850  4878 002D 2464          pea       45
00001854  4E92      2465          jsr       (A2)
00001856  584F      2466          addq.w    #4,A7
                    2467   DumpRegisters_31:
                    2468   ; if ((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N'); else putchar('-');      // N Bit (bit 3)
00001858  3014      2469          move.w    (A4),D0
0000185A  C07C 0008 2470          and.w     #8,D0
0000185E  0C40 0008 2471          cmp.w     #8,D0
00001862  660A      2472          bne.s     DumpRegisters_32
00001864  4878 004E 2473          pea       78
00001868  4E92      2474          jsr       (A2)
0000186A  584F      2475          addq.w    #4,A7
0000186C  6008      2476          bra.s     DumpRegisters_33
                    2477   DumpRegisters_32:
0000186E  4878 002D 2478          pea       45
00001872  4E92      2479          jsr       (A2)
00001874  584F      2480          addq.w    #4,A7
                    2481   DumpRegisters_33:
                    2482   ; if ((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z'); else putchar('-');      // Z Bit (bit 2)
00001876  3014      2483          move.w    (A4),D0
00001878  C07C 0004 2484          and.w     #4,D0
0000187C  0C40 0004 2485          cmp.w     #4,D0
00001880  660A      2486          bne.s     DumpRegisters_34
00001882  4878 005A 2487          pea       90
00001886  4E92      2488          jsr       (A2)
00001888  584F      2489          addq.w    #4,A7
0000188A  6008      2490          bra.s     DumpRegisters_35
                    2491   DumpRegisters_34:
0000188C  4878 002D 2492          pea       45
00001890  4E92      2493          jsr       (A2)
00001892  584F      2494          addq.w    #4,A7
                    2495   DumpRegisters_35:
                    2496   ; if ((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V'); else putchar('-');      // V Bit (bit 1)
00001894  3014      2497          move.w    (A4),D0
00001896  C07C 0002 2498          and.w     #2,D0
0000189A  0C40 0002 2499          cmp.w     #2,D0
0000189E  660A      2500          bne.s     DumpRegisters_36
000018A0  4878 0056 2501          pea       86
000018A4  4E92      2502          jsr       (A2)
000018A6  584F      2503          addq.w    #4,A7
000018A8  6008      2504          bra.s     DumpRegisters_37
                    2505   DumpRegisters_36:
000018AA  4878 002D 2506          pea       45
000018AE  4E92      2507          jsr       (A2)
000018B0  584F      2508          addq.w    #4,A7
                    2509   DumpRegisters_37:
                    2510   ; if ((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C'); else putchar('-');      // C Bit (bit 0)
000018B2  3014      2511          move.w    (A4),D0
000018B4  C07C 0001 2512          and.w     #1,D0
000018B8  0C40 0001 2513          cmp.w     #1,D0
000018BC  660A      2514          bne.s     DumpRegisters_38
000018BE  4878 0043 2515          pea       67
000018C2  4E92      2516          jsr       (A2)
000018C4  584F      2517          addq.w    #4,A7
000018C6  6008      2518          bra.s     DumpRegisters_39
                    2519   DumpRegisters_38:
000018C8  4878 002D 2520          pea       45
000018CC  4E92      2521          jsr       (A2)
000018CE  584F      2522          addq.w    #4,A7
                    2523   DumpRegisters_39:
                    2524   ; putchar(']');
000018D0  4878 005D 2525          pea       93
000018D4  4E92      2526          jsr       (A2)
000018D6  584F      2527          addq.w    #4,A7
                    2528   ; printf("\r\n PC = $%08X  ", PC);
000018D8  2F39 0B00 2529          move.l    _PC.L,-(A7)
000018DC  0120      
000018DE  4879 0000 2530          pea       @lab3_48.L
000018E2  4340      
000018E4  4E93      2531          jsr       (A3)
000018E6  504F      2532          addq.w    #8,A7
                    2533   ; if (*(unsigned short int*)(PC) == 0x4e4e)
000018E8  2039 0B00 2534          move.l    _PC.L,D0
000018EC  0120      
000018EE  2040      2535          move.l    D0,A0
000018F0  3010      2536          move.w    (A0),D0
000018F2  0C40 4E4E 2537          cmp.w     #20046,D0
000018F6  660A      2538          bne.s     DumpRegisters_40
                    2539   ; printf("[@ BREAKPOINT]");
000018F8  4879 0000 2540          pea       @lab3_49.L
000018FC  4350      
000018FE  4E93      2541          jsr       (A3)
00001900  584F      2542          addq.w    #4,A7
                    2543   DumpRegisters_40:
                    2544   ; printf("\r\n");
00001902  4879 0000 2545          pea       @lab3_1.L
00001906  3EF0      
00001908  4E93      2546          jsr       (A3)
0000190A  584F      2547          addq.w    #4,A7
                    2548   ; for (i = 0; i < 8; i++) {
0000190C  4244      2549          clr.w     D4
                    2550   DumpRegisters_42:
0000190E  0C44 0008 2551          cmp.w     #8,D4
00001912  6C00 0040 2552          bge       DumpRegisters_44
                    2553   ; if (WatchPointSetOrCleared[i] == 1)
00001916  48C4      2554          ext.l     D4
00001918  2004      2555          move.l    D4,D0
0000191A  E588      2556          lsl.l     #2,D0
0000191C  41F9 0B00 2557          lea       _WatchPointSetOrCleared.L,A0
00001920  01A2      
00001922  2030 0800 2558          move.l    0(A0,D0.L),D0
00001926  0C80 0000 2559          cmp.l     #1,D0
0000192A  0001      
0000192C  6622      2560          bne.s     DumpRegisters_45
                    2561   ; printf("\r\nWP%d = %s", i, WatchPointString[i]);
0000192E  220D      2562          move.l    A5,D1
00001930  48C4      2563          ext.l     D4
00001932  2F00      2564          move.l    D0,-(A7)
00001934  2004      2565          move.l    D4,D0
00001936  C1FC 0064 2566          muls      #100,D0
0000193A  D280      2567          add.l     D0,D1
0000193C  201F      2568          move.l    (A7)+,D0
0000193E  2F01      2569          move.l    D1,-(A7)
00001940  48C4      2570          ext.l     D4
00001942  2F04      2571          move.l    D4,-(A7)
00001944  4879 0000 2572          pea       @lab3_50.L
00001948  4360      
0000194A  4E93      2573          jsr       (A3)
0000194C  DEFC 000C 2574          add.w     #12,A7
                    2575   DumpRegisters_45:
00001950  5244      2576          addq.w    #1,D4
00001952  60BA      2577          bra       DumpRegisters_42
                    2578   DumpRegisters_44:
00001954  4CDF 3CFC 2579          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001958  4E75      2580          rts
                    2581   ; }
                    2582   ; }
                    2583   ; // Trace Exception Handler
                    2584   ; void DumpRegistersandPause(void)
                    2585   ; {
                    2586   _DumpRegistersandPause:
0000195A  2F0A      2587          move.l    A2,-(A7)
0000195C  45F9 0000 2588          lea       _printf.L,A2
00001960  35A0      
                    2589   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]");
00001962  4879 0000 2590          pea       @lab3_51.L
00001966  436C      
00001968  4E92      2591          jsr       (A2)
0000196A  584F      2592          addq.w    #4,A7
                    2593   ; printf("\r\nBreak Points :[Disabled]");
0000196C  4879 0000 2594          pea       @lab3_52.L
00001970  438C      
00001972  4E92      2595          jsr       (A2)
00001974  584F      2596          addq.w    #4,A7
                    2597   ; DumpRegisters();
00001976  4EB8 14A6 2598          jsr       _DumpRegisters
                    2599   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000197A  4879 0000 2600          pea       @lab3_53.L
0000197E  43A8      
00001980  4E92      2601          jsr       (A2)
00001982  584F      2602          addq.w    #4,A7
                    2603   ; printf("\r\nPress <ESC> to Resume Program");
00001984  4879 0000 2604          pea       @lab3_54.L
00001988  43D4      
0000198A  4E92      2605          jsr       (A2)
0000198C  584F      2606          addq.w    #4,A7
                    2607   ; menu();
0000198E  4EB9 0000 2608          jsr       _menu
00001992  253E      
00001994  245F      2609          move.l    (A7)+,A2
00001996  4E75      2610          rts
                    2611   ; }
                    2612   ; void ChangeRegisters(void)
                    2613   ; {
                    2614   _ChangeRegisters:
00001998  4E56 FFFC 2615          link      A6,#-4
0000199C  48E7 303C 2616          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000019A0  45F9 0000 2617          lea       _printf.L,A2
000019A4  35A0      
000019A6  47EE FFFC 2618          lea       -4(A6),A3
000019AA  49F8 0CA4 2619          lea       _Get8HexDigits.L,A4
000019AE  4BF8 0B68 2620          lea       __getch.L,A5
                    2621   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2622   ; int reg_val;
                    2623   ; char c, reg[3];
                    2624   ; reg[0] = tolower(_getch());
000019B2  2F00      2625          move.l    D0,-(A7)
000019B4  4E95      2626          jsr       (A5)
000019B6  2200      2627          move.l    D0,D1
000019B8  201F      2628          move.l    (A7)+,D0
000019BA  2F01      2629          move.l    D1,-(A7)
000019BC  4EB9 0000 2630          jsr       _tolower
000019C0  34FE      
000019C2  584F      2631          addq.w    #4,A7
000019C4  1680      2632          move.b    D0,(A3)
                    2633   ; reg[1] = c = tolower(_getch());
000019C6  2F00      2634          move.l    D0,-(A7)
000019C8  4E95      2635          jsr       (A5)
000019CA  2200      2636          move.l    D0,D1
000019CC  201F      2637          move.l    (A7)+,D0
000019CE  2F01      2638          move.l    D1,-(A7)
000019D0  4EB9 0000 2639          jsr       _tolower
000019D4  34FE      
000019D6  584F      2640          addq.w    #4,A7
000019D8  1400      2641          move.b    D0,D2
000019DA  1740 0001 2642          move.b    D0,1(A3)
                    2643   ; if (reg[0] == (char)('d')) {    // change data register
000019DE  1013      2644          move.b    (A3),D0
000019E0  0C00 0064 2645          cmp.b     #100,D0
000019E4  6600 00AE 2646          bne       ChangeRegisters_1
                    2647   ; if ((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000019E8  102B 0001 2648          move.b    1(A3),D0
000019EC  0C00 0037 2649          cmp.b     #55,D0
000019F0  6E0A      2650          bgt.s     ChangeRegisters_5
000019F2  102B 0001 2651          move.b    1(A3),D0
000019F6  0C00 0030 2652          cmp.b     #48,D0
000019FA  6C0E      2653          bge.s     ChangeRegisters_3
                    2654   ChangeRegisters_5:
                    2655   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n");
000019FC  4879 0000 2656          pea       @lab3_55.L
00001A00  43F4      
00001A02  4E92      2657          jsr       (A2)
00001A04  584F      2658          addq.w    #4,A7
                    2659   ; return;
00001A06  6000 0244 2660          bra       ChangeRegisters_6
                    2661   ChangeRegisters_3:
                    2662   ; }
                    2663   ; else {
                    2664   ; printf("\r\nD%c = ", c);
00001A0A  4882      2665          ext.w     D2
00001A0C  48C2      2666          ext.l     D2
00001A0E  2F02      2667          move.l    D2,-(A7)
00001A10  4879 0000 2668          pea       @lab3_56.L
00001A14  4420      
00001A16  4E92      2669          jsr       (A2)
00001A18  504F      2670          addq.w    #8,A7
                    2671   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001A1A  42A7      2672          clr.l     -(A7)
00001A1C  4E94      2673          jsr       (A4)
00001A1E  584F      2674          addq.w    #4,A7
00001A20  2600      2675          move.l    D0,D3
                    2676   ; }
                    2677   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2678   ; if (c == (char)('0'))
00001A22  0C02 0030 2679          cmp.b     #48,D2
00001A26  660A      2680          bne.s     ChangeRegisters_7
                    2681   ; d0 = reg_val;
00001A28  23C3 0B00 2682          move.l    D3,_d0.L
00001A2C  00E4      
00001A2E  6000 0060 2683          bra       ChangeRegisters_20
                    2684   ChangeRegisters_7:
                    2685   ; else if (c == (char)('1'))
00001A32  0C02 0031 2686          cmp.b     #49,D2
00001A36  660A      2687          bne.s     ChangeRegisters_9
                    2688   ; d1 = reg_val;
00001A38  23C3 0B00 2689          move.l    D3,_d1.L
00001A3C  00E8      
00001A3E  6000 0050 2690          bra       ChangeRegisters_20
                    2691   ChangeRegisters_9:
                    2692   ; else if (c == (char)('2'))
00001A42  0C02 0032 2693          cmp.b     #50,D2
00001A46  660A      2694          bne.s     ChangeRegisters_11
                    2695   ; d2 = reg_val;
00001A48  23C3 0B00 2696          move.l    D3,_d2.L
00001A4C  00EC      
00001A4E  6000 0040 2697          bra       ChangeRegisters_20
                    2698   ChangeRegisters_11:
                    2699   ; else if (c == (char)('3'))
00001A52  0C02 0033 2700          cmp.b     #51,D2
00001A56  6608      2701          bne.s     ChangeRegisters_13
                    2702   ; d3 = reg_val;
00001A58  23C3 0B00 2703          move.l    D3,_d3.L
00001A5C  00F0      
00001A5E  6030      2704          bra.s     ChangeRegisters_20
                    2705   ChangeRegisters_13:
                    2706   ; else if (c == (char)('4'))
00001A60  0C02 0034 2707          cmp.b     #52,D2
00001A64  6608      2708          bne.s     ChangeRegisters_15
                    2709   ; d4 = reg_val;
00001A66  23C3 0B00 2710          move.l    D3,_d4.L
00001A6A  00F4      
00001A6C  6022      2711          bra.s     ChangeRegisters_20
                    2712   ChangeRegisters_15:
                    2713   ; else if (c == (char)('5'))
00001A6E  0C02 0035 2714          cmp.b     #53,D2
00001A72  6608      2715          bne.s     ChangeRegisters_17
                    2716   ; d5 = reg_val;
00001A74  23C3 0B00 2717          move.l    D3,_d5.L
00001A78  00F8      
00001A7A  6014      2718          bra.s     ChangeRegisters_20
                    2719   ChangeRegisters_17:
                    2720   ; else if (c == (char)('6'))
00001A7C  0C02 0036 2721          cmp.b     #54,D2
00001A80  6608      2722          bne.s     ChangeRegisters_19
                    2723   ; d6 = reg_val;
00001A82  23C3 0B00 2724          move.l    D3,_d6.L
00001A86  00FC      
00001A88  6006      2725          bra.s     ChangeRegisters_20
                    2726   ChangeRegisters_19:
                    2727   ; else
                    2728   ; d7 = reg_val;
00001A8A  23C3 0B00 2729          move.l    D3,_d7.L
00001A8E  0100      
                    2730   ChangeRegisters_20:
00001A90  6000 01B6 2731          bra       ChangeRegisters_51
                    2732   ChangeRegisters_1:
                    2733   ; }
                    2734   ; else if (reg[0] == (char)('a')) {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001A94  1013      2735          move.b    (A3),D0
00001A96  0C00 0061 2736          cmp.b     #97,D0
00001A9A  6600 00A6 2737          bne       ChangeRegisters_21
                    2738   ; if ((c > (char)('7')) || (c < (char)('0'))) {
00001A9E  0C02 0037 2739          cmp.b     #55,D2
00001AA2  6E06      2740          bgt.s     ChangeRegisters_25
00001AA4  0C02 0030 2741          cmp.b     #48,D2
00001AA8  6C0E      2742          bge.s     ChangeRegisters_23
                    2743   ChangeRegisters_25:
                    2744   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n");
00001AAA  4879 0000 2745          pea       @lab3_57.L
00001AAE  442A      
00001AB0  4E92      2746          jsr       (A2)
00001AB2  584F      2747          addq.w    #4,A7
                    2748   ; return;
00001AB4  6000 0196 2749          bra       ChangeRegisters_6
                    2750   ChangeRegisters_23:
                    2751   ; }
                    2752   ; else {
                    2753   ; printf("\r\nA%c = ", c);
00001AB8  4882      2754          ext.w     D2
00001ABA  48C2      2755          ext.l     D2
00001ABC  2F02      2756          move.l    D2,-(A7)
00001ABE  4879 0000 2757          pea       @lab3_58.L
00001AC2  4458      
00001AC4  4E92      2758          jsr       (A2)
00001AC6  504F      2759          addq.w    #8,A7
                    2760   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001AC8  42A7      2761          clr.l     -(A7)
00001ACA  4E94      2762          jsr       (A4)
00001ACC  584F      2763          addq.w    #4,A7
00001ACE  2600      2764          move.l    D0,D3
                    2765   ; }
                    2766   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2767   ; if (c == (char)('0'))
00001AD0  0C02 0030 2768          cmp.b     #48,D2
00001AD4  660A      2769          bne.s     ChangeRegisters_26
                    2770   ; a0 = reg_val;
00001AD6  23C3 0B00 2771          move.l    D3,_a0.L
00001ADA  0104      
00001ADC  6000 0060 2772          bra       ChangeRegisters_39
                    2773   ChangeRegisters_26:
                    2774   ; else if (c == (char)('1'))
00001AE0  0C02 0031 2775          cmp.b     #49,D2
00001AE4  660A      2776          bne.s     ChangeRegisters_28
                    2777   ; a1 = reg_val;
00001AE6  23C3 0B00 2778          move.l    D3,_a1.L
00001AEA  0108      
00001AEC  6000 0050 2779          bra       ChangeRegisters_39
                    2780   ChangeRegisters_28:
                    2781   ; else if (c == (char)('2'))
00001AF0  0C02 0032 2782          cmp.b     #50,D2
00001AF4  660A      2783          bne.s     ChangeRegisters_30
                    2784   ; a2 = reg_val;
00001AF6  23C3 0B00 2785          move.l    D3,_a2.L
00001AFA  010C      
00001AFC  6000 0040 2786          bra       ChangeRegisters_39
                    2787   ChangeRegisters_30:
                    2788   ; else if (c == (char)('3'))
00001B00  0C02 0033 2789          cmp.b     #51,D2
00001B04  6608      2790          bne.s     ChangeRegisters_32
                    2791   ; a3 = reg_val;
00001B06  23C3 0B00 2792          move.l    D3,_a3.L
00001B0A  0110      
00001B0C  6030      2793          bra.s     ChangeRegisters_39
                    2794   ChangeRegisters_32:
                    2795   ; else if (c == (char)('4'))
00001B0E  0C02 0034 2796          cmp.b     #52,D2
00001B12  6608      2797          bne.s     ChangeRegisters_34
                    2798   ; a4 = reg_val;
00001B14  23C3 0B00 2799          move.l    D3,_a4.L
00001B18  0114      
00001B1A  6022      2800          bra.s     ChangeRegisters_39
                    2801   ChangeRegisters_34:
                    2802   ; else if (c == (char)('5'))
00001B1C  0C02 0035 2803          cmp.b     #53,D2
00001B20  6608      2804          bne.s     ChangeRegisters_36
                    2805   ; a5 = reg_val;
00001B22  23C3 0B00 2806          move.l    D3,_a5.L
00001B26  0118      
00001B28  6014      2807          bra.s     ChangeRegisters_39
                    2808   ChangeRegisters_36:
                    2809   ; else if (c == (char)('6'))
00001B2A  0C02 0036 2810          cmp.b     #54,D2
00001B2E  6608      2811          bne.s     ChangeRegisters_38
                    2812   ; a6 = reg_val;
00001B30  23C3 0B00 2813          move.l    D3,_a6.L
00001B34  011C      
00001B36  6006      2814          bra.s     ChangeRegisters_39
                    2815   ChangeRegisters_38:
                    2816   ; else
                    2817   ; USP = reg_val;
00001B38  23C3 0B00 2818          move.l    D3,_USP.L
00001B3C  0128      
                    2819   ChangeRegisters_39:
00001B3E  6000 0108 2820          bra       ChangeRegisters_51
                    2821   ChangeRegisters_21:
                    2822   ; }
                    2823   ; else if ((reg[0] == (char)('u')) && (c == (char)('s'))) {
00001B42  1013      2824          move.b    (A3),D0
00001B44  0C00 0075 2825          cmp.b     #117,D0
00001B48  6600 004E 2826          bne       ChangeRegisters_40
00001B4C  0C02 0073 2827          cmp.b     #115,D2
00001B50  6600 0046 2828          bne       ChangeRegisters_40
                    2829   ; if (tolower(_getch()) == 'p') {    // change user stack pointer
00001B54  2F00      2830          move.l    D0,-(A7)
00001B56  4E95      2831          jsr       (A5)
00001B58  2200      2832          move.l    D0,D1
00001B5A  201F      2833          move.l    (A7)+,D0
00001B5C  2F01      2834          move.l    D1,-(A7)
00001B5E  4EB9 0000 2835          jsr       _tolower
00001B62  34FE      
00001B64  584F      2836          addq.w    #4,A7
00001B66  0C80 0000 2837          cmp.l     #112,D0
00001B6A  0070      
00001B6C  6618      2838          bne.s     ChangeRegisters_42
                    2839   ; printf("\r\nUser SP = ");
00001B6E  4879 0000 2840          pea       @lab3_59.L
00001B72  4462      
00001B74  4E92      2841          jsr       (A2)
00001B76  584F      2842          addq.w    #4,A7
                    2843   ; USP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001B78  42A7      2844          clr.l     -(A7)
00001B7A  4E94      2845          jsr       (A4)
00001B7C  584F      2846          addq.w    #4,A7
00001B7E  23C0 0B00 2847          move.l    D0,_USP.L
00001B82  0128      
00001B84  600E      2848          bra.s     ChangeRegisters_43
                    2849   ChangeRegisters_42:
                    2850   ; }
                    2851   ; else {
                    2852   ; printf("\r\nIllegal Register....");
00001B86  4879 0000 2853          pea       @lab3_60.L
00001B8A  4470      
00001B8C  4E92      2854          jsr       (A2)
00001B8E  584F      2855          addq.w    #4,A7
                    2856   ; return;
00001B90  6000 00BA 2857          bra       ChangeRegisters_6
                    2858   ChangeRegisters_43:
00001B94  6000 00B2 2859          bra       ChangeRegisters_51
                    2860   ChangeRegisters_40:
                    2861   ; }
                    2862   ; }
                    2863   ; else if ((reg[0] == (char)('s')) && (c == (char)('s'))) {
00001B98  1013      2864          move.b    (A3),D0
00001B9A  0C00 0073 2865          cmp.b     #115,D0
00001B9E  6600 004E 2866          bne       ChangeRegisters_44
00001BA2  0C02 0073 2867          cmp.b     #115,D2
00001BA6  6600 0046 2868          bne       ChangeRegisters_44
                    2869   ; if (tolower(_getch()) == 'p') {    // change system stack pointer
00001BAA  2F00      2870          move.l    D0,-(A7)
00001BAC  4E95      2871          jsr       (A5)
00001BAE  2200      2872          move.l    D0,D1
00001BB0  201F      2873          move.l    (A7)+,D0
00001BB2  2F01      2874          move.l    D1,-(A7)
00001BB4  4EB9 0000 2875          jsr       _tolower
00001BB8  34FE      
00001BBA  584F      2876          addq.w    #4,A7
00001BBC  0C80 0000 2877          cmp.l     #112,D0
00001BC0  0070      
00001BC2  6618      2878          bne.s     ChangeRegisters_46
                    2879   ; printf("\r\nSystem SP = ");
00001BC4  4879 0000 2880          pea       @lab3_61.L
00001BC8  4488      
00001BCA  4E92      2881          jsr       (A2)
00001BCC  584F      2882          addq.w    #4,A7
                    2883   ; SSP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001BCE  42A7      2884          clr.l     -(A7)
00001BD0  4E94      2885          jsr       (A4)
00001BD2  584F      2886          addq.w    #4,A7
00001BD4  23C0 0B00 2887          move.l    D0,_SSP.L
00001BD8  0124      
00001BDA  600E      2888          bra.s     ChangeRegisters_47
                    2889   ChangeRegisters_46:
                    2890   ; }
                    2891   ; else {
                    2892   ; printf("\r\nIllegal Register....");
00001BDC  4879 0000 2893          pea       @lab3_60.L
00001BE0  4470      
00001BE2  4E92      2894          jsr       (A2)
00001BE4  584F      2895          addq.w    #4,A7
                    2896   ; return;
00001BE6  6000 0064 2897          bra       ChangeRegisters_6
                    2898   ChangeRegisters_47:
00001BEA  6000 005C 2899          bra       ChangeRegisters_51
                    2900   ChangeRegisters_44:
                    2901   ; }
                    2902   ; }
                    2903   ; else if ((reg[0] == (char)('p')) && (c == (char)('c'))) {    // change program counter
00001BEE  1013      2904          move.b    (A3),D0
00001BF0  0C00 0070 2905          cmp.b     #112,D0
00001BF4  6620      2906          bne.s     ChangeRegisters_48
00001BF6  0C02 0063 2907          cmp.b     #99,D2
00001BFA  661A      2908          bne.s     ChangeRegisters_48
                    2909   ; printf("\r\nPC = ");
00001BFC  4879 0000 2910          pea       @lab3_62.L
00001C00  4498      
00001C02  4E92      2911          jsr       (A2)
00001C04  584F      2912          addq.w    #4,A7
                    2913   ; PC = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001C06  42A7      2914          clr.l     -(A7)
00001C08  4E94      2915          jsr       (A4)
00001C0A  584F      2916          addq.w    #4,A7
00001C0C  23C0 0B00 2917          move.l    D0,_PC.L
00001C10  0120      
00001C12  6000 0034 2918          bra       ChangeRegisters_51
                    2919   ChangeRegisters_48:
                    2920   ; }
                    2921   ; else if ((reg[0] == (char)('s')) && (c == (char)('r'))) {    // change status register
00001C16  1013      2922          move.b    (A3),D0
00001C18  0C00 0073 2923          cmp.b     #115,D0
00001C1C  6620      2924          bne.s     ChangeRegisters_50
00001C1E  0C02 0072 2925          cmp.b     #114,D2
00001C22  661A      2926          bne.s     ChangeRegisters_50
                    2927   ; printf("\r\nSR = ");
00001C24  4879 0000 2928          pea       @lab3_63.L
00001C28  44A0      
00001C2A  4E92      2929          jsr       (A2)
00001C2C  584F      2930          addq.w    #4,A7
                    2931   ; SR = Get4HexDigits(0);    // read 16 bit value from user keyboard
00001C2E  42A7      2932          clr.l     -(A7)
00001C30  4EB8 0C58 2933          jsr       _Get4HexDigits
00001C34  584F      2934          addq.w    #4,A7
00001C36  33C0 0B00 2935          move.w    D0,_SR.L
00001C3A  012C      
00001C3C  600A      2936          bra.s     ChangeRegisters_51
                    2937   ChangeRegisters_50:
                    2938   ; }
                    2939   ; else
                    2940   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n");
00001C3E  4879 0000 2941          pea       @lab3_64.L
00001C42  44A8      
00001C44  4E92      2942          jsr       (A2)
00001C46  584F      2943          addq.w    #4,A7
                    2944   ChangeRegisters_51:
                    2945   ; DumpRegisters();
00001C48  4EB8 14A6 2946          jsr       _DumpRegisters
                    2947   ChangeRegisters_6:
00001C4C  4CDF 3C0C 2948          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001C50  4E5E      2949          unlk      A6
00001C52  4E75      2950          rts
                    2951   ; }
                    2952   ; void BreakPointDisplay(void)
                    2953   ; {
                    2954   _BreakPointDisplay:
00001C54  48E7 3030 2955          movem.l   D2/D3/A2/A3,-(A7)
00001C58  45F9 0000 2956          lea       _printf.L,A2
00001C5C  35A0      
00001C5E  47F9 0B00 2957          lea       _BreakPointAddress.L,A3
00001C62  012E      
                    2958   ; int i, BreakPointsSet = 0;
00001C64  4283      2959          clr.l     D3
                    2960   ; // any break points  set
                    2961   ; for (i = 0; i < 8; i++) {
00001C66  4282      2962          clr.l     D2
                    2963   BreakPointDisplay_1:
00001C68  0C82 0000 2964          cmp.l     #8,D2
00001C6C  0008      
00001C6E  6C1C      2965          bge.s     BreakPointDisplay_3
                    2966   ; if (BreakPointSetOrCleared[i] == 1)
00001C70  2002      2967          move.l    D2,D0
00001C72  E588      2968          lsl.l     #2,D0
00001C74  41F9 0B00 2969          lea       _BreakPointSetOrCleared.L,A0
00001C78  015E      
00001C7A  2030 0800 2970          move.l    0(A0,D0.L),D0
00001C7E  0C80 0000 2971          cmp.l     #1,D0
00001C82  0001      
00001C84  6602      2972          bne.s     BreakPointDisplay_4
                    2973   ; BreakPointsSet = 1;
00001C86  7601      2974          moveq     #1,D3
                    2975   BreakPointDisplay_4:
00001C88  5282      2976          addq.l    #1,D2
00001C8A  60DC      2977          bra       BreakPointDisplay_1
                    2978   BreakPointDisplay_3:
                    2979   ; }
                    2980   ; if (BreakPointsSet == 1) {
00001C8C  0C83 0000 2981          cmp.l     #1,D3
00001C90  0001      
00001C92  6616      2982          bne.s     BreakPointDisplay_6
                    2983   ; printf("\r\n\r\nNum     Address      Instruction");
00001C94  4879 0000 2984          pea       @lab3_65.L
00001C98  44E4      
00001C9A  4E92      2985          jsr       (A2)
00001C9C  584F      2986          addq.w    #4,A7
                    2987   ; printf("\r\n---     ---------    -----------");
00001C9E  4879 0000 2988          pea       @lab3_66.L
00001CA2  450A      
00001CA4  4E92      2989          jsr       (A2)
00001CA6  584F      2990          addq.w    #4,A7
00001CA8  600A      2991          bra.s     BreakPointDisplay_7
                    2992   BreakPointDisplay_6:
                    2993   ; }
                    2994   ; else
                    2995   ; printf("\r\nNo BreakPoints Set");
00001CAA  4879 0000 2996          pea       @lab3_67.L
00001CAE  452E      
00001CB0  4E92      2997          jsr       (A2)
00001CB2  584F      2998          addq.w    #4,A7
                    2999   BreakPointDisplay_7:
                    3000   ; for (i = 0; i < 8; i++) {
00001CB4  4282      3001          clr.l     D2
                    3002   BreakPointDisplay_8:
00001CB6  0C82 0000 3003          cmp.l     #8,D2
00001CBA  0008      
00001CBC  6C00 005A 3004          bge       BreakPointDisplay_10
                    3005   ; // put opcode back, then put break point back
                    3006   ; if (BreakPointSetOrCleared[i] == 1) {
00001CC0  2002      3007          move.l    D2,D0
00001CC2  E588      3008          lsl.l     #2,D0
00001CC4  41F9 0B00 3009          lea       _BreakPointSetOrCleared.L,A0
00001CC8  015E      
00001CCA  2030 0800 3010          move.l    0(A0,D0.L),D0
00001CCE  0C80 0000 3011          cmp.l     #1,D0
00001CD2  0001      
00001CD4  6600 003E 3012          bne       BreakPointDisplay_11
                    3013   ; *(unsigned short int*)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001CD8  2002      3014          move.l    D2,D0
00001CDA  E388      3015          lsl.l     #1,D0
00001CDC  41F9 0B00 3016          lea       _BreakPointInstruction.L,A0
00001CE0  014E      
00001CE2  2202      3017          move.l    D2,D1
00001CE4  E589      3018          lsl.l     #2,D1
00001CE6  2233 1800 3019          move.l    0(A3,D1.L),D1
00001CEA  2241      3020          move.l    D1,A1
00001CEC  32B0 0800 3021          move.w    0(A0,D0.L),(A1)
                    3022   ; *(unsigned short int*)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e);
00001CF0  2002      3023          move.l    D2,D0
00001CF2  E588      3024          lsl.l     #2,D0
00001CF4  2033 0800 3025          move.l    0(A3,D0.L),D0
00001CF8  2040      3026          move.l    D0,A0
00001CFA  30BC 4E4E 3027          move.w    #20046,(A0)
                    3028   ; printf("\r\n%3d     $%08x", i, BreakPointAddress[i]);
00001CFE  2202      3029          move.l    D2,D1
00001D00  E589      3030          lsl.l     #2,D1
00001D02  2F33 1800 3031          move.l    0(A3,D1.L),-(A7)
00001D06  2F02      3032          move.l    D2,-(A7)
00001D08  4879 0000 3033          pea       @lab3_68.L
00001D0C  4544      
00001D0E  4E92      3034          jsr       (A2)
00001D10  DEFC 000C 3035          add.w     #12,A7
                    3036   BreakPointDisplay_11:
00001D14  5282      3037          addq.l    #1,D2
00001D16  609E      3038          bra       BreakPointDisplay_8
                    3039   BreakPointDisplay_10:
                    3040   ; }
                    3041   ; }
                    3042   ; printf("\r\n");
00001D18  4879 0000 3043          pea       @lab3_1.L
00001D1C  3EF0      
00001D1E  4E92      3044          jsr       (A2)
00001D20  584F      3045          addq.w    #4,A7
00001D22  4CDF 0C0C 3046          movem.l   (A7)+,D2/D3/A2/A3
00001D26  4E75      3047          rts
                    3048   ; }
                    3049   ; void WatchPointDisplay(void)
                    3050   ; {
                    3051   _WatchPointDisplay:
00001D28  48E7 3020 3052          movem.l   D2/D3/A2,-(A7)
00001D2C  45F9 0000 3053          lea       _printf.L,A2
00001D30  35A0      
                    3054   ; int i;
                    3055   ; int WatchPointsSet = 0;
00001D32  4283      3056          clr.l     D3
                    3057   ; // any watchpoints set
                    3058   ; for (i = 0; i < 8; i++) {
00001D34  4282      3059          clr.l     D2
                    3060   WatchPointDisplay_1:
00001D36  0C82 0000 3061          cmp.l     #8,D2
00001D3A  0008      
00001D3C  6C1C      3062          bge.s     WatchPointDisplay_3
                    3063   ; if (WatchPointSetOrCleared[i] == 1)
00001D3E  2002      3064          move.l    D2,D0
00001D40  E588      3065          lsl.l     #2,D0
00001D42  41F9 0B00 3066          lea       _WatchPointSetOrCleared.L,A0
00001D46  01A2      
00001D48  2030 0800 3067          move.l    0(A0,D0.L),D0
00001D4C  0C80 0000 3068          cmp.l     #1,D0
00001D50  0001      
00001D52  6602      3069          bne.s     WatchPointDisplay_4
                    3070   ; WatchPointsSet = 1;
00001D54  7601      3071          moveq     #1,D3
                    3072   WatchPointDisplay_4:
00001D56  5282      3073          addq.l    #1,D2
00001D58  60DC      3074          bra       WatchPointDisplay_1
                    3075   WatchPointDisplay_3:
                    3076   ; }
                    3077   ; if (WatchPointsSet == 1) {
00001D5A  0C83 0000 3078          cmp.l     #1,D3
00001D5E  0001      
00001D60  6616      3079          bne.s     WatchPointDisplay_6
                    3080   ; printf("\r\nNum     Address");
00001D62  4879 0000 3081          pea       @lab3_69.L
00001D66  4554      
00001D68  4E92      3082          jsr       (A2)
00001D6A  584F      3083          addq.w    #4,A7
                    3084   ; printf("\r\n---     ---------");
00001D6C  4879 0000 3085          pea       @lab3_70.L
00001D70  4566      
00001D72  4E92      3086          jsr       (A2)
00001D74  584F      3087          addq.w    #4,A7
00001D76  600A      3088          bra.s     WatchPointDisplay_7
                    3089   WatchPointDisplay_6:
                    3090   ; }
                    3091   ; else
                    3092   ; printf("\r\nNo WatchPoints Set");
00001D78  4879 0000 3093          pea       @lab3_71.L
00001D7C  457A      
00001D7E  4E92      3094          jsr       (A2)
00001D80  584F      3095          addq.w    #4,A7
                    3096   WatchPointDisplay_7:
                    3097   ; for (i = 0; i < 8; i++) {
00001D82  4282      3098          clr.l     D2
                    3099   WatchPointDisplay_8:
00001D84  0C82 0000 3100          cmp.l     #8,D2
00001D88  0008      
00001D8A  6C00 0038 3101          bge       WatchPointDisplay_10
                    3102   ; if (WatchPointSetOrCleared[i] == 1)
00001D8E  2002      3103          move.l    D2,D0
00001D90  E588      3104          lsl.l     #2,D0
00001D92  41F9 0B00 3105          lea       _WatchPointSetOrCleared.L,A0
00001D96  01A2      
00001D98  2030 0800 3106          move.l    0(A0,D0.L),D0
00001D9C  0C80 0000 3107          cmp.l     #1,D0
00001DA0  0001      
00001DA2  661C      3108          bne.s     WatchPointDisplay_11
                    3109   ; printf("\r\n%3d     $%08x", i, WatchPointAddress[i]);
00001DA4  2202      3110          move.l    D2,D1
00001DA6  E589      3111          lsl.l     #2,D1
00001DA8  41F9 0B00 3112          lea       _WatchPointAddress.L,A0
00001DAC  0182      
00001DAE  2F30 1800 3113          move.l    0(A0,D1.L),-(A7)
00001DB2  2F02      3114          move.l    D2,-(A7)
00001DB4  4879 0000 3115          pea       @lab3_68.L
00001DB8  4544      
00001DBA  4E92      3116          jsr       (A2)
00001DBC  DEFC 000C 3117          add.w     #12,A7
                    3118   WatchPointDisplay_11:
00001DC0  5282      3119          addq.l    #1,D2
00001DC2  60C0      3120          bra       WatchPointDisplay_8
                    3121   WatchPointDisplay_10:
                    3122   ; }
                    3123   ; printf("\r\n");
00001DC4  4879 0000 3124          pea       @lab3_1.L
00001DC8  3EF0      
00001DCA  4E92      3125          jsr       (A2)
00001DCC  584F      3126          addq.w    #4,A7
00001DCE  4CDF 040C 3127          movem.l   (A7)+,D2/D3/A2
00001DD2  4E75      3128          rts
                    3129   ; }
                    3130   ; void BreakPointClear(void)
                    3131   ; {
                    3132   _BreakPointClear:
00001DD4  4E56 FFFC 3133          link      A6,#-4
00001DD8  48E7 2020 3134          movem.l   D2/A2,-(A7)
00001DDC  45F9 0000 3135          lea       _printf.L,A2
00001DE0  35A0      
                    3136   ; unsigned int i;
                    3137   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3138   ; BreakPointDisplay();
00001DE2  4EB8 1C54 3139          jsr       _BreakPointDisplay
                    3140   ; printf("\r\nEnter Break Point Number: ");
00001DE6  4879 0000 3141          pea       @lab3_72.L
00001DEA  4590      
00001DEC  4E92      3142          jsr       (A2)
00001DEE  584F      3143          addq.w    #4,A7
                    3144   ; i = xtod(_getch());           // get break pointer number
00001DF0  2F00      3145          move.l    D0,-(A7)
00001DF2  4EB8 0B68 3146          jsr       __getch
00001DF6  2200      3147          move.l    D0,D1
00001DF8  201F      3148          move.l    (A7)+,D0
00001DFA  2F01      3149          move.l    D1,-(A7)
00001DFC  4EB8 0BD2 3150          jsr       _xtod
00001E00  584F      3151          addq.w    #4,A7
00001E02  C0BC 0000 3152          and.l     #255,D0
00001E06  00FF      
00001E08  2400      3153          move.l    D0,D2
                    3154   ; if ((i < 0) || (i > 7)) {
00001E0A  0C82 0000 3155          cmp.l     #0,D2
00001E0E  0000      
00001E10  6508      3156          blo.s     BreakPointClear_3
00001E12  0C82 0000 3157          cmp.l     #7,D2
00001E16  0007      
00001E18  630E      3158          bls.s     BreakPointClear_1
                    3159   BreakPointClear_3:
                    3160   ; printf("\r\nIllegal Range : Use 0 - 7");
00001E1A  4879 0000 3161          pea       @lab3_73.L
00001E1E  45AE      
00001E20  4E92      3162          jsr       (A2)
00001E22  584F      3163          addq.w    #4,A7
                    3164   ; return;
00001E24  6000 0080 3165          bra       BreakPointClear_4
                    3166   BreakPointClear_1:
                    3167   ; }
                    3168   ; if (BreakPointSetOrCleared[i] == 1) {       // if break point set
00001E28  2002      3169          move.l    D2,D0
00001E2A  E588      3170          lsl.l     #2,D0
00001E2C  41F9 0B00 3171          lea       _BreakPointSetOrCleared.L,A0
00001E30  015E      
00001E32  2030 0800 3172          move.l    0(A0,D0.L),D0
00001E36  0C80 0000 3173          cmp.l     #1,D0
00001E3A  0001      
00001E3C  6600 005A 3174          bne       BreakPointClear_5
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program we are about to change
00001E40  2002      3176          move.l    D2,D0
00001E42  E588      3177          lsl.l     #2,D0
00001E44  41F9 0B00 3178          lea       _BreakPointAddress.L,A0
00001E48  012E      
00001E4A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001E4E  FFFC      
                    3180   ; BreakPointAddress[i] = 0;
00001E50  2002      3181          move.l    D2,D0
00001E52  E588      3182          lsl.l     #2,D0
00001E54  41F9 0B00 3183          lea       _BreakPointAddress.L,A0
00001E58  012E      
00001E5A  42B0 0800 3184          clr.l     0(A0,D0.L)
                    3185   ; BreakPointSetOrCleared[i] = 0;
00001E5E  2002      3186          move.l    D2,D0
00001E60  E588      3187          lsl.l     #2,D0
00001E62  41F9 0B00 3188          lea       _BreakPointSetOrCleared.L,A0
00001E66  015E      
00001E68  42B0 0800 3189          clr.l     0(A0,D0.L)
                    3190   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00001E6C  2002      3191          move.l    D2,D0
00001E6E  E388      3192          lsl.l     #1,D0
00001E70  41F9 0B00 3193          lea       _BreakPointInstruction.L,A0
00001E74  014E      
00001E76  226E FFFC 3194          move.l    -4(A6),A1
00001E7A  32B0 0800 3195          move.w    0(A0,D0.L),(A1)
                    3196   ; BreakPointInstruction[i] = 0;
00001E7E  2002      3197          move.l    D2,D0
00001E80  E388      3198          lsl.l     #1,D0
00001E82  41F9 0B00 3199          lea       _BreakPointInstruction.L,A0
00001E86  014E      
00001E88  4270 0800 3200          clr.w     0(A0,D0.L)
                    3201   ; printf("\r\nBreak Point Cleared.....\r\n");
00001E8C  4879 0000 3202          pea       @lab3_74.L
00001E90  45CA      
00001E92  4E92      3203          jsr       (A2)
00001E94  584F      3204          addq.w    #4,A7
00001E96  600A      3205          bra.s     BreakPointClear_6
                    3206   BreakPointClear_5:
                    3207   ; }
                    3208   ; else
                    3209   ; printf("\r\nBreak Point wasn't Set.....");
00001E98  4879 0000 3210          pea       @lab3_75.L
00001E9C  45E8      
00001E9E  4E92      3211          jsr       (A2)
00001EA0  584F      3212          addq.w    #4,A7
                    3213   BreakPointClear_6:
                    3214   ; BreakPointDisplay();
00001EA2  4EB8 1C54 3215          jsr       _BreakPointDisplay
                    3216   ; return;
                    3217   BreakPointClear_4:
00001EA6  4CDF 0404 3218          movem.l   (A7)+,D2/A2
00001EAA  4E5E      3219          unlk      A6
00001EAC  4E75      3220          rts
                    3221   ; }
                    3222   ; void WatchPointClear(void)
                    3223   ; {
                    3224   _WatchPointClear:
00001EAE  48E7 2020 3225          movem.l   D2/A2,-(A7)
00001EB2  45F9 0000 3226          lea       _printf.L,A2
00001EB6  35A0      
                    3227   ; unsigned int i;
                    3228   ; WatchPointDisplay();
00001EB8  4EB8 1D28 3229          jsr       _WatchPointDisplay
                    3230   ; printf("\r\nEnter Watch Point Number: ");
00001EBC  4879 0000 3231          pea       @lab3_76.L
00001EC0  4606      
00001EC2  4E92      3232          jsr       (A2)
00001EC4  584F      3233          addq.w    #4,A7
                    3234   ; i = xtod(_getch());           // get watch pointer number
00001EC6  2F00      3235          move.l    D0,-(A7)
00001EC8  4EB8 0B68 3236          jsr       __getch
00001ECC  2200      3237          move.l    D0,D1
00001ECE  201F      3238          move.l    (A7)+,D0
00001ED0  2F01      3239          move.l    D1,-(A7)
00001ED2  4EB8 0BD2 3240          jsr       _xtod
00001ED6  584F      3241          addq.w    #4,A7
00001ED8  C0BC 0000 3242          and.l     #255,D0
00001EDC  00FF      
00001EDE  2400      3243          move.l    D0,D2
                    3244   ; if ((i < 0) || (i > 7)) {
00001EE0  0C82 0000 3245          cmp.l     #0,D2
00001EE4  0000      
00001EE6  6508      3246          blo.s     WatchPointClear_3
00001EE8  0C82 0000 3247          cmp.l     #7,D2
00001EEC  0007      
00001EEE  630E      3248          bls.s     WatchPointClear_1
                    3249   WatchPointClear_3:
                    3250   ; printf("\r\nIllegal Range : Use 0 - 7");
00001EF0  4879 0000 3251          pea       @lab3_73.L
00001EF4  45AE      
00001EF6  4E92      3252          jsr       (A2)
00001EF8  584F      3253          addq.w    #4,A7
                    3254   ; return;
00001EFA  6000 004E 3255          bra       WatchPointClear_4
                    3256   WatchPointClear_1:
                    3257   ; }
                    3258   ; if (WatchPointSetOrCleared[i] == 1) {       // if watch point set
00001EFE  2002      3259          move.l    D2,D0
00001F00  E588      3260          lsl.l     #2,D0
00001F02  41F9 0B00 3261          lea       _WatchPointSetOrCleared.L,A0
00001F06  01A2      
00001F08  2030 0800 3262          move.l    0(A0,D0.L),D0
00001F0C  0C80 0000 3263          cmp.l     #1,D0
00001F10  0001      
00001F12  6628      3264          bne.s     WatchPointClear_5
                    3265   ; WatchPointAddress[i] = 0;
00001F14  2002      3266          move.l    D2,D0
00001F16  E588      3267          lsl.l     #2,D0
00001F18  41F9 0B00 3268          lea       _WatchPointAddress.L,A0
00001F1C  0182      
00001F1E  42B0 0800 3269          clr.l     0(A0,D0.L)
                    3270   ; WatchPointSetOrCleared[i] = 0;
00001F22  2002      3271          move.l    D2,D0
00001F24  E588      3272          lsl.l     #2,D0
00001F26  41F9 0B00 3273          lea       _WatchPointSetOrCleared.L,A0
00001F2A  01A2      
00001F2C  42B0 0800 3274          clr.l     0(A0,D0.L)
                    3275   ; printf("\r\nWatch Point Cleared.....\r\n");
00001F30  4879 0000 3276          pea       @lab3_77.L
00001F34  4624      
00001F36  4E92      3277          jsr       (A2)
00001F38  584F      3278          addq.w    #4,A7
00001F3A  600A      3279          bra.s     WatchPointClear_6
                    3280   WatchPointClear_5:
                    3281   ; }
                    3282   ; else
                    3283   ; printf("\r\nWatch Point Was not Set.....");
00001F3C  4879 0000 3284          pea       @lab3_78.L
00001F40  4642      
00001F42  4E92      3285          jsr       (A2)
00001F44  584F      3286          addq.w    #4,A7
                    3287   WatchPointClear_6:
                    3288   ; WatchPointDisplay();
00001F46  4EB8 1D28 3289          jsr       _WatchPointDisplay
                    3290   ; return;
                    3291   WatchPointClear_4:
00001F4A  4CDF 0404 3292          movem.l   (A7)+,D2/A2
00001F4E  4E75      3293          rts
                    3294   ; }
                    3295   ; void DisableBreakPoints(void)
                    3296   ; {
                    3297   _DisableBreakPoints:
00001F50  4E56 FFFC 3298          link      A6,#-4
00001F54  2F02      3299          move.l    D2,-(A7)
                    3300   ; int i;
                    3301   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3302   ; for (i = 0; i < 8; i++) {
00001F56  4282      3303          clr.l     D2
                    3304   DisableBreakPoints_1:
00001F58  0C82 0000 3305          cmp.l     #8,D2
00001F5C  0008      
00001F5E  6C00 003E 3306          bge       DisableBreakPoints_3
                    3307   ; if (BreakPointSetOrCleared[i] == 1) {                                                    // if break point set
00001F62  2002      3308          move.l    D2,D0
00001F64  E588      3309          lsl.l     #2,D0
00001F66  41F9 0B00 3310          lea       _BreakPointSetOrCleared.L,A0
00001F6A  015E      
00001F6C  2030 0800 3311          move.l    0(A0,D0.L),D0
00001F70  0C80 0000 3312          cmp.l     #1,D0
00001F74  0001      
00001F76  6622      3313          bne.s     DisableBreakPoints_4
                    3314   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001F78  2002      3315          move.l    D2,D0
00001F7A  E588      3316          lsl.l     #2,D0
00001F7C  41F9 0B00 3317          lea       _BreakPointAddress.L,A0
00001F80  012E      
00001F82  2D70 0800 3318          move.l    0(A0,D0.L),-4(A6)
00001F86  FFFC      
                    3319   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001F88  2002      3320          move.l    D2,D0
00001F8A  E388      3321          lsl.l     #1,D0
00001F8C  41F9 0B00 3322          lea       _BreakPointInstruction.L,A0
00001F90  014E      
00001F92  226E FFFC 3323          move.l    -4(A6),A1
00001F96  32B0 0800 3324          move.w    0(A0,D0.L),(A1)
                    3325   DisableBreakPoints_4:
00001F9A  5282      3326          addq.l    #1,D2
00001F9C  60BA      3327          bra       DisableBreakPoints_1
                    3328   DisableBreakPoints_3:
00001F9E  241F      3329          move.l    (A7)+,D2
00001FA0  4E5E      3330          unlk      A6
00001FA2  4E75      3331          rts
                    3332   ; }
                    3333   ; }
                    3334   ; }
                    3335   ; void EnableBreakPoints(void)
                    3336   ; {
                    3337   _EnableBreakPoints:
00001FA4  4E56 FFFC 3338          link      A6,#-4
00001FA8  2F02      3339          move.l    D2,-(A7)
                    3340   ; int i;
                    3341   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3342   ; for (i = 0; i < 8; i++) {
00001FAA  4282      3343          clr.l     D2
                    3344   EnableBreakPoints_1:
00001FAC  0C82 0000 3345          cmp.l     #8,D2
00001FB0  0008      
00001FB2  6C32      3346          bge.s     EnableBreakPoints_3
                    3347   ; if (BreakPointSetOrCleared[i] == 1) {                                                     // if break point set
00001FB4  2002      3348          move.l    D2,D0
00001FB6  E588      3349          lsl.l     #2,D0
00001FB8  41F9 0B00 3350          lea       _BreakPointSetOrCleared.L,A0
00001FBC  015E      
00001FBE  2030 0800 3351          move.l    0(A0,D0.L),D0
00001FC2  0C80 0000 3352          cmp.l     #1,D0
00001FC6  0001      
00001FC8  6618      3353          bne.s     EnableBreakPoints_4
                    3354   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001FCA  2002      3355          move.l    D2,D0
00001FCC  E588      3356          lsl.l     #2,D0
00001FCE  41F9 0B00 3357          lea       _BreakPointAddress.L,A0
00001FD2  012E      
00001FD4  2D70 0800 3358          move.l    0(A0,D0.L),-4(A6)
00001FD8  FFFC      
                    3359   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001FDA  206E FFFC 3360          move.l    -4(A6),A0
00001FDE  30BC 4E4E 3361          move.w    #20046,(A0)
                    3362   EnableBreakPoints_4:
00001FE2  5282      3363          addq.l    #1,D2
00001FE4  60C6      3364          bra       EnableBreakPoints_1
                    3365   EnableBreakPoints_3:
00001FE6  241F      3366          move.l    (A7)+,D2
00001FE8  4E5E      3367          unlk      A6
00001FEA  4E75      3368          rts
                    3369   ; }
                    3370   ; }
                    3371   ; }
                    3372   ; void KillAllBreakPoints(void)
                    3373   ; {
                    3374   _KillAllBreakPoints:
00001FEC  4E56 FFFC 3375          link      A6,#-4
00001FF0  2F02      3376          move.l    D2,-(A7)
                    3377   ; int i;
                    3378   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3379   ; for (i = 0; i < 8; i++) {
00001FF2  4282      3380          clr.l     D2
                    3381   KillAllBreakPoints_1:
00001FF4  0C82 0000 3382          cmp.l     #8,D2
00001FF8  0008      
00001FFA  6C00 0052 3383          bge       KillAllBreakPoints_3
                    3384   ; // clear BP
                    3385   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001FFE  2002      3386          move.l    D2,D0
00002000  E588      3387          lsl.l     #2,D0
00002002  41F9 0B00 3388          lea       _BreakPointAddress.L,A0
00002006  012E      
00002008  2D70 0800 3389          move.l    0(A0,D0.L),-4(A6)
0000200C  FFFC      
                    3390   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
0000200E  2002      3391          move.l    D2,D0
00002010  E388      3392          lsl.l     #1,D0
00002012  41F9 0B00 3393          lea       _BreakPointInstruction.L,A0
00002016  014E      
00002018  226E FFFC 3394          move.l    -4(A6),A1
0000201C  32B0 0800 3395          move.w    0(A0,D0.L),(A1)
                    3396   ; BreakPointAddress[i] = 0;                                                             // set BP address to NULL
00002020  2002      3397          move.l    D2,D0
00002022  E588      3398          lsl.l     #2,D0
00002024  41F9 0B00 3399          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  42B0 0800 3400          clr.l     0(A0,D0.L)
                    3401   ; BreakPointInstruction[i] = 0;
0000202E  2002      3402          move.l    D2,D0
00002030  E388      3403          lsl.l     #1,D0
00002032  41F9 0B00 3404          lea       _BreakPointInstruction.L,A0
00002036  014E      
00002038  4270 0800 3405          clr.w     0(A0,D0.L)
                    3406   ; BreakPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
0000203C  2002      3407          move.l    D2,D0
0000203E  E588      3408          lsl.l     #2,D0
00002040  41F9 0B00 3409          lea       _BreakPointSetOrCleared.L,A0
00002044  015E      
00002046  42B0 0800 3410          clr.l     0(A0,D0.L)
0000204A  5282      3411          addq.l    #1,D2
0000204C  60A6      3412          bra       KillAllBreakPoints_1
                    3413   KillAllBreakPoints_3:
0000204E  241F      3414          move.l    (A7)+,D2
00002050  4E5E      3415          unlk      A6
00002052  4E75      3416          rts
                    3417   ; }
                    3418   ; //BreakPointDisplay() ;       // display the break points
                    3419   ; }
                    3420   ; void KillAllWatchPoints(void)
                    3421   ; {
                    3422   _KillAllWatchPoints:
00002054  2F02      3423          move.l    D2,-(A7)
                    3424   ; int i;
                    3425   ; for (i = 0; i < 8; i++) {
00002056  4282      3426          clr.l     D2
                    3427   KillAllWatchPoints_1:
00002058  0C82 0000 3428          cmp.l     #8,D2
0000205C  0008      
0000205E  6C20      3429          bge.s     KillAllWatchPoints_3
                    3430   ; WatchPointAddress[i] = 0;                                                             // set BP address to NULL
00002060  2002      3431          move.l    D2,D0
00002062  E588      3432          lsl.l     #2,D0
00002064  41F9 0B00 3433          lea       _WatchPointAddress.L,A0
00002068  0182      
0000206A  42B0 0800 3434          clr.l     0(A0,D0.L)
                    3435   ; WatchPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
0000206E  2002      3436          move.l    D2,D0
00002070  E588      3437          lsl.l     #2,D0
00002072  41F9 0B00 3438          lea       _WatchPointSetOrCleared.L,A0
00002076  01A2      
00002078  42B0 0800 3439          clr.l     0(A0,D0.L)
0000207C  5282      3440          addq.l    #1,D2
0000207E  60D8      3441          bra       KillAllWatchPoints_1
                    3442   KillAllWatchPoints_3:
00002080  241F      3443          move.l    (A7)+,D2
00002082  4E75      3444          rts
                    3445   ; }
                    3446   ; //WatchPointDisplay() ;       // display the break points
                    3447   ; }
                    3448   ; void SetBreakPoint(void)
                    3449   ; {
                    3450   _SetBreakPoint:
00002084  4E56 FFFC 3451          link      A6,#-4
00002088  48E7 3830 3452          movem.l   D2/D3/D4/A2/A3,-(A7)
0000208C  45F9 0000 3453          lea       _printf.L,A2
00002090  35A0      
00002092  47F9 0B00 3454          lea       _BreakPointSetOrCleared.L,A3
00002096  015E      
                    3455   ; int i;
                    3456   ; int BPNumber;
                    3457   ; int BPAddress;
                    3458   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3459   ; // see if any free break points
                    3460   ; for (i = 0; i < 8; i++) {
00002098  4282      3461          clr.l     D2
                    3462   SetBreakPoint_1:
0000209A  0C82 0000 3463          cmp.l     #8,D2
0000209E  0008      
000020A0  6C10      3464          bge.s     SetBreakPoint_3
                    3465   ; if (BreakPointSetOrCleared[i] == 0)
000020A2  2002      3466          move.l    D2,D0
000020A4  E588      3467          lsl.l     #2,D0
000020A6  2033 0800 3468          move.l    0(A3,D0.L),D0
000020AA  6602      3469          bne.s     SetBreakPoint_4
                    3470   ; break;         // if spare BP found allow user to set it
000020AC  6004      3471          bra.s     SetBreakPoint_3
                    3472   SetBreakPoint_4:
000020AE  5282      3473          addq.l    #1,D2
000020B0  60E8      3474          bra       SetBreakPoint_1
                    3475   SetBreakPoint_3:
                    3476   ; }
                    3477   ; if (i == 8) {
000020B2  0C82 0000 3478          cmp.l     #8,D2
000020B6  0008      
000020B8  660E      3479          bne.s     SetBreakPoint_6
                    3480   ; printf("\r\nNo FREE Break Points.....");
000020BA  4879 0000 3481          pea       @lab3_79.L
000020BE  4662      
000020C0  4E92      3482          jsr       (A2)
000020C2  584F      3483          addq.w    #4,A7
                    3484   ; return;
000020C4  6000 00D6 3485          bra       SetBreakPoint_15
                    3486   SetBreakPoint_6:
                    3487   ; }
                    3488   ; printf("\r\nBreak Point Address: ");
000020C8  4879 0000 3489          pea       @lab3_80.L
000020CC  467E      
000020CE  4E92      3490          jsr       (A2)
000020D0  584F      3491          addq.w    #4,A7
                    3492   ; BPAddress = Get8HexDigits(0);
000020D2  42A7      3493          clr.l     -(A7)
000020D4  4EB8 0CA4 3494          jsr       _Get8HexDigits
000020D8  584F      3495          addq.w    #4,A7
000020DA  2600      3496          move.l    D0,D3
                    3497   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BPAddress);     // point to the instruction in the user program we are about to change
000020DC  2803      3498          move.l    D3,D4
                    3499   ; if ((BPAddress & 0x00000001) == 0x00000001) {   // cannot set BP at an odd address
000020DE  2003      3500          move.l    D3,D0
000020E0  C0BC 0000 3501          and.l     #1,D0
000020E4  0001      
000020E6  0C80 0000 3502          cmp.l     #1,D0
000020EA  0001      
000020EC  660E      3503          bne.s     SetBreakPoint_9
                    3504   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses");
000020EE  4879 0000 3505          pea       @lab3_81.L
000020F2  4696      
000020F4  4E92      3506          jsr       (A2)
000020F6  584F      3507          addq.w    #4,A7
                    3508   ; return;
000020F8  6000 00A2 3509          bra       SetBreakPoint_15
                    3510   SetBreakPoint_9:
                    3511   ; }
                    3512   ; if (BPAddress < 0x00008000) {   // cannot set BP in ROM
000020FC  0C83 0000 3513          cmp.l     #32768,D3
00002100  8000      
00002102  640E      3514          bhs.s     SetBreakPoint_11
                    3515   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]");
00002104  4879 0000 3516          pea       @lab3_82.L
00002108  46CC      
0000210A  4E92      3517          jsr       (A2)
0000210C  584F      3518          addq.w    #4,A7
                    3519   ; return;
0000210E  6000 008C 3520          bra       SetBreakPoint_15
                    3521   SetBreakPoint_11:
                    3522   ; }
                    3523   ; // search for first free bp or existing same BP
                    3524   ; for (i = 0; i < 8; i++) {
00002112  4282      3525          clr.l     D2
                    3526   SetBreakPoint_13:
00002114  0C82 0000 3527          cmp.l     #8,D2
00002118  0008      
0000211A  6C00 0080 3528          bge       SetBreakPoint_15
                    3529   ; if (BreakPointAddress[i] == BPAddress) {
0000211E  2002      3530          move.l    D2,D0
00002120  E588      3531          lsl.l     #2,D0
00002122  41F9 0B00 3532          lea       _BreakPointAddress.L,A0
00002126  012E      
00002128  B6B0 0800 3533          cmp.l     0(A0,D0.L),D3
0000212C  6610      3534          bne.s     SetBreakPoint_16
                    3535   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress);
0000212E  2F03      3536          move.l    D3,-(A7)
00002130  4879 0000 3537          pea       @lab3_83.L
00002134  4714      
00002136  4E92      3538          jsr       (A2)
00002138  504F      3539          addq.w    #8,A7
                    3540   ; return;
0000213A  6000 0060 3541          bra       SetBreakPoint_15
                    3542   SetBreakPoint_16:
                    3543   ; }
                    3544   ; if (BreakPointSetOrCleared[i] == 0) {
0000213E  2002      3545          move.l    D2,D0
00002140  E588      3546          lsl.l     #2,D0
00002142  2033 0800 3547          move.l    0(A3,D0.L),D0
00002146  6600 004E 3548          bne       SetBreakPoint_18
                    3549   ; // set BP here
                    3550   ; BreakPointSetOrCleared[i] = 1;                                 // mark this breakpoint as set
0000214A  2002      3551          move.l    D2,D0
0000214C  E588      3552          lsl.l     #2,D0
0000214E  27BC 0000 3553          move.l    #1,0(A3,D0.L)
00002152  0001 0800 
                    3554   ; BreakPointInstruction[i] = *ProgramBreakPointAddress;          // copy the user program instruction here so we can put it back afterwards
00002156  2044      3555          move.l    D4,A0
00002158  2002      3556          move.l    D2,D0
0000215A  E388      3557          lsl.l     #1,D0
0000215C  43F9 0B00 3558          lea       _BreakPointInstruction.L,A1
00002160  014E      
00002162  3390 0800 3559          move.w    (A0),0(A1,D0.L)
                    3560   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress);
00002166  2F04      3561          move.l    D4,-(A7)
00002168  4879 0000 3562          pea       @lab3_84.L
0000216C  474C      
0000216E  4E92      3563          jsr       (A2)
00002170  504F      3564          addq.w    #8,A7
                    3565   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);   // put a Trap14 instruction at the user specified address
00002172  2044      3566          move.l    D4,A0
00002174  30BC 4E4E 3567          move.w    #20046,(A0)
                    3568   ; BreakPointAddress[i] = BPAddress;                              // record the address of this break point in the debugger
00002178  2002      3569          move.l    D2,D0
0000217A  E588      3570          lsl.l     #2,D0
0000217C  41F9 0B00 3571          lea       _BreakPointAddress.L,A0
00002180  012E      
00002182  2183 0800 3572          move.l    D3,0(A0,D0.L)
                    3573   ; printf("\r\n");
00002186  4879 0000 3574          pea       @lab3_1.L
0000218A  3EF0      
0000218C  4E92      3575          jsr       (A2)
0000218E  584F      3576          addq.w    #4,A7
                    3577   ; BreakPointDisplay();       // display the break points
00002190  4EB8 1C54 3578          jsr       _BreakPointDisplay
                    3579   ; return;
00002194  6006      3580          bra.s     SetBreakPoint_15
                    3581   SetBreakPoint_18:
00002196  5282      3582          addq.l    #1,D2
00002198  6000 FF7A 3583          bra       SetBreakPoint_13
                    3584   SetBreakPoint_15:
0000219C  4CDF 0C1C 3585          movem.l   (A7)+,D2/D3/D4/A2/A3
000021A0  4E5E      3586          unlk      A6
000021A2  4E75      3587          rts
                    3588   ; }
                    3589   ; }
                    3590   ; }
                    3591   ; void SetWatchPoint(void)
                    3592   ; {
                    3593   _SetWatchPoint:
000021A4  4E56 FFF8 3594          link      A6,#-8
000021A8  48E7 3030 3595          movem.l   D2/D3/A2/A3,-(A7)
000021AC  45F9 0000 3596          lea       _printf.L,A2
000021B0  35A0      
000021B2  47F9 0B00 3597          lea       _WatchPointSetOrCleared.L,A3
000021B6  01A2      
                    3598   ; int i;
                    3599   ; int WPNumber;
                    3600   ; int WPAddress;
                    3601   ; volatile unsigned short int* ProgramWatchPointAddress;
                    3602   ; // see if any free break points
                    3603   ; for (i = 0; i < 8; i++) {
000021B8  4282      3604          clr.l     D2
                    3605   SetWatchPoint_1:
000021BA  0C82 0000 3606          cmp.l     #8,D2
000021BE  0008      
000021C0  6C10      3607          bge.s     SetWatchPoint_3
                    3608   ; if (WatchPointSetOrCleared[i] == 0)
000021C2  2002      3609          move.l    D2,D0
000021C4  E588      3610          lsl.l     #2,D0
000021C6  2033 0800 3611          move.l    0(A3,D0.L),D0
000021CA  6602      3612          bne.s     SetWatchPoint_4
                    3613   ; break;         // if spare WP found allow user to set it
000021CC  6004      3614          bra.s     SetWatchPoint_3
                    3615   SetWatchPoint_4:
000021CE  5282      3616          addq.l    #1,D2
000021D0  60E8      3617          bra       SetWatchPoint_1
                    3618   SetWatchPoint_3:
                    3619   ; }
                    3620   ; if (i == 8) {
000021D2  0C82 0000 3621          cmp.l     #8,D2
000021D6  0008      
000021D8  660E      3622          bne.s     SetWatchPoint_6
                    3623   ; printf("\r\nNo FREE Watch Points.....");
000021DA  4879 0000 3624          pea       @lab3_85.L
000021DE  4772      
000021E0  4E92      3625          jsr       (A2)
000021E2  584F      3626          addq.w    #4,A7
                    3627   ; return;
000021E4  6000 008C 3628          bra       SetWatchPoint_11
                    3629   SetWatchPoint_6:
                    3630   ; }
                    3631   ; printf("\r\nWatch Point Address: ");
000021E8  4879 0000 3632          pea       @lab3_86.L
000021EC  478E      
000021EE  4E92      3633          jsr       (A2)
000021F0  584F      3634          addq.w    #4,A7
                    3635   ; WPAddress = Get8HexDigits(0);
000021F2  42A7      3636          clr.l     -(A7)
000021F4  4EB8 0CA4 3637          jsr       _Get8HexDigits
000021F8  584F      3638          addq.w    #4,A7
000021FA  2600      3639          move.l    D0,D3
                    3640   ; // search for first free wp or existing same wp
                    3641   ; for (i = 0; i < 8; i++) {
000021FC  4282      3642          clr.l     D2
                    3643   SetWatchPoint_9:
000021FE  0C82 0000 3644          cmp.l     #8,D2
00002202  0008      
00002204  6C00 006C 3645          bge       SetWatchPoint_11
                    3646   ; if (WatchPointAddress[i] == WPAddress && WPAddress != 0) {     //so we can set a wp at 0
00002208  2002      3647          move.l    D2,D0
0000220A  E588      3648          lsl.l     #2,D0
0000220C  41F9 0B00 3649          lea       _WatchPointAddress.L,A0
00002210  0182      
00002212  B6B0 0800 3650          cmp.l     0(A0,D0.L),D3
00002216  6614      3651          bne.s     SetWatchPoint_12
00002218  4A83      3652          tst.l     D3
0000221A  6710      3653          beq.s     SetWatchPoint_12
                    3654   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress);
0000221C  2F03      3655          move.l    D3,-(A7)
0000221E  4879 0000 3656          pea       @lab3_87.L
00002222  47A6      
00002224  4E92      3657          jsr       (A2)
00002226  504F      3658          addq.w    #8,A7
                    3659   ; return;
00002228  6000 0048 3660          bra       SetWatchPoint_11
                    3661   SetWatchPoint_12:
                    3662   ; }
                    3663   ; if (WatchPointSetOrCleared[i] == 0) {
0000222C  2002      3664          move.l    D2,D0
0000222E  E588      3665          lsl.l     #2,D0
00002230  2033 0800 3666          move.l    0(A3,D0.L),D0
00002234  6600 0038 3667          bne       SetWatchPoint_14
                    3668   ; WatchPointSetOrCleared[i] = 1;                                 // mark this watchpoint as set
00002238  2002      3669          move.l    D2,D0
0000223A  E588      3670          lsl.l     #2,D0
0000223C  27BC 0000 3671          move.l    #1,0(A3,D0.L)
00002240  0001 0800 
                    3672   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress);
00002244  2F03      3673          move.l    D3,-(A7)
00002246  4879 0000 3674          pea       @lab3_88.L
0000224A  47DC      
0000224C  4E92      3675          jsr       (A2)
0000224E  504F      3676          addq.w    #8,A7
                    3677   ; WatchPointAddress[i] = WPAddress;                              // record the address of this watch point in the debugger
00002250  2002      3678          move.l    D2,D0
00002252  E588      3679          lsl.l     #2,D0
00002254  41F9 0B00 3680          lea       _WatchPointAddress.L,A0
00002258  0182      
0000225A  2183 0800 3681          move.l    D3,0(A0,D0.L)
                    3682   ; printf("\r\n");
0000225E  4879 0000 3683          pea       @lab3_1.L
00002262  3EF0      
00002264  4E92      3684          jsr       (A2)
00002266  584F      3685          addq.w    #4,A7
                    3686   ; WatchPointDisplay();       // display the break points
00002268  4EB8 1D28 3687          jsr       _WatchPointDisplay
                    3688   ; return;
0000226C  6004      3689          bra.s     SetWatchPoint_11
                    3690   SetWatchPoint_14:
0000226E  5282      3691          addq.l    #1,D2
00002270  608C      3692          bra       SetWatchPoint_9
                    3693   SetWatchPoint_11:
00002272  4CDF 0C0C 3694          movem.l   (A7)+,D2/D3/A2/A3
00002276  4E5E      3695          unlk      A6
00002278  4E75      3696          rts
                    3697   ; }
                    3698   ; }
                    3699   ; }
                    3700   ; void HandleBreakPoint(void)
                    3701   ; {
                    3702   _HandleBreakPoint:
0000227A  4E56 FFFC 3703          link      A6,#-4
0000227E  48E7 0038 3704          movem.l   A2/A3/A4,-(A7)
00002282  45F9 0B00 3705          lea       _i.L,A2
00002286  00C4      
00002288  47F9 0000 3706          lea       _printf.L,A3
0000228C  35A0      
0000228E  49F9 0B00 3707          lea       _PC.L,A4
00002292  0120      
                    3708   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3709   ; // now we have to put the break point back to run the instruction
                    3710   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3711   ; PC = PC - 2;  // ready for user to resume after reaching breakpoint
00002294  5594      3712          subq.l    #2,(A4)
                    3713   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT");
00002296  4879 0000 3714          pea       @lab3_89.L
0000229A  4802      
0000229C  4E93      3715          jsr       (A3)
0000229E  584F      3716          addq.w    #4,A7
                    3717   ; printf("\r\nSingle Step : [ON]");
000022A0  4879 0000 3718          pea       @lab3_90.L
000022A4  4816      
000022A6  4E93      3719          jsr       (A3)
000022A8  584F      3720          addq.w    #4,A7
                    3721   ; printf("\r\nBreakPoints : [Enabled]");
000022AA  4879 0000 3722          pea       @lab3_91.L
000022AE  482C      
000022B0  4E93      3723          jsr       (A3)
000022B2  584F      3724          addq.w    #4,A7
                    3725   ; // now clear the break point (put original instruction back)
                    3726   ; ProgramBreakPointAddress = PC;
000022B4  2D54 FFFC 3727          move.l    (A4),-4(A6)
                    3728   ; for (i = 0; i < 8; i++) {
000022B8  4292      3729          clr.l     (A2)
                    3730   HandleBreakPoint_1:
000022BA  2012      3731          move.l    (A2),D0
000022BC  0C80 0000 3732          cmp.l     #8,D0
000022C0  0008      
000022C2  6400 0056 3733          bhs       HandleBreakPoint_3
                    3734   ; if (BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000022C6  2012      3735          move.l    (A2),D0
000022C8  E588      3736          lsl.l     #2,D0
000022CA  41F9 0B00 3737          lea       _BreakPointAddress.L,A0
000022CE  012E      
000022D0  2230 0800 3738          move.l    0(A0,D0.L),D1
000022D4  B294      3739          cmp.l     (A4),D1
000022D6  6600 003E 3740          bne       HandleBreakPoint_4
                    3741   ; BreakPointAddress[i] = 0;
000022DA  2012      3742          move.l    (A2),D0
000022DC  E588      3743          lsl.l     #2,D0
000022DE  41F9 0B00 3744          lea       _BreakPointAddress.L,A0
000022E2  012E      
000022E4  42B0 0800 3745          clr.l     0(A0,D0.L)
                    3746   ; BreakPointSetOrCleared[i] = 0;
000022E8  2012      3747          move.l    (A2),D0
000022EA  E588      3748          lsl.l     #2,D0
000022EC  41F9 0B00 3749          lea       _BreakPointSetOrCleared.L,A0
000022F0  015E      
000022F2  42B0 0800 3750          clr.l     0(A0,D0.L)
                    3751   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
000022F6  2012      3752          move.l    (A2),D0
000022F8  E388      3753          lsl.l     #1,D0
000022FA  41F9 0B00 3754          lea       _BreakPointInstruction.L,A0
000022FE  014E      
00002300  226E FFFC 3755          move.l    -4(A6),A1
00002304  32B0 0800 3756          move.w    0(A0,D0.L),(A1)
                    3757   ; BreakPointInstruction[i] = 0;
00002308  2012      3758          move.l    (A2),D0
0000230A  E388      3759          lsl.l     #1,D0
0000230C  41F9 0B00 3760          lea       _BreakPointInstruction.L,A0
00002310  014E      
00002312  4270 0800 3761          clr.w     0(A0,D0.L)
                    3762   HandleBreakPoint_4:
00002316  5292      3763          addq.l    #1,(A2)
00002318  60A0      3764          bra       HandleBreakPoint_1
                    3765   HandleBreakPoint_3:
                    3766   ; }
                    3767   ; }
                    3768   ; DumpRegisters();
0000231A  4EB8 14A6 3769          jsr       _DumpRegisters
                    3770   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000231E  4879 0000 3771          pea       @lab3_53.L
00002322  43A8      
00002324  4E93      3772          jsr       (A3)
00002326  584F      3773          addq.w    #4,A7
                    3774   ; printf("\r\nPress <ESC> to Resume User Program\r\n");
00002328  4879 0000 3775          pea       @lab3_92.L
0000232C  4846      
0000232E  4E93      3776          jsr       (A3)
00002330  584F      3777          addq.w    #4,A7
                    3778   ; menu();
00002332  4EB9 0000 3779          jsr       _menu
00002336  253E      
00002338  4CDF 1C00 3780          movem.l   (A7)+,A2/A3/A4
0000233C  4E5E      3781          unlk      A6
0000233E  4E75      3782          rts
                    3783   ; }
                    3784   ; void UnknownCommand()
                    3785   ; {
                    3786   _UnknownCommand:
                    3787   ; printf("\r\nUnknown Command.....\r\n");
00002340  4879 0000 3788          pea       @lab3_93.L
00002344  486E      
00002346  4EB9 0000 3789          jsr       _printf
0000234A  35A0      
0000234C  584F      3790          addq.w    #4,A7
                    3791   ; Help();
0000234E  4EB9 0000 3792          jsr       _Help
00002352  2464      
00002354  4E75      3793          rts
                    3794   ; }
                    3795   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3796   ; void CallDebugMonitor(void)
                    3797   ; {
                    3798   _CallDebugMonitor:
                    3799   ; printf("\r\nProgram Ended (TRAP #15)....");
00002356  4879 0000 3800          pea       @lab3_94.L
0000235A  4888      
0000235C  4EB9 0000 3801          jsr       _printf
00002360  35A0      
00002362  584F      3802          addq.w    #4,A7
                    3803   ; menu();
00002364  4EB9 0000 3804          jsr       _menu
00002368  253E      
0000236A  4E75      3805          rts
                    3806   ; }
                    3807   ; void Breakpoint(void)
                    3808   ; {
                    3809   _Breakpoint:
0000236C  2F02      3810          move.l    D2,-(A7)
                    3811   ; char c;
                    3812   ; c = toupper(_getch());
0000236E  2F00      3813          move.l    D0,-(A7)
00002370  4EB8 0B68 3814          jsr       __getch
00002374  2200      3815          move.l    D0,D1
00002376  201F      3816          move.l    (A7)+,D0
00002378  2F01      3817          move.l    D1,-(A7)
0000237A  4EB9 0000 3818          jsr       _toupper
0000237E  3574      
00002380  584F      3819          addq.w    #4,A7
00002382  1400      3820          move.b    D0,D2
                    3821   ; if (c == (char)('D'))                                      // BreakPoint Display
00002384  0C02 0044 3822          cmp.b     #68,D2
00002388  6608      3823          bne.s     Breakpoint_1
                    3824   ; BreakPointDisplay();
0000238A  4EB8 1C54 3825          jsr       _BreakPointDisplay
0000238E  6000 0054 3826          bra       Breakpoint_10
                    3827   Breakpoint_1:
                    3828   ; else if (c == (char)('K')) {                                 // breakpoint Kill
00002392  0C02 004B 3829          cmp.b     #75,D2
00002396  6630      3830          bne.s     Breakpoint_3
                    3831   ; printf("\r\nKill All Break Points...(y/n)?");
00002398  4879 0000 3832          pea       @lab3_95.L
0000239C  48A8      
0000239E  4EB9 0000 3833          jsr       _printf
000023A2  35A0      
000023A4  584F      3834          addq.w    #4,A7
                    3835   ; c = toupper(_getch());
000023A6  2F00      3836          move.l    D0,-(A7)
000023A8  4EB8 0B68 3837          jsr       __getch
000023AC  2200      3838          move.l    D0,D1
000023AE  201F      3839          move.l    (A7)+,D0
000023B0  2F01      3840          move.l    D1,-(A7)
000023B2  4EB9 0000 3841          jsr       _toupper
000023B6  3574      
000023B8  584F      3842          addq.w    #4,A7
000023BA  1400      3843          move.b    D0,D2
                    3844   ; if (c == (char)('Y'))
000023BC  0C02 0059 3845          cmp.b     #89,D2
000023C0  6604      3846          bne.s     Breakpoint_5
                    3847   ; KillAllBreakPoints();
000023C2  4EB8 1FEC 3848          jsr       _KillAllBreakPoints
                    3849   Breakpoint_5:
000023C6  601C      3850          bra.s     Breakpoint_10
                    3851   Breakpoint_3:
                    3852   ; }
                    3853   ; else if (c == (char)('S')) {
000023C8  0C02 0053 3854          cmp.b     #83,D2
000023CC  6606      3855          bne.s     Breakpoint_7
                    3856   ; SetBreakPoint();
000023CE  4EB8 2084 3857          jsr       _SetBreakPoint
000023D2  6010      3858          bra.s     Breakpoint_10
                    3859   Breakpoint_7:
                    3860   ; }
                    3861   ; else if (c == (char)('C')) {
000023D4  0C02 0043 3862          cmp.b     #67,D2
000023D8  6606      3863          bne.s     Breakpoint_9
                    3864   ; BreakPointClear();
000023DA  4EB8 1DD4 3865          jsr       _BreakPointClear
000023DE  6004      3866          bra.s     Breakpoint_10
                    3867   Breakpoint_9:
                    3868   ; }
                    3869   ; else
                    3870   ; UnknownCommand();
000023E0  4EB8 2340 3871          jsr       _UnknownCommand
                    3872   Breakpoint_10:
000023E4  241F      3873          move.l    (A7)+,D2
000023E6  4E75      3874          rts
                    3875   ; }
                    3876   ; void Watchpoint(void)
                    3877   ; {
                    3878   _Watchpoint:
000023E8  2F02      3879          move.l    D2,-(A7)
                    3880   ; char c;
                    3881   ; c = toupper(_getch());
000023EA  2F00      3882          move.l    D0,-(A7)
000023EC  4EB8 0B68 3883          jsr       __getch
000023F0  2200      3884          move.l    D0,D1
000023F2  201F      3885          move.l    (A7)+,D0
000023F4  2F01      3886          move.l    D1,-(A7)
000023F6  4EB9 0000 3887          jsr       _toupper
000023FA  3574      
000023FC  584F      3888          addq.w    #4,A7
000023FE  1400      3889          move.b    D0,D2
                    3890   ; if (c == (char)('D'))                                      // WatchPoint Display
00002400  0C02 0044 3891          cmp.b     #68,D2
00002404  6608      3892          bne.s     Watchpoint_1
                    3893   ; WatchPointDisplay();
00002406  4EB8 1D28 3894          jsr       _WatchPointDisplay
0000240A  6000 0054 3895          bra       Watchpoint_10
                    3896   Watchpoint_1:
                    3897   ; else if (c == (char)('K')) {                                 // wtahcpoint Kill
0000240E  0C02 004B 3898          cmp.b     #75,D2
00002412  6630      3899          bne.s     Watchpoint_3
                    3900   ; printf("\r\nKill All Watch Points...(y/n)?");
00002414  4879 0000 3901          pea       @lab3_96.L
00002418  48CA      
0000241A  4EB9 0000 3902          jsr       _printf
0000241E  35A0      
00002420  584F      3903          addq.w    #4,A7
                    3904   ; c = toupper(_getch());
00002422  2F00      3905          move.l    D0,-(A7)
00002424  4EB8 0B68 3906          jsr       __getch
00002428  2200      3907          move.l    D0,D1
0000242A  201F      3908          move.l    (A7)+,D0
0000242C  2F01      3909          move.l    D1,-(A7)
0000242E  4EB9 0000 3910          jsr       _toupper
00002432  3574      
00002434  584F      3911          addq.w    #4,A7
00002436  1400      3912          move.b    D0,D2
                    3913   ; if (c == (char)('Y'))
00002438  0C02 0059 3914          cmp.b     #89,D2
0000243C  6604      3915          bne.s     Watchpoint_5
                    3916   ; KillAllWatchPoints();
0000243E  4EB8 2054 3917          jsr       _KillAllWatchPoints
                    3918   Watchpoint_5:
00002442  601C      3919          bra.s     Watchpoint_10
                    3920   Watchpoint_3:
                    3921   ; }
                    3922   ; else if (c == (char)('S')) {
00002444  0C02 0053 3923          cmp.b     #83,D2
00002448  6606      3924          bne.s     Watchpoint_7
                    3925   ; SetWatchPoint();
0000244A  4EB8 21A4 3926          jsr       _SetWatchPoint
0000244E  6010      3927          bra.s     Watchpoint_10
                    3928   Watchpoint_7:
                    3929   ; }
                    3930   ; else if (c == (char)('C')) {
00002450  0C02 0043 3931          cmp.b     #67,D2
00002454  6606      3932          bne.s     Watchpoint_9
                    3933   ; WatchPointClear();
00002456  4EB8 1EAE 3934          jsr       _WatchPointClear
0000245A  6004      3935          bra.s     Watchpoint_10
                    3936   Watchpoint_9:
                    3937   ; }
                    3938   ; else
                    3939   ; UnknownCommand();
0000245C  4EB8 2340 3940          jsr       _UnknownCommand
                    3941   Watchpoint_10:
00002460  241F      3942          move.l    (A7)+,D2
00002462  4E75      3943          rts
                    3944   ; }
                    3945   ; void Help(void)
                    3946   ; {
                    3947   _Help:
00002464  48E7 2020 3948          movem.l   D2/A2,-(A7)
00002468  45F9 0000 3949          lea       _printf.L,A2
0000246C  35A0      
                    3950   ; char* banner = "\r\n----------------------------------------------------------------";
0000246E  41F9 0000 3951          lea       @lab3_97.L,A0
00002472  48EC      
00002474  2408      3952          move.l    A0,D2
                    3953   ; printf(banner);
00002476  2F02      3954          move.l    D2,-(A7)
00002478  4E92      3955          jsr       (A2)
0000247A  584F      3956          addq.w    #4,A7
                    3957   ; printf("\r\n  Debugger Command Summary");
0000247C  4879 0000 3958          pea       @lab3_98.L
00002480  4930      
00002482  4E92      3959          jsr       (A2)
00002484  584F      3960          addq.w    #4,A7
                    3961   ; printf(banner);
00002486  2F02      3962          move.l    D2,-(A7)
00002488  4E92      3963          jsr       (A2)
0000248A  584F      3964          addq.w    #4,A7
                    3965   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000248C  4879 0000 3966          pea       @lab3_99.L
00002490  494E      
00002492  4E92      3967          jsr       (A2)
00002494  584F      3968          addq.w    #4,A7
                    3969   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill");
00002496  4879 0000 3970          pea       @lab3_100.L
0000249A  4992      
0000249C  4E92      3971          jsr       (A2)
0000249E  584F      3972          addq.w    #4,A7
                    3973   ; printf("\r\n  C            - Copy Program from Flash to Main Memory");
000024A0  4879 0000 3974          pea       @lab3_101.L
000024A4  49CA      
000024A6  4E92      3975          jsr       (A2)
000024A8  584F      3976          addq.w    #4,A7
                    3977   ; printf("\r\n  D            - Dump Memory Contents to Screen");
000024AA  4879 0000 3978          pea       @lab3_102.L
000024AE  4A04      
000024B0  4E92      3979          jsr       (A2)
000024B2  584F      3980          addq.w    #4,A7
                    3981   ; printf("\r\n  E            - Enter String into Memory");
000024B4  4879 0000 3982          pea       @lab3_103.L
000024B8  4A36      
000024BA  4E92      3983          jsr       (A2)
000024BC  584F      3984          addq.w    #4,A7
                    3985   ; printf("\r\n  F            - Fill Memory with Data");
000024BE  4879 0000 3986          pea       @lab3_104.L
000024C2  4A62      
000024C4  4E92      3987          jsr       (A2)
000024C6  584F      3988          addq.w    #4,A7
                    3989   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC);
000024C8  2F39 0B00 3990          move.l    _PC.L,-(A7)
000024CC  0120      
000024CE  4879 0000 3991          pea       @lab3_105.L
000024D2  4A8C      
000024D4  4E92      3992          jsr       (A2)
000024D6  504F      3993          addq.w    #8,A7
                    3994   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop");
000024D8  4879 0000 3995          pea       @lab3_106.L
000024DC  4AC6      
000024DE  4E92      3996          jsr       (A2)
000024E0  584F      3997          addq.w    #4,A7
                    3998   ; printf("\r\n  M            - Memory Examine and Change");
000024E2  4879 0000 3999          pea       @lab3_107.L
000024E6  4AFE      
000024E8  4E92      4000          jsr       (A2)
000024EA  584F      4001          addq.w    #4,A7
                    4002   ; printf("\r\n  P            - Program Flash Memory with User Program");
000024EC  4879 0000 4003          pea       @lab3_108.L
000024F0  4B2C      
000024F2  4E92      4004          jsr       (A2)
000024F4  584F      4005          addq.w    #4,A7
                    4006   ; printf("\r\n  R            - Display 68000 Registers");
000024F6  4879 0000 4007          pea       @lab3_109.L
000024FA  4B66      
000024FC  4E92      4008          jsr       (A2)
000024FE  584F      4009          addq.w    #4,A7
                    4010   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode");
00002500  4879 0000 4011          pea       @lab3_110.L
00002504  4B92      
00002506  4E92      4012          jsr       (A2)
00002508  584F      4013          addq.w    #4,A7
                    4014   ; printf("\r\n  TM           - Test Memory");
0000250A  4879 0000 4015          pea       @lab3_111.L
0000250E  4BC4      
00002510  4E92      4016          jsr       (A2)
00002512  584F      4017          addq.w    #4,A7
                    4018   ; printf("\r\n  TS           - Test Switches: SW7-0");
00002514  4879 0000 4019          pea       @lab3_112.L
00002518  4BE4      
0000251A  4E92      4020          jsr       (A2)
0000251C  584F      4021          addq.w    #4,A7
                    4022   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment");
0000251E  4879 0000 4023          pea       @lab3_113.L
00002522  4C0C      
00002524  4E92      4024          jsr       (A2)
00002526  584F      4025          addq.w    #4,A7
                    4026   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill");
00002528  4879 0000 4027          pea       @lab3_114.L
0000252C  4C42      
0000252E  4E92      4028          jsr       (A2)
00002530  584F      4029          addq.w    #4,A7
                    4030   ; printf(banner);
00002532  2F02      4031          move.l    D2,-(A7)
00002534  4E92      4032          jsr       (A2)
00002536  584F      4033          addq.w    #4,A7
00002538  4CDF 0404 4034          movem.l   (A7)+,D2/A2
0000253C  4E75      4035          rts
                    4036   ; }
                    4037   ; void menu(void)
                    4038   ; {
                    4039   _menu:
0000253E  48E7 303C 4040          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002542  45F9 0000 4041          lea       _printf.L,A2
00002546  35A0      
00002548  47F9 0B00 4042          lea       _Trace.L,A3
0000254C  00D8      
0000254E  49F9 0B00 4043          lea       _x.L,A4
00002552  00C8      
00002554  4BF9 0B00 4044          lea       _SR.L,A5
00002558  012C      
                    4045   ; char c, c1;
                    4046   ; while (1) {
                    4047   menu_1:
                    4048   ; FlushKeyboard();               // dump unread characters from keyboard
0000255A  4EB8 0BA6 4049          jsr       _FlushKeyboard
                    4050   ; printf("\r\n#");
0000255E  4879 0000 4051          pea       @lab3_115.L
00002562  4C7A      
00002564  4E92      4052          jsr       (A2)
00002566  584F      4053          addq.w    #4,A7
                    4054   ; c = toupper(_getch());
00002568  2F00      4055          move.l    D0,-(A7)
0000256A  4EB8 0B68 4056          jsr       __getch
0000256E  2200      4057          move.l    D0,D1
00002570  201F      4058          move.l    (A7)+,D0
00002572  2F01      4059          move.l    D1,-(A7)
00002574  4EB9 0000 4060          jsr       _toupper
00002578  3574      
0000257A  584F      4061          addq.w    #4,A7
0000257C  1400      4062          move.b    D0,D2
                    4063   ; if (c == (char)('L'))                  // load s record file
0000257E  0C02 004C 4064          cmp.b     #76,D2
00002582  6608      4065          bne.s     menu_4
                    4066   ; Load_SRecordFile();
00002584  4EB8 0E36 4067          jsr       _Load_SRecordFile
00002588  6000 021E 4068          bra       menu_46
                    4069   menu_4:
                    4070   ; else if (c == (char)('D'))             // dump memory
0000258C  0C02 0044 4071          cmp.b     #68,D2
00002590  6608      4072          bne.s     menu_6
                    4073   ; DumpMemory();
00002592  4EB8 0CCC 4074          jsr       _DumpMemory
00002596  6000 0210 4075          bra       menu_46
                    4076   menu_6:
                    4077   ; else if (c == (char)('E'))             // Enter String into memory
0000259A  0C02 0045 4078          cmp.b     #69,D2
0000259E  660A      4079          bne.s     menu_8
                    4080   ; EnterString();
000025A0  4EB9 0000 4081          jsr       _EnterString
000025A4  28F0      
000025A6  6000 0200 4082          bra       menu_46
                    4083   menu_8:
                    4084   ; else if (c == (char)('F'))             // fill memory
000025AA  0C02 0046 4085          cmp.b     #70,D2
000025AE  6608      4086          bne.s     menu_10
                    4087   ; FillMemory();
000025B0  4EB8 0DBC 4088          jsr       _FillMemory
000025B4  6000 01F2 4089          bra       menu_46
                    4090   menu_10:
                    4091   ; else if (c == (char)('G')) {           // go user program
000025B8  0C02 0047 4092          cmp.b     #71,D2
000025BC  6626      4093          bne.s     menu_12
                    4094   ; printf("\r\nProgram Running.....");
000025BE  4879 0000 4095          pea       @lab3_116.L
000025C2  4C7E      
000025C4  4E92      4096          jsr       (A2)
000025C6  584F      4097          addq.w    #4,A7
                    4098   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
000025C8  4879 0000 4099          pea       @lab3_117.L
000025CC  4C96      
000025CE  4E92      4100          jsr       (A2)
000025D0  584F      4101          addq.w    #4,A7
                    4102   ; GoFlag = 1;
000025D2  23FC 0000 4103          move.l    #1,_GoFlag.L
000025D6  0001 0B00 
000025DA  00DC      
                    4104   ; go();
000025DC  4EB8 08B8 4105          jsr       _go
000025E0  6000 01C6 4106          bra       menu_46
                    4107   menu_12:
                    4108   ; }
                    4109   ; else if (c == (char)('M'))           // memory examine and modify
000025E4  0C02 004D 4110          cmp.b     #77,D2
000025E8  6608      4111          bne.s     menu_14
                    4112   ; MemoryChange();
000025EA  4EB8 0FC4 4113          jsr       _MemoryChange
000025EE  6000 01B8 4114          bra       menu_46
                    4115   menu_14:
                    4116   ; else if (c == (char)('P'))            // Program Flash Chip
000025F2  0C02 0050 4117          cmp.b     #80,D2
000025F6  6608      4118          bne.s     menu_16
                    4119   ; ProgramFlashChip();
000025F8  4EB8 12DE 4120          jsr       _ProgramFlashChip
000025FC  6000 01AA 4121          bra       menu_46
                    4122   menu_16:
                    4123   ; else if (c == (char)('C'))             // copy flash chip to ram and go
00002600  0C02 0043 4124          cmp.b     #67,D2
00002604  6608      4125          bne.s     menu_18
                    4126   ; LoadFromFlashChip();
00002606  4EB8 13EC 4127          jsr       _LoadFromFlashChip
0000260A  6000 019C 4128          bra       menu_46
                    4129   menu_18:
                    4130   ; else if (c == (char)('R'))             // dump registers
0000260E  0C02 0052 4131          cmp.b     #82,D2
00002612  6608      4132          bne.s     menu_20
                    4133   ; DumpRegisters();
00002614  4EB8 14A6 4134          jsr       _DumpRegisters
00002618  6000 018E 4135          bra       menu_46
                    4136   menu_20:
                    4137   ; else if (c == (char)('.'))           // change registers
0000261C  0C02 002E 4138          cmp.b     #46,D2
00002620  6608      4139          bne.s     menu_22
                    4140   ; ChangeRegisters();
00002622  4EB8 1998 4141          jsr       _ChangeRegisters
00002626  6000 0180 4142          bra       menu_46
                    4143   menu_22:
                    4144   ; else if (c == (char)('B'))              // breakpoint command
0000262A  0C02 0042 4145          cmp.b     #66,D2
0000262E  6608      4146          bne.s     menu_24
                    4147   ; Breakpoint();
00002630  4EB8 236C 4148          jsr       _Breakpoint
00002634  6000 0172 4149          bra       menu_46
                    4150   menu_24:
                    4151   ; else if (c == (char)('T')) {          // Test command
00002638  0C02 0054 4152          cmp.b     #84,D2
0000263C  6600 0046 4153          bne       menu_26
                    4154   ; c1 = toupper(_getch());
00002640  2F00      4155          move.l    D0,-(A7)
00002642  4EB8 0B68 4156          jsr       __getch
00002646  2200      4157          move.l    D0,D1
00002648  201F      4158          move.l    (A7)+,D0
0000264A  2F01      4159          move.l    D1,-(A7)
0000264C  4EB9 0000 4160          jsr       _toupper
00002650  3574      
00002652  584F      4161          addq.w    #4,A7
00002654  1600      4162          move.b    D0,D3
                    4163   ; if (c1 == (char)('M'))                    // memory test
00002656  0C03 004D 4164          cmp.b     #77,D3
0000265A  6608      4165          bne.s     menu_28
                    4166   ; MemoryTest();
0000265C  4EB9 0000 4167          jsr       _MemoryTest
00002660  2940      
00002662  601C      4168          bra.s     menu_33
                    4169   menu_28:
                    4170   ; else if (c1 == (char)('S'))              // Switch Test command
00002664  0C03 0053 4171          cmp.b     #83,D3
00002668  6606      4172          bne.s     menu_30
                    4173   ; SwitchTest();
0000266A  4EB8 0AA4 4174          jsr       _SwitchTest
0000266E  6010      4175          bra.s     menu_33
                    4176   menu_30:
                    4177   ; else if (c1 == (char)('D'))              // display Test command
00002670  0C03 0044 4178          cmp.b     #68,D3
00002674  6606      4179          bne.s     menu_32
                    4180   ; TestLEDS();
00002676  4EB8 0A50 4181          jsr       _TestLEDS
0000267A  6004      4182          bra.s     menu_33
                    4183   menu_32:
                    4184   ; else
                    4185   ; UnknownCommand();
0000267C  4EB8 2340 4186          jsr       _UnknownCommand
                    4187   menu_33:
00002680  6000 0126 4188          bra       menu_46
                    4189   menu_26:
                    4190   ; }
                    4191   ; else if (c == (char)(' ')) {             // Next instruction command
00002684  0C02 0020 4192          cmp.b     #32,D2
00002688  6636      4193          bne.s     menu_34
                    4194   ; DisableBreakPoints();
0000268A  4EB8 1F50 4195          jsr       _DisableBreakPoints
                    4196   ; if (Trace == 1 && GoFlag == 1) {    // if the program is running and trace mode on then 'N' is valid
0000268E  2013      4197          move.l    (A3),D0
00002690  0C80 0000 4198          cmp.l     #1,D0
00002694  0001      
00002696  661A      4199          bne.s     menu_36
00002698  2039 0B00 4200          move.l    _GoFlag.L,D0
0000269C  00DC      
0000269E  0C80 0000 4201          cmp.l     #1,D0
000026A2  0001      
000026A4  660C      4202          bne.s     menu_36
                    4203   ; TraceException = 1;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000026A6  13FC 0001 4204          move.b    #1,4194314
000026AA  0040 000A 
                    4205   ; return;
000026AE  6000 00FC 4206          bra       menu_38
                    4207   menu_36:
                    4208   ; }
                    4209   ; else
                    4210   ; printf("\r\nError: Press 'G' first to start program");
000026B2  4879 0000 4211          pea       @lab3_118.L
000026B6  4CC4      
000026B8  4E92      4212          jsr       (A2)
000026BA  584F      4213          addq.w    #4,A7
000026BC  6000 00EA 4214          bra       menu_46
                    4215   menu_34:
                    4216   ; }
                    4217   ; else if (c == (char)('S')) {             // single step
000026C0  0C02 0053 4218          cmp.b     #83,D2
000026C4  6600 008C 4219          bne       menu_39
                    4220   ; if (Trace == 0) {
000026C8  2013      4221          move.l    (A3),D0
000026CA  6600 0050 4222          bne       menu_41
                    4223   ; DisableBreakPoints();
000026CE  4EB8 1F50 4224          jsr       _DisableBreakPoints
                    4225   ; printf("\r\nSingle Step  :[ON]");
000026D2  4879 0000 4226          pea       @lab3_119.L
000026D6  4CEE      
000026D8  4E92      4227          jsr       (A2)
000026DA  584F      4228          addq.w    #4,A7
                    4229   ; printf("\r\nBreak Points :[Disabled]");
000026DC  4879 0000 4230          pea       @lab3_52.L
000026E0  438C      
000026E2  4E92      4231          jsr       (A2)
000026E4  584F      4232          addq.w    #4,A7
                    4233   ; SR = SR | (unsigned short int)(0x8000);    // set T bit in status register
000026E6  0055 8000 4234          or.w      #32768,(A5)
                    4235   ; printf("\r\nPress 'G' to Trace Program from address $%X.....", PC);
000026EA  2F39 0B00 4236          move.l    _PC.L,-(A7)
000026EE  0120      
000026F0  4879 0000 4237          pea       @lab3_120.L
000026F4  4D04      
000026F6  4E92      4238          jsr       (A2)
000026F8  504F      4239          addq.w    #8,A7
                    4240   ; printf("\r\nPush <RESET Button> to Stop.....");
000026FA  4879 0000 4241          pea       @lab3_121.L
000026FE  4D38      
00002700  4E92      4242          jsr       (A2)
00002702  584F      4243          addq.w    #4,A7
                    4244   ; DumpRegisters();
00002704  4EB8 14A6 4245          jsr       _DumpRegisters
                    4246   ; Trace = 1;
00002708  26BC 0000 4247          move.l    #1,(A3)
0000270C  0001      
                    4248   ; TraceException = 1;
0000270E  13FC 0001 4249          move.b    #1,4194314
00002712  0040 000A 
                    4250   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002716  28B8 0074 4251          move.l    116,(A4)
0000271A  6032      4252          bra.s     menu_42
                    4253   menu_41:
                    4254   ; }
                    4255   ; else {
                    4256   ; Trace = 0;
0000271C  4293      4257          clr.l     (A3)
                    4258   ; TraceException = 0;
0000271E  4239 0040 4259          clr.b     4194314
00002722  000A      
                    4260   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002724  28B8 0074 4261          move.l    116,(A4)
                    4262   ; EnableBreakPoints();
00002728  4EB8 1FA4 4263          jsr       _EnableBreakPoints
                    4264   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
0000272C  0255 7FFF 4265          and.w     #32767,(A5)
                    4266   ; printf("\r\nSingle Step : [OFF]");
00002730  4879 0000 4267          pea       @lab3_122.L
00002734  4D5C      
00002736  4E92      4268          jsr       (A2)
00002738  584F      4269          addq.w    #4,A7
                    4270   ; printf("\r\nBreak Points :[Enabled]");
0000273A  4879 0000 4271          pea       @lab3_123.L
0000273E  4D72      
00002740  4E92      4272          jsr       (A2)
00002742  584F      4273          addq.w    #4,A7
                    4274   ; printf("\r\nPress <ESC> to Resume User Program.....");
00002744  4879 0000 4275          pea       @lab3_124.L
00002748  4D8C      
0000274A  4E92      4276          jsr       (A2)
0000274C  584F      4277          addq.w    #4,A7
                    4278   menu_42:
0000274E  6000 0058 4279          bra       menu_46
                    4280   menu_39:
                    4281   ; }
                    4282   ; }
                    4283   ; else if (c == (char)(0x1b)) {   // if user choses to end trace and run program
00002752  0C02 001B 4284          cmp.b     #27,D2
00002756  6600 0040 4285          bne       menu_43
                    4286   ; Trace = 0;
0000275A  4293      4287          clr.l     (A3)
                    4288   ; TraceException = 0;
0000275C  4239 0040 4289          clr.b     4194314
00002760  000A      
                    4290   ; x = *(unsigned int*)(0x00000074);   // read IRQ 5 vector to reset trace vector generator
00002762  28B8 0074 4291          move.l    116,(A4)
                    4292   ; EnableBreakPoints();
00002766  4EB8 1FA4 4293          jsr       _EnableBreakPoints
                    4294   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
0000276A  0255 7FFF 4295          and.w     #32767,(A5)
                    4296   ; printf("\r\nSingle Step  :[OFF]");
0000276E  4879 0000 4297          pea       @lab3_125.L
00002772  4DB6      
00002774  4E92      4298          jsr       (A2)
00002776  584F      4299          addq.w    #4,A7
                    4300   ; printf("\r\nBreak Points :[Enabled]");
00002778  4879 0000 4301          pea       @lab3_123.L
0000277C  4D72      
0000277E  4E92      4302          jsr       (A2)
00002780  584F      4303          addq.w    #4,A7
                    4304   ; printf("\r\nProgram Running.....");
00002782  4879 0000 4305          pea       @lab3_116.L
00002786  4C7E      
00002788  4E92      4306          jsr       (A2)
0000278A  584F      4307          addq.w    #4,A7
                    4308   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
0000278C  4879 0000 4309          pea       @lab3_117.L
00002790  4C96      
00002792  4E92      4310          jsr       (A2)
00002794  584F      4311          addq.w    #4,A7
                    4312   ; return;
00002796  6014      4313          bra.s     menu_38
                    4314   menu_43:
                    4315   ; }
                    4316   ; else if (c == (char)('W'))              // Watchpoint command
00002798  0C02 0057 4317          cmp.b     #87,D2
0000279C  6606      4318          bne.s     menu_45
                    4319   ; Watchpoint();
0000279E  4EB8 23E8 4320          jsr       _Watchpoint
000027A2  6004      4321          bra.s     menu_46
                    4322   menu_45:
                    4323   ; else
                    4324   ; UnknownCommand();
000027A4  4EB8 2340 4325          jsr       _UnknownCommand
                    4326   menu_46:
000027A8  6000 FDB0 4327          bra       menu_1
                    4328   menu_38:
000027AC  4CDF 3C0C 4329          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000027B0  4E75      4330          rts
                    4331   ; }
                    4332   ; }
                    4333   ; void PrintErrorMessageandAbort(char* string) {
                    4334   _PrintErrorMessageandAbort:
000027B2  4E56 0000 4335          link      A6,#0
                    4336   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n");
000027B6  4879 0000 4337          pea       @lab3_126.L
000027BA  4DCC      
000027BC  4EB9 0000 4338          jsr       _printf
000027C0  35A0      
000027C2  584F      4339          addq.w    #4,A7
                    4340   ; printf("%s\r\n", string);
000027C4  2F2E 0008 4341          move.l    8(A6),-(A7)
000027C8  4879 0000 4342          pea       @lab3_127.L
000027CC  4DE8      
000027CE  4EB9 0000 4343          jsr       _printf
000027D2  35A0      
000027D4  504F      4344          addq.w    #8,A7
                    4345   ; menu();
000027D6  4EB8 253E 4346          jsr       _menu
000027DA  4E5E      4347          unlk      A6
000027DC  4E75      4348          rts
                    4349   ; }
                    4350   ; void IRQMessage(int level) {
                    4351   _IRQMessage:
000027DE  4E56 0000 4352          link      A6,#0
                    4353   ; printf("\r\n\r\nProgram ABORT !!!!!");
000027E2  4879 0000 4354          pea       @lab3_128.L
000027E6  4DEE      
000027E8  4EB9 0000 4355          jsr       _printf
000027EC  35A0      
000027EE  584F      4356          addq.w    #4,A7
                    4357   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level);
000027F0  2F2E 0008 4358          move.l    8(A6),-(A7)
000027F4  4879 0000 4359          pea       @lab3_129.L
000027F8  4E06      
000027FA  4EB9 0000 4360          jsr       _printf
000027FE  35A0      
00002800  504F      4361          addq.w    #8,A7
                    4362   ; menu();
00002802  4EB8 253E 4363          jsr       _menu
00002806  4E5E      4364          unlk      A6
00002808  4E75      4365          rts
                    4366   ; }
                    4367   ; void UnhandledIRQ1(void) {
                    4368   _UnhandledIRQ1:
                    4369   ; IRQMessage(1);
0000280A  4878 0001 4370          pea       1
0000280E  4EB8 27DE 4371          jsr       _IRQMessage
00002812  584F      4372          addq.w    #4,A7
00002814  4E75      4373          rts
                    4374   ; }
                    4375   ; void UnhandledIRQ2(void) {
                    4376   _UnhandledIRQ2:
                    4377   ; IRQMessage(2);
00002816  4878 0002 4378          pea       2
0000281A  4EB8 27DE 4379          jsr       _IRQMessage
0000281E  584F      4380          addq.w    #4,A7
00002820  4E75      4381          rts
                    4382   ; }
                    4383   ; void UnhandledIRQ3(void) {
                    4384   _UnhandledIRQ3:
                    4385   ; IRQMessage(3);
00002822  4878 0003 4386          pea       3
00002826  4EB8 27DE 4387          jsr       _IRQMessage
0000282A  584F      4388          addq.w    #4,A7
0000282C  4E75      4389          rts
                    4390   ; }
                    4391   ; void UnhandledIRQ4(void) {
                    4392   _UnhandledIRQ4:
                    4393   ; IRQMessage(4);
0000282E  4878 0004 4394          pea       4
00002832  4EB8 27DE 4395          jsr       _IRQMessage
00002836  584F      4396          addq.w    #4,A7
00002838  4E75      4397          rts
                    4398   ; }
                    4399   ; void UnhandledIRQ5(void) {
                    4400   _UnhandledIRQ5:
                    4401   ; IRQMessage(5);
0000283A  4878 0005 4402          pea       5
0000283E  4EB8 27DE 4403          jsr       _IRQMessage
00002842  584F      4404          addq.w    #4,A7
00002844  4E75      4405          rts
                    4406   ; }
                    4407   ; void UnhandledIRQ6(void) {
                    4408   _UnhandledIRQ6:
                    4409   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....");
00002846  4879 0000 4410          pea       @lab3_130.L
0000284A  4E2A      
0000284C  4EB8 27B2 4411          jsr       _PrintErrorMessageandAbort
00002850  584F      4412          addq.w    #4,A7
                    4413   ; menu();
00002852  4EB8 253E 4414          jsr       _menu
00002856  4E75      4415          rts
                    4416   ; }
                    4417   ; void UnhandledIRQ7(void) {
                    4418   _UnhandledIRQ7:
                    4419   ; IRQMessage(7);
00002858  4878 0007 4420          pea       7
0000285C  4EB8 27DE 4421          jsr       _IRQMessage
00002860  584F      4422          addq.w    #4,A7
00002862  4E75      4423          rts
                    4424   ; }
                    4425   ; void UnhandledTrap(void) {
                    4426   _UnhandledTrap:
                    4427   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!");
00002864  4879 0000 4428          pea       @lab3_131.L
00002868  4E6A      
0000286A  4EB8 27B2 4429          jsr       _PrintErrorMessageandAbort
0000286E  584F      4430          addq.w    #4,A7
00002870  4E75      4431          rts
                    4432   ; }
                    4433   ; void BusError() {
                    4434   _BusError:
                    4435   ; PrintErrorMessageandAbort("BUS Error!");
00002872  4879 0000 4436          pea       @lab3_132.L
00002876  4E80      
00002878  4EB8 27B2 4437          jsr       _PrintErrorMessageandAbort
0000287C  584F      4438          addq.w    #4,A7
0000287E  4E75      4439          rts
                    4440   ; }
                    4441   ; void AddressError() {
                    4442   _AddressError:
                    4443   ; PrintErrorMessageandAbort("ADDRESS Error!");
00002880  4879 0000 4444          pea       @lab3_133.L
00002884  4E8C      
00002886  4EB8 27B2 4445          jsr       _PrintErrorMessageandAbort
0000288A  584F      4446          addq.w    #4,A7
0000288C  4E75      4447          rts
                    4448   ; }
                    4449   ; void IllegalInstruction() {
                    4450   _IllegalInstruction:
                    4451   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION");
0000288E  4879 0000 4452          pea       @lab3_134.L
00002892  4E9C      
00002894  4EB8 27B2 4453          jsr       _PrintErrorMessageandAbort
00002898  584F      4454          addq.w    #4,A7
0000289A  4E75      4455          rts
                    4456   ; }
                    4457   ; void Dividebyzero() {
                    4458   _Dividebyzero:
                    4459   ; PrintErrorMessageandAbort("DIVIDE BY ZERO");
0000289C  4879 0000 4460          pea       @lab3_135.L
000028A0  4EB0      
000028A2  4EB8 27B2 4461          jsr       _PrintErrorMessageandAbort
000028A6  584F      4462          addq.w    #4,A7
000028A8  4E75      4463          rts
                    4464   ; }
                    4465   ; void Check() {
                    4466   _Check:
                    4467   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION");
000028AA  4879 0000 4468          pea       @lab3_136.L
000028AE  4EC0      
000028B0  4EB8 27B2 4469          jsr       _PrintErrorMessageandAbort
000028B4  584F      4470          addq.w    #4,A7
000028B6  4E75      4471          rts
                    4472   ; }
                    4473   ; void Trapv() {
                    4474   _Trapv:
                    4475   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION");
000028B8  4879 0000 4476          pea       @lab3_137.L
000028BC  4ED2      
000028BE  4EB8 27B2 4477          jsr       _PrintErrorMessageandAbort
000028C2  584F      4478          addq.w    #4,A7
000028C4  4E75      4479          rts
                    4480   ; }
                    4481   ; void PrivError() {
                    4482   _PrivError:
                    4483   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION");
000028C6  4879 0000 4484          pea       @lab3_138.L
000028CA  4EE4      
000028CC  4EB8 27B2 4485          jsr       _PrintErrorMessageandAbort
000028D0  584F      4486          addq.w    #4,A7
000028D2  4E75      4487          rts
                    4488   ; }
                    4489   ; void UnitIRQ() {
                    4490   _UnitIRQ:
                    4491   ; PrintErrorMessageandAbort("UNINITIALISED IRQ");
000028D4  4879 0000 4492          pea       @lab3_139.L
000028D8  4EF8      
000028DA  4EB8 27B2 4493          jsr       _PrintErrorMessageandAbort
000028DE  584F      4494          addq.w    #4,A7
000028E0  4E75      4495          rts
                    4496   ; }
                    4497   ; void Spurious() {
                    4498   _Spurious:
                    4499   ; PrintErrorMessageandAbort("SPURIOUS IRQ");
000028E2  4879 0000 4500          pea       @lab3_140.L
000028E6  4F0A      
000028E8  4EB8 27B2 4501          jsr       _PrintErrorMessageandAbort
000028EC  584F      4502          addq.w    #4,A7
000028EE  4E75      4503          rts
                    4504   ; }
                    4505   ; void EnterString(void)
                    4506   ; {
                    4507   _EnterString:
000028F0  4E56 FFFC 4508          link      A6,#-4
000028F4  2F02      4509          move.l    D2,-(A7)
                    4510   ; unsigned char* Start;
                    4511   ; unsigned char c;
                    4512   ; printf("\r\nStart Address in Memory: ");
000028F6  4879 0000 4513          pea       @lab3_141.L
000028FA  4F18      
000028FC  4EB9 0000 4514          jsr       _printf
00002900  35A0      
00002902  584F      4515          addq.w    #4,A7
                    4516   ; Start = Get8HexDigits(0);
00002904  42A7      4517          clr.l     -(A7)
00002906  4EB8 0CA4 4518          jsr       _Get8HexDigits
0000290A  584F      4519          addq.w    #4,A7
0000290C  2400      4520          move.l    D0,D2
                    4521   ; printf("\r\nEnter String (ESC to end) :");
0000290E  4879 0000 4522          pea       @lab3_142.L
00002912  4F34      
00002914  4EB9 0000 4523          jsr       _printf
00002918  35A0      
0000291A  584F      4524          addq.w    #4,A7
                    4525   ; while ((c = getchar()) != 0x1b)
                    4526   EnterString_1:
0000291C  4EB9 0000 4527          jsr       _getch
00002920  34C2      
00002922  1D40 FFFF 4528          move.b    D0,-1(A6)
00002926  0C00 001B 4529          cmp.b     #27,D0
0000292A  670A      4530          beq.s     EnterString_3
                    4531   ; *Start++ = c;
0000292C  2042      4532          move.l    D2,A0
0000292E  5282      4533          addq.l    #1,D2
00002930  10AE FFFF 4534          move.b    -1(A6),(A0)
00002934  60E6      4535          bra       EnterString_1
                    4536   EnterString_3:
                    4537   ; *Start = 0x00;  // terminate with a null
00002936  2042      4538          move.l    D2,A0
00002938  4210      4539          clr.b     (A0)
0000293A  241F      4540          move.l    (A7)+,D2
0000293C  4E5E      4541          unlk      A6
0000293E  4E75      4542          rts
                    4543   ; }
                    4544   ; void MemoryTest(void)
                    4545   ; {
                    4546   _MemoryTest:
00002940  4E56 FFB8 4547          link      A6,#-72
00002944  48E7 3F3C 4548          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002948  45F9 0000 4549          lea       _printf.L,A2
0000294C  35A0      
0000294E  49F8 0CA4 4550          lea       _Get8HexDigits.L,A4
                    4551   ; char data_type_num;
                    4552   ; unsigned int test_data_num;
                    4553   ; unsigned char* StartPtrByte, * EndPtrByte, * TempPtrByte;
                    4554   ; unsigned short int* StartPtrWord, * EndPtrWord, * TempPtrWord;
                    4555   ; unsigned int* StartPtrLongWord, * EndPtrLongWord, * TempPtrLongWord;
                    4556   ; int StartPtrLongWordTruc, EndPtrLongWordTruc;
                    4557   ; unsigned char test_data_byte_list[] = { 0xAA, 0xAB, 0xCC, 0xCD };
00002952  41EE FFD4 4558          lea       -44(A6),A0
00002956  43F9 0000 4559          lea       MemoryTest_test_data_byte_list.L,A1
0000295A  591E      
0000295C  20D9      4560          move.l    (A1)+,(A0)+
                    4561   ; unsigned char test_data_byte;
                    4562   ; unsigned char read_data_byte;
                    4563   ; unsigned  int test_data_word_list[] = { 0xAAAA, 0xBABA, 0xCCDD, 0xDDDD };
0000295E  41EE FFDA 4564          lea       -38(A6),A0
00002962  43F9 0000 4565          lea       MemoryTest_test_data_word_list.L,A1
00002966  5922      
00002968  7003      4566          moveq     #3,D0
0000296A  20D9      4567          move.l    (A1)+,(A0)+
0000296C  51C8 FFFC 4568          dbra      D0,*-2
                    4569   ; unsigned  int test_data_word;
                    4570   ; unsigned int test_data_long_word_list[] = { 0xAAAAAAAA, 0xABABABAB, 0xCCCCDDDD, 0xAABBCCDD };
00002970  41EE FFEE 4571          lea       -18(A6),A0
00002974  43F9 0000 4572          lea       MemoryTest_test_data_long_word_list.L,A1
00002978  5932      
0000297A  7003      4573          moveq     #3,D0
0000297C  20D9      4574          move.l    (A1)+,(A0)+
0000297E  51C8 FFFC 4575          dbra      D0,*-2
                    4576   ; unsigned int test_data_long_word;
                    4577   ; unsigned short truncated_data;
                    4578   ; unsigned int counter = 9999;
00002982  2C3C 0000 4579          move.l    #9999,D6
00002986  270F      
                    4580   ; printf("\r\nSelect data type:\n1 = bytes (8 bits)\n2 = words (16 bits)\n3 = long words (32 bits)\n");
00002988  4879 0000 4581          pea       @lab3_143.L
0000298C  4F52      
0000298E  4E92      4582          jsr       (A2)
00002990  584F      4583          addq.w    #4,A7
                    4584   ; data_type_num = _getch();
00002992  4EB8 0B68 4585          jsr       __getch
00002996  1D40 FFBB 4586          move.b    D0,-69(A6)
                    4587   ; switch (data_type_num) {
0000299A  102E FFBB 4588          move.b    -69(A6),D0
0000299E  4880      4589          ext.w     D0
000029A0  48C0      4590          ext.l     D0
000029A2  0C80 0000 4591          cmp.l     #50,D0
000029A6  0032      
000029A8  6700 022A 4592          beq       MemoryTest_4
000029AC  6E0C      4593          bgt.s     MemoryTest_7
000029AE  0C80 0000 4594          cmp.l     #49,D0
000029B2  0031      
000029B4  6712      4595          beq.s     MemoryTest_3
000029B6  6000 070E 4596          bra       MemoryTest_1
                    4597   MemoryTest_7:
000029BA  0C80 0000 4598          cmp.l     #51,D0
000029BE  0033      
000029C0  6700 045A 4599          beq       MemoryTest_5
000029C4  6000 0700 4600          bra       MemoryTest_1
                    4601   MemoryTest_3:
                    4602   ; case (char)('1') :
                    4603   ; printf("\nSelecting byte size\n");
000029C8  4879 0000 4604          pea       @lab3_144.L
000029CC  4FA8      
000029CE  4E92      4605          jsr       (A2)
000029D0  584F      4606          addq.w    #4,A7
                    4607   ; printf("Select data value:\n");
000029D2  4879 0000 4608          pea       @lab3_145.L
000029D6  4FBE      
000029D8  4E92      4609          jsr       (A2)
000029DA  584F      4610          addq.w    #4,A7
                    4611   ; printf("1 = \"AA\"\n2 = \"AB\"\n3 = \"CC\"\n4 = \"CD\"\n");
000029DC  4879 0000 4612          pea       @lab3_146.L
000029E0  4FD2      
000029E2  4E92      4613          jsr       (A2)
000029E4  584F      4614          addq.w    #4,A7
                    4615   ; do {
                    4616   MemoryTest_8:
                    4617   ; test_data_num = (int)(_getch());
000029E6  4EB8 0B68 4618          jsr       __getch
000029EA  2400      4619          move.l    D0,D2
                    4620   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
000029EC  0C82 0000 4621          cmp.l     #49,D2
000029F0  0031      
000029F2  6722      4622          beq.s     MemoryTest_10
000029F4  0C82 0000 4623          cmp.l     #50,D2
000029F8  0032      
000029FA  671A      4624          beq.s     MemoryTest_10
000029FC  0C82 0000 4625          cmp.l     #51,D2
00002A00  0033      
00002A02  6712      4626          beq.s     MemoryTest_10
00002A04  0C82 0000 4627          cmp.l     #52,D2
00002A08  0034      
00002A0A  670A      4628          beq.s     MemoryTest_10
                    4629   ; printf("\r\nERROR: Select either 1, 2, 3, or 4\r\n");
00002A0C  4879 0000 4630          pea       @lab3_147.L
00002A10  4FF8      
00002A12  4E92      4631          jsr       (A2)
00002A14  584F      4632          addq.w    #4,A7
                    4633   MemoryTest_10:
00002A16  0C82 0000 4634          cmp.l     #49,D2
00002A1A  0031      
00002A1C  6718      4635          beq.s     MemoryTest_12
00002A1E  0C82 0000 4636          cmp.l     #50,D2
00002A22  0032      
00002A24  6710      4637          beq.s     MemoryTest_12
00002A26  0C82 0000 4638          cmp.l     #51,D2
00002A2A  0033      
00002A2C  6708      4639          beq.s     MemoryTest_12
00002A2E  0C82 0000 4640          cmp.l     #52,D2
00002A32  0034      
00002A34  66B0      4641          bne       MemoryTest_8
                    4642   MemoryTest_12:
                    4643   ; }
                    4644   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4645   ; if (test_data_num == (int)('1')) {
00002A36  0C82 0000 4646          cmp.l     #49,D2
00002A3A  0031      
00002A3C  660A      4647          bne.s     MemoryTest_13
                    4648   ; test_data_byte = test_data_byte_list[0];
00002A3E  1D6E FFD4 4649          move.b    -44+0(A6),-40(A6)
00002A42  FFD8      
00002A44  6000 0040 4650          bra       MemoryTest_20
                    4651   MemoryTest_13:
                    4652   ; }
                    4653   ; else if (test_data_num == (int)('2')) {
00002A48  0C82 0000 4654          cmp.l     #50,D2
00002A4C  0032      
00002A4E  6608      4655          bne.s     MemoryTest_15
                    4656   ; test_data_byte = test_data_byte_list[1];
00002A50  1D6E FFD5 4657          move.b    -44+1(A6),-40(A6)
00002A54  FFD8      
00002A56  602E      4658          bra.s     MemoryTest_20
                    4659   MemoryTest_15:
                    4660   ; }
                    4661   ; else if (test_data_num == (int)('3')) {
00002A58  0C82 0000 4662          cmp.l     #51,D2
00002A5C  0033      
00002A5E  6608      4663          bne.s     MemoryTest_17
                    4664   ; test_data_byte = test_data_byte_list[2];
00002A60  1D6E FFD6 4665          move.b    -44+2(A6),-40(A6)
00002A64  FFD8      
00002A66  601E      4666          bra.s     MemoryTest_20
                    4667   MemoryTest_17:
                    4668   ; }
                    4669   ; else if (test_data_num == (int)('4')) {
00002A68  0C82 0000 4670          cmp.l     #52,D2
00002A6C  0034      
00002A6E  6608      4671          bne.s     MemoryTest_19
                    4672   ; test_data_byte = test_data_byte_list[3];
00002A70  1D6E FFD7 4673          move.b    -44+3(A6),-40(A6)
00002A74  FFD8      
00002A76  600E      4674          bra.s     MemoryTest_20
                    4675   MemoryTest_19:
                    4676   ; }
                    4677   ; else {
                    4678   ; printf("\r\nERROR: Exiting memory test due to option memory complication.\r\n");
00002A78  4879 0000 4679          pea       @lab3_148.L
00002A7C  5020      
00002A7E  4E92      4680          jsr       (A2)
00002A80  584F      4681          addq.w    #4,A7
                    4682   ; return;
00002A82  6000 064C 4683          bra       MemoryTest_2
                    4684   MemoryTest_20:
                    4685   ; }
                    4686   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF:\r\n");
00002A86  4879 0000 4687          pea       @lab3_149.L
00002A8A  5062      
00002A8C  4E92      4688          jsr       (A2)
00002A8E  584F      4689          addq.w    #4,A7
                    4690   ; do{
                    4691   MemoryTest_22:
                    4692   ; StartPtrByte = (int)Get8HexDigits(0);
00002A90  42A7      4693          clr.l     -(A7)
00002A92  4E94      4694          jsr       (A4)
00002A94  584F      4695          addq.w    #4,A7
00002A96  2A00      4696          move.l    D0,D5
                    4697   ; if(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x097FFFFF)){
00002A98  0C85 0900 4698          cmp.l     #150994944,D5
00002A9C  0000      
00002A9E  6508      4699          blo.s     MemoryTest_26
00002AA0  0C85 097F 4700          cmp.l     #159383551,D5
00002AA4  FFFF      
00002AA6  630A      4701          bls.s     MemoryTest_24
                    4702   MemoryTest_26:
                    4703   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002AA8  4879 0000 4704          pea       @lab3_150.L
00002AAC  509A      
00002AAE  4E92      4705          jsr       (A2)
00002AB0  584F      4706          addq.w    #4,A7
                    4707   MemoryTest_24:
00002AB2  0C85 0900 4708          cmp.l     #150994944,D5
00002AB6  0000      
00002AB8  65D6      4709          blo       MemoryTest_22
00002ABA  0C85 097F 4710          cmp.l     #159383551,D5
00002ABE  FFFF      
00002AC0  62CE      4711          bhi       MemoryTest_22
                    4712   ; }
                    4713   ; } while(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x097FFFFF));
                    4714   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF:\r\n");
00002AC2  4879 0000 4715          pea       @lab3_151.L
00002AC6  510A      
00002AC8  4E92      4716          jsr       (A2)
00002ACA  584F      4717          addq.w    #4,A7
                    4718   ; do{
                    4719   MemoryTest_27:
                    4720   ; EndPtrByte = (int)Get8HexDigits(0);
00002ACC  42A7      4721          clr.l     -(A7)
00002ACE  4E94      4722          jsr       (A4)
00002AD0  584F      4723          addq.w    #4,A7
00002AD2  2D40 FFBC 4724          move.l    D0,-68(A6)
                    4725   ; if(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x097FFFFF)){
00002AD6  202E FFBC 4726          move.l    -68(A6),D0
00002ADA  0C80 0900 4727          cmp.l     #150994944,D0
00002ADE  0000      
00002AE0  650C      4728          blo.s     MemoryTest_31
00002AE2  202E FFBC 4729          move.l    -68(A6),D0
00002AE6  0C80 097F 4730          cmp.l     #159383551,D0
00002AEA  FFFF      
00002AEC  630A      4731          bls.s     MemoryTest_29
                    4732   MemoryTest_31:
                    4733   ; printf("\r\nERROR: End Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002AEE  4879 0000 4734          pea       @lab3_152.L
00002AF2  5140      
00002AF4  4E92      4735          jsr       (A2)
00002AF6  584F      4736          addq.w    #4,A7
                    4737   MemoryTest_29:
00002AF8  202E FFBC 4738          move.l    -68(A6),D0
00002AFC  0C80 0900 4739          cmp.l     #150994944,D0
00002B00  0000      
00002B02  65C8      4740          blo       MemoryTest_27
00002B04  202E FFBC 4741          move.l    -68(A6),D0
00002B08  0C80 097F 4742          cmp.l     #159383551,D0
00002B0C  FFFF      
00002B0E  62BC      4743          bhi       MemoryTest_27
                    4744   ; }
                    4745   ; } while(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x097FFFFF));
                    4746   ; printf("\r\n\r\nWriting to memory");
00002B10  4879 0000 4747          pea       @lab3_153.L
00002B14  51AC      
00002B16  4E92      4748          jsr       (A2)
00002B18  584F      4749          addq.w    #4,A7
                    4750   ; TempPtrByte = StartPtrByte;
00002B1A  2D45 FFC0 4751          move.l    D5,-64(A6)
                    4752   ; while (StartPtrByte < EndPtrByte) {
                    4753   MemoryTest_32:
00002B1E  BAAE FFBC 4754          cmp.l     -68(A6),D5
00002B22  6430      4755          bhs.s     MemoryTest_34
                    4756   ; *StartPtrByte = test_data_byte;
00002B24  2045      4757          move.l    D5,A0
00002B26  10AE FFD8 4758          move.b    -40(A6),(A0)
                    4759   ; counter++;
00002B2A  5286      4760          addq.l    #1,D6
                    4761   ; if (counter == 10000) {
00002B2C  0C86 0000 4762          cmp.l     #10000,D6
00002B30  2710      
00002B32  661C      4763          bne.s     MemoryTest_35
                    4764   ; printf("\r\nWrite: [%02X to %08x]", test_data_byte, StartPtrByte);
00002B34  2F05      4765          move.l    D5,-(A7)
00002B36  122E FFD8 4766          move.b    -40(A6),D1
00002B3A  C2BC 0000 4767          and.l     #255,D1
00002B3E  00FF      
00002B40  2F01      4768          move.l    D1,-(A7)
00002B42  4879 0000 4769          pea       @lab3_154.L
00002B46  51C2      
00002B48  4E92      4770          jsr       (A2)
00002B4A  DEFC 000C 4771          add.w     #12,A7
                    4772   ; counter = 0;
00002B4E  4286      4773          clr.l     D6
                    4774   MemoryTest_35:
                    4775   ; }
                    4776   ; StartPtrByte++;
00002B50  5285      4777          addq.l    #1,D5
00002B52  60CA      4778          bra       MemoryTest_32
                    4779   MemoryTest_34:
                    4780   ; }
                    4781   ; counter = 9999;
00002B54  2C3C 0000 4782          move.l    #9999,D6
00002B58  270F      
                    4783   ; printf("\r\n\r\nStarting memory validation test");
00002B5A  4879 0000 4784          pea       @lab3_155.L
00002B5E  51DA      
00002B60  4E92      4785          jsr       (A2)
00002B62  584F      4786          addq.w    #4,A7
                    4787   ; StartPtrByte = TempPtrByte;
00002B64  2A2E FFC0 4788          move.l    -64(A6),D5
                    4789   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrByte, EndPtrByte, test_data_byte);
00002B68  122E FFD8 4790          move.b    -40(A6),D1
00002B6C  C2BC 0000 4791          and.l     #255,D1
00002B70  00FF      
00002B72  2F01      4792          move.l    D1,-(A7)
00002B74  2F2E FFBC 4793          move.l    -68(A6),-(A7)
00002B78  2F05      4794          move.l    D5,-(A7)
00002B7A  4879 0000 4795          pea       @lab3_156.L
00002B7E  51FE      
00002B80  4E92      4796          jsr       (A2)
00002B82  DEFC 0010 4797          add.w     #16,A7
                    4798   ; while (StartPtrByte < EndPtrByte) {
                    4799   MemoryTest_37:
00002B86  BAAE FFBC 4800          cmp.l     -68(A6),D5
00002B8A  6400 003A 4801          bhs       MemoryTest_39
                    4802   ; if (*StartPtrByte != test_data_byte) {
00002B8E  2045      4803          move.l    D5,A0
00002B90  1010      4804          move.b    (A0),D0
00002B92  B02E FFD8 4805          cmp.b     -40(A6),D0
00002B96  672A      4806          beq.s     MemoryTest_40
                    4807   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...\r\n", StartPtrByte, *StartPtrByte, test_data_byte);
00002B98  122E FFD8 4808          move.b    -40(A6),D1
00002B9C  C2BC 0000 4809          and.l     #255,D1
00002BA0  00FF      
00002BA2  2F01      4810          move.l    D1,-(A7)
00002BA4  2045      4811          move.l    D5,A0
00002BA6  1210      4812          move.b    (A0),D1
00002BA8  C2BC 0000 4813          and.l     #255,D1
00002BAC  00FF      
00002BAE  2F01      4814          move.l    D1,-(A7)
00002BB0  2F05      4815          move.l    D5,-(A7)
00002BB2  4879 0000 4816          pea       @lab3_157.L
00002BB6  5246      
00002BB8  4E92      4817          jsr       (A2)
00002BBA  DEFC 0010 4818          add.w     #16,A7
                    4819   ; return;
00002BBE  6000 0510 4820          bra       MemoryTest_2
                    4821   MemoryTest_40:
                    4822   ; }
                    4823   ; StartPtrByte++;
00002BC2  5285      4824          addq.l    #1,D5
00002BC4  60C0      4825          bra       MemoryTest_37
                    4826   MemoryTest_39:
                    4827   ; }
                    4828   ; printf("\r\nPASS: Memory Validation test has passed\r\n");
00002BC6  4879 0000 4829          pea       @lab3_158.L
00002BCA  52D4      
00002BCC  4E92      4830          jsr       (A2)
00002BCE  584F      4831          addq.w    #4,A7
                    4832   ; break;
00002BD0  6000 04FE 4833          bra       MemoryTest_2
                    4834   MemoryTest_4:
                    4835   ; case (char)('2') :
                    4836   ; printf("\r\nSelecting word size");
00002BD4  4879 0000 4837          pea       @lab3_159.L
00002BD8  5300      
00002BDA  4E92      4838          jsr       (A2)
00002BDC  584F      4839          addq.w    #4,A7
                    4840   ; printf("Select data value:\n");
00002BDE  4879 0000 4841          pea       @lab3_145.L
00002BE2  4FBE      
00002BE4  4E92      4842          jsr       (A2)
00002BE6  584F      4843          addq.w    #4,A7
                    4844   ; printf("\r\n1 = \"AAAA\"\n2 = \"BABA\"\n3 = \"CCDD\"\n4 = \"DDDD\"\r\n");
00002BE8  4879 0000 4845          pea       @lab3_160.L
00002BEC  5316      
00002BEE  4E92      4846          jsr       (A2)
00002BF0  584F      4847          addq.w    #4,A7
                    4848   ; do {
                    4849   MemoryTest_42:
                    4850   ; test_data_num = (int)(_getch());
00002BF2  4EB8 0B68 4851          jsr       __getch
00002BF6  2400      4852          move.l    D0,D2
                    4853   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00002BF8  0C82 0000 4854          cmp.l     #49,D2
00002BFC  0031      
00002BFE  6722      4855          beq.s     MemoryTest_44
00002C00  0C82 0000 4856          cmp.l     #50,D2
00002C04  0032      
00002C06  671A      4857          beq.s     MemoryTest_44
00002C08  0C82 0000 4858          cmp.l     #51,D2
00002C0C  0033      
00002C0E  6712      4859          beq.s     MemoryTest_44
00002C10  0C82 0000 4860          cmp.l     #52,D2
00002C14  0034      
00002C16  670A      4861          beq.s     MemoryTest_44
                    4862   ; printf("\r\nERROR: Select either 1, 2, 3, or 4\r\n");
00002C18  4879 0000 4863          pea       @lab3_147.L
00002C1C  4FF8      
00002C1E  4E92      4864          jsr       (A2)
00002C20  584F      4865          addq.w    #4,A7
                    4866   MemoryTest_44:
00002C22  0C82 0000 4867          cmp.l     #49,D2
00002C26  0031      
00002C28  6718      4868          beq.s     MemoryTest_46
00002C2A  0C82 0000 4869          cmp.l     #50,D2
00002C2E  0032      
00002C30  6710      4870          beq.s     MemoryTest_46
00002C32  0C82 0000 4871          cmp.l     #51,D2
00002C36  0033      
00002C38  6708      4872          beq.s     MemoryTest_46
00002C3A  0C82 0000 4873          cmp.l     #52,D2
00002C3E  0034      
00002C40  66B0      4874          bne       MemoryTest_42
                    4875   MemoryTest_46:
                    4876   ; }
                    4877   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4878   ; if (test_data_num == (int)('1')) {
00002C42  0C82 0000 4879          cmp.l     #49,D2
00002C46  0031      
00002C48  660A      4880          bne.s     MemoryTest_47
                    4881   ; test_data_word = test_data_word_list[0];
00002C4A  2D6E FFDA 4882          move.l    -38+0(A6),-22(A6)
00002C4E  FFEA      
00002C50  6000 0040 4883          bra       MemoryTest_54
                    4884   MemoryTest_47:
                    4885   ; }
                    4886   ; else if (test_data_num == (int)('2')) {
00002C54  0C82 0000 4887          cmp.l     #50,D2
00002C58  0032      
00002C5A  6608      4888          bne.s     MemoryTest_49
                    4889   ; test_data_word = test_data_word_list[1];
00002C5C  2D6E FFDE 4890          move.l    -38+4(A6),-22(A6)
00002C60  FFEA      
00002C62  602E      4891          bra.s     MemoryTest_54
                    4892   MemoryTest_49:
                    4893   ; }
                    4894   ; else if (test_data_num == (int)('3')) {
00002C64  0C82 0000 4895          cmp.l     #51,D2
00002C68  0033      
00002C6A  6608      4896          bne.s     MemoryTest_51
                    4897   ; test_data_word = test_data_word_list[2];
00002C6C  2D6E FFE2 4898          move.l    -38+8(A6),-22(A6)
00002C70  FFEA      
00002C72  601E      4899          bra.s     MemoryTest_54
                    4900   MemoryTest_51:
                    4901   ; }
                    4902   ; else if (test_data_num == (int)('4')) {
00002C74  0C82 0000 4903          cmp.l     #52,D2
00002C78  0034      
00002C7A  6608      4904          bne.s     MemoryTest_53
                    4905   ; test_data_word = test_data_word_list[3];
00002C7C  2D6E FFE6 4906          move.l    -38+12(A6),-22(A6)
00002C80  FFEA      
00002C82  600E      4907          bra.s     MemoryTest_54
                    4908   MemoryTest_53:
                    4909   ; }
                    4910   ; else {
                    4911   ; printf("\r\nERROR: Exiting memory test due to option memory complication.\r\n");
00002C84  4879 0000 4912          pea       @lab3_148.L
00002C88  5020      
00002C8A  4E92      4913          jsr       (A2)
00002C8C  584F      4914          addq.w    #4,A7
                    4915   ; return;
00002C8E  6000 0440 4916          bra       MemoryTest_2
                    4917   MemoryTest_54:
                    4918   ; }
                    4919   ; do {
                    4920   MemoryTest_55:
                    4921   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002C92  4879 0000 4922          pea       @lab3_161.L
00002C96  5346      
00002C98  4E92      4923          jsr       (A2)
00002C9A  584F      4924          addq.w    #4,A7
                    4925   ; StartPtrWord = Get8HexDigits(0);
00002C9C  42A7      4926          clr.l     -(A7)
00002C9E  4E94      4927          jsr       (A4)
00002CA0  584F      4928          addq.w    #4,A7
00002CA2  2800      4929          move.l    D0,D4
                    4930   ; while(StartPtrWord < (int)(0x09000000) || StartPtrWord > (int)(0x097FFFFF)){
                    4931   MemoryTest_57:
00002CA4  0C84 0900 4932          cmp.l     #150994944,D4
00002CA8  0000      
00002CAA  6508      4933          blo.s     MemoryTest_60
00002CAC  0C84 097F 4934          cmp.l     #159383551,D4
00002CB0  FFFF      
00002CB2  6314      4935          bls.s     MemoryTest_59
                    4936   MemoryTest_60:
                    4937   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002CB4  4879 0000 4938          pea       @lab3_150.L
00002CB8  509A      
00002CBA  4E92      4939          jsr       (A2)
00002CBC  584F      4940          addq.w    #4,A7
                    4941   ; StartPtrWord = Get8HexDigits(0);
00002CBE  42A7      4942          clr.l     -(A7)
00002CC0  4E94      4943          jsr       (A4)
00002CC2  584F      4944          addq.w    #4,A7
00002CC4  2800      4945          move.l    D0,D4
00002CC6  60DC      4946          bra       MemoryTest_57
                    4947   MemoryTest_59:
                    4948   ; }
                    4949   ; if (StartPtrWord % 2 != 0) {
00002CC8  2F04      4950          move.l    D4,-(A7)
00002CCA  4878 0002 4951          pea       2
00002CCE  4EB9 0000 4952          jsr       ULDIV
00002CD2  33B4      
00002CD4  202F 0004 4953          move.l    4(A7),D0
00002CD8  504F      4954          addq.w    #8,A7
00002CDA  4A80      4955          tst.l     D0
00002CDC  670A      4956          beq.s     MemoryTest_61
                    4957   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
00002CDE  4879 0000 4958          pea       @lab3_162.L
00002CE2  53A0      
00002CE4  4E92      4959          jsr       (A2)
00002CE6  584F      4960          addq.w    #4,A7
                    4961   MemoryTest_61:
00002CE8  2F04      4962          move.l    D4,-(A7)
00002CEA  4878 0002 4963          pea       2
00002CEE  4EB9 0000 4964          jsr       ULDIV
00002CF2  33B4      
00002CF4  202F 0004 4965          move.l    4(A7),D0
00002CF8  504F      4966          addq.w    #8,A7
00002CFA  4A80      4967          tst.l     D0
00002CFC  6694      4968          bne       MemoryTest_55
                    4969   ; }
                    4970   ; } while (StartPtrWord % 2 != 0);
                    4971   ; do {
                    4972   MemoryTest_63:
                    4973   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002CFE  4879 0000 4974          pea       @lab3_163.L
00002D02  53E0      
00002D04  4E92      4975          jsr       (A2)
00002D06  584F      4976          addq.w    #4,A7
                    4977   ; EndPtrWord = Get8HexDigits(0);
00002D08  42A7      4978          clr.l     -(A7)
00002D0A  4E94      4979          jsr       (A4)
00002D0C  584F      4980          addq.w    #4,A7
00002D0E  2A40      4981          move.l    D0,A5
                    4982   ; while(EndPtrWord < (int)(0x09000000) || EndPtrWord > (int)(0x097FFFFF)){
                    4983   MemoryTest_65:
00002D10  200D      4984          move.l    A5,D0
00002D12  0C80 0900 4985          cmp.l     #150994944,D0
00002D16  0000      
00002D18  650A      4986          blo.s     MemoryTest_68
00002D1A  200D      4987          move.l    A5,D0
00002D1C  0C80 097F 4988          cmp.l     #159383551,D0
00002D20  FFFF      
00002D22  6314      4989          bls.s     MemoryTest_67
                    4990   MemoryTest_68:
                    4991   ; printf("\r\nERROR: End Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002D24  4879 0000 4992          pea       @lab3_152.L
00002D28  5140      
00002D2A  4E92      4993          jsr       (A2)
00002D2C  584F      4994          addq.w    #4,A7
                    4995   ; EndPtrWord = Get8HexDigits(0);
00002D2E  42A7      4996          clr.l     -(A7)
00002D30  4E94      4997          jsr       (A4)
00002D32  584F      4998          addq.w    #4,A7
00002D34  2A40      4999          move.l    D0,A5
00002D36  60D8      5000          bra       MemoryTest_65
                    5001   MemoryTest_67:
                    5002   ; }
                    5003   ; if (EndPtrWord % 2 != 0) {
00002D38  2F0D      5004          move.l    A5,-(A7)
00002D3A  4878 0002 5005          pea       2
00002D3E  4EB9 0000 5006          jsr       ULDIV
00002D42  33B4      
00002D44  202F 0004 5007          move.l    4(A7),D0
00002D48  504F      5008          addq.w    #8,A7
00002D4A  4A80      5009          tst.l     D0
00002D4C  670A      5010          beq.s     MemoryTest_69
                    5011   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
00002D4E  4879 0000 5012          pea       @lab3_162.L
00002D52  53A0      
00002D54  4E92      5013          jsr       (A2)
00002D56  584F      5014          addq.w    #4,A7
                    5015   MemoryTest_69:
00002D58  2F0D      5016          move.l    A5,-(A7)
00002D5A  4878 0002 5017          pea       2
00002D5E  4EB9 0000 5018          jsr       ULDIV
00002D62  33B4      
00002D64  202F 0004 5019          move.l    4(A7),D0
00002D68  504F      5020          addq.w    #8,A7
00002D6A  4A80      5021          tst.l     D0
00002D6C  6690      5022          bne       MemoryTest_63
                    5023   ; }
                    5024   ; } while (EndPtrWord % 2 != 0);
                    5025   ; printf("\r\n\r\nWriting to memory");
00002D6E  4879 0000 5026          pea       @lab3_153.L
00002D72  51AC      
00002D74  4E92      5027          jsr       (A2)
00002D76  584F      5028          addq.w    #4,A7
                    5029   ; TempPtrWord = StartPtrWord;
00002D78  2D44 FFC4 5030          move.l    D4,-60(A6)
                    5031   ; while (StartPtrWord < EndPtrWord) {
                    5032   MemoryTest_71:
00002D7C  B88D      5033          cmp.l     A5,D4
00002D7E  642A      5034          bhs.s     MemoryTest_73
                    5035   ; *StartPtrWord = test_data_word;
00002D80  202E FFEA 5036          move.l    -22(A6),D0
00002D84  2044      5037          move.l    D4,A0
00002D86  3080      5038          move.w    D0,(A0)
                    5039   ; counter++;
00002D88  5286      5040          addq.l    #1,D6
                    5041   ; if (counter == 10000) {
00002D8A  0C86 0000 5042          cmp.l     #10000,D6
00002D8E  2710      
00002D90  6614      5043          bne.s     MemoryTest_74
                    5044   ; printf("\r\nWRITE: [%04X to %08x]", test_data_word, StartPtrWord);
00002D92  2F04      5045          move.l    D4,-(A7)
00002D94  2F2E FFEA 5046          move.l    -22(A6),-(A7)
00002D98  4879 0000 5047          pea       @lab3_164.L
00002D9C  5438      
00002D9E  4E92      5048          jsr       (A2)
00002DA0  DEFC 000C 5049          add.w     #12,A7
                    5050   ; counter = 0;
00002DA4  4286      5051          clr.l     D6
                    5052   MemoryTest_74:
                    5053   ; }
                    5054   ; StartPtrWord++;
00002DA6  5484      5055          addq.l    #2,D4
00002DA8  60D2      5056          bra       MemoryTest_71
                    5057   MemoryTest_73:
                    5058   ; }
                    5059   ; counter = 9999;
00002DAA  2C3C 0000 5060          move.l    #9999,D6
00002DAE  270F      
                    5061   ; printf("\r\n\r\nStarting memory validation test");
00002DB0  4879 0000 5062          pea       @lab3_155.L
00002DB4  51DA      
00002DB6  4E92      5063          jsr       (A2)
00002DB8  584F      5064          addq.w    #4,A7
                    5065   ; StartPtrWord = TempPtrWord;
00002DBA  282E FFC4 5066          move.l    -60(A6),D4
                    5067   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrWord, EndPtrWord, test_data_word);
00002DBE  2F2E FFEA 5068          move.l    -22(A6),-(A7)
00002DC2  2F0D      5069          move.l    A5,-(A7)
00002DC4  2F04      5070          move.l    D4,-(A7)
00002DC6  4879 0000 5071          pea       @lab3_156.L
00002DCA  51FE      
00002DCC  4E92      5072          jsr       (A2)
00002DCE  DEFC 0010 5073          add.w     #16,A7
                    5074   ; while (StartPtrWord < EndPtrWord) {
                    5075   MemoryTest_76:
00002DD2  B88D      5076          cmp.l     A5,D4
00002DD4  6400 0038 5077          bhs       MemoryTest_78
                    5078   ; if (*StartPtrWord != test_data_word) {
00002DD8  2044      5079          move.l    D4,A0
00002DDA  3010      5080          move.w    (A0),D0
00002DDC  C0BC 0000 5081          and.l     #65535,D0
00002DE0  FFFF      
00002DE2  B0AE FFEA 5082          cmp.l     -22(A6),D0
00002DE6  6722      5083          beq.s     MemoryTest_79
                    5084   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...", StartPtrWord, *StartPtrWord, test_data_word);
00002DE8  2F2E FFEA 5085          move.l    -22(A6),-(A7)
00002DEC  2044      5086          move.l    D4,A0
00002DEE  3210      5087          move.w    (A0),D1
00002DF0  C2BC 0000 5088          and.l     #65535,D1
00002DF4  FFFF      
00002DF6  2F01      5089          move.l    D1,-(A7)
00002DF8  2F04      5090          move.l    D4,-(A7)
00002DFA  4879 0000 5091          pea       @lab3_165.L
00002DFE  5450      
00002E00  4E92      5092          jsr       (A2)
00002E02  DEFC 0010 5093          add.w     #16,A7
                    5094   ; return;
00002E06  6000 02C8 5095          bra       MemoryTest_2
                    5096   MemoryTest_79:
                    5097   ; }
                    5098   ; StartPtrWord++;
00002E0A  5484      5099          addq.l    #2,D4
00002E0C  60C4      5100          bra       MemoryTest_76
                    5101   MemoryTest_78:
                    5102   ; }
                    5103   ; printf("\r\nPASS: Memory Validation test has passed.\r\n");
00002E0E  4879 0000 5104          pea       @lab3_166.L
00002E12  54DC      
00002E14  4E92      5105          jsr       (A2)
00002E16  584F      5106          addq.w    #4,A7
                    5107   ; break;
00002E18  6000 02B6 5108          bra       MemoryTest_2
                    5109   MemoryTest_5:
                    5110   ; case (char)('3') :
                    5111   ; printf("\r\nSelecting long word size");
00002E1C  4879 0000 5112          pea       @lab3_167.L
00002E20  550A      
00002E22  4E92      5113          jsr       (A2)
00002E24  584F      5114          addq.w    #4,A7
                    5115   ; printf("\r\nSelect data value:");
00002E26  4879 0000 5116          pea       @lab3_168.L
00002E2A  5526      
00002E2C  4E92      5117          jsr       (A2)
00002E2E  584F      5118          addq.w    #4,A7
                    5119   ; printf("\r\n1 = \"AAAAAAAA\"\n2 = \"ABABABAB\"\n3 = \"CCCCDDDD\"\n4 = \"AABBCCDD\"\r\n");
00002E30  4879 0000 5120          pea       @lab3_169.L
00002E34  553C      
00002E36  4E92      5121          jsr       (A2)
00002E38  584F      5122          addq.w    #4,A7
                    5123   ; do {
                    5124   MemoryTest_81:
                    5125   ; test_data_num = (int)(_getch());
00002E3A  4EB8 0B68 5126          jsr       __getch
00002E3E  2400      5127          move.l    D0,D2
                    5128   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00002E40  0C82 0000 5129          cmp.l     #49,D2
00002E44  0031      
00002E46  6722      5130          beq.s     MemoryTest_83
00002E48  0C82 0000 5131          cmp.l     #50,D2
00002E4C  0032      
00002E4E  671A      5132          beq.s     MemoryTest_83
00002E50  0C82 0000 5133          cmp.l     #51,D2
00002E54  0033      
00002E56  6712      5134          beq.s     MemoryTest_83
00002E58  0C82 0000 5135          cmp.l     #52,D2
00002E5C  0034      
00002E5E  670A      5136          beq.s     MemoryTest_83
                    5137   ; printf("\r\nSelect either 1, 2, 3, or 4.\r\n");
00002E60  4879 0000 5138          pea       @lab3_170.L
00002E64  557C      
00002E66  4E92      5139          jsr       (A2)
00002E68  584F      5140          addq.w    #4,A7
                    5141   MemoryTest_83:
00002E6A  0C82 0000 5142          cmp.l     #49,D2
00002E6E  0031      
00002E70  6718      5143          beq.s     MemoryTest_85
00002E72  0C82 0000 5144          cmp.l     #50,D2
00002E76  0032      
00002E78  6710      5145          beq.s     MemoryTest_85
00002E7A  0C82 0000 5146          cmp.l     #51,D2
00002E7E  0033      
00002E80  6708      5147          beq.s     MemoryTest_85
00002E82  0C82 0000 5148          cmp.l     #52,D2
00002E86  0034      
00002E88  66B0      5149          bne       MemoryTest_81
                    5150   MemoryTest_85:
                    5151   ; }
                    5152   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    5153   ; if (test_data_num == (int)('1')) {
00002E8A  0C82 0000 5154          cmp.l     #49,D2
00002E8E  0031      
00002E90  6608      5155          bne.s     MemoryTest_86
                    5156   ; test_data_long_word = test_data_long_word_list[0];
00002E92  2E2E FFEE 5157          move.l    -18+0(A6),D7
00002E96  6000 003A 5158          bra       MemoryTest_93
                    5159   MemoryTest_86:
                    5160   ; }
                    5161   ; else if (test_data_num == (int)('2')) {
00002E9A  0C82 0000 5162          cmp.l     #50,D2
00002E9E  0032      
00002EA0  6606      5163          bne.s     MemoryTest_88
                    5164   ; test_data_long_word = test_data_long_word_list[1];
00002EA2  2E2E FFF2 5165          move.l    -18+4(A6),D7
00002EA6  602A      5166          bra.s     MemoryTest_93
                    5167   MemoryTest_88:
                    5168   ; }
                    5169   ; else if (test_data_num == (int)('3')) {
00002EA8  0C82 0000 5170          cmp.l     #51,D2
00002EAC  0033      
00002EAE  6606      5171          bne.s     MemoryTest_90
                    5172   ; test_data_long_word = test_data_long_word_list[2];
00002EB0  2E2E FFF6 5173          move.l    -18+8(A6),D7
00002EB4  601C      5174          bra.s     MemoryTest_93
                    5175   MemoryTest_90:
                    5176   ; }
                    5177   ; else if (test_data_num == (int)('4')) {
00002EB6  0C82 0000 5178          cmp.l     #52,D2
00002EBA  0034      
00002EBC  6606      5179          bne.s     MemoryTest_92
                    5180   ; test_data_long_word = test_data_long_word_list[3];
00002EBE  2E2E FFFA 5181          move.l    -18+12(A6),D7
00002EC2  600E      5182          bra.s     MemoryTest_93
                    5183   MemoryTest_92:
                    5184   ; }
                    5185   ; else {
                    5186   ; printf("\r\nERROR: Exiting memory test due to option memory complication. \r\n");
00002EC4  4879 0000 5187          pea       @lab3_171.L
00002EC8  559E      
00002ECA  4E92      5188          jsr       (A2)
00002ECC  584F      5189          addq.w    #4,A7
                    5190   ; return;
00002ECE  6000 0200 5191          bra       MemoryTest_2
                    5192   MemoryTest_93:
                    5193   ; }
                    5194   ; do {
                    5195   MemoryTest_94:
                    5196   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002ED2  4879 0000 5197          pea       @lab3_161.L
00002ED6  5346      
00002ED8  4E92      5198          jsr       (A2)
00002EDA  584F      5199          addq.w    #4,A7
                    5200   ; StartPtrLongWord = Get8HexDigits(0);
00002EDC  42A7      5201          clr.l     -(A7)
00002EDE  4E94      5202          jsr       (A4)
00002EE0  584F      5203          addq.w    #4,A7
00002EE2  2600      5204          move.l    D0,D3
                    5205   ; while(StartPtrLongWord < (int)(0x09000000) || StartPtrLongWord > (int)(0x097FFFFF)){
                    5206   MemoryTest_96:
00002EE4  0C83 0900 5207          cmp.l     #150994944,D3
00002EE8  0000      
00002EEA  6508      5208          blo.s     MemoryTest_99
00002EEC  0C83 097F 5209          cmp.l     #159383551,D3
00002EF0  FFFF      
00002EF2  6314      5210          bls.s     MemoryTest_98
                    5211   MemoryTest_99:
                    5212   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002EF4  4879 0000 5213          pea       @lab3_172.L
00002EF8  55E2      
00002EFA  4E92      5214          jsr       (A2)
00002EFC  584F      5215          addq.w    #4,A7
                    5216   ; StartPtrLongWord = Get8HexDigits(0);
00002EFE  42A7      5217          clr.l     -(A7)
00002F00  4E94      5218          jsr       (A4)
00002F02  584F      5219          addq.w    #4,A7
00002F04  2600      5220          move.l    D0,D3
00002F06  60DC      5221          bra       MemoryTest_96
                    5222   MemoryTest_98:
                    5223   ; }
                    5224   ; if (StartPtrLongWord % 2 != 0) {
00002F08  2F03      5225          move.l    D3,-(A7)
00002F0A  4878 0002 5226          pea       2
00002F0E  4EB9 0000 5227          jsr       ULDIV
00002F12  33B4      
00002F14  202F 0004 5228          move.l    4(A7),D0
00002F18  504F      5229          addq.w    #8,A7
00002F1A  4A80      5230          tst.l     D0
00002F1C  670A      5231          beq.s     MemoryTest_100
                    5232   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
00002F1E  4879 0000 5233          pea       @lab3_162.L
00002F22  53A0      
00002F24  4E92      5234          jsr       (A2)
00002F26  584F      5235          addq.w    #4,A7
                    5236   MemoryTest_100:
00002F28  2F03      5237          move.l    D3,-(A7)
00002F2A  4878 0002 5238          pea       2
00002F2E  4EB9 0000 5239          jsr       ULDIV
00002F32  33B4      
00002F34  202F 0004 5240          move.l    4(A7),D0
00002F38  504F      5241          addq.w    #8,A7
00002F3A  4A80      5242          tst.l     D0
00002F3C  6694      5243          bne       MemoryTest_94
                    5244   ; }
                    5245   ; } while (StartPtrLongWord % 2 != 0);
                    5246   ; do {
                    5247   MemoryTest_102:
                    5248   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002F3E  4879 0000 5249          pea       @lab3_163.L
00002F42  53E0      
00002F44  4E92      5250          jsr       (A2)
00002F46  584F      5251          addq.w    #4,A7
                    5252   ; EndPtrLongWord = Get8HexDigits(0);
00002F48  42A7      5253          clr.l     -(A7)
00002F4A  4E94      5254          jsr       (A4)
00002F4C  584F      5255          addq.w    #4,A7
00002F4E  2640      5256          move.l    D0,A3
                    5257   ; while(EndPtrLongWord < (int)(0x09000000) || EndPtrLongWord > (int)(0x097FFFFF)){
                    5258   MemoryTest_104:
00002F50  200B      5259          move.l    A3,D0
00002F52  0C80 0900 5260          cmp.l     #150994944,D0
00002F56  0000      
00002F58  650A      5261          blo.s     MemoryTest_107
00002F5A  200B      5262          move.l    A3,D0
00002F5C  0C80 097F 5263          cmp.l     #159383551,D0
00002F60  FFFF      
00002F62  6314      5264          bls.s     MemoryTest_106
                    5265   MemoryTest_107:
                    5266   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002F64  4879 0000 5267          pea       @lab3_173.L
00002F68  5668      
00002F6A  4E92      5268          jsr       (A2)
00002F6C  584F      5269          addq.w    #4,A7
                    5270   ; EndPtrLongWord = Get8HexDigits(0);
00002F6E  42A7      5271          clr.l     -(A7)
00002F70  4E94      5272          jsr       (A4)
00002F72  584F      5273          addq.w    #4,A7
00002F74  2640      5274          move.l    D0,A3
00002F76  60D8      5275          bra       MemoryTest_104
                    5276   MemoryTest_106:
                    5277   ; }
                    5278   ; if (EndPtrLongWord % 2 != 0) {
00002F78  2F0B      5279          move.l    A3,-(A7)
00002F7A  4878 0002 5280          pea       2
00002F7E  4EB9 0000 5281          jsr       ULDIV
00002F82  33B4      
00002F84  202F 0004 5282          move.l    4(A7),D0
00002F88  504F      5283          addq.w    #8,A7
00002F8A  4A80      5284          tst.l     D0
00002F8C  670A      5285          beq.s     MemoryTest_108
                    5286   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00002F8E  4879 0000 5287          pea       @lab3_174.L
00002F92  56E8      
00002F94  4E92      5288          jsr       (A2)
00002F96  584F      5289          addq.w    #4,A7
                    5290   MemoryTest_108:
00002F98  2F0B      5291          move.l    A3,-(A7)
00002F9A  4878 0002 5292          pea       2
00002F9E  4EB9 0000 5293          jsr       ULDIV
00002FA2  33B4      
00002FA4  202F 0004 5294          move.l    4(A7),D0
00002FA8  504F      5295          addq.w    #8,A7
00002FAA  4A80      5296          tst.l     D0
00002FAC  6690      5297          bne       MemoryTest_102
                    5298   ; }
                    5299   ; } while (EndPtrLongWord % 2 != 0);
                    5300   ; printf("\r\n\r\nWriting to memory");
00002FAE  4879 0000 5301          pea       @lab3_153.L
00002FB2  51AC      
00002FB4  4E92      5302          jsr       (A2)
00002FB6  584F      5303          addq.w    #4,A7
                    5304   ; StartPtrLongWordTruc = StartPtrLongWord;
00002FB8  2D43 FFCC 5305          move.l    D3,-52(A6)
                    5306   ; EndPtrLongWordTruc = EndPtrLongWord;
00002FBC  2D4B FFD0 5307          move.l    A3,-48(A6)
                    5308   ; TempPtrLongWord = StartPtrLongWord;
00002FC0  2D43 FFC8 5309          move.l    D3,-56(A6)
                    5310   ; if((EndPtrLongWordTruc-StartPtrLongWordTruc) % 0x4 != 0){
00002FC4  202E FFD0 5311          move.l    -48(A6),D0
00002FC8  90AE FFCC 5312          sub.l     -52(A6),D0
00002FCC  2F00      5313          move.l    D0,-(A7)
00002FCE  4878 0004 5314          pea       4
00002FD2  4EB9 0000 5315          jsr       LDIV
00002FD6  33C6      
00002FD8  202F 0004 5316          move.l    4(A7),D0
00002FDC  504F      5317          addq.w    #8,A7
00002FDE  4A80      5318          tst.l     D0
00002FE0  670E      5319          beq.s     MemoryTest_110
                    5320   ; printf("\r\nWARNING: Memory will contain truncated data"); 
00002FE2  4879 0000 5321          pea       @lab3_175.L
00002FE6  572E      
00002FE8  4E92      5322          jsr       (A2)
00002FEA  584F      5323          addq.w    #4,A7
                    5324   ; truncated_data = test_data_long_word;   
00002FEC  3D47 FFFE 5325          move.w    D7,-2(A6)
                    5326   MemoryTest_110:
                    5327   ; }
                    5328   ; while (StartPtrLongWord < EndPtrLongWord) {
                    5329   MemoryTest_112:
00002FF0  B68B      5330          cmp.l     A3,D3
00002FF2  6400 005E 5331          bhs       MemoryTest_114
                    5332   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00002FF6  202E FFD0 5333          move.l    -48(A6),D0
00002FFA  90AE FFCC 5334          sub.l     -52(A6),D0
00002FFE  0C80 0000 5335          cmp.l     #4,D0
00003002  0004      
00003004  6C00 0030 5336          bge       MemoryTest_115
                    5337   ; StartPtrWord = StartPtrLongWord;
00003008  2803      5338          move.l    D3,D4
                    5339   ; *StartPtrWord = test_data_long_word;
0000300A  2044      5340          move.l    D4,A0
0000300C  3087      5341          move.w    D7,(A0)
                    5342   ; counter++;
0000300E  5286      5343          addq.l    #1,D6
                    5344   ; if (counter == 10000) {
00003010  0C86 0000 5345          cmp.l     #10000,D6
00003014  2710      
00003016  661C      5346          bne.s     MemoryTest_117
                    5347   ; printf("\r\nWRITE: [%08X to %08x]", *StartPtrWord, StartPtrWord);
00003018  2F04      5348          move.l    D4,-(A7)
0000301A  2044      5349          move.l    D4,A0
0000301C  3210      5350          move.w    (A0),D1
0000301E  C2BC 0000 5351          and.l     #65535,D1
00003022  FFFF      
00003024  2F01      5352          move.l    D1,-(A7)
00003026  4879 0000 5353          pea       @lab3_176.L
0000302A  575C      
0000302C  4E92      5354          jsr       (A2)
0000302E  DEFC 000C 5355          add.w     #12,A7
                    5356   ; counter = 0;
00003032  4286      5357          clr.l     D6
                    5358   MemoryTest_117:
00003034  6014      5359          bra.s     MemoryTest_116
                    5360   MemoryTest_115:
                    5361   ; }
                    5362   ; }else{
                    5363   ; *StartPtrLongWord = test_data_long_word;
00003036  2043      5364          move.l    D3,A0
00003038  2087      5365          move.l    D7,(A0)
                    5366   ; printf("\r\nWRITE: [%08X to %08x]", test_data_long_word, StartPtrLongWord);
0000303A  2F03      5367          move.l    D3,-(A7)
0000303C  2F07      5368          move.l    D7,-(A7)
0000303E  4879 0000 5369          pea       @lab3_176.L
00003042  575C      
00003044  4E92      5370          jsr       (A2)
00003046  DEFC 000C 5371          add.w     #12,A7
                    5372   MemoryTest_116:
                    5373   ; }
                    5374   ; StartPtrLongWord++;
0000304A  5883      5375          addq.l    #4,D3
                    5376   ; StartPtrLongWordTruc = StartPtrLongWord;
0000304C  2D43 FFCC 5377          move.l    D3,-52(A6)
00003050  609E      5378          bra       MemoryTest_112
                    5379   MemoryTest_114:
                    5380   ; }
                    5381   ; counter = 9999;
00003052  2C3C 0000 5382          move.l    #9999,D6
00003056  270F      
                    5383   ; printf("\r\n\r\nStarting memory validation test");
00003058  4879 0000 5384          pea       @lab3_155.L
0000305C  51DA      
0000305E  4E92      5385          jsr       (A2)
00003060  584F      5386          addq.w    #4,A7
                    5387   ; StartPtrLongWord = TempPtrLongWord;
00003062  262E FFC8 5388          move.l    -56(A6),D3
                    5389   ; truncated_data = test_data_long_word;
00003066  3D47 FFFE 5390          move.w    D7,-2(A6)
                    5391   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrLongWord, EndPtrLongWord, test_data_long_word);
0000306A  2F07      5392          move.l    D7,-(A7)
0000306C  2F0B      5393          move.l    A3,-(A7)
0000306E  2F03      5394          move.l    D3,-(A7)
00003070  4879 0000 5395          pea       @lab3_156.L
00003074  51FE      
00003076  4E92      5396          jsr       (A2)
00003078  DEFC 0010 5397          add.w     #16,A7
                    5398   ; while (StartPtrLongWord < EndPtrLongWord) {
                    5399   MemoryTest_119:
0000307C  B68B      5400          cmp.l     A3,D3
0000307E  6400 003A 5401          bhs       MemoryTest_121
                    5402   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00003082  202E FFD0 5403          move.l    -48(A6),D0
00003086  90AE FFCC 5404          sub.l     -52(A6),D0
0000308A  0C80 0000 5405          cmp.l     #4,D0
0000308E  0004      
00003090  6C04      5406          bge.s     MemoryTest_122
                    5407   ; StartPtrWord = StartPtrLongWord;
00003092  2803      5408          move.l    D3,D4
00003094  601C      5409          bra.s     MemoryTest_124
                    5410   MemoryTest_122:
                    5411   ; }else{
                    5412   ; if (*StartPtrLongWord != test_data_long_word) {
00003096  2043      5413          move.l    D3,A0
00003098  BE90      5414          cmp.l     (A0),D7
0000309A  6716      5415          beq.s     MemoryTest_124
                    5416   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %08X Expected Data: %08X] Exiting memory test...\r\n", StartPtrLongWord, *StartPtrLongWord, test_data_long_word);
0000309C  2F07      5417          move.l    D7,-(A7)
0000309E  2043      5418          move.l    D3,A0
000030A0  2F10      5419          move.l    (A0),-(A7)
000030A2  2F03      5420          move.l    D3,-(A7)
000030A4  4879 0000 5421          pea       @lab3_177.L
000030A8  5774      
000030AA  4E92      5422          jsr       (A2)
000030AC  DEFC 0010 5423          add.w     #16,A7
                    5424   ; return;
000030B0  601E      5425          bra.s     MemoryTest_2
                    5426   MemoryTest_124:
                    5427   ; }
                    5428   ; }
                    5429   ; StartPtrLongWord++;
000030B2  5883      5430          addq.l    #4,D3
                    5431   ; StartPtrLongWordTruc = StartPtrLongWord;
000030B4  2D43 FFCC 5432          move.l    D3,-52(A6)
000030B8  60C2      5433          bra       MemoryTest_119
                    5434   MemoryTest_121:
                    5435   ; }
                    5436   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
000030BA  4879 0000 5437          pea       @lab3_178.L
000030BE  5802      
000030C0  4E92      5438          jsr       (A2)
000030C2  584F      5439          addq.w    #4,A7
                    5440   ; break;
000030C4  600A      5441          bra.s     MemoryTest_2
                    5442   MemoryTest_1:
                    5443   ; default:
                    5444   ; printf("\r\nYou failed to select a data type to use! Click open memory test again to try again.\r\n");
000030C6  4879 0000 5445          pea       @lab3_179.L
000030CA  5830      
000030CC  4E92      5446          jsr       (A2)
000030CE  584F      5447          addq.w    #4,A7
                    5448   MemoryTest_2:
000030D0  4CDF 3CFC 5449          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000030D4  4E5E      5450          unlk      A6
000030D6  4E75      5451          rts
                    5452   ; }
                    5453   ; }
                    5454   ; void main(void)
                    5455   ; {
                    5456   _main:
000030D8  4E56 FFF0 5457          link      A6,#-16
000030DC  48E7 3030 5458          movem.l   D2/D3/A2/A3,-(A7)
000030E0  45F8 0A30 5459          lea       _InstallExceptionHandler.L,A2
000030E4  47F9 0000 5460          lea       _printf.L,A3
000030E8  35A0      
                    5461   ; char c;
                    5462   ; int i, j;
                    5463   ; char* BugMessage = "DE1-68k Bug V1.77";
000030EA  41F9 0000 5464          lea       @lab3_180.L,A0
000030EE  5888      
000030F0  2608      5465          move.l    A0,D3
                    5466   ; char* CopyrightMessage = "Copyright (C) PJ Davies 2016";
000030F2  41F9 0000 5467          lea       @lab3_181.L,A0
000030F6  589A      
000030F8  2D48 FFF8 5468          move.l    A0,-8(A6)
                    5469   ; char* NamesAndStudentNumbers = "\r\n\r\nKenny Wakaba - 91378315\r\nJacob Yang - 24940835";
000030FC  41F9 0000 5470          lea       @lab3_182.L,A0
00003100  58B8      
00003102  2D48 FFFC 5471          move.l    A0,-4(A6)
                    5472   ; KillAllBreakPoints();
00003106  4EB8 1FEC 5473          jsr       _KillAllBreakPoints
                    5474   ; i = x = y = z = PortA_Count = 0;
0000310A  42B9 0B00 5475          clr.l     _PortA_Count.L
0000310E  00D4      
00003110  42B9 0B00 5476          clr.l     _z.L
00003114  00D0      
00003116  42B9 0B00 5477          clr.l     _y.L
0000311A  00CC      
0000311C  42B9 0B00 5478          clr.l     _x.L
00003120  00C8      
00003122  4282      5479          clr.l     D2
                    5480   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00003124  42B9 0B00 5481          clr.l     _GoFlag.L
00003128  00DC      
0000312A  42B9 0B00 5482          clr.l     _Trace.L
0000312E  00D8      
                    5483   ; Echo = 1;
00003130  23FC 0000 5484          move.l    #1,_Echo.L
00003134  0001 0B00 
00003138  00E0      
                    5485   ; d0 = d1 = d2 = d3 = d4 = d5 = d6 = d7 = 0;
0000313A  42B9 0B00 5486          clr.l     _d7.L
0000313E  0100      
00003140  42B9 0B00 5487          clr.l     _d6.L
00003144  00FC      
00003146  42B9 0B00 5488          clr.l     _d5.L
0000314A  00F8      
0000314C  42B9 0B00 5489          clr.l     _d4.L
00003150  00F4      
00003152  42B9 0B00 5490          clr.l     _d3.L
00003156  00F0      
00003158  42B9 0B00 5491          clr.l     _d2.L
0000315C  00EC      
0000315E  42B9 0B00 5492          clr.l     _d1.L
00003162  00E8      
00003164  42B9 0B00 5493          clr.l     _d0.L
00003168  00E4      
                    5494   ; a0 = a1 = a2 = a3 = a4 = a5 = a6 = 0;
0000316A  42B9 0B00 5495          clr.l     _a6.L
0000316E  011C      
00003170  42B9 0B00 5496          clr.l     _a5.L
00003174  0118      
00003176  42B9 0B00 5497          clr.l     _a4.L
0000317A  0114      
0000317C  42B9 0B00 5498          clr.l     _a3.L
00003180  0110      
00003182  42B9 0B00 5499          clr.l     _a2.L
00003186  010C      
00003188  42B9 0B00 5500          clr.l     _a1.L
0000318C  0108      
0000318E  42B9 0B00 5501          clr.l     _a0.L
00003192  0104      
                    5502   ; PC = ProgramStart, SSP = TopOfStack, USP = TopOfStack;
00003194  23FC 0800 5503          move.l    #134217728,_PC.L
00003198  0000 0B00 
0000319C  0120      
0000319E  23FC 0C00 5504          move.l    #201326592,_SSP.L
000031A2  0000 0B00 
000031A6  0124      
000031A8  23FC 0C00 5505          move.l    #201326592,_USP.L
000031AC  0000 0B00 
000031B0  0128      
                    5506   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000031B2  33FC 2000 5507          move.w    #8192,_SR.L
000031B6  0B00 012C 
                    5508   ; // Initialise Breakpoint variables
                    5509   ; for (i = 0; i < 8; i++) {
000031BA  4282      5510          clr.l     D2
                    5511   main_1:
000031BC  0C82 0000 5512          cmp.l     #8,D2
000031C0  0008      
000031C2  6C00 004C 5513          bge       main_3
                    5514   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000031C6  2002      5515          move.l    D2,D0
000031C8  E588      5516          lsl.l     #2,D0
000031CA  41F9 0B00 5517          lea       _BreakPointAddress.L,A0
000031CE  012E      
000031D0  42B0 0800 5518          clr.l     0(A0,D0.L)
                    5519   ; WatchPointAddress[i] = 0;
000031D4  2002      5520          move.l    D2,D0
000031D6  E588      5521          lsl.l     #2,D0
000031D8  41F9 0B00 5522          lea       _WatchPointAddress.L,A0
000031DC  0182      
000031DE  42B0 0800 5523          clr.l     0(A0,D0.L)
                    5524   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000031E2  2002      5525          move.l    D2,D0
000031E4  E388      5526          lsl.l     #1,D0
000031E6  41F9 0B00 5527          lea       _BreakPointInstruction.L,A0
000031EA  014E      
000031EC  4270 0800 5528          clr.w     0(A0,D0.L)
                    5529   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000031F0  2002      5530          move.l    D2,D0
000031F2  E588      5531          lsl.l     #2,D0
000031F4  41F9 0B00 5532          lea       _BreakPointSetOrCleared.L,A0
000031F8  015E      
000031FA  42B0 0800 5533          clr.l     0(A0,D0.L)
                    5534   ; WatchPointSetOrCleared[i] = 0;
000031FE  2002      5535          move.l    D2,D0
00003200  E588      5536          lsl.l     #2,D0
00003202  41F9 0B00 5537          lea       _WatchPointSetOrCleared.L,A0
00003206  01A2      
00003208  42B0 0800 5538          clr.l     0(A0,D0.L)
0000320C  5282      5539          addq.l    #1,D2
0000320E  60AC      5540          bra       main_1
                    5541   main_3:
                    5542   ; }
                    5543   ; Init_RS232();     // initialise the RS232 port
00003210  4EB8 0B12 5544          jsr       _Init_RS232
                    5545   ; Init_LCD();
00003214  4EB8 095E 5546          jsr       _Init_LCD
                    5547   ; SPI_Init();
00003218  4EB8 10E2 5548          jsr       _SPI_Init
                    5549   ; for (i = 32; i < 48; i++)
0000321C  7420      5550          moveq     #32,D2
                    5551   main_4:
0000321E  0C82 0000 5552          cmp.l     #48,D2
00003222  0030      
00003224  6C0E      5553          bge.s     main_6
                    5554   ; InstallExceptionHandler(UnhandledTrap, i);		        // install Trap exception handler on vector 32-47
00003226  2F02      5555          move.l    D2,-(A7)
00003228  4878 2864 5556          pea       _UnhandledTrap.L
0000322C  4E92      5557          jsr       (A2)
0000322E  504F      5558          addq.w    #8,A7
00003230  5282      5559          addq.l    #1,D2
00003232  60EA      5560          bra       main_4
                    5561   main_6:
                    5562   ; InstallExceptionHandler(menu, 47);		                   // TRAP #15 call debug and end program
00003234  4878 002F 5563          pea       47
00003238  4878 253E 5564          pea       _menu.L
0000323C  4E92      5565          jsr       (A2)
0000323E  504F      5566          addq.w    #8,A7
                    5567   ; InstallExceptionHandler(UnhandledIRQ1, 25);		      // install handler for interrupts
00003240  4878 0019 5568          pea       25
00003244  4878 280A 5569          pea       _UnhandledIRQ1.L
00003248  4E92      5570          jsr       (A2)
0000324A  504F      5571          addq.w    #8,A7
                    5572   ; InstallExceptionHandler(UnhandledIRQ2, 26);		      // install handler for interrupts
0000324C  4878 001A 5573          pea       26
00003250  4878 2816 5574          pea       _UnhandledIRQ2.L
00003254  4E92      5575          jsr       (A2)
00003256  504F      5576          addq.w    #8,A7
                    5577   ; InstallExceptionHandler(UnhandledIRQ3, 27);		      // install handler for interrupts
00003258  4878 001B 5578          pea       27
0000325C  4878 2822 5579          pea       _UnhandledIRQ3.L
00003260  4E92      5580          jsr       (A2)
00003262  504F      5581          addq.w    #8,A7
                    5582   ; InstallExceptionHandler(UnhandledIRQ4, 28);		      // install handler for interrupts
00003264  4878 001C 5583          pea       28
00003268  4878 282E 5584          pea       _UnhandledIRQ4.L
0000326C  4E92      5585          jsr       (A2)
0000326E  504F      5586          addq.w    #8,A7
                    5587   ; InstallExceptionHandler(UnhandledIRQ5, 29);		      // install handler for interrupts
00003270  4878 001D 5588          pea       29
00003274  4878 283A 5589          pea       _UnhandledIRQ5.L
00003278  4E92      5590          jsr       (A2)
0000327A  504F      5591          addq.w    #8,A7
                    5592   ; InstallExceptionHandler(UnhandledIRQ6, 30);		      // install handler for interrupts
0000327C  4878 001E 5593          pea       30
00003280  4878 2846 5594          pea       _UnhandledIRQ6.L
00003284  4E92      5595          jsr       (A2)
00003286  504F      5596          addq.w    #8,A7
                    5597   ; InstallExceptionHandler(UnhandledIRQ7, 31);		      // install handler for interrupts
00003288  4878 001F 5598          pea       31
0000328C  4878 2858 5599          pea       _UnhandledIRQ7.L
00003290  4E92      5600          jsr       (A2)
00003292  504F      5601          addq.w    #8,A7
                    5602   ; InstallExceptionHandler(HandleBreakPoint, 46);		           // install Trap 14 Break Point exception handler on vector 46
00003294  4878 002E 5603          pea       46
00003298  4878 227A 5604          pea       _HandleBreakPoint.L
0000329C  4E92      5605          jsr       (A2)
0000329E  504F      5606          addq.w    #8,A7
                    5607   ; InstallExceptionHandler(DumpRegistersandPause, 29);		   // install TRACE handler for IRQ5 on vector 29
000032A0  4878 001D 5608          pea       29
000032A4  4878 195A 5609          pea       _DumpRegistersandPause.L
000032A8  4E92      5610          jsr       (A2)
000032AA  504F      5611          addq.w    #8,A7
                    5612   ; InstallExceptionHandler(BusError, 2);                          // install Bus error handler
000032AC  4878 0002 5613          pea       2
000032B0  4878 2872 5614          pea       _BusError.L
000032B4  4E92      5615          jsr       (A2)
000032B6  504F      5616          addq.w    #8,A7
                    5617   ; InstallExceptionHandler(AddressError, 3);                      // install address error handler (doesn't work on soft core 68k implementation)
000032B8  4878 0003 5618          pea       3
000032BC  4878 2880 5619          pea       _AddressError.L
000032C0  4E92      5620          jsr       (A2)
000032C2  504F      5621          addq.w    #8,A7
                    5622   ; InstallExceptionHandler(IllegalInstruction, 4);                // install illegal instruction exception handler
000032C4  4878 0004 5623          pea       4
000032C8  4878 288E 5624          pea       _IllegalInstruction.L
000032CC  4E92      5625          jsr       (A2)
000032CE  504F      5626          addq.w    #8,A7
                    5627   ; InstallExceptionHandler(Dividebyzero, 5);                      // install /0 exception handler
000032D0  4878 0005 5628          pea       5
000032D4  4878 289C 5629          pea       _Dividebyzero.L
000032D8  4E92      5630          jsr       (A2)
000032DA  504F      5631          addq.w    #8,A7
                    5632   ; InstallExceptionHandler(Check, 6);                             // install check instruction exception handler
000032DC  4878 0006 5633          pea       6
000032E0  4878 28AA 5634          pea       _Check.L
000032E4  4E92      5635          jsr       (A2)
000032E6  504F      5636          addq.w    #8,A7
                    5637   ; InstallExceptionHandler(Trapv, 7);                             // install trapv instruction exception handler
000032E8  4878 0007 5638          pea       7
000032EC  4878 28B8 5639          pea       _Trapv.L
000032F0  4E92      5640          jsr       (A2)
000032F2  504F      5641          addq.w    #8,A7
                    5642   ; InstallExceptionHandler(PrivError, 8);                         // install Priv Violation exception handler
000032F4  4878 0008 5643          pea       8
000032F8  4878 28C6 5644          pea       _PrivError.L
000032FC  4E92      5645          jsr       (A2)
000032FE  504F      5646          addq.w    #8,A7
                    5647   ; InstallExceptionHandler(UnitIRQ, 15);                          // install uninitialised IRQ exception handler
00003300  4878 000F 5648          pea       15
00003304  4878 28D4 5649          pea       _UnitIRQ.L
00003308  4E92      5650          jsr       (A2)
0000330A  504F      5651          addq.w    #8,A7
                    5652   ; InstallExceptionHandler(Check, 24);                            // install spurious IRQ exception handler
0000330C  4878 0018 5653          pea       24
00003310  4878 28AA 5654          pea       _Check.L
00003314  4E92      5655          jsr       (A2)
00003316  504F      5656          addq.w    #8,A7
                    5657   ; FlushKeyboard();                        // dump unread characters from keyboard
00003318  4EB8 0BA6 5658          jsr       _FlushKeyboard
                    5659   ; TraceException = 0;                     // clear trace exception port to remove any software generated single step/trace
0000331C  4239 0040 5660          clr.b     4194314
00003320  000A      
                    5661   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5662   ; while (((char)(PortB & 0x02)) == (char)(0x02)) {
                    5663   main_7:
00003322  1039 0040 5664          move.b    4194306,D0
00003326  0002      
00003328  C03C 0002 5665          and.b     #2,D0
0000332C  0C00 0002 5666          cmp.b     #2,D0
00003330  662A      5667          bne.s     main_9
                    5668   ; LoadFromFlashChip();
00003332  4EB8 13EC 5669          jsr       _LoadFromFlashChip
                    5670   ; printf("\r\nRunning.....");
00003336  4879 0000 5671          pea       @lab3_183.L
0000333A  58EC      
0000333C  4E93      5672          jsr       (A3)
0000333E  584F      5673          addq.w    #4,A7
                    5674   ; Oline1("Running.....");
00003340  4879 0000 5675          pea       @lab3_184.L
00003344  58FC      
00003346  4EB8 0A02 5676          jsr       _Oline1
0000334A  584F      5677          addq.w    #4,A7
                    5678   ; GoFlag = 1;
0000334C  23FC 0000 5679          move.l    #1,_GoFlag.L
00003350  0001 0B00 
00003354  00DC      
                    5680   ; go();
00003356  4EB8 08B8 5681          jsr       _go
0000335A  60C6      5682          bra       main_7
                    5683   main_9:
                    5684   ; }
                    5685   ; // otherwise start the debug monitor
                    5686   ; Oline0(BugMessage);
0000335C  2F03      5687          move.l    D3,-(A7)
0000335E  4EB8 09D4 5688          jsr       _Oline0
00003362  584F      5689          addq.w    #4,A7
                    5690   ; Oline1("By: PJ Davies");
00003364  4879 0000 5691          pea       @lab3_185.L
00003368  590A      
0000336A  4EB8 0A02 5692          jsr       _Oline1
0000336E  584F      5693          addq.w    #4,A7
                    5694   ; printf("\r\n%s", BugMessage);
00003370  2F03      5695          move.l    D3,-(A7)
00003372  4879 0000 5696          pea       @lab3_186.L
00003376  5918      
00003378  4E93      5697          jsr       (A3)
0000337A  504F      5698          addq.w    #8,A7
                    5699   ; printf("\r\n%s", CopyrightMessage);
0000337C  2F2E FFF8 5700          move.l    -8(A6),-(A7)
00003380  4879 0000 5701          pea       @lab3_186.L
00003384  5918      
00003386  4E93      5702          jsr       (A3)
00003388  504F      5703          addq.w    #8,A7
                    5704   ; printf("\r\n%s", NamesAndStudentNumbers);
0000338A  2F2E FFFC 5705          move.l    -4(A6),-(A7)
0000338E  4879 0000 5706          pea       @lab3_186.L
00003392  5918      
00003394  4E93      5707          jsr       (A3)
00003396  504F      5708          addq.w    #8,A7
                    5709   ; menu();
00003398  4EB8 253E 5710          jsr       _menu
0000339C  4CDF 0C0C 5711          movem.l   (A7)+,D2/D3/A2/A3
000033A0  4E5E      5712          unlk      A6
000033A2  4E75      5713          rts
                    5714   ; }
                    5715   _strcpy:
000033A4  206F 0004 5716          move.l    (4,A7),A0
000033A8  226F 0008 5717          move.l    (8,A7),A1
000033AC  2008      5718          move.l    A0,D0
                    5719   strcpy_1:
000033AE  10D9      5720          move.b    (A1)+,(A0)+
000033B0  66FC      5721          bne       strcpy_1
000033B2  4E75      5722          rts
                    5723   ULDIV:
000033B4  4E56 0000 5724          link    A6,#0
000033B8  48E7 C000 5725          movem.l D0/D1,-(A7)
000033BC  222E 0008 5726          move.l  8(A6),D1
000033C0  202E 000C 5727          move.l  12(A6),D0
000033C4  6036      5728          bra.s   ldiv_3
                    5729   LDIV:
000033C6  4E56 0000 5730          link    A6,#0
000033CA  48E7 C000 5731          movem.l D0/D1,-(A7)
000033CE  222E 0008 5732          move.l  8(A6),D1
000033D2  202E 000C 5733          move.l  12(A6),D0
000033D6  4A80      5734          tst.l   D0
000033D8  6A0E      5735          bpl.s   ldiv_1
000033DA  4480      5736          neg.l   D0
000033DC  4A81      5737          tst.l   D1
000033DE  6A14      5738          bpl.s   ldiv_2
000033E0  4481      5739          neg.l   D1
000033E2  612A      5740          bsr.s   dodiv
000033E4  4481      5741          neg.l   D1
000033E6  6016      5742          bra.s   ldiv_4
                    5743   ldiv_1:
000033E8  4A81      5744          tst.l   D1
000033EA  6A10      5745          bpl.s   ldiv_3
000033EC  4481      5746          neg.l   D1
000033EE  611E      5747          bsr.s   dodiv
000033F0  4480      5748          neg.l   D0
000033F2  600A      5749          bra.s   ldiv_4
                    5750   ldiv_2:
000033F4  6118      5751          bsr.s   dodiv
000033F6  4480      5752          neg.l   D0
000033F8  4481      5753          neg.l   D1
000033FA  6002      5754          bra.s   ldiv_4
                    5755   ldiv_3:
000033FC  6110      5756          bsr.s   dodiv
                    5757   ldiv_4:
000033FE  2D40 0008 5758          move.l  D0,8(A6)
00003402  2D41 000C 5759          move.l  D1,12(A6)
00003406  4CDF 0003 5760          movem.l (A7)+,D0/D1
0000340A  4E5E      5761          unlk    A6
0000340C  4E75      5762          rts
                    5763   dodiv:
0000340E  0C81 0000 5764          cmpi.l  #$FFFF,D1
00003412  FFFF      
00003414  6236      5765          bhi.s   dodiv_2
00003416  0C80 0000 5766          cmpi.l  #$FFFF,D0
0000341A  FFFF      
0000341C  6210      5767          bhi.s   dodiv_1
0000341E  80C1      5768          divu    D1,D0
00003420  2200      5769          move.l  D0,D1
00003422  4241      5770          clr.w   D1
00003424  4841      5771          swap    D1
00003426  0280 0000 5772          andi.l  #$FFFF,D0
0000342A  FFFF      
0000342C  4E75      5773          rts
                    5774   dodiv_1:
0000342E  48A7 A000 5775          movem.w D0/D2,-(A7)
00003432  4240      5776          clr.w   D0
00003434  4840      5777          swap    D0
00003436  80C1      5778          divu    D1,D0
00003438  3400      5779          move.w  D0,D2
0000343A  301F      5780          move.w  (A7)+,D0
0000343C  80C1      5781          divu    D1,D0
0000343E  4840      5782          swap    D0
00003440  4281      5783          clr.l   D1
00003442  3200      5784          move.w  D0,D1
00003444  3002      5785          move.w  D2,D0
00003446  4840      5786          swap    D0
00003448  341F      5787          move.w  (A7)+,D2
0000344A  4E75      5788          rts
                    5789   dodiv_2:
0000344C  48E7 3800 5790          movem.l D2/D3/D4,-(A7)
00003450  2401      5791          move.l  D1,D2
00003452  4242      5792          clr.w   D2
00003454  4842      5793          swap    D2
00003456  5282      5794          addq.l  #1,D2
00003458  2600      5795          move.l  D0,D3
0000345A  2801      5796          move.l  D1,D4
0000345C  2202      5797          move.l  D2,D1
0000345E  61CE      5798          bsr.s   dodiv_1
00003460  2204      5799          move.l  D4,D1
00003462  82C2      5800          divu    D2,D1
00003464  80C1      5801          divu    D1,D0
00003466  0280 0000 5802          andi.l  #$FFFF,D0
0000346A  FFFF      
                    5803   dodiv_3:
0000346C  2204      5804          move.l  D4,D1
0000346E  2404      5805          move.l  D4,D2
00003470  4842      5806          swap    D2
00003472  C2C0      5807          mulu    D0,D1
00003474  C4C0      5808          mulu    D0,D2
00003476  4842      5809          swap    D2
00003478  D282      5810          add.l   D2,D1
0000347A  9283      5811          sub.l   D3,D1
0000347C  620A      5812          bhi.s   dodiv_4
0000347E  4481      5813          neg.l   D1
00003480  B881      5814          cmp.l   D1,D4
00003482  6208      5815          bhi.s   dodiv_5
00003484  5280      5816          addq.l  #1,D0
00003486  60E4      5817          bra.s   dodiv_3
                    5818   dodiv_4:
00003488  5380      5819          subq.l  #1,D0
0000348A  60E0      5820          bra.s   dodiv_3
                    5821   dodiv_5:
0000348C  4CDF 001C 5822          movem.l (A7)+,D2/D3/D4
00003490  4E75      5823          rts
                    5824   _putch:
00003492  4E56 0000 5825          link      A6,#0
00003496  48E7 2000 5826          movem.l   D2,-(A7)
0000349A  242E 0008 5827          move.l    8(A6),D2
0000349E  0C82 0000 5828          cmp.l     #10,D2
000034A2  000A      
000034A4  660A      5829          bne.s     putch_1
000034A6  4878 000D 5830          pea       13
000034AA  6100 D690 5831          bsr       __putch
000034AE  584F      5832          addq.w    #4,A7
                    5833   putch_1:
000034B0  2F02      5834          move.l    D2,-(A7)
000034B2  6100 D688 5835          bsr       __putch
000034B6  584F      5836          addq.w    #4,A7
000034B8  2002      5837          move.l    D2,D0
000034BA  4CDF 0004 5838          movem.l   (A7)+,D2
000034BE  4E5E      5839          unlk      A6
000034C0  4E75      5840          rts
                    5841   _getch:
000034C2  48E7 2000 5842          movem.l   D2,-(A7)
000034C6  2439 0B00 5843          move.l    __ungetbuf,D2
000034CA  00C0      
000034CC  2039 0B00 5844          move.l    __ungetbuf,D0
000034D0  00C0      
000034D2  0C80 FFFF 5845          cmp.l     #-1,D0
000034D6  FFFF      
000034D8  670C      5846          beq.s     getch_1
000034DA  23FC FFFF 5847          move.l    #-1,__ungetbuf
000034DE  FFFF 0B00 
000034E2  00C0      
000034E4  6010      5848          bra.s     getch_3
                    5849   getch_1:
000034E6  6100 D680 5850          bsr       __getch
000034EA  2400      5851          move.l    D0,D2
000034EC  0C80 0000 5852          cmp.l     #13,D0
000034F0  000D      
000034F2  6602      5853          bne.s     getch_3
000034F4  740A      5854          moveq     #10,D2
                    5855   getch_3:
000034F6  2002      5856          move.l    D2,D0
000034F8  4CDF 0004 5857          movem.l   (A7)+,D2
000034FC  4E75      5858          rts
                    5859   _tolower:
000034FE  4E56 0000 5860          link      A6,#0
00003502  48E7 2000 5861          movem.l   D2,-(A7)
00003506  242E 0008 5862          move.l    8(A6),D2
0000350A  0C82 0000 5863          cmp.l     #65,D2
0000350E  0041      
00003510  6D0E      5864          blt.s     tolower_1
00003512  0C82 0000 5865          cmp.l     #90,D2
00003516  005A      
00003518  6E06      5866          bgt.s     tolower_1
0000351A  84BC 0000 5867          or.l      #32,D2
0000351E  0020      
                    5868   tolower_1:
00003520  2002      5869          move.l    D2,D0
00003522  4CDF 0004 5870          movem.l   (A7)+,D2
00003526  4E5E      5871          unlk      A6
00003528  4E75      5872          rts
                    5873   _sprintf:
0000352A  4E56 FFFC 5874          link      A6,#-4
0000352E  48E7 2000 5875          movem.l   D2,-(A7)
00003532  41EE 000C 5876          lea       12(A6),A0
00003536  5848      5877          addq.w    #4,A0
00003538  2408      5878          move.l    A0,D2
0000353A  2F02      5879          move.l    D2,-(A7)
0000353C  2F2E 000C 5880          move.l    12(A6),-(A7)
00003540  2F2E 0008 5881          move.l    8(A6),-(A7)
00003544  6100 013E 5882          bsr       _vsprintf
00003548  DEFC 000C 5883          add.w     #12,A7
0000354C  2D40 FFFC 5884          move.l    D0,-4(A6)
00003550  4282      5885          clr.l     D2
00003552  202E FFFC 5886          move.l    -4(A6),D0
00003556  4CDF 0004 5887          movem.l   (A7)+,D2
0000355A  4E5E      5888          unlk      A6
0000355C  4E75      5889          rts
                    5890   _strcat:
0000355E  206F 0004 5891          move.l    (4,A7),A0	
00003562  226F 0008 5892          move.l    (8,A7),A1	
00003566  2008      5893          move.l    A0,D0		
                    5894   strcat_0:
00003568  4A18      5895          tst.b     (A0)+
0000356A  66FC      5896          bne       strcat_0
0000356C  5348      5897          subq      #1,A0
                    5898   strcat_1:
0000356E  10D9      5899          move.b    (A1)+,(A0)+
00003570  66FC      5900          bne       strcat_1
00003572  4E75      5901          rts
                    5902   _toupper:
00003574  4E56 0000 5903          link      A6,#0
00003578  48E7 2000 5904          movem.l   D2,-(A7)
0000357C  242E 0008 5905          move.l    8(A6),D2
00003580  0C82 0000 5906          cmp.l     #97,D2
00003584  0061      
00003586  6D0E      5907          blt.s     toupper_1
00003588  0C82 0000 5908          cmp.l     #122,D2
0000358C  007A      
0000358E  6E06      5909          bgt.s     toupper_1
00003590  C4BC 0000 5910          and.l     #95,D2
00003594  005F      
                    5911   toupper_1:
00003596  2002      5912          move.l    D2,D0
00003598  4CDF 0004 5913          movem.l   (A7)+,D2
0000359C  4E5E      5914          unlk      A6
0000359E  4E75      5915          rts
                    5916   _printf:
000035A0  4E56 FFFC 5917          link      A6,#-4
000035A4  48E7 2000 5918          movem.l   D2,-(A7)
000035A8  41EE 0008 5919          lea       8(A6),A0
000035AC  5848      5920          addq.w    #4,A0
000035AE  2408      5921          move.l    A0,D2
000035B0  2F02      5922          move.l    D2,-(A7)
000035B2  2F2E 0008 5923          move.l    8(A6),-(A7)
000035B6  42A7      5924          clr.l     -(A7)
000035B8  6100 00CA 5925          bsr       _vsprintf
000035BC  DEFC 000C 5926          add.w     #12,A7
000035C0  2D40 FFFC 5927          move.l    D0,-4(A6)
000035C4  4282      5928          clr.l     D2
000035C6  202E FFFC 5929          move.l    -4(A6),D0
000035CA  4CDF 0004 5930          movem.l   (A7)+,D2
000035CE  4E5E      5931          unlk      A6
000035D0  4E75      5932          rts
                    5933   @vsprintf_copy:
000035D2  4E56 0000 5934          link      A6,#0
000035D6  206E 0008 5935          move.l    8(A6),A0
000035DA  4A90      5936          tst.l     (A0)
000035DC  6710      5937          beq.s     @vsprintf_copy_1
000035DE  202E 000C 5938          move.l    12(A6),D0
000035E2  206E 0008 5939          move.l    8(A6),A0
000035E6  2250      5940          move.l    (A0),A1
000035E8  5290      5941          addq.l    #1,(A0)
000035EA  1280      5942          move.b    D0,(A1)
000035EC  600A      5943          bra.s     @vsprintf_copy_2
                    5944   @vsprintf_copy_1:
000035EE  2F2E 000C 5945          move.l    12(A6),-(A7)
000035F2  6100 FE9E 5946          bsr       _putch
000035F6  584F      5947          addq.w    #4,A7
                    5948   @vsprintf_copy_2:
000035F8  4E5E      5949          unlk      A6
000035FA  4E75      5950          rts
                    5951   @vsprintf_getval:
000035FC  4E56 0000 5952          link      A6,#0
00003600  48E7 3000 5953          movem.l   D2/D3,-(A7)
00003604  242E 0008 5954          move.l    8(A6),D2
00003608  4283      5955          clr.l     D3
0000360A  2042      5956          move.l    D2,A0
0000360C  2050      5957          move.l    (A0),A0
0000360E  1010      5958          move.b    (A0),D0
00003610  4880      5959          ext.w     D0
00003612  48C0      5960          ext.l     D0
00003614  0C80 0000 5961          cmp.l     #42,D0
00003618  002A      
0000361A  6612      5962          bne.s     @vsprintf_getval_1
0000361C  206E 000C 5963          move.l    12(A6),A0
00003620  2250      5964          move.l    (A0),A1
00003622  5890      5965          addq.l    #4,(A0)
00003624  2611      5966          move.l    (A1),D3
00003626  2042      5967          move.l    D2,A0
00003628  5290      5968          addq.l    #1,(A0)
0000362A  6000 004E 5969          bra       @vsprintf_getval_5
                    5970   @vsprintf_getval_1:
0000362E  2042      5971          move.l    D2,A0
00003630  2050      5972          move.l    (A0),A0
00003632  1010      5973          move.b    (A0),D0
00003634  4880      5974          ext.w     D0
00003636  48C0      5975          ext.l     D0
00003638  0C80 0000 5976          cmp.l     #48,D0
0000363C  0030      
0000363E  6D00 003A 5977          blt       @vsprintf_getval_5
00003642  2042      5978          move.l    D2,A0
00003644  2050      5979          move.l    (A0),A0
00003646  1010      5980          move.b    (A0),D0
00003648  4880      5981          ext.w     D0
0000364A  48C0      5982          ext.l     D0
0000364C  0C80 0000 5983          cmp.l     #57,D0
00003650  0039      
00003652  6E26      5984          bgt.s     @vsprintf_getval_5
00003654  2F03      5985          move.l    D3,-(A7)
00003656  4878 000A 5986          pea       10
0000365A  6100 07F4 5987          bsr       LMUL
0000365E  2017      5988          move.l    (A7),D0
00003660  504F      5989          addq.w    #8,A7
00003662  2042      5990          move.l    D2,A0
00003664  2250      5991          move.l    (A0),A1
00003666  5290      5992          addq.l    #1,(A0)
00003668  1211      5993          move.b    (A1),D1
0000366A  4881      5994          ext.w     D1
0000366C  48C1      5995          ext.l     D1
0000366E  D081      5996          add.l     D1,D0
00003670  0480 0000 5997          sub.l     #48,D0
00003674  0030      
00003676  2600      5998          move.l    D0,D3
00003678  60B4      5999          bra       @vsprintf_getval_1
                    6000   @vsprintf_getval_5:
0000367A  2003      6001          move.l    D3,D0
0000367C  4CDF 000C 6002          movem.l   (A7)+,D2/D3
00003680  4E5E      6003          unlk      A6
00003682  4E75      6004          rts
                    6005   _vsprintf:
00003684  4E56 FFCC 6006          link      A6,#-52
00003688  48E7 3F3C 6007          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000368C  45EE 0008 6008          lea       8(A6),A2
00003690  47F8 35D2 6009          lea       @vsprintf_copy,A3
00003694  49F9 0000 6010          lea       _ultoa,A4
00003698  3DDC      
0000369A  4286      6011          clr.l     D6
                    6012   vsprintf_1:
0000369C  206E 000C 6013          move.l    12(A6),A0
000036A0  4A10      6014          tst.b     (A0)
000036A2  6700 0624 6015          beq       vsprintf_3
000036A6  206E 000C 6016          move.l    12(A6),A0
000036AA  1010      6017          move.b    (A0),D0
000036AC  4880      6018          ext.w     D0
000036AE  48C0      6019          ext.l     D0
000036B0  0C80 0000 6020          cmp.l     #37,D0
000036B4  0025      
000036B6  671C      6021          beq.s     vsprintf_4
000036B8  206E 000C 6022          move.l    12(A6),A0
000036BC  52AE 000C 6023          addq.l    #1,12(A6)
000036C0  1210      6024          move.b    (A0),D1
000036C2  4881      6025          ext.w     D1
000036C4  48C1      6026          ext.l     D1
000036C6  2F01      6027          move.l    D1,-(A7)
000036C8  2F0A      6028          move.l    A2,-(A7)
000036CA  4E93      6029          jsr       (A3)
000036CC  504F      6030          addq.w    #8,A7
000036CE  5286      6031          addq.l    #1,D6
000036D0  6000 05F2 6032          bra       vsprintf_2
                    6033   vsprintf_4:
000036D4  52AE 000C 6034          addq.l    #1,12(A6)
000036D8  422E FFD3 6035          clr.b     -45(A6)
000036DC  422E FFD2 6036          clr.b     -46(A6)
000036E0  422E FFD0 6037          clr.b     -48(A6)
000036E4  422E FFCF 6038          clr.b     -49(A6)
000036E8  422E FFCE 6039          clr.b     -50(A6)
000036EC  422E FFCD 6040          clr.b     -51(A6)
000036F0  42AE FFFC 6041          clr.l     -4(A6)
000036F4  7AFF      6042          moveq     #-1,D5
000036F6  41EE FFDC 6043          lea       -36(A6),A0
000036FA  2608      6044          move.l    A0,D3
000036FC  2408      6045          move.l    A0,D2
                    6046   vsprintf_6:
000036FE  206E 000C 6047          move.l    12(A6),A0
00003702  1010      6048          move.b    (A0),D0
00003704  4880      6049          ext.w     D0
00003706  48C0      6050          ext.l     D0
00003708  0C80 0000 6051          cmp.l     #43,D0
0000370C  002B      
0000370E  6730      6052          beq.s     vsprintf_12
00003710  6E18      6053          bgt.s     vsprintf_15
00003712  0C80 0000 6054          cmp.l     #35,D0
00003716  0023      
00003718  6700 003E 6055          beq       vsprintf_14
0000371C  6E00 0046 6056          bgt       vsprintf_9
00003720  0C80 0000 6057          cmp.l     #32,D0
00003724  0020      
00003726  6724      6058          beq.s     vsprintf_13
00003728  603A      6059          bra.s     vsprintf_9
                    6060   vsprintf_15:
0000372A  0C80 0000 6061          cmp.l     #45,D0
0000372E  002D      
00003730  6702      6062          beq.s     vsprintf_11
00003732  6030      6063          bra.s     vsprintf_9
                    6064   vsprintf_11:
00003734  1D7C 0001 6065          move.b    #1,-51(A6)
00003738  FFCD      
0000373A  52AE 000C 6066          addq.l    #1,12(A6)
0000373E  6026      6067          bra.s     vsprintf_7
                    6068   vsprintf_12:
00003740  1D7C 0001 6069          move.b    #1,-50(A6)
00003744  FFCE      
00003746  52AE 000C 6070          addq.l    #1,12(A6)
0000374A  601A      6071          bra.s     vsprintf_7
                    6072   vsprintf_13:
0000374C  1D7C 0001 6073          move.b    #1,-49(A6)
00003750  FFCF      
00003752  52AE 000C 6074          addq.l    #1,12(A6)
00003756  600E      6075          bra.s     vsprintf_7
                    6076   vsprintf_14:
00003758  1D7C 0001 6077          move.b    #1,-48(A6)
0000375C  FFD0      
0000375E  52AE 000C 6078          addq.l    #1,12(A6)
00003762  6002      6079          bra.s     vsprintf_7
                    6080   vsprintf_9:
00003764  6002      6081          bra.s     vsprintf_8
                    6082   vsprintf_7:
00003766  6096      6083          bra       vsprintf_6
                    6084   vsprintf_8:
00003768  206E 000C 6085          move.l    12(A6),A0
0000376C  1010      6086          move.b    (A0),D0
0000376E  4880      6087          ext.w     D0
00003770  48C0      6088          ext.l     D0
00003772  0C80 0000 6089          cmp.l     #48,D0
00003776  0030      
00003778  660A      6090          bne.s     vsprintf_16
0000377A  52AE 000C 6091          addq.l    #1,12(A6)
0000377E  1D7C 0001 6092          move.b    #1,-46(A6)
00003782  FFD2      
                    6093   vsprintf_16:
00003784  486E 0010 6094          pea       16(A6)
00003788  486E 000C 6095          pea       12(A6)
0000378C  6100 FE6E 6096          bsr       @vsprintf_getval
00003790  504F      6097          addq.w    #8,A7
00003792  2A40      6098          move.l    D0,A5
00003794  206E 000C 6099          move.l    12(A6),A0
00003798  1010      6100          move.b    (A0),D0
0000379A  4880      6101          ext.w     D0
0000379C  48C0      6102          ext.l     D0
0000379E  0C80 0000 6103          cmp.l     #46,D0
000037A2  002E      
000037A4  6614      6104          bne.s     vsprintf_18
000037A6  52AE 000C 6105          addq.l    #1,12(A6)
000037AA  486E 0010 6106          pea       16(A6)
000037AE  486E 000C 6107          pea       12(A6)
000037B2  6100 FE48 6108          bsr       @vsprintf_getval
000037B6  504F      6109          addq.w    #8,A7
000037B8  2A00      6110          move.l    D0,D5
                    6111   vsprintf_18:
000037BA  206E 000C 6112          move.l    12(A6),A0
000037BE  1010      6113          move.b    (A0),D0
000037C0  4880      6114          ext.w     D0
000037C2  48C0      6115          ext.l     D0
000037C4  0C80 0000 6116          cmp.l     #108,D0
000037C8  006C      
000037CA  660A      6117          bne.s     vsprintf_20
000037CC  52AE 000C 6118          addq.l    #1,12(A6)
000037D0  1D7C 0001 6119          move.b    #1,-45(A6)
000037D4  FFD3      
                    6120   vsprintf_20:
000037D6  206E 000C 6121          move.l    12(A6),A0
000037DA  1010      6122          move.b    (A0),D0
000037DC  4880      6123          ext.w     D0
000037DE  48C0      6124          ext.l     D0
000037E0  0C80 0000 6125          cmp.l     #111,D0
000037E4  006F      
000037E6  6700 00D4 6126          beq       vsprintf_27
000037EA  6E34      6127          bgt.s     vsprintf_33
000037EC  0C80 0000 6128          cmp.l     #100,D0
000037F0  0064      
000037F2  6700 0054 6129          beq       vsprintf_24
000037F6  6E1C      6130          bgt.s     vsprintf_34
000037F8  0C80 0000 6131          cmp.l     #99,D0
000037FC  0063      
000037FE  6700 012C 6132          beq       vsprintf_30
00003802  6E00 016A 6133          bgt       vsprintf_22
00003806  0C80 0000 6134          cmp.l     #88,D0
0000380A  0058      
0000380C  6700 00E6 6135          beq       vsprintf_28
00003810  6000 015C 6136          bra       vsprintf_22
                    6137   vsprintf_34:
00003814  0C80 0000 6138          cmp.l     #105,D0
00003818  0069      
0000381A  672C      6139          beq.s     vsprintf_24
0000381C  6000 0150 6140          bra       vsprintf_22
                    6141   vsprintf_33:
00003820  0C80 0000 6142          cmp.l     #117,D0
00003824  0075      
00003826  6700 005C 6143          beq       vsprintf_26
0000382A  6E0E      6144          bgt.s     vsprintf_35
0000382C  0C80 0000 6145          cmp.l     #115,D0
00003830  0073      
00003832  6700 011C 6146          beq       vsprintf_31
00003836  6000 0136 6147          bra       vsprintf_22
                    6148   vsprintf_35:
0000383A  0C80 0000 6149          cmp.l     #120,D0
0000383E  0078      
00003840  6700 00B2 6150          beq       vsprintf_28
00003844  6000 0128 6151          bra       vsprintf_22
                    6152   vsprintf_24:
00003848  4A2E FFD3 6153          tst.b     -45(A6)
0000384C  671A      6154          beq.s     vsprintf_36
0000384E  4878 000A 6155          pea       10
00003852  2F03      6156          move.l    D3,-(A7)
00003854  206E 0010 6157          move.l    16(A6),A0
00003858  58AE 0010 6158          addq.l    #4,16(A6)
0000385C  2F10      6159          move.l    (A0),-(A7)
0000385E  6100 04F8 6160          bsr       _ltoa
00003862  DEFC 000C 6161          add.w     #12,A7
00003866  6018      6162          bra.s     vsprintf_37
                    6163   vsprintf_36:
00003868  4878 000A 6164          pea       10
0000386C  2F03      6165          move.l    D3,-(A7)
0000386E  206E 0010 6166          move.l    16(A6),A0
00003872  58AE 0010 6167          addq.l    #4,16(A6)
00003876  2F10      6168          move.l    (A0),-(A7)
00003878  6100 04DE 6169          bsr       _ltoa
0000387C  DEFC 000C 6170          add.w     #12,A7
                    6171   vsprintf_37:
00003880  6000 00FA 6172          bra       vsprintf_23
                    6173   vsprintf_26:
00003884  4A2E FFD3 6174          tst.b     -45(A6)
00003888  6718      6175          beq.s     vsprintf_38
0000388A  4878 000A 6176          pea       10
0000388E  2F03      6177          move.l    D3,-(A7)
00003890  206E 0010 6178          move.l    16(A6),A0
00003894  58AE 0010 6179          addq.l    #4,16(A6)
00003898  2F10      6180          move.l    (A0),-(A7)
0000389A  4E94      6181          jsr       (A4)
0000389C  DEFC 000C 6182          add.w     #12,A7
000038A0  6016      6183          bra.s     vsprintf_39
                    6184   vsprintf_38:
000038A2  4878 000A 6185          pea       10
000038A6  2F03      6186          move.l    D3,-(A7)
000038A8  206E 0010 6187          move.l    16(A6),A0
000038AC  58AE 0010 6188          addq.l    #4,16(A6)
000038B0  2F10      6189          move.l    (A0),-(A7)
000038B2  4E94      6190          jsr       (A4)
000038B4  DEFC 000C 6191          add.w     #12,A7
                    6192   vsprintf_39:
000038B8  6000 00C2 6193          bra       vsprintf_23
                    6194   vsprintf_27:
000038BC  4A2E FFD3 6195          tst.b     -45(A6)
000038C0  6718      6196          beq.s     vsprintf_40
000038C2  4878 0008 6197          pea       8
000038C6  2F03      6198          move.l    D3,-(A7)
000038C8  206E 0010 6199          move.l    16(A6),A0
000038CC  58AE 0010 6200          addq.l    #4,16(A6)
000038D0  2F10      6201          move.l    (A0),-(A7)
000038D2  4E94      6202          jsr       (A4)
000038D4  DEFC 000C 6203          add.w     #12,A7
000038D8  6016      6204          bra.s     vsprintf_41
                    6205   vsprintf_40:
000038DA  4878 0008 6206          pea       8
000038DE  2F03      6207          move.l    D3,-(A7)
000038E0  206E 0010 6208          move.l    16(A6),A0
000038E4  58AE 0010 6209          addq.l    #4,16(A6)
000038E8  2F10      6210          move.l    (A0),-(A7)
000038EA  4E94      6211          jsr       (A4)
000038EC  DEFC 000C 6212          add.w     #12,A7
                    6213   vsprintf_41:
000038F0  6000 008A 6214          bra       vsprintf_23
                    6215   vsprintf_28:
000038F4  4A2E FFD3 6216          tst.b     -45(A6)
000038F8  6718      6217          beq.s     vsprintf_42
000038FA  4878 0010 6218          pea       16
000038FE  2F03      6219          move.l    D3,-(A7)
00003900  206E 0010 6220          move.l    16(A6),A0
00003904  58AE 0010 6221          addq.l    #4,16(A6)
00003908  2F10      6222          move.l    (A0),-(A7)
0000390A  4E94      6223          jsr       (A4)
0000390C  DEFC 000C 6224          add.w     #12,A7
00003910  6016      6225          bra.s     vsprintf_43
                    6226   vsprintf_42:
00003912  4878 0010 6227          pea       16
00003916  2F03      6228          move.l    D3,-(A7)
00003918  206E 0010 6229          move.l    16(A6),A0
0000391C  58AE 0010 6230          addq.l    #4,16(A6)
00003920  2F10      6231          move.l    (A0),-(A7)
00003922  4E94      6232          jsr       (A4)
00003924  DEFC 000C 6233          add.w     #12,A7
                    6234   vsprintf_43:
00003928  6000 0052 6235          bra       vsprintf_23
                    6236   vsprintf_30:
0000392C  206E 0010 6237          move.l    16(A6),A0
00003930  58AE 0010 6238          addq.l    #4,16(A6)
00003934  2010      6239          move.l    (A0),D0
00003936  2042      6240          move.l    D2,A0
00003938  5282      6241          addq.l    #1,D2
0000393A  1080      6242          move.b    D0,(A0)
0000393C  2042      6243          move.l    D2,A0
0000393E  4210      6244          clr.b     (A0)
00003940  200D      6245          move.l    A5,D0
00003942  6704      6246          beq.s     vsprintf_44
00003944  200D      6247          move.l    A5,D0
00003946  6002      6248          bra.s     vsprintf_45
                    6249   vsprintf_44:
00003948  7001      6250          moveq     #1,D0
                    6251   vsprintf_45:
0000394A  2A00      6252          move.l    D0,D5
0000394C  6000 002E 6253          bra       vsprintf_23
                    6254   vsprintf_31:
00003950  206E 0010 6255          move.l    16(A6),A0
00003954  58AE 0010 6256          addq.l    #4,16(A6)
00003958  2610      6257          move.l    (A0),D3
0000395A  0C85 FFFF 6258          cmp.l     #-1,D5
0000395E  FFFF      
00003960  660A      6259          bne.s     vsprintf_46
00003962  2F03      6260          move.l    D3,-(A7)
00003964  6100 0578 6261          bsr       _strlen
00003968  584F      6262          addq.w    #4,A7
0000396A  2A00      6263          move.l    D0,D5
                    6264   vsprintf_46:
0000396C  600E      6265          bra.s     vsprintf_23
                    6266   vsprintf_22:
0000396E  206E 000C 6267          move.l    12(A6),A0
00003972  2242      6268          move.l    D2,A1
00003974  5282      6269          addq.l    #1,D2
00003976  1290      6270          move.b    (A0),(A1)
00003978  2042      6271          move.l    D2,A0
0000397A  4210      6272          clr.b     (A0)
                    6273   vsprintf_23:
0000397C  2F03      6274          move.l    D3,-(A7)
0000397E  6100 055E 6275          bsr       _strlen
00003982  584F      6276          addq.w    #4,A7
00003984  1800      6277          move.b    D0,D4
00003986  206E 000C 6278          move.l    12(A6),A0
0000398A  1010      6279          move.b    (A0),D0
0000398C  4880      6280          ext.w     D0
0000398E  48C0      6281          ext.l     D0
00003990  0C80 0000 6282          cmp.l     #115,D0
00003994  0073      
00003996  6618      6283          bne.s     vsprintf_48
00003998  0C85 0000 6284          cmp.l     #0,D5
0000399C  0000      
0000399E  6D10      6285          blt.s     vsprintf_48
000039A0  4884      6286          ext.w     D4
000039A2  48C4      6287          ext.l     D4
000039A4  B885      6288          cmp.l     D5,D4
000039A6  6F04      6289          ble.s     vsprintf_50
000039A8  1005      6290          move.b    D5,D0
000039AA  6002      6291          bra.s     vsprintf_51
                    6292   vsprintf_50:
000039AC  1004      6293          move.b    D4,D0
                    6294   vsprintf_51:
000039AE  1800      6295          move.b    D0,D4
                    6296   vsprintf_48:
000039B0  206E 000C 6297          move.l    12(A6),A0
000039B4  1010      6298          move.b    (A0),D0
000039B6  4880      6299          ext.w     D0
000039B8  48C0      6300          ext.l     D0
000039BA  0C80 0000 6301          cmp.l     #88,D0
000039BE  0058      
000039C0  6600 0026 6302          bne       vsprintf_56
000039C4  41EE FFDC 6303          lea       -36(A6),A0
000039C8  2408      6304          move.l    A0,D2
                    6305   vsprintf_54:
000039CA  2042      6306          move.l    D2,A0
000039CC  4A10      6307          tst.b     (A0)
000039CE  6718      6308          beq.s     vsprintf_56
000039D0  2042      6309          move.l    D2,A0
000039D2  1210      6310          move.b    (A0),D1
000039D4  4881      6311          ext.w     D1
000039D6  48C1      6312          ext.l     D1
000039D8  2F01      6313          move.l    D1,-(A7)
000039DA  6100 FB98 6314          bsr       _toupper
000039DE  584F      6315          addq.w    #4,A7
000039E0  2042      6316          move.l    D2,A0
000039E2  1080      6317          move.b    D0,(A0)
000039E4  5282      6318          addq.l    #1,D2
000039E6  60E2      6319          bra       vsprintf_54
                    6320   vsprintf_56:
000039E8  7E00      6321          moveq     #0,D7
000039EA  41EE FFD4 6322          lea       -44(A6),A0
000039EE  2408      6323          move.l    A0,D2
000039F0  206E 000C 6324          move.l    12(A6),A0
000039F4  1010      6325          move.b    (A0),D0
000039F6  4880      6326          ext.w     D0
000039F8  48C0      6327          ext.l     D0
000039FA  0C80 0000 6328          cmp.l     #100,D0
000039FE  0064      
00003A00  6714      6329          beq.s     vsprintf_59
00003A02  206E 000C 6330          move.l    12(A6),A0
00003A06  1010      6331          move.b    (A0),D0
00003A08  4880      6332          ext.w     D0
00003A0A  48C0      6333          ext.l     D0
00003A0C  0C80 0000 6334          cmp.l     #105,D0
00003A10  0069      
00003A12  6600 0076 6335          bne       vsprintf_65
                    6336   vsprintf_59:
00003A16  4A2E FFCE 6337          tst.b     -50(A6)
00003A1A  6612      6338          bne.s     vsprintf_62
00003A1C  2043      6339          move.l    D3,A0
00003A1E  1010      6340          move.b    (A0),D0
00003A20  4880      6341          ext.w     D0
00003A22  48C0      6342          ext.l     D0
00003A24  0C80 0000 6343          cmp.l     #45,D0
00003A28  002D      
00003A2A  6600 002E 6344          bne       vsprintf_60
                    6345   vsprintf_62:
00003A2E  2043      6346          move.l    D3,A0
00003A30  1010      6347          move.b    (A0),D0
00003A32  4880      6348          ext.w     D0
00003A34  48C0      6349          ext.l     D0
00003A36  0C80 0000 6350          cmp.l     #45,D0
00003A3A  002D      
00003A3C  660E      6351          bne.s     vsprintf_63
00003A3E  2043      6352          move.l    D3,A0
00003A40  5283      6353          addq.l    #1,D3
00003A42  2242      6354          move.l    D2,A1
00003A44  5282      6355          addq.l    #1,D2
00003A46  1290      6356          move.b    (A0),(A1)
00003A48  5304      6357          subq.b    #1,D4
00003A4A  6008      6358          bra.s     vsprintf_64
                    6359   vsprintf_63:
00003A4C  2042      6360          move.l    D2,A0
00003A4E  5282      6361          addq.l    #1,D2
00003A50  10BC 002B 6362          move.b    #43,(A0)
                    6363   vsprintf_64:
00003A54  5287      6364          addq.l    #1,D7
00003A56  6000 0032 6365          bra       vsprintf_65
                    6366   vsprintf_60:
00003A5A  4A2E FFCF 6367          tst.b     -49(A6)
00003A5E  6700 002A 6368          beq       vsprintf_65
00003A62  2043      6369          move.l    D3,A0
00003A64  1010      6370          move.b    (A0),D0
00003A66  4880      6371          ext.w     D0
00003A68  48C0      6372          ext.l     D0
00003A6A  0C80 0000 6373          cmp.l     #45,D0
00003A6E  002D      
00003A70  660E      6374          bne.s     vsprintf_67
00003A72  2043      6375          move.l    D3,A0
00003A74  5283      6376          addq.l    #1,D3
00003A76  2242      6377          move.l    D2,A1
00003A78  5282      6378          addq.l    #1,D2
00003A7A  1290      6379          move.b    (A0),(A1)
00003A7C  5304      6380          subq.b    #1,D4
00003A7E  6008      6381          bra.s     vsprintf_68
                    6382   vsprintf_67:
00003A80  2042      6383          move.l    D2,A0
00003A82  5282      6384          addq.l    #1,D2
00003A84  10BC 0020 6385          move.b    #32,(A0)
                    6386   vsprintf_68:
00003A88  5287      6387          addq.l    #1,D7
                    6388   vsprintf_65:
00003A8A  4A2E FFD0 6389          tst.b     -48(A6)
00003A8E  6700 0066 6390          beq       vsprintf_77
00003A92  206E 000C 6391          move.l    12(A6),A0
00003A96  1010      6392          move.b    (A0),D0
00003A98  4880      6393          ext.w     D0
00003A9A  48C0      6394          ext.l     D0
00003A9C  0C80 0000 6395          cmp.l     #111,D0
00003AA0  006F      
00003AA2  671A      6396          beq.s     vsprintf_73
00003AA4  6E0C      6397          bgt.s     vsprintf_76
00003AA6  0C80 0000 6398          cmp.l     #88,D0
00003AAA  0058      
00003AAC  6710      6399          beq.s     vsprintf_73
00003AAE  6000 0046 6400          bra       vsprintf_77
                    6401   vsprintf_76:
00003AB2  0C80 0000 6402          cmp.l     #120,D0
00003AB6  0078      
00003AB8  6704      6403          beq.s     vsprintf_73
00003ABA  6000 003A 6404          bra       vsprintf_77
                    6405   vsprintf_73:
00003ABE  2042      6406          move.l    D2,A0
00003AC0  5282      6407          addq.l    #1,D2
00003AC2  10BC 0030 6408          move.b    #48,(A0)
00003AC6  5287      6409          addq.l    #1,D7
00003AC8  206E 000C 6410          move.l    12(A6),A0
00003ACC  1010      6411          move.b    (A0),D0
00003ACE  4880      6412          ext.w     D0
00003AD0  48C0      6413          ext.l     D0
00003AD2  0C80 0000 6414          cmp.l     #120,D0
00003AD6  0078      
00003AD8  6712      6415          beq.s     vsprintf_79
00003ADA  206E 000C 6416          move.l    12(A6),A0
00003ADE  1010      6417          move.b    (A0),D0
00003AE0  4880      6418          ext.w     D0
00003AE2  48C0      6419          ext.l     D0
00003AE4  0C80 0000 6420          cmp.l     #88,D0
00003AE8  0058      
00003AEA  660A      6421          bne.s     vsprintf_77
                    6422   vsprintf_79:
00003AEC  2042      6423          move.l    D2,A0
00003AEE  5282      6424          addq.l    #1,D2
00003AF0  10BC 0078 6425          move.b    #120,(A0)
00003AF4  5287      6426          addq.l    #1,D7
                    6427   vsprintf_77:
00003AF6  2042      6428          move.l    D2,A0
00003AF8  4210      6429          clr.b     (A0)
00003AFA  206E 000C 6430          move.l    12(A6),A0
00003AFE  1010      6431          move.b    (A0),D0
00003B00  4880      6432          ext.w     D0
00003B02  48C0      6433          ext.l     D0
00003B04  0C80 0000 6434          cmp.l     #105,D0
00003B08  0069      
00003B0A  6700 0076 6435          beq       vsprintf_82
00003B0E  6E42      6436          bgt.s     vsprintf_93
00003B10  0C80 0000 6437          cmp.l     #99,D0
00003B14  0063      
00003B16  6700 0084 6438          beq       vsprintf_96
00003B1A  6E1C      6439          bgt.s     vsprintf_94
00003B1C  0C80 0000 6440          cmp.l     #88,D0
00003B20  0058      
00003B22  6700 005E 6441          beq       vsprintf_82
00003B26  6E00 0184 6442          bgt       vsprintf_80
00003B2A  0C80 0000 6443          cmp.l     #69,D0
00003B2E  0045      
00003B30  6700 0050 6444          beq       vsprintf_82
00003B34  6000 0176 6445          bra       vsprintf_80
                    6446   vsprintf_94:
00003B38  0C80 0000 6447          cmp.l     #101,D0
00003B3C  0065      
00003B3E  6700 0042 6448          beq       vsprintf_82
00003B42  6E00 0168 6449          bgt       vsprintf_80
00003B46  0C80 0000 6450          cmp.l     #100,D0
00003B4A  0064      
00003B4C  6734      6451          beq.s     vsprintf_82
00003B4E  6000 015C 6452          bra       vsprintf_80
                    6453   vsprintf_93:
00003B52  0C80 0000 6454          cmp.l     #117,D0
00003B56  0075      
00003B58  6728      6455          beq.s     vsprintf_82
00003B5A  6E1A      6456          bgt.s     vsprintf_95
00003B5C  0C80 0000 6457          cmp.l     #115,D0
00003B60  0073      
00003B62  6700 0038 6458          beq       vsprintf_96
00003B66  6E00 0144 6459          bgt       vsprintf_80
00003B6A  0C80 0000 6460          cmp.l     #111,D0
00003B6E  006F      
00003B70  6710      6461          beq.s     vsprintf_82
00003B72  6000 0138 6462          bra       vsprintf_80
                    6463   vsprintf_95:
00003B76  0C80 0000 6464          cmp.l     #120,D0
00003B7A  0078      
00003B7C  6704      6465          beq.s     vsprintf_82
00003B7E  6000 012C 6466          bra       vsprintf_80
                    6467   vsprintf_82:
00003B82  4A2E FFD2 6468          tst.b     -46(A6)
00003B86  6714      6469          beq.s     vsprintf_96
00003B88  4A2E FFCD 6470          tst.b     -51(A6)
00003B8C  660E      6471          bne.s     vsprintf_96
00003B8E  200D      6472          move.l    A5,D0
00003B90  9087      6473          sub.l     D7,D0
00003B92  4884      6474          ext.w     D4
00003B94  48C4      6475          ext.l     D4
00003B96  9084      6476          sub.l     D4,D0
00003B98  2D40 FFFC 6477          move.l    D0,-4(A6)
                    6478   vsprintf_96:
00003B9C  202E FFFC 6479          move.l    -4(A6),D0
00003BA0  0C80 0000 6480          cmp.l     #0,D0
00003BA4  0000      
00003BA6  6C04      6481          bge.s     vsprintf_98
00003BA8  42AE FFFC 6482          clr.l     -4(A6)
                    6483   vsprintf_98:
00003BAC  4A2E FFCD 6484          tst.b     -51(A6)
00003BB0  6600 0030 6485          bne       vsprintf_104
00003BB4  4884      6486          ext.w     D4
00003BB6  48C4      6487          ext.l     D4
00003BB8  2004      6488          move.l    D4,D0
00003BBA  D0AE FFFC 6489          add.l     -4(A6),D0
00003BBE  D087      6490          add.l     D7,D0
00003BC0  1D40 FFD1 6491          move.b    D0,-47(A6)
                    6492   vsprintf_102:
00003BC4  102E FFD1 6493          move.b    -47(A6),D0
00003BC8  4880      6494          ext.w     D0
00003BCA  48C0      6495          ext.l     D0
00003BCC  220D      6496          move.l    A5,D1
00003BCE  534D      6497          subq.w    #1,A5
00003BD0  B081      6498          cmp.l     D1,D0
00003BD2  6C0E      6499          bge.s     vsprintf_104
00003BD4  4878 0020 6500          pea       32
00003BD8  2F0A      6501          move.l    A2,-(A7)
00003BDA  4E93      6502          jsr       (A3)
00003BDC  504F      6503          addq.w    #8,A7
00003BDE  5286      6504          addq.l    #1,D6
00003BE0  60E2      6505          bra       vsprintf_102
                    6506   vsprintf_104:
00003BE2  41EE FFD4 6507          lea       -44(A6),A0
00003BE6  2408      6508          move.l    A0,D2
                    6509   vsprintf_105:
00003BE8  2042      6510          move.l    D2,A0
00003BEA  4A10      6511          tst.b     (A0)
00003BEC  6716      6512          beq.s     vsprintf_107
00003BEE  2042      6513          move.l    D2,A0
00003BF0  5282      6514          addq.l    #1,D2
00003BF2  1210      6515          move.b    (A0),D1
00003BF4  4881      6516          ext.w     D1
00003BF6  48C1      6517          ext.l     D1
00003BF8  2F01      6518          move.l    D1,-(A7)
00003BFA  2F0A      6519          move.l    A2,-(A7)
00003BFC  4E93      6520          jsr       (A3)
00003BFE  504F      6521          addq.w    #8,A7
00003C00  5286      6522          addq.l    #1,D6
00003C02  60E4      6523          bra       vsprintf_105
                    6524   vsprintf_107:
00003C04  202E FFFC 6525          move.l    -4(A6),D0
00003C08  1D40 FFD1 6526          move.b    D0,-47(A6)
                    6527   vsprintf_108:
00003C0C  102E FFD1 6528          move.b    -47(A6),D0
00003C10  532E FFD1 6529          subq.b    #1,-47(A6)
00003C14  4A00      6530          tst.b     D0
00003C16  670E      6531          beq.s     vsprintf_110
00003C18  4878 0030 6532          pea       48
00003C1C  2F0A      6533          move.l    A2,-(A7)
00003C1E  4E93      6534          jsr       (A3)
00003C20  504F      6535          addq.w    #8,A7
00003C22  5286      6536          addq.l    #1,D6
00003C24  60E6      6537          bra       vsprintf_108
                    6538   vsprintf_110:
00003C26  2043      6539          move.l    D3,A0
00003C28  4A10      6540          tst.b     (A0)
00003C2A  6700 0048 6541          beq       vsprintf_113
00003C2E  206E 000C 6542          move.l    12(A6),A0
00003C32  1010      6543          move.b    (A0),D0
00003C34  4880      6544          ext.w     D0
00003C36  48C0      6545          ext.l     D0
00003C38  0C80 0000 6546          cmp.l     #115,D0
00003C3C  0073      
00003C3E  670C      6547          beq.s     vsprintf_116
00003C40  6E18      6548          bgt.s     vsprintf_119
00003C42  0C80 0000 6549          cmp.l     #99,D0
00003C46  0063      
00003C48  6702      6550          beq.s     vsprintf_116
00003C4A  600E      6551          bra.s     vsprintf_119
                    6552   vsprintf_116:
00003C4C  2005      6553          move.l    D5,D0
00003C4E  5385      6554          subq.l    #1,D5
00003C50  0C80 0000 6555          cmp.l     #0,D0
00003C54  0000      
00003C56  6E02      6556          bgt.s     vsprintf_119
00003C58  6016      6557          bra.s     vsprintf_115
                    6558   vsprintf_119:
00003C5A  2043      6559          move.l    D3,A0
00003C5C  5283      6560          addq.l    #1,D3
00003C5E  1210      6561          move.b    (A0),D1
00003C60  4881      6562          ext.w     D1
00003C62  48C1      6563          ext.l     D1
00003C64  2F01      6564          move.l    D1,-(A7)
00003C66  2F0A      6565          move.l    A2,-(A7)
00003C68  4E93      6566          jsr       (A3)
00003C6A  504F      6567          addq.w    #8,A7
00003C6C  5286      6568          addq.l    #1,D6
00003C6E  6002      6569          bra.s     vsprintf_112
                    6570   vsprintf_115:
00003C70  6002      6571          bra.s     vsprintf_113
                    6572   vsprintf_112:
00003C72  60B2      6573          bra       vsprintf_110
                    6574   vsprintf_113:
00003C74  4A2E FFCD 6575          tst.b     -51(A6)
00003C78  6700 0030 6576          beq       vsprintf_125
00003C7C  4884      6577          ext.w     D4
00003C7E  48C4      6578          ext.l     D4
00003C80  2004      6579          move.l    D4,D0
00003C82  D0AE FFFC 6580          add.l     -4(A6),D0
00003C86  D087      6581          add.l     D7,D0
00003C88  1D40 FFD1 6582          move.b    D0,-47(A6)
                    6583   vsprintf_123:
00003C8C  102E FFD1 6584          move.b    -47(A6),D0
00003C90  4880      6585          ext.w     D0
00003C92  48C0      6586          ext.l     D0
00003C94  220D      6587          move.l    A5,D1
00003C96  534D      6588          subq.w    #1,A5
00003C98  B081      6589          cmp.l     D1,D0
00003C9A  6C0E      6590          bge.s     vsprintf_125
00003C9C  4878 0020 6591          pea       32
00003CA0  2F0A      6592          move.l    A2,-(A7)
00003CA2  4E93      6593          jsr       (A3)
00003CA4  504F      6594          addq.w    #8,A7
00003CA6  5386      6595          subq.l    #1,D6
00003CA8  60E2      6596          bra       vsprintf_123
                    6597   vsprintf_125:
00003CAA  6014      6598          bra.s     vsprintf_81
                    6599   vsprintf_80:
00003CAC  206E 000C 6600          move.l    12(A6),A0
00003CB0  1210      6601          move.b    (A0),D1
00003CB2  4881      6602          ext.w     D1
00003CB4  48C1      6603          ext.l     D1
00003CB6  2F01      6604          move.l    D1,-(A7)
00003CB8  2F0A      6605          move.l    A2,-(A7)
00003CBA  4E93      6606          jsr       (A3)
00003CBC  504F      6607          addq.w    #8,A7
00003CBE  5286      6608          addq.l    #1,D6
                    6609   vsprintf_81:
00003CC0  52AE 000C 6610          addq.l    #1,12(A6)
                    6611   vsprintf_2:
00003CC4  6000 F9D6 6612          bra       vsprintf_1
                    6613   vsprintf_3:
00003CC8  4A92      6614          tst.l     (A2)
00003CCA  6710      6615          beq.s     vsprintf_126
00003CCC  4201      6616          clr.b     D1
00003CCE  C2BC 0000 6617          and.l     #255,D1
00003CD2  00FF      
00003CD4  2F01      6618          move.l    D1,-(A7)
00003CD6  2F0A      6619          move.l    A2,-(A7)
00003CD8  4E93      6620          jsr       (A3)
00003CDA  504F      6621          addq.w    #8,A7
                    6622   vsprintf_126:
00003CDC  2006      6623          move.l    D6,D0
00003CDE  4CDF 3CFC 6624          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003CE2  4E5E      6625          unlk      A6
00003CE4  4E75      6626          rts
                    6627   @itoa_convert:
00003CE6  4E56 0000 6628          link      A6,#0
00003CEA  48E7 3C00 6629          movem.l   D2/D3/D4/D5,-(A7)
00003CEE  242E 0008 6630          move.l    8(A6),D2
00003CF2  262E 0010 6631          move.l    16(A6),D3
00003CF6  2A2E 000C 6632          move.l    12(A6),D5
00003CFA  2F05      6633          move.l    D5,-(A7)
00003CFC  2F03      6634          move.l    D3,-(A7)
00003CFE  6100 F6B4 6635          bsr       ULDIV
00003D02  202F 0004 6636          move.l    4(A7),D0
00003D06  504F      6637          addq.w    #8,A7
00003D08  2800      6638          move.l    D0,D4
00003D0A  BA83      6639          cmp.l     D3,D5
00003D0C  651A      6640          blo.s     @itoa_convert_1
00003D0E  2F03      6641          move.l    D3,-(A7)
00003D10  2F05      6642          move.l    D5,-(A7)
00003D12  2F03      6643          move.l    D3,-(A7)
00003D14  6100 F69E 6644          bsr       ULDIV
00003D18  2217      6645          move.l    (A7),D1
00003D1A  504F      6646          addq.w    #8,A7
00003D1C  2F01      6647          move.l    D1,-(A7)
00003D1E  2F02      6648          move.l    D2,-(A7)
00003D20  61C4      6649          bsr       @itoa_convert
00003D22  DEFC 000C 6650          add.w     #12,A7
00003D26  2400      6651          move.l    D0,D2
                    6652   @itoa_convert_1:
00003D28  0C84 0000 6653          cmp.l     #9,D4
00003D2C  0009      
00003D2E  6E0A      6654          bgt.s     @itoa_convert_3
00003D30  2004      6655          move.l    D4,D0
00003D32  0680 0000 6656          add.l     #48,D0
00003D36  0030      
00003D38  600E      6657          bra.s     @itoa_convert_4
                    6658   @itoa_convert_3:
00003D3A  2004      6659          move.l    D4,D0
00003D3C  0680 0000 6660          add.l     #97,D0
00003D40  0061      
00003D42  0480 0000 6661          sub.l     #10,D0
00003D46  000A      
                    6662   @itoa_convert_4:
00003D48  2042      6663          move.l    D2,A0
00003D4A  1080      6664          move.b    D0,(A0)
00003D4C  2002      6665          move.l    D2,D0
00003D4E  5280      6666          addq.l    #1,D0
00003D50  4CDF 003C 6667          movem.l   (A7)+,D2/D3/D4/D5
00003D54  4E5E      6668          unlk      A6
00003D56  4E75      6669          rts
                    6670   _ltoa:
00003D58  4E56 0000 6671          link      A6,#0
00003D5C  48E7 3C00 6672          movem.l   D2/D3/D4/D5,-(A7)
00003D60  242E 0008 6673          move.l    8(A6),D2
00003D64  262E 000C 6674          move.l    12(A6),D3
00003D68  2A2E 0010 6675          move.l    16(A6),D5
00003D6C  2803      6676          move.l    D3,D4
00003D6E  0C85 0000 6677          cmp.l     #2,D5
00003D72  0002      
00003D74  6D08      6678          blt.s     ltoa_3
00003D76  0C85 0000 6679          cmp.l     #36,D5
00003D7A  0024      
00003D7C  6F06      6680          ble.s     ltoa_1
                    6681   ltoa_3:
00003D7E  2003      6682          move.l    D3,D0
00003D80  6000 0052 6683          bra       ltoa_4
                    6684   ltoa_1:
00003D84  0C85 0000 6685          cmp.l     #10,D5
00003D88  000A      
00003D8A  6600 0032 6686          bne       ltoa_5
00003D8E  0C82 0000 6687          cmp.l     #0,D2
00003D92  0000      
00003D94  6C28      6688          bge.s     ltoa_5
00003D96  2002      6689          move.l    D2,D0
00003D98  4480      6690          neg.l     D0
00003D9A  2400      6691          move.l    D0,D2
00003D9C  0C82 0000 6692          cmp.l     #0,D2
00003DA0  0000      
00003DA2  6C12      6693          bge.s     ltoa_7
00003DA4  4879 0000 6694          pea       @itoa_1
00003DA8  5942      
00003DAA  2F03      6695          move.l    D3,-(A7)
00003DAC  6100 F5F6 6696          bsr       _strcpy
00003DB0  504F      6697          addq.w    #8,A7
00003DB2  2003      6698          move.l    D3,D0
00003DB4  601E      6699          bra.s     ltoa_4
                    6700   ltoa_7:
00003DB6  2044      6701          move.l    D4,A0
00003DB8  5284      6702          addq.l    #1,D4
00003DBA  10BC 002D 6703          move.b    #45,(A0)
                    6704   ltoa_5:
00003DBE  2F05      6705          move.l    D5,-(A7)
00003DC0  2F02      6706          move.l    D2,-(A7)
00003DC2  2F04      6707          move.l    D4,-(A7)
00003DC4  6100 FF20 6708          bsr       @itoa_convert
00003DC8  DEFC 000C 6709          add.w     #12,A7
00003DCC  2800      6710          move.l    D0,D4
00003DCE  2044      6711          move.l    D4,A0
00003DD0  4210      6712          clr.b     (A0)
00003DD2  2003      6713          move.l    D3,D0
                    6714   ltoa_4:
00003DD4  4CDF 003C 6715          movem.l   (A7)+,D2/D3/D4/D5
00003DD8  4E5E      6716          unlk      A6
00003DDA  4E75      6717          rts
                    6718   _ultoa:
00003DDC  4E56 0000 6719          link      A6,#0
00003DE0  48E7 3800 6720          movem.l   D2/D3/D4,-(A7)
00003DE4  262E 0010 6721          move.l    16(A6),D3
00003DE8  282E 000C 6722          move.l    12(A6),D4
00003DEC  2404      6723          move.l    D4,D2
00003DEE  0C83 0000 6724          cmp.l     #2,D3
00003DF2  0002      
00003DF4  6D08      6725          blt.s     ultoa_3
00003DF6  0C83 0000 6726          cmp.l     #36,D3
00003DFA  0024      
00003DFC  6F04      6727          ble.s     ultoa_1
                    6728   ultoa_3:
00003DFE  2004      6729          move.l    D4,D0
00003E00  6018      6730          bra.s     ultoa_4
                    6731   ultoa_1:
00003E02  2F03      6732          move.l    D3,-(A7)
00003E04  2F2E 0008 6733          move.l    8(A6),-(A7)
00003E08  2F02      6734          move.l    D2,-(A7)
00003E0A  6100 FEDA 6735          bsr       @itoa_convert
00003E0E  DEFC 000C 6736          add.w     #12,A7
00003E12  2400      6737          move.l    D0,D2
00003E14  2042      6738          move.l    D2,A0
00003E16  4210      6739          clr.b     (A0)
00003E18  2004      6740          move.l    D4,D0
                    6741   ultoa_4:
00003E1A  4CDF 001C 6742          movem.l   (A7)+,D2/D3/D4
00003E1E  4E5E      6743          unlk      A6
00003E20  4E75      6744          rts
                    6745   _itoa:
00003E22  4E56 0000 6746          link      A6,#0
00003E26  2F2E 0010 6747          move.l    16(A6),-(A7)
00003E2A  2F2E 000C 6748          move.l    12(A6),-(A7)
00003E2E  2F2E 0008 6749          move.l    8(A6),-(A7)
00003E32  6100 FF24 6750          bsr       _ltoa
00003E36  DEFC 000C 6751          add.w     #12,A7
00003E3A  4E5E      6752          unlk      A6
00003E3C  4E75      6753          rts
                    6754   ULMUL:
00003E3E  4E56 0000 6755          link    A6,#0
00003E42  48E7 C000 6756          movem.l D0/D1,-(A7)
00003E46  222E 0008 6757          move.l  8(A6),D1
00003E4A  202E 000C 6758          move.l  12(A6),D0
00003E4E  602C      6759          bra.s   lmul_3
                    6760   LMUL:
00003E50  4E56 0000 6761          link    A6,#0
00003E54  48E7 C000 6762          movem.l D0/D1,-(A7)
00003E58  222E 0008 6763          move.l  8(A6),D1
00003E5C  202E 000C 6764          move.l  12(A6),D0
00003E60  4A80      6765          tst.l   D0
00003E62  6A0A      6766          bpl.s   lmul_1
00003E64  4480      6767          neg.l   D0
00003E66  4A81      6768          tst.l   D1
00003E68  6A0A      6769          bpl.s   lmul_2
00003E6A  4481      6770          neg.l   D1
00003E6C  600E      6771          bra.s   lmul_3
                    6772   lmul_1:
00003E6E  4A81      6773          tst.l   D1
00003E70  6A0A      6774          bpl.s   lmul_3
00003E72  4481      6775          neg.l   D1
                    6776   lmul_2:
00003E74  6114      6777          bsr.s   domul
00003E76  4481      6778          neg.l   D1
00003E78  4080      6779          negx.l  D0
00003E7A  6002      6780          bra.s   lmul_4
                    6781   lmul_3:
00003E7C  610C      6782          bsr.s   domul
                    6783   lmul_4:
00003E7E  2D41 0008 6784          move.l  D1,8(A6)
00003E82  4CDF 0003 6785          movem.l (A7)+,D0/D1
00003E86  4E5E      6786          unlk    A6
00003E88  4E75      6787          rts
                    6788   domul:
00003E8A  0C81 0000 6789          cmpi.l  #$FFFF,D1
00003E8E  FFFF      
00003E90  620C      6790          bhi.s   domul_1
00003E92  0C80 0000 6791          cmpi.l  #$FFFF,D0
00003E96  FFFF      
00003E98  620E      6792          bhi.s   domul_2
00003E9A  C2C0      6793          mulu    D0,D1
00003E9C  4E75      6794          rts
                    6795   domul_1:
00003E9E  0C80 0000 6796          cmpi.l  #$FFFF,D0
00003EA2  FFFF      
00003EA4  6218      6797          bhi.s   domul_4
00003EA6  6002      6798          bra.s   domul_3
                    6799   domul_2
00003EA8  C141      6800          exg     D0,D1
                    6801   domul_3:
00003EAA  2F02      6802          move.l  D2,-(A7)
00003EAC  2401      6803          move.l  D1,D2
00003EAE  4842      6804          swap    D2
00003EB0  C2C0      6805          mulu    D0,D1
00003EB2  C4C0      6806          mulu    D0,D2
00003EB4  4842      6807          swap    D2
00003EB6  4242      6808          clr.w   D2
00003EB8  D282      6809          add.l   D2,D1
00003EBA  241F      6810          move.l  (A7)+,D2
00003EBC  4E75      6811          rts
                    6812   domul_4:
00003EBE  48E7 3000 6813          movem.l D2/D3,-(A7)
00003EC2  2401      6814          move.l  D1,D2
00003EC4  2601      6815          move.l  D1,D3
00003EC6  C2C0      6816          mulu    D0,D1
00003EC8  4842      6817          swap    D2
00003ECA  C4C0      6818          mulu    D0,D2
00003ECC  4840      6819          swap    D0
00003ECE  C6C0      6820          mulu    D0,D3
00003ED0  D483      6821          add.l   D3,D2
00003ED2  4842      6822          swap    D2
00003ED4  4242      6823          clr.w   D2
00003ED6  D282      6824          add.l   D2,D1
00003ED8  4CDF 000C 6825          movem.l (A7)+,D2/D3
00003EDC  4E75      6826          rts
                    6827   _strlen:
00003EDE  206F 0004 6828          move.l    (4,A7),A0
00003EE2  2248      6829          move.l    A0,A1
                    6830   strlen_1:
00003EE4  4A19      6831          tst.b     (A1)+
00003EE6  66FC      6832          bne       strlen_1
00003EE8  2009      6833          move.l    A1,D0
00003EEA  9088      6834          sub.l     A0,D0
00003EEC  5380      6835          subq.l    #1,D0
00003EEE  4E75      6836          rts
                    6837          section   const
                    6838   
                    6839   @lab3_1:
00003EF0  0D0A 00   6840          dc.b      13,10,0
                    6841   @lab3_2:
00003EF4  0D53 7769 6842          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003EF8  7463 6865 
00003EFC  7320 5357 
00003F00  5B        
00003F01  372D 305D 6843          dc.b      55,45,48,93,32,61,32,0
00003F05  203D 2000 
                    6844   @lab3_3:
00003F0A  3000      6845          dc.b      48,0
                    6846   @lab3_4:
00003F0C  3100      6847          dc.b      49,0
                    6848   @lab3_5:
00003F0E  0D0A 4475 6849          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003F12  6D70 204D 
00003F16  656D 6F72 
00003F1A  79        
00003F1B  2042 6C6F 6850          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003F1F  636B 3A20 
00003F23  3C45 5343 
00003F27  3E20      
00003F29  746F 2041 6851          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003F2D  626F 7274 
00003F31  2C20 3C53 
00003F35  50        
00003F36  4143 453E 6852          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003F3A  2074 6F20 
00003F3E  436F 6E74 
00003F42  69        
00003F43  6E75 6500 6853          dc.b      110,117,101,0
                    6854   @lab3_6:
00003F48  0D0A 456E 6855          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003F4C  7465 7220 
00003F50  5374 6172 
00003F54  74        
00003F55  2041 6464 6856          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003F59  7265 7373 
00003F5D  3A20 00   
                    6857   @lab3_7:
00003F60  0D0A 2530 6858          dc.b      13,10,37,48,56,120,32,0
00003F64  3878 2000 
                    6859   @lab3_8:
00003F68  2530 3258 6860          dc.b      37,48,50,88,0
00003F6C  00        
                    6861   @lab3_9:
00003F6E  2020 00   6862          dc.b      32,32,0
                    6863   @lab3_10:
00003F72  0D0A 4669 6864          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003F76  6C6C 204D 
00003F7A  656D 6F72 
00003F7E  79        
00003F7F  2042 6C6F 6865          dc.b      32,66,108,111,99,107,0
00003F83  636B 00   
                    6866   @lab3_11:
00003F86  0D0A 456E 6867          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003F8A  7465 7220 
00003F8E  456E 6420 
00003F92  41        
00003F93  6464 7265 6868          dc.b      100,100,114,101,115,115,58,32,0
00003F97  7373 3A20 
00003F9B  00        
                    6869   @lab3_12:
00003F9C  0D0A 456E 6870          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003FA0  7465 7220 
00003FA4  4669 6C6C 
00003FA8  20        
00003FA9  4461 7461 6871          dc.b      68,97,116,97,58,32,0
00003FAD  3A20 00   
                    6872   @lab3_13:
00003FB0  0D0A 4669 6873          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003FB4  6C6C 696E 
00003FB8  6720 4164 
00003FBC  64        
00003FBD  7265 7373 6874          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003FC1  6573 205B 
00003FC5  2425 3038 
00003FC9  58        
00003FCA  202D 2024 6875          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003FCE  2530 3858 
00003FD2  5D20 7769 
00003FD6  7468      
00003FD8  2024 2530 6876          dc.b      32,36,37,48,50,88,0
00003FDC  3258 00   
                    6877   @lab3_14:
00003FE0  0D0A 5573 6878          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003FE4  6520 4879 
00003FE8  7065 7254 
00003FEC  65        
00003FED  726D 696E 6879          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003FF1  616C 2074 
00003FF5  6F20 5365 
00003FF9  6E64 2054 6880          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003FFD  6578 7420 
00004001  4669 6C65 
00004005  2028 2E68 6881          dc.b      32,40,46,104,101,120,41,13,10,0
00004009  6578 290D 
0000400D  0A00      
                    6882   @lab3_15:
00004010  0D0A 4C6F 6883          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004014  6164 2046 
00004018  6169 6C65 
0000401C  64        
0000401D  2061 7420 6884          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004021  4164 6472 
00004025  6573 7320 
00004029  3D        
0000402A  205B 2425 6885          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000402E  3038 585D 
00004032  0D0A 00   
                    6886   @lab3_16:
00004036  0D0A 5375 6887          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
0000403A  6363 6573 
0000403E  733A 2044 
00004042  6F        
00004043  776E 6C6F 6888          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004047  6164 6564 
0000404B  2025 6420 
0000404F  6279 7465 6889          dc.b      98,121,116,101,115,13,10,0
00004053  730D 0A00 
                    6890   @lab3_17:
00004058  0D0A 4578 6891          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000405C  616D 696E 
00004060  6520 616E 
00004064  64        
00004065  2043 6861 6892          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004069  6E67 6520 
0000406D  4D65 6D6F 
00004071  72        
00004072  7900      6893          dc.b      121,0
                    6894   @lab3_18:
00004074  0D0A 3C45 6895          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004078  5343 3E20 
0000407C  746F 2053 
00004080  746F      
00004082  702C 203C 6896          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004086  5350 4143 
0000408A  453E 2074 
0000408E  6F20      
00004090  4164 7661 6897          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004094  6E63 652C 
00004098  2027 2D27 
0000409C  2074      
0000409E  6F20 476F 6898          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
000040A2  2042 6163 
000040A6  6B2C 203C 
000040AA  4441      
000040AC  5441 3E20 6899          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000040B0  746F 2063 
000040B4  6861 6E67 
000040B8  65        
000040B9  00        6900          dc.b      0
                    6901   @lab3_19:
000040BA  0D0A 456E 6902          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000040BE  7465 7220 
000040C2  4164 6472 
000040C6  65        
000040C7  7373 3A20 6903          dc.b      115,115,58,32,0
000040CB  00        
                    6904   @lab3_20:
000040CC  0D0A 5B25 6905          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000040D0  3038 785D 
000040D4  203A 2025 
000040D8  3032 78   
000040DB  2020 00   6906          dc.b      32,32,0
                    6907   @lab3_21:
000040DE  0D0A 5761 6908          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000040E2  726E 696E 
000040E6  6720 4368 
000040EA  61        
000040EB  6E67 6520 6909          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000040EF  4661 696C 
000040F3  6564 3A20 
000040F7  57        
000040F8  726F 7465 6910          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000040FC  205B 2530 
00004100  3278 5D2C 
00004104  20        
00004105  5265 6164 6911          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004109  205B 2530 
0000410D  3278 5D00 
                    6912   @lab3_22:
00004112  2E00      6913          dc.b      46,0
                    6914   @lab3_23:
00004114  0A0D 4572 6915          dc.b      10,13,69,114,97,115,105,110,103,10,13,0
00004118  6173 696E 
0000411C  670A 0D00 
                    6916   @lab3_24:
00004120  5772 6974 6917          dc.b      87,114,105,116,105,110,103,32,80,114,111,103
00004124  696E 6720 
00004128  5072 6F67 
0000412C  7261 6D20 6918          dc.b      114,97,109,32,116,111,32,109,101,109,111,114
00004130  746F 206D 
00004134  656D 6F72 
00004138  7920 0A0D 6919          dc.b      121,32,10,13,0
0000413C  00        
                    6920   @lab3_25:
0000413E  5772 6974 6921          dc.b      87,114,105,116,105,110,103,32,68,111,110,101
00004142  696E 6720 
00004146  446F 6E65 
0000414A  0A0D 00   6922          dc.b      10,13,0
                    6923   @lab3_26:
0000414E  5265 6164 6924          dc.b      82,101,97,100,105,110,103,32,80,114,111,103
00004152  696E 6720 
00004156  5072 6F67 
0000415A  7261 6D20 6925          dc.b      114,97,109,32,102,114,111,109,32,109,101,109
0000415E  6672 6F6D 
00004162  206D 656D 
00004166  6F72 790A 6926          dc.b      111,114,121,10,13,0
0000416A  0D00      
                    6927   @lab3_27:
0000416C  0D0A 4552 6928          dc.b      13,10,69,82,82,79,82,58,32,68,65,84,65,32,77
00004170  524F 523A 
00004174  2044 4154 
00004178  4120 4D   
0000417B  6973 6D61 6929          dc.b      105,115,109,97,116,99,104,32,97,116,32,97,100
0000417F  7463 6820 
00004183  6174 2061 
00004187  64        
00004188  6472 2030 6930          dc.b      100,114,32,48,120,37,48,56,120,46,32,87,82,73
0000418C  7825 3038 
00004190  782E 2057 
00004194  5249      
00004196  5445 3A20 6931          dc.b      84,69,58,32,48,120,37,48,50,120,32,82,69,65
0000419A  3078 2530 
0000419E  3278 2052 
000041A2  4541      
000041A4  443A 2030 6932          dc.b      68,58,32,48,120,37,48,50,120,13,10,0
000041A8  7825 3032 
000041AC  780D 0A00 
                    6933   @lab3_28:
000041B0  5041 5353 6934          dc.b      80,65,83,83,10,13,0
000041B4  0A0D 00   
                    6935   @lab3_29:
000041B8  0D0A 4C6F 6936          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000041BC  6164 696E 
000041C0  6720 5072 
000041C4  6F        
000041C5  6772 616D 6937          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000041C9  2046 726F 
000041CD  6D20 5350 
000041D1  49        
000041D2  2046 6C61 6938          dc.b      32,70,108,97,115,104,46,46,46,46,0
000041D6  7368 2E2E 
000041DA  2E2E 00   
                    6939   @lab3_30:
000041DE  6761 7262 6940          dc.b      103,97,114,98,97,103,101,32,118,97,108,117,101
000041E2  6167 6520 
000041E6  7661 6C75 
000041EA  65        
000041EB  2072 6561 6941          dc.b      32,114,101,97,100,33,13,10,0
000041EF  6421 0D0A 
000041F3  00        
                    6942   @lab3_31:
000041F4  0D0A 446F 6943          dc.b      13,10,68,111,110,101,32,108,111,97,100,105,110
000041F8  6E65 206C 
000041FC  6F61 6469 
00004200  6E        
00004201  672E 0D0A 6944          dc.b      103,46,13,10,0
00004205  00        
                    6945   @lab3_32:
00004206  2425 3038 6946          dc.b      36,37,48,56,88,32,32,0
0000420A  5820 2000 
                    6947   @lab3_33:
0000420E  2000      6948          dc.b      32,0
                    6949   @lab3_34:
00004210  2563 00   6950          dc.b      37,99,0
                    6951   @lab3_35:
00004214  00        6952          dc.b      0
                    6953   @lab3_36:
00004216  0D0A 0D0A 6954          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000421A  2044 3020 
0000421E  3D20 2425 
00004222  3038 58   
00004225  2020 4130 6955          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004229  203D 2024 
0000422D  2530 3858 
00004231  00        
                    6956   @lab3_37:
00004232  0D0A 2044 6957          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004236  3120 3D20 
0000423A  2425 3038 
0000423E  5820 20   
00004241  4131 203D 6958          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004245  2024 2530 
00004249  3858 00   
                    6959   @lab3_38:
0000424C  0D0A 2044 6960          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004250  3220 3D20 
00004254  2425 3038 
00004258  5820 20   
0000425B  4132 203D 6961          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000425F  2024 2530 
00004263  3858 00   
                    6962   @lab3_39:
00004266  0D0A 2044 6963          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000426A  3320 3D20 
0000426E  2425 3038 
00004272  5820 20   
00004275  4133 203D 6964          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004279  2024 2530 
0000427D  3858 00   
                    6965   @lab3_40:
00004280  0D0A 2044 6966          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004284  3420 3D20 
00004288  2425 3038 
0000428C  5820 20   
0000428F  4134 203D 6967          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004293  2024 2530 
00004297  3858 00   
                    6968   @lab3_41:
0000429A  0D0A 2044 6969          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000429E  3520 3D20 
000042A2  2425 3038 
000042A6  5820 20   
000042A9  4135 203D 6970          dc.b      65,53,32,61,32,36,37,48,56,88,0
000042AD  2024 2530 
000042B1  3858 00   
                    6971   @lab3_42:
000042B4  0D0A 2044 6972          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000042B8  3620 3D20 
000042BC  2425 3038 
000042C0  5820 20   
000042C3  4136 203D 6973          dc.b      65,54,32,61,32,36,37,48,56,88,0
000042C7  2024 2530 
000042CB  3858 00   
                    6974   @lab3_43:
000042CE  0D0A 2044 6975          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000042D2  3720 3D20 
000042D6  2425 3038 
000042DA  5820 20   
000042DD  4137 203D 6976          dc.b      65,55,32,61,32,36,37,48,56,88,0
000042E1  2024 2530 
000042E5  3858 00   
                    6977   @lab3_44:
000042E8  0D0A 0D0A 6978          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000042EC  5553 5020 
000042F0  3D20 2425 
000042F4  3038 58   
000042F7  2020 2841 6979          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000042FB  3729 2055 
000042FF  7365 7220 
00004303  5350      
00004305  00        6980          dc.b      0
                    6981   @lab3_45:
00004306  0D0A 5353 6982          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
0000430A  5020 3D20 
0000430E  2425 3038 
00004312  5820 20   
00004315  2841 3729 6983          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004319  2053 7570 
0000431D  6572 7669 
00004321  73        
00004322  6F72 2053 6984          dc.b      111,114,32,83,80,0
00004326  5000      
                    6985   @lab3_46:
00004328  0D0A 2053 6986          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000432C  5220 3D20 
00004330  2425 3034 
00004334  5820 20   
00004337  2000      6987          dc.b      32,0
                    6988   @lab3_47:
0000433A  2020 205B 6989          dc.b      32,32,32,91,0
0000433E  00        
                    6990   @lab3_48:
00004340  0D0A 2050 6991          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004344  4320 3D20 
00004348  2425 3038 
0000434C  5820 20   
0000434F  00        6992          dc.b      0
                    6993   @lab3_49:
00004350  5B40 2042 6994          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004354  5245 414B 
00004358  504F 494E 
0000435C  545D 00   
                    6995   @lab3_50:
00004360  0D0A 5750 6996          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004364  2564 203D 
00004368  2025 7300 
                    6997   @lab3_51:
0000436C  0D0A 0D0A 6998          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004370  0D0A 0D0A 
00004374  0D0A 0D0A 
00004378  5369 6E   
0000437B  676C 6520 6999          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000437F  5374 6570 
00004383  2020 3A5B 
00004387  4F        
00004388  4E5D 00   7000          dc.b      78,93,0
                    7001   @lab3_52:
0000438C  0D0A 4272 7002          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004390  6561 6B20 
00004394  506F 696E 
00004398  74        
00004399  7320 3A5B 7003          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
0000439D  4469 7361 
000043A1  626C 6564 
000043A5  5D        
000043A6  00        7004          dc.b      0
                    7005   @lab3_53:
000043A8  0D0A 5072 7006          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000043AC  6573 7320 
000043B0  3C53 5041 
000043B4  4345      
000043B6  3E20 746F 7007          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000043BA  2045 7865 
000043BE  6375 7465 
000043C2  20        
000043C3  4E65 7874 7008          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000043C7  2049 6E73 
000043CB  7472 7563 
000043CF  7469 6F6E 7009          dc.b      116,105,111,110,0
000043D3  00        
                    7010   @lab3_54:
000043D4  0D0A 5072 7011          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000043D8  6573 7320 
000043DC  3C45 5343 
000043E0  3E20      
000043E2  746F 2052 7012          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000043E6  6573 756D 
000043EA  6520 5072 
000043EE  6F67 7261 7013          dc.b      111,103,114,97,109,0
000043F2  6D00      
                    7014   @lab3_55:
000043F4  0D0A 496C 7015          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000043F8  6C65 6761 
000043FC  6C20 4461 
00004400  74        
00004401  6120 5265 7016          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004405  6769 7374 
00004409  6572 203A 
0000440D  20        
0000440E  5573 6520 7017          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004412  4430 2D44 
00004416  372E 2E2E 
0000441A  2E2E      
0000441C  0D0A 00   7018          dc.b      13,10,0
                    7019   @lab3_56:
00004420  0D0A 4425 7020          dc.b      13,10,68,37,99,32,61,32,0
00004424  6320 3D20 
00004428  00        
                    7021   @lab3_57:
0000442A  0D0A 496C 7022          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000442E  6C65 6761 
00004432  6C20 4164 
00004436  64        
00004437  7265 7373 7023          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000443B  2052 6567 
0000443F  6973 7465 
00004443  7220 3A20 7024          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004447  5573 6520 
0000444B  4130 2D41 
0000444F  372E      
00004451  2E2E 2E2E 7025          dc.b      46,46,46,46,13,10,0
00004455  0D0A 00   
                    7026   @lab3_58:
00004458  0D0A 4125 7027          dc.b      13,10,65,37,99,32,61,32,0
0000445C  6320 3D20 
00004460  00        
                    7028   @lab3_59:
00004462  0D0A 5573 7029          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004466  6572 2053 
0000446A  5020 3D20 
0000446E  00        
                    7030   @lab3_60:
00004470  0D0A 496C 7031          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004474  6C65 6761 
00004478  6C20 5265 
0000447C  67        
0000447D  6973 7465 7032          dc.b      105,115,116,101,114,46,46,46,46,0
00004481  722E 2E2E 
00004485  2E00      
                    7033   @lab3_61:
00004488  0D0A 5379 7034          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
0000448C  7374 656D 
00004490  2053 5020 
00004494  3D        
00004495  2000      7035          dc.b      32,0
                    7036   @lab3_62:
00004498  0D0A 5043 7037          dc.b      13,10,80,67,32,61,32,0
0000449C  203D 2000 
                    7038   @lab3_63:
000044A0  0D0A 5352 7039          dc.b      13,10,83,82,32,61,32,0
000044A4  203D 2000 
                    7040   @lab3_64:
000044A8  0D0A 496C 7041          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000044AC  6C65 6761 
000044B0  6C20 5265 
000044B4  67        
000044B5  6973 7465 7042          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000044B9  723A 2055 
000044BD  7365 2041 
000044C1  30        
000044C2  2D41 372C 7043          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000044C6  2044 302D 
000044CA  4437 2C20 
000044CE  5353 50   
000044D1  2C20 5553 7044          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000044D5  502C 2050 
000044D9  4320 6F72 
000044DD  2053      
000044DF  520D 0A00 7045          dc.b      82,13,10,0
                    7046   @lab3_65:
000044E4  0D0A 0D0A 7047          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000044E8  4E75 6D20 
000044EC  2020 2020 
000044F0  4164      
000044F2  6472 6573 7048          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000044F6  7320 2020 
000044FA  2020 2049 
000044FE  6E        
000044FF  7374 7275 7049          dc.b      115,116,114,117,99,116,105,111,110,0
00004503  6374 696F 
00004507  6E00      
                    7050   @lab3_66:
0000450A  0D0A 2D2D 7051          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000450E  2D20 2020 
00004512  2020 2D2D 
00004516  2D2D 2D   
00004519  2D2D 2D2D 7052          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000451D  2020 2020 
00004521  2D2D 2D2D 
00004525  2D2D 2D   
00004528  2D2D 2D2D 7053          dc.b      45,45,45,45,0
0000452C  00        
                    7054   @lab3_67:
0000452E  0D0A 4E6F 7055          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004532  2042 7265 
00004536  616B 506F 
0000453A  69        
0000453B  6E74 7320 7056          dc.b      110,116,115,32,83,101,116,0
0000453F  5365 7400 
                    7057   @lab3_68:
00004544  0D0A 2533 7058          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004548  6420 2020 
0000454C  2020 2425 
00004550  3038 78   
00004553  00        7059          dc.b      0
                    7060   @lab3_69:
00004554  0D0A 4E75 7061          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004558  6D20 2020 
0000455C  2020 4164 
00004560  6472      
00004562  6573 7300 7062          dc.b      101,115,115,0
                    7063   @lab3_70:
00004566  0D0A 2D2D 7064          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000456A  2D20 2020 
0000456E  2020 2D2D 
00004572  2D2D 2D   
00004575  2D2D 2D2D 7065          dc.b      45,45,45,45,0
00004579  00        
                    7066   @lab3_71:
0000457A  0D0A 4E6F 7067          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000457E  2057 6174 
00004582  6368 506F 
00004586  69        
00004587  6E74 7320 7068          dc.b      110,116,115,32,83,101,116,0
0000458B  5365 7400 
                    7069   @lab3_72:
00004590  0D0A 456E 7070          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004594  7465 7220 
00004598  4272 6561 
0000459C  6B        
0000459D  2050 6F69 7071          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000045A1  6E74 204E 
000045A5  756D 6265 
000045A9  72        
000045AA  3A20 00   7072          dc.b      58,32,0
                    7073   @lab3_73:
000045AE  0D0A 496C 7074          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000045B2  6C65 6761 
000045B6  6C20 5261 
000045BA  6E        
000045BB  6765 203A 7075          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000045BF  2055 7365 
000045C3  2030 202D 
000045C7  2037      
000045C9  00        7076          dc.b      0
                    7077   @lab3_74:
000045CA  0D0A 4272 7078          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000045CE  6561 6B20 
000045D2  506F 696E 
000045D6  74        
000045D7  2043 6C65 7079          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000045DB  6172 6564 
000045DF  2E2E 2E2E 
000045E3  2E        
000045E4  0D0A 00   7080          dc.b      13,10,0
                    7081   @lab3_75:
000045E8  0D0A 4272 7082          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000045EC  6561 6B20 
000045F0  506F 696E 
000045F4  74        
000045F5  2077 6173 7083          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000045F9  6E27 7420 
000045FD  5365 742E 
00004601  2E        
00004602  2E2E 2E00 7084          dc.b      46,46,46,0
                    7085   @lab3_76:
00004606  0D0A 456E 7086          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
0000460A  7465 7220 
0000460E  5761 7463 
00004612  68        
00004613  2050 6F69 7087          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004617  6E74 204E 
0000461B  756D 6265 
0000461F  72        
00004620  3A20 00   7088          dc.b      58,32,0
                    7089   @lab3_77:
00004624  0D0A 5761 7090          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004628  7463 6820 
0000462C  506F 696E 
00004630  74        
00004631  2043 6C65 7091          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004635  6172 6564 
00004639  2E2E 2E2E 
0000463D  2E        
0000463E  0D0A 00   7092          dc.b      13,10,0
                    7093   @lab3_78:
00004642  0D0A 5761 7094          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004646  7463 6820 
0000464A  506F 696E 
0000464E  74        
0000464F  2057 6173 7095          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004653  206E 6F74 
00004657  2053 6574 
0000465B  2E        
0000465C  2E2E 2E2E 7096          dc.b      46,46,46,46,0
00004660  00        
                    7097   @lab3_79:
00004662  0D0A 4E6F 7098          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004666  2046 5245 
0000466A  4520 4272 
0000466E  6561      
00004670  6B20 506F 7099          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004674  696E 7473 
00004678  2E2E 2E2E 
0000467C  2E        
0000467D  00        7100          dc.b      0
                    7101   @lab3_80:
0000467E  0D0A 4272 7102          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004682  6561 6B20 
00004686  506F 696E 
0000468A  74        
0000468B  2041 6464 7103          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000468F  7265 7373 
00004693  3A20 00   
                    7104   @lab3_81:
00004696  0D0A 4572 7105          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000469A  726F 7220 
0000469E  3A20 4272 
000046A2  65        
000046A3  616B 2050 7106          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000046A7  6F69 6E74 
000046AB  7320 4341 
000046AF  4E        
000046B0  4E4F 5420 7107          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000046B4  6265 2073 
000046B8  6574 2061 
000046BC  74        
000046BD  204F 4444 7108          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000046C1  2061 6464 
000046C5  7265 7373 
000046C9  65        
000046CA  7300      7109          dc.b      115,0
                    7110   @lab3_82:
000046CC  0D0A 4572 7111          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000046D0  726F 7220 
000046D4  3A20 4272 
000046D8  65        
000046D9  616B 2050 7112          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000046DD  6F69 6E74 
000046E1  7320 4341 
000046E5  4E        
000046E6  4E4F 5420 7113          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000046EA  6265 2073 
000046EE  6574 2066 
000046F2  6F        
000046F3  7220 524F 7114          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000046F7  4D20 696E 
000046FB  2052 616E 
000046FF  67        
00004700  6520 3A20 7115          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004704  5B24 302D 
00004708  2430 3030 
0000470C  3037 46   
0000470F  4646 5D00 7116          dc.b      70,70,93,0
                    7117   @lab3_83:
00004714  0D0A 4572 7118          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004718  726F 723A 
0000471C  2042 7265 
00004720  61        
00004721  6B20 506F 7119          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004725  696E 7420 
00004729  416C 7265 
0000472D  6164 7920 7120          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004731  4578 6973 
00004735  7473 2061 
00004739  74        
0000473A  2041 6464 7121          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000473E  7265 7373 
00004742  203A 2025 
00004746  30        
00004747  3878 0D0A 7122          dc.b      56,120,13,10,0
0000474B  00        
                    7123   @lab3_84:
0000474C  0D0A 4272 7124          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004750  6561 6B20 
00004754  506F 696E 
00004758  74        
00004759  2053 6574 7125          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000475D  2061 7420 
00004761  4164 6472 
00004765  65        
00004766  7373 3A20 7126          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000476A  5B24 2530 
0000476E  3878 5D00 
                    7127   @lab3_85:
00004772  0D0A 4E6F 7128          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004776  2046 5245 
0000477A  4520 5761 
0000477E  7463      
00004780  6820 506F 7129          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004784  696E 7473 
00004788  2E2E 2E2E 
0000478C  2E        
0000478D  00        7130          dc.b      0
                    7131   @lab3_86:
0000478E  0D0A 5761 7132          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004792  7463 6820 
00004796  506F 696E 
0000479A  74        
0000479B  2041 6464 7133          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000479F  7265 7373 
000047A3  3A20 00   
                    7134   @lab3_87:
000047A6  0D0A 4572 7135          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000047AA  726F 723A 
000047AE  2057 6174 
000047B2  63        
000047B3  6820 506F 7136          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000047B7  696E 7420 
000047BB  416C 7265 
000047BF  6164 7920 7137          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000047C3  5365 7420 
000047C7  6174 2041 
000047CB  64        
000047CC  6472 6573 7138          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000047D0  7320 3A20 
000047D4  2530 3878 
000047D8  0D        
000047D9  0A00      7139          dc.b      10,0
                    7140   @lab3_88:
000047DC  0D0A 5761 7141          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000047E0  7463 6820 
000047E4  506F 696E 
000047E8  74        
000047E9  2053 6574 7142          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000047ED  2061 7420 
000047F1  4164 6472 
000047F5  65        
000047F6  7373 3A20 7143          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000047FA  5B24 2530 
000047FE  3878 5D00 
                    7144   @lab3_89:
00004802  0D0A 0D0A 7145          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004806  0D0A 0D0A 
0000480A  4042 5245 
0000480E  414B 50   
00004811  4F49 4E54 7146          dc.b      79,73,78,84,0
00004815  00        
                    7147   @lab3_90:
00004816  0D0A 5369 7148          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000481A  6E67 6C65 
0000481E  2053 7465 
00004822  70        
00004823  203A 205B 7149          dc.b      32,58,32,91,79,78,93,0
00004827  4F4E 5D00 
                    7150   @lab3_91:
0000482C  0D0A 4272 7151          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004830  6561 6B50 
00004834  6F69 6E74 
00004838  73        
00004839  203A 205B 7152          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
0000483D  456E 6162 
00004841  6C65 645D 
00004845  00        
                    7153   @lab3_92:
00004846  0D0A 5072 7154          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000484A  6573 7320 
0000484E  3C45 5343 
00004852  3E20      
00004854  746F 2052 7155          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004858  6573 756D 
0000485C  6520 5573 
00004860  6572 2050 7156          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004864  726F 6772 
00004868  616D 0D0A 
0000486C  00        
                    7157   @lab3_93:
0000486E  0D0A 556E 7158          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004872  6B6E 6F77 
00004876  6E20 436F 
0000487A  6D        
0000487B  6D61 6E64 7159          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000487F  2E2E 2E2E 
00004883  2E0D 0A00 
                    7160   @lab3_94:
00004888  0D0A 5072 7161          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
0000488C  6F67 7261 
00004890  6D20 456E 
00004894  64        
00004895  6564 2028 7162          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004899  5452 4150 
0000489D  2023 3135 
000048A1  292E      
000048A3  2E2E 2E00 7163          dc.b      46,46,46,0
                    7164   @lab3_95:
000048A8  0D0A 4B69 7165          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000048AC  6C6C 2041 
000048B0  6C6C 2042 
000048B4  72        
000048B5  6561 6B20 7166          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000048B9  506F 696E 
000048BD  7473 2E2E 
000048C1  2E        
000048C2  2879 2F6E 7167          dc.b      40,121,47,110,41,63,0
000048C6  293F 00   
                    7168   @lab3_96:
000048CA  0D0A 4B69 7169          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000048CE  6C6C 2041 
000048D2  6C6C 2057 
000048D6  61        
000048D7  7463 6820 7170          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000048DB  506F 696E 
000048DF  7473 2E2E 
000048E3  2E        
000048E4  2879 2F6E 7171          dc.b      40,121,47,110,41,63,0
000048E8  293F 00   
                    7172   @lab3_97:
000048EC  0D0A 2D2D 7173          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000048F0  2D2D 2D2D 
000048F4  2D2D 2D2D 
000048F8  2D2D 2D   
000048FB  2D2D 2D2D 7174          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000048FF  2D2D 2D2D 
00004903  2D2D 2D2D 
00004907  2D2D 2D   
0000490A  2D2D 2D2D 7175          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000490E  2D2D 2D2D 
00004912  2D2D 2D2D 
00004916  2D2D 2D   
00004919  2D2D 2D2D 7176          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000491D  2D2D 2D2D 
00004921  2D2D 2D2D 
00004925  2D2D 2D   
00004928  2D2D 2D2D 7177          dc.b      45,45,45,45,45,45,0
0000492C  2D2D 00   
                    7178   @lab3_98:
00004930  0D0A 2020 7179          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004934  4465 6275 
00004938  6767 6572 
0000493C  20        
0000493D  436F 6D6D 7180          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004941  616E 6420 
00004945  5375 6D6D 
00004949  6172 7900 7181          dc.b      97,114,121,0
                    7182   @lab3_99:
0000494E  0D0A 2020 7183          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004952  2E28 7265 
00004956  6729 2020 
0000495A  2020      
0000495C  2020 202D 7184          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004960  2043 6861 
00004964  6E67 6520 
00004968  5265      
0000496A  6769 7374 7185          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0000496E  6572 733A 
00004972  2065 2E67 
00004976  2041 302D 7186          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000497A  4137 2C44 
0000497E  302D 4437 
00004982  2C50 43   
00004985  2C53 5350 7187          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004989  2C55 5350 
0000498D  2C53 5200 
                    7188   @lab3_100:
00004992  0D0A 2020 7189          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004996  4244 2F42 
0000499A  532F 4243 
0000499E  2F42 4B   
000049A1  2020 2D20 7190          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000049A5  4272 6561 
000049A9  6B20 506F 
000049AD  69        
000049AE  6E74 3A20 7191          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000049B2  4469 7370 
000049B6  6C61 792F 
000049BA  53        
000049BB  6574 2F43 7192          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000049BF  6C65 6172 
000049C3  2F4B 696C 
000049C7  6C        
000049C8  00        7193          dc.b      0
                    7194   @lab3_101:
000049CA  0D0A 2020 7195          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000049CE  4320 2020 
000049D2  2020 2020 
000049D6  2020 20   
000049D9  2020 2D20 7196          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000049DD  436F 7079 
000049E1  2050 726F 
000049E5  67        
000049E6  7261 6D20 7197          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000049EA  6672 6F6D 
000049EE  2046 6C61 
000049F2  73        
000049F3  6820 746F 7198          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000049F7  204D 6169 
000049FB  6E20 4D65 
000049FF  6D        
00004A00  6F72 7900 7199          dc.b      111,114,121,0
                    7200   @lab3_102:
00004A04  0D0A 2020 7201          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004A08  4420 2020 
00004A0C  2020 2020 
00004A10  2020 20   
00004A13  2020 2D20 7202          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004A17  4475 6D70 
00004A1B  204D 656D 
00004A1F  6F        
00004A20  7279 2043 7203          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004A24  6F6E 7465 
00004A28  6E74 7320 
00004A2C  746F 2053 7204          dc.b      116,111,32,83,99,114,101,101,110,0
00004A30  6372 6565 
00004A34  6E00      
                    7205   @lab3_103:
00004A36  0D0A 2020 7206          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004A3A  4520 2020 
00004A3E  2020 2020 
00004A42  2020 20   
00004A45  2020 2D20 7207          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004A49  456E 7465 
00004A4D  7220 5374 
00004A51  72        
00004A52  696E 6720 7208          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004A56  696E 746F 
00004A5A  204D 656D 
00004A5E  6F72 7900 7209          dc.b      111,114,121,0
                    7210   @lab3_104:
00004A62  0D0A 2020 7211          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004A66  4620 2020 
00004A6A  2020 2020 
00004A6E  2020 20   
00004A71  2020 2D20 7212          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004A75  4669 6C6C 
00004A79  204D 656D 
00004A7D  6F        
00004A7E  7279 2077 7213          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004A82  6974 6820 
00004A86  4461 7461 
00004A8A  00        
                    7214   @lab3_105:
00004A8C  0D0A 2020 7215          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004A90  4720 2020 
00004A94  2020 2020 
00004A98  2020 20   
00004A9B  2020 2D20 7216          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004A9F  476F 2050 
00004AA3  726F 6772 
00004AA7  61        
00004AA8  6D20 5374 7217          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004AAC  6172 7469 
00004AB0  6E67 2061 
00004AB4  74        
00004AB5  2041 6464 7218          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004AB9  7265 7373 
00004ABD  3A20 2425 
00004AC1  30        
00004AC2  3858 00   7219          dc.b      56,88,0
                    7220   @lab3_106:
00004AC6  0D0A 2020 7221          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004ACA  4C20 2020 
00004ACE  2020 2020 
00004AD2  2020 20   
00004AD5  2020 2D20 7222          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004AD9  4C6F 6164 
00004ADD  2050 726F 
00004AE1  67        
00004AE2  7261 6D20 7223          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004AE6  282E 4845 
00004AEA  5820 6669 
00004AEE  6C        
00004AEF  6529 2066 7224          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004AF3  726F 6D20 
00004AF7  4C61 7074 
00004AFB  6F        
00004AFC  7000      7225          dc.b      112,0
                    7226   @lab3_107:
00004AFE  0D0A 2020 7227          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004B02  4D20 2020 
00004B06  2020 2020 
00004B0A  2020 20   
00004B0D  2020 2D20 7228          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004B11  4D65 6D6F 
00004B15  7279 2045 
00004B19  78        
00004B1A  616D 696E 7229          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004B1E  6520 616E 
00004B22  6420 4368 
00004B26  61        
00004B27  6E67 6500 7230          dc.b      110,103,101,0
                    7231   @lab3_108:
00004B2C  0D0A 2020 7232          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004B30  5020 2020 
00004B34  2020 2020 
00004B38  2020 20   
00004B3B  2020 2D20 7233          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004B3F  5072 6F67 
00004B43  7261 6D20 
00004B47  46        
00004B48  6C61 7368 7234          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004B4C  204D 656D 
00004B50  6F72 7920 
00004B54  7769 7468 7235          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004B58  2055 7365 
00004B5C  7220 5072 
00004B60  6F67 7261 7236          dc.b      111,103,114,97,109,0
00004B64  6D00      
                    7237   @lab3_109:
00004B66  0D0A 2020 7238          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004B6A  5220 2020 
00004B6E  2020 2020 
00004B72  2020 20   
00004B75  2020 2D20 7239          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004B79  4469 7370 
00004B7D  6C61 7920 
00004B81  36        
00004B82  3830 3030 7240          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004B86  2052 6567 
00004B8A  6973 7465 
00004B8E  72        
00004B8F  7300      7241          dc.b      115,0
                    7242   @lab3_110:
00004B92  0D0A 2020 7243          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004B96  5320 2020 
00004B9A  2020 2020 
00004B9E  2020 20   
00004BA1  2020 2D20 7244          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004BA5  546F 6767 
00004BA9  6C65 204F 
00004BAD  4E        
00004BAE  2F4F 4646 7245          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004BB2  2053 696E 
00004BB6  676C 6520 
00004BBA  53        
00004BBB  7465 7020 7246          dc.b      116,101,112,32,77,111,100,101,0
00004BBF  4D6F 6465 
00004BC3  00        
                    7247   @lab3_111:
00004BC4  0D0A 2020 7248          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004BC8  544D 2020 
00004BCC  2020 2020 
00004BD0  2020 20   
00004BD3  2020 2D20 7249          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004BD7  5465 7374 
00004BDB  204D 656D 
00004BDF  6F        
00004BE0  7279 00   7250          dc.b      114,121,0
                    7251   @lab3_112:
00004BE4  0D0A 2020 7252          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004BE8  5453 2020 
00004BEC  2020 2020 
00004BF0  2020 20   
00004BF3  2020 2D20 7253          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004BF7  5465 7374 
00004BFB  2053 7769 
00004BFF  74        
00004C00  6368 6573 7254          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004C04  3A20 5357 
00004C08  372D 3000 
                    7255   @lab3_113:
00004C0C  0D0A 2020 7256          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004C10  5444 2020 
00004C14  2020 2020 
00004C18  2020 20   
00004C1B  2020 2D20 7257          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004C1F  5465 7374 
00004C23  2044 6973 
00004C27  70        
00004C28  6C61 7973 7258          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004C2C  3A20 4C45 
00004C30  4473 2061 
00004C34  6E        
00004C35  6420 372D 7259          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004C39  5365 676D 
00004C3D  656E 7400 
                    7260   @lab3_114:
00004C42  0D0A 2020 7261          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004C46  5744 2F57 
00004C4A  532F 5743 
00004C4E  2F57 4B   
00004C51  2020 2D20 7262          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004C55  5761 7463 
00004C59  6820 506F 
00004C5D  696E      
00004C5F  743A 2044 7263          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004C63  6973 706C 
00004C67  6179 2F53 
00004C6B  65        
00004C6C  742F 436C 7264          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004C70  6561 722F 
00004C74  4B69 6C6C 
00004C78  00        
                    7265   @lab3_115:
00004C7A  0D0A 2300 7266          dc.b      13,10,35,0
                    7267   @lab3_116:
00004C7E  0D0A 5072 7268          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004C82  6F67 7261 
00004C86  6D20 5275 
00004C8A  6E        
00004C8B  6E69 6E67 7269          dc.b      110,105,110,103,46,46,46,46,46,0
00004C8F  2E2E 2E2E 
00004C93  2E00      
                    7270   @lab3_117:
00004C96  0D0A 5072 7271          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004C9A  6573 7320 
00004C9E  3C52 4553 
00004CA2  4554      
00004CA4  3E20 6275 7272          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004CA8  7474 6F6E 
00004CAC  203C 4B65 
00004CB0  79        
00004CB1  303E 206F 7273          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004CB5  6E20 4445 
00004CB9  3120 746F 
00004CBD  2073      
00004CBF  746F 7000 7274          dc.b      116,111,112,0
                    7275   @lab3_118:
00004CC4  0D0A 4572 7276          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004CC8  726F 723A 
00004CCC  2050 7265 
00004CD0  73        
00004CD1  7320 2747 7277          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004CD5  2720 6669 
00004CD9  7273 7420 
00004CDD  74        
00004CDE  6F20 7374 7278          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004CE2  6172 7420 
00004CE6  7072 6F67 
00004CEA  7261 6D00 7279          dc.b      114,97,109,0
                    7280   @lab3_119:
00004CEE  0D0A 5369 7281          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004CF2  6E67 6C65 
00004CF6  2053 7465 
00004CFA  70        
00004CFB  2020 3A5B 7282          dc.b      32,32,58,91,79,78,93,0
00004CFF  4F4E 5D00 
                    7283   @lab3_120:
00004D04  0D0A 5072 7284          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004D08  6573 7320 
00004D0C  2747 2720 
00004D10  74        
00004D11  6F20 5472 7285          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004D15  6163 6520 
00004D19  5072 6F67 
00004D1D  72        
00004D1E  616D 2066 7286          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004D22  726F 6D20 
00004D26  6164 6472 
00004D2A  6573 7320 7287          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004D2E  2425 582E 
00004D32  2E2E 2E2E 
00004D36  00        
                    7288   @lab3_121:
00004D38  0D0A 5075 7289          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004D3C  7368 203C 
00004D40  5245 5345 
00004D44  5420      
00004D46  4275 7474 7290          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004D4A  6F6E 3E20 
00004D4E  746F 2053 
00004D52  74        
00004D53  6F70 2E2E 7291          dc.b      111,112,46,46,46,46,46,0
00004D57  2E2E 2E00 
                    7292   @lab3_122:
00004D5C  0D0A 5369 7293          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D60  6E67 6C65 
00004D64  2053 7465 
00004D68  70        
00004D69  203A 205B 7294          dc.b      32,58,32,91,79,70,70,93,0
00004D6D  4F46 465D 
00004D71  00        
                    7295   @lab3_123:
00004D72  0D0A 4272 7296          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D76  6561 6B20 
00004D7A  506F 696E 
00004D7E  74        
00004D7F  7320 3A5B 7297          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004D83  456E 6162 
00004D87  6C65 645D 
00004D8B  00        
                    7298   @lab3_124:
00004D8C  0D0A 5072 7299          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004D90  6573 7320 
00004D94  3C45 5343 
00004D98  3E20      
00004D9A  746F 2052 7300          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004D9E  6573 756D 
00004DA2  6520 5573 
00004DA6  6572 2050 7301          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004DAA  726F 6772 
00004DAE  616D 2E2E 
00004DB2  2E        
00004DB3  2E2E 00   7302          dc.b      46,46,0
                    7303   @lab3_125:
00004DB6  0D0A 5369 7304          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004DBA  6E67 6C65 
00004DBE  2053 7465 
00004DC2  70        
00004DC3  2020 3A5B 7305          dc.b      32,32,58,91,79,70,70,93,0
00004DC7  4F46 465D 
00004DCB  00        
                    7306   @lab3_126:
00004DCC  0D0A 0D0A 7307          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004DD0  5072 6F67 
00004DD4  7261 6D20 
00004DD8  41        
00004DD9  424F 5254 7308          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004DDD  2021 2121 
00004DE1  2121 210D 
00004DE5  0A00      
                    7309   @lab3_127:
00004DE8  2573 0D0A 7310          dc.b      37,115,13,10,0
00004DEC  00        
                    7311   @lab3_128:
00004DEE  0D0A 0D0A 7312          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004DF2  5072 6F67 
00004DF6  7261 6D20 
00004DFA  41        
00004DFB  424F 5254 7313          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004DFF  2021 2121 
00004E03  2121 00   
                    7314   @lab3_129:
00004E06  0D0A 556E 7315          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004E0A  6861 6E64 
00004E0E  6C65 6420 
00004E12  49        
00004E13  6E74 6572 7316          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004E17  7275 7074 
00004E1B  3A20 4952 
00004E1F  5125 6420 7317          dc.b      81,37,100,32,33,33,33,33,33,0
00004E23  2121 2121 
00004E27  2100      
                    7318   @lab3_130:
00004E2A  4144 4452 7319          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004E2E  4553 5320 
00004E32  4552 524F 
00004E36  523A 20   
00004E39  3136 206F 7320          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004E3D  7220 3332 
00004E41  2042 6974 
00004E45  2054      
00004E47  7261 6E73 7321          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004E4B  6665 7220 
00004E4F  746F 2F66 
00004E53  726F 6D20 7322          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004E57  616E 204F 
00004E5B  4444 2041 
00004E5F  64        
00004E60  6472 6573 7323          dc.b      100,114,101,115,115,46,46,46,46,0
00004E64  732E 2E2E 
00004E68  2E00      
                    7324   @lab3_131:
00004E6A  556E 6861 7325          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004E6E  6E64 6C65 
00004E72  6420 5472 
00004E76  6170 2021 7326          dc.b      97,112,32,33,33,33,33,33,0
00004E7A  2121 2121 
00004E7E  00        
                    7327   @lab3_132:
00004E80  4255 5320 7328          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004E84  4572 726F 
00004E88  7221 00   
                    7329   @lab3_133:
00004E8C  4144 4452 7330          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004E90  4553 5320 
00004E94  4572 726F 
00004E98  7221      
00004E9A  00        7331          dc.b      0
                    7332   @lab3_134:
00004E9C  494C 4C45 7333          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004EA0  4741 4C20 
00004EA4  494E 5354 
00004EA8  5255 43   
00004EAB  5449 4F4E 7334          dc.b      84,73,79,78,0
00004EAF  00        
                    7335   @lab3_135:
00004EB0  4449 5649 7336          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004EB4  4445 2042 
00004EB8  5920 5A45 
00004EBC  524F 00   
                    7337   @lab3_136:
00004EC0  2743 484B 7338          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004EC4  2720 494E 
00004EC8  5354 5255 
00004ECC  4354 49   
00004ECF  4F4E 00   7339          dc.b      79,78,0
                    7340   @lab3_137:
00004ED2  5452 4150 7341          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004ED6  5620 494E 
00004EDA  5354 5255 
00004EDE  4354 49   
00004EE1  4F4E 00   7342          dc.b      79,78,0
                    7343   @lab3_138:
00004EE4  5052 4956 7344          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004EE8  494C 4547 
00004EEC  4520 5649 
00004EF0  4F4C 41   
00004EF3  5449 4F4E 7345          dc.b      84,73,79,78,0
00004EF7  00        
                    7346   @lab3_139:
00004EF8  554E 494E 7347          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004EFC  4954 4941 
00004F00  4C49 5345 
00004F04  4420 49   
00004F07  5251 00   7348          dc.b      82,81,0
                    7349   @lab3_140:
00004F0A  5350 5552 7350          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004F0E  494F 5553 
00004F12  2049 5251 
00004F16  00        
                    7351   @lab3_141:
00004F18  0D0A 5374 7352          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004F1C  6172 7420 
00004F20  4164 6472 
00004F24  65        
00004F25  7373 2069 7353          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004F29  6E20 4D65 
00004F2D  6D6F 7279 
00004F31  3A20 00   7354          dc.b      58,32,0
                    7355   @lab3_142:
00004F34  0D0A 456E 7356          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004F38  7465 7220 
00004F3C  5374 7269 
00004F40  6E        
00004F41  6720 2845 7357          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004F45  5343 2074 
00004F49  6F20 656E 
00004F4D  64        
00004F4E  2920 3A00 7358          dc.b      41,32,58,0
                    7359   @lab3_143:
00004F52  0D0A 5365 7360          dc.b      13,10,83,101,108,101,99,116,32,100,97,116,97
00004F56  6C65 6374 
00004F5A  2064 6174 
00004F5E  61        
00004F5F  2074 7970 7361          dc.b      32,116,121,112,101,58,10,49,32,61,32,98,121
00004F63  653A 0A31 
00004F67  203D 2062 
00004F6B  79        
00004F6C  7465 7320 7362          dc.b      116,101,115,32,40,56,32,98,105,116,115,41,10
00004F70  2838 2062 
00004F74  6974 7329 
00004F78  0A        
00004F79  3220 3D20 7363          dc.b      50,32,61,32,119,111,114,100,115,32,40,49,54
00004F7D  776F 7264 
00004F81  7320 2831 
00004F85  36        
00004F86  2062 6974 7364          dc.b      32,98,105,116,115,41,10,51,32,61,32,108,111
00004F8A  7329 0A33 
00004F8E  203D 206C 
00004F92  6F        
00004F93  6E67 2077 7365          dc.b      110,103,32,119,111,114,100,115,32,40,51,50,32
00004F97  6F72 6473 
00004F9B  2028 3332 
00004F9F  20        
00004FA0  6269 7473 7366          dc.b      98,105,116,115,41,10,0
00004FA4  290A 00   
                    7367   @lab3_144:
00004FA8  0A53 656C 7368          dc.b      10,83,101,108,101,99,116,105,110,103,32,98,121
00004FAC  6563 7469 
00004FB0  6E67 2062 
00004FB4  79        
00004FB5  7465 2073 7369          dc.b      116,101,32,115,105,122,101,10,0
00004FB9  697A 650A 
00004FBD  00        
                    7370   @lab3_145:
00004FBE  5365 6C65 7371          dc.b      83,101,108,101,99,116,32,100,97,116,97,32,118
00004FC2  6374 2064 
00004FC6  6174 6120 
00004FCA  76        
00004FCB  616C 7565 7372          dc.b      97,108,117,101,58,10,0
00004FCF  3A0A 00   
                    7373   @lab3_146:
00004FD2  3120 3D20 7374          dc.b      49,32,61,32,34,65,65,34,10,50,32,61,32,34,65
00004FD6  2241 4122 
00004FDA  0A32 203D 
00004FDE  2022 41   
00004FE1  4222 0A33 7375          dc.b      66,34,10,51,32,61,32,34,67,67,34,10,52,32,61
00004FE5  203D 2022 
00004FE9  4343 220A 
00004FED  3420 3D   
00004FF0  2022 4344 7376          dc.b      32,34,67,68,34,10,0
00004FF4  220A 00   
                    7377   @lab3_147:
00004FF8  0D0A 4552 7378          dc.b      13,10,69,82,82,79,82,58,32,83,101,108,101,99
00004FFC  524F 523A 
00005000  2053 656C 
00005004  6563      
00005006  7420 6569 7379          dc.b      116,32,101,105,116,104,101,114,32,49,44,32,50
0000500A  7468 6572 
0000500E  2031 2C20 
00005012  32        
00005013  2C20 332C 7380          dc.b      44,32,51,44,32,111,114,32,52,13,10,0
00005017  206F 7220 
0000501B  340D 0A00 
                    7381   @lab3_148:
00005020  0D0A 4552 7382          dc.b      13,10,69,82,82,79,82,58,32,69,120,105,116,105
00005024  524F 523A 
00005028  2045 7869 
0000502C  7469      
0000502E  6E67 206D 7383          dc.b      110,103,32,109,101,109,111,114,121,32,116,101
00005032  656D 6F72 
00005036  7920 7465 
0000503A  7374 2064 7384          dc.b      115,116,32,100,117,101,32,116,111,32,111,112
0000503E  7565 2074 
00005042  6F20 6F70 
00005046  7469 6F6E 7385          dc.b      116,105,111,110,32,109,101,109,111,114,121,32
0000504A  206D 656D 
0000504E  6F72 7920 
00005052  636F 6D70 7386          dc.b      99,111,109,112,108,105,99,97,116,105,111,110
00005056  6C69 6361 
0000505A  7469 6F6E 
0000505E  2E0D 0A00 7387          dc.b      46,13,10,0
                    7388   @lab3_149:
00005062  0D0A 456E 7389          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00005066  7465 7220 
0000506A  7374 6172 
0000506E  74        
0000506F  2061 6464 7390          dc.b      32,97,100,100,114,101,115,115,32,119,105,116
00005073  7265 7373 
00005077  2077 6974 
0000507B  6869 6E20 7391          dc.b      104,105,110,32,48,120,48,57,48,48,48,48,48,48
0000507F  3078 3039 
00005083  3030 3030 
00005087  3030      
00005089  202D 2030 7392          dc.b      32,45,32,48,120,48,57,55,70,70,70,70,70,58,13
0000508D  7830 3937 
00005091  4646 4646 
00005095  463A 0D   
00005098  0A00      7393          dc.b      10,0
                    7394   @lab3_150:
0000509A  0D0A 4552 7395          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
0000509E  524F 523A 
000050A2  2053 7461 
000050A6  7274      
000050A8  696E 6720 7396          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
000050AC  4164 6472 
000050B0  6573 7320 
000050B4  6973 206F 7397          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
000050B8  7574 7369 
000050BC  6465 206F 
000050C0  6620 3638 7398          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
000050C4  4B20 6D65 
000050C8  6D6F 7279 
000050CC  20        
000050CD  7261 6E67 7399          dc.b      114,97,110,103,101,46,32,69,110,115,117,114
000050D1  652E 2045 
000050D5  6E73 7572 
000050D9  6520 7468 7400          dc.b      101,32,116,104,101,32,97,100,100,114,101,115
000050DD  6520 6164 
000050E1  6472 6573 
000050E5  7320 6973 7401          dc.b      115,32,105,115,32,119,105,116,104,110,32,48
000050E9  2077 6974 
000050ED  686E 2030 
000050F1  7830 3930 7402          dc.b      120,48,57,48,48,48,48,48,48,32,45,32,48,120
000050F5  3030 3030 
000050F9  3020 2D20 
000050FD  3078      
000050FF  3039 3746 7403          dc.b      48,57,55,70,70,70,70,70,13,10,0
00005103  4646 4646 
00005107  0D0A 00   
                    7404   @lab3_151:
0000510A  0D0A 456E 7405          dc.b      13,10,69,110,116,101,114,32,101,110,100,32,97
0000510E  7465 7220 
00005112  656E 6420 
00005116  61        
00005117  6464 7265 7406          dc.b      100,100,114,101,115,115,32,119,105,116,104,105
0000511B  7373 2077 
0000511F  6974 6869 
00005123  6E20 3078 7407          dc.b      110,32,48,120,48,57,48,48,48,48,48,48,32,45
00005127  3039 3030 
0000512B  3030 3030 
0000512F  202D      
00005131  2030 7830 7408          dc.b      32,48,120,48,57,55,70,70,70,70,70,58,13,10,0
00005135  3937 4646 
00005139  4646 463A 
0000513D  0D0A 00   
                    7409   @lab3_152:
00005140  0D0A 4552 7410          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
00005144  524F 523A 
00005148  2045 6E64 
0000514C  2041      
0000514E  6464 7265 7411          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
00005152  7373 2069 
00005156  7320 6F75 
0000515A  7473 6964 7412          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
0000515E  6520 6F66 
00005162  2036 384B 
00005166  20        
00005167  6D65 6D6F 7413          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
0000516B  7279 2072 
0000516F  616E 6765 
00005173  2E20 456E 7414          dc.b      46,32,69,110,115,117,114,101,32,116,104,101
00005177  7375 7265 
0000517B  2074 6865 
0000517F  2061 6464 7415          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
00005183  7265 7373 
00005187  2069 7320 
0000518B  7769 7468 7416          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
0000518F  6E20 3078 
00005193  3039 3030 
00005197  30        
00005198  3030 3020 7417          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
0000519C  2D20 3078 
000051A0  3039 3746 
000051A4  4646 46   
000051A7  460D 0A00 7418          dc.b      70,13,10,0
                    7419   @lab3_153:
000051AC  0D0A 0D0A 7420          dc.b      13,10,13,10,87,114,105,116,105,110,103,32,116
000051B0  5772 6974 
000051B4  696E 6720 
000051B8  74        
000051B9  6F20 6D65 7421          dc.b      111,32,109,101,109,111,114,121,0
000051BD  6D6F 7279 
000051C1  00        
                    7422   @lab3_154:
000051C2  0D0A 5772 7423          dc.b      13,10,87,114,105,116,101,58,32,91,37,48,50,88
000051C6  6974 653A 
000051CA  205B 2530 
000051CE  3258      
000051D0  2074 6F20 7424          dc.b      32,116,111,32,37,48,56,120,93,0
000051D4  2530 3878 
000051D8  5D00      
                    7425   @lab3_155:
000051DA  0D0A 0D0A 7426          dc.b      13,10,13,10,83,116,97,114,116,105,110,103,32
000051DE  5374 6172 
000051E2  7469 6E67 
000051E6  20        
000051E7  6D65 6D6F 7427          dc.b      109,101,109,111,114,121,32,118,97,108,105,100
000051EB  7279 2076 
000051EF  616C 6964 
000051F3  6174 696F 7428          dc.b      97,116,105,111,110,32,116,101,115,116,0
000051F7  6E20 7465 
000051FB  7374 00   
                    7429   @lab3_156:
000051FE  0D0A 5665 7430          dc.b      13,10,86,101,114,105,102,121,105,110,103,32
00005202  7269 6679 
00005206  696E 6720 
0000520A  7468 6520 7431          dc.b      116,104,101,32,97,100,100,114,101,115,115,101
0000520E  6164 6472 
00005212  6573 7365 
00005216  7320 5B25 7432          dc.b      115,32,91,37,48,56,120,32,116,111,32,37,48,56
0000521A  3038 7820 
0000521E  746F 2025 
00005222  3038      
00005224  785D 2063 7433          dc.b      120,93,32,99,111,110,116,97,105,110,115,32,116
00005228  6F6E 7461 
0000522C  696E 7320 
00005230  74        
00005231  6573 7420 7434          dc.b      101,115,116,32,100,97,116,97,32,91,37,48,50
00005235  6461 7461 
00005239  205B 2530 
0000523D  32        
0000523E  585D 2E2E 7435          dc.b      88,93,46,46,46,46,46,0
00005242  2E2E 2E00 
                    7436   @lab3_157:
00005246  0D0A 4552 7437          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
0000524A  524F 523A 
0000524E  2044 6174 
00005252  6120 77   
00005255  6974 6869 7438          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005259  6E20 6D65 
0000525D  6D6F 7279 
00005261  2064 6F65 7439          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00005265  7320 6E6F 
00005269  7420 6D61 
0000526D  7463 6820 7440          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
00005271  7365 6C65 
00005275  6374 6564 
00005279  2074 6573 7441          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
0000527D  7420 6461 
00005281  7461 2120 
00005285  5B        
00005286  4164 6472 7442          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
0000528A  6573 733A 
0000528E  2025 3038 
00005292  78        
00005293  2045 7861 7443          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00005297  6374 2044 
0000529B  6174 613A 
0000529F  2025      
000052A1  3032 5820 7444          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
000052A5  4578 7065 
000052A9  6374 6564 
000052AD  20        
000052AE  4461 7461 7445          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
000052B2  3A20 2530 
000052B6  3258 5D20 
000052BA  4578      
000052BC  6974 696E 7446          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000052C0  6720 6D65 
000052C4  6D6F 7279 
000052C8  2074 6573 7447          dc.b      32,116,101,115,116,46,46,46,13,10,0
000052CC  742E 2E2E 
000052D0  0D0A 00   
                    7448   @lab3_158:
000052D4  0D0A 5041 7449          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
000052D8  5353 3A20 
000052DC  4D65 6D6F 
000052E0  7279      
000052E2  2056 616C 7450          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000052E6  6964 6174 
000052EA  696F 6E20 
000052EE  74        
000052EF  6573 7420 7451          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
000052F3  6861 7320 
000052F7  7061 7373 
000052FB  6564 0D0A 7452          dc.b      101,100,13,10,0
000052FF  00        
                    7453   @lab3_159:
00005300  0D0A 5365 7454          dc.b      13,10,83,101,108,101,99,116,105,110,103,32,119
00005304  6C65 6374 
00005308  696E 6720 
0000530C  77        
0000530D  6F72 6420 7455          dc.b      111,114,100,32,115,105,122,101,0
00005311  7369 7A65 
00005315  00        
                    7456   @lab3_160:
00005316  0D0A 3120 7457          dc.b      13,10,49,32,61,32,34,65,65,65,65,34,10,50,32
0000531A  3D20 2241 
0000531E  4141 4122 
00005322  0A32 20   
00005325  3D20 2242 7458          dc.b      61,32,34,66,65,66,65,34,10,51,32,61,32,34,67
00005329  4142 4122 
0000532D  0A33 203D 
00005331  2022 43   
00005334  4344 4422 7459          dc.b      67,68,68,34,10,52,32,61,32,34,68,68,68,68,34
00005338  0A34 203D 
0000533C  2022 4444 
00005340  4444 22   
00005343  0D0A 00   7460          dc.b      13,10,0
                    7461   @lab3_161:
00005346  0D0A 456E 7462          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
0000534A  7465 7220 
0000534E  7374 6172 
00005352  74        
00005353  2061 6464 7463          dc.b      32,97,100,100,114,101,115,115,32,119,105,116
00005357  7265 7373 
0000535B  2077 6974 
0000535F  6869 6E20 7464          dc.b      104,105,110,32,48,120,48,57,48,48,48,48,48,48
00005363  3078 3039 
00005367  3030 3030 
0000536B  3030      
0000536D  202D 2030 7465          dc.b      32,45,32,48,120,48,57,55,70,70,70,70,70,58,32
00005371  7830 3937 
00005375  4646 4646 
00005379  463A 20   
0000537C  2845 6E73 7466          dc.b      40,69,110,115,117,114,101,32,116,111,32,101
00005380  7572 6520 
00005384  746F 2065 
00005388  6E74 6572 7467          dc.b      110,116,101,114,32,97,110,32,101,118,101,110
0000538C  2061 6E20 
00005390  6576 656E 
00005394  206E 756D 7468          dc.b      32,110,117,109,98,101,114,41,13,10,0
00005398  6265 7229 
0000539C  0D0A 00   
                    7469   @lab3_162:
000053A0  0D0A 4552 7470          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
000053A4  524F 523A 
000053A8  2054 6865 
000053AC  2061      
000053AE  6464 7265 7471          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
000053B2  7373 2079 
000053B6  6F75 2068 
000053BA  6176 6520 7472          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
000053BE  656E 7465 
000053C2  7265 6420 
000053C6  6973 206E 7473          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
000053CA  6F74 2065 
000053CE  7665 6E2E 
000053D2  2054 7279 7474          dc.b      32,84,114,121,32,97,103,97,105,110,13,10,0
000053D6  2061 6761 
000053DA  696E 0D0A 
000053DE  00        
                    7475   @lab3_163:
000053E0  0D0A 456E 7476          dc.b      13,10,69,110,116,101,114,32,101,110,100,32,97
000053E4  7465 7220 
000053E8  656E 6420 
000053EC  61        
000053ED  6464 7265 7477          dc.b      100,100,114,101,115,115,32,119,105,116,104,105
000053F1  7373 2077 
000053F5  6974 6869 
000053F9  6E20 3078 7478          dc.b      110,32,48,120,48,57,48,48,48,48,48,48,32,45
000053FD  3039 3030 
00005401  3030 3030 
00005405  202D      
00005407  2030 7830 7479          dc.b      32,48,120,48,57,55,70,70,70,70,70,58,32,40,69
0000540B  3937 4646 
0000540F  4646 463A 
00005413  2028 45   
00005416  6E73 7572 7480          dc.b      110,115,117,114,101,32,116,111,32,101,110,116
0000541A  6520 746F 
0000541E  2065 6E74 
00005422  6572 2061 7481          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
00005426  6E20 6576 
0000542A  656E 206E 
0000542E  756D 6265 7482          dc.b      117,109,98,101,114,41,13,10,0
00005432  7229 0D0A 
00005436  00        
                    7483   @lab3_164:
00005438  0D0A 5752 7484          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,52,88,32
0000543C  4954 453A 
00005440  205B 2530 
00005444  3458 20   
00005447  746F 2025 7485          dc.b      116,111,32,37,48,56,120,93,0
0000544B  3038 785D 
0000544F  00        
                    7486   @lab3_165:
00005450  0D0A 4552 7487          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005454  524F 523A 
00005458  2044 6174 
0000545C  6120 77   
0000545F  6974 6869 7488          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005463  6E20 6D65 
00005467  6D6F 7279 
0000546B  2064 6F65 7489          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
0000546F  7320 6E6F 
00005473  7420 6D61 
00005477  7463 6820 7490          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
0000547B  7365 6C65 
0000547F  6374 6564 
00005483  2074 6573 7491          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
00005487  7420 6461 
0000548B  7461 2120 
0000548F  5B        
00005490  4164 6472 7492          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00005494  6573 733A 
00005498  2025 3038 
0000549C  78        
0000549D  2045 7861 7493          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
000054A1  6374 2044 
000054A5  6174 613A 
000054A9  2025      
000054AB  3032 5820 7494          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
000054AF  4578 7065 
000054B3  6374 6564 
000054B7  20        
000054B8  4461 7461 7495          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
000054BC  3A20 2530 
000054C0  3258 5D20 
000054C4  4578      
000054C6  6974 696E 7496          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000054CA  6720 6D65 
000054CE  6D6F 7279 
000054D2  2074 6573 7497          dc.b      32,116,101,115,116,46,46,46,0
000054D6  742E 2E2E 
000054DA  00        
                    7498   @lab3_166:
000054DC  0D0A 5041 7499          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
000054E0  5353 3A20 
000054E4  4D65 6D6F 
000054E8  7279      
000054EA  2056 616C 7500          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000054EE  6964 6174 
000054F2  696F 6E20 
000054F6  74        
000054F7  6573 7420 7501          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
000054FB  6861 7320 
000054FF  7061 7373 
00005503  6564 2E0D 7502          dc.b      101,100,46,13,10,0
00005507  0A00      
                    7503   @lab3_167:
0000550A  0D0A 5365 7504          dc.b      13,10,83,101,108,101,99,116,105,110,103,32,108
0000550E  6C65 6374 
00005512  696E 6720 
00005516  6C        
00005517  6F6E 6720 7505          dc.b      111,110,103,32,119,111,114,100,32,115,105,122
0000551B  776F 7264 
0000551F  2073 697A 
00005523  6500      7506          dc.b      101,0
                    7507   @lab3_168:
00005526  0D0A 5365 7508          dc.b      13,10,83,101,108,101,99,116,32,100,97,116,97
0000552A  6C65 6374 
0000552E  2064 6174 
00005532  61        
00005533  2076 616C 7509          dc.b      32,118,97,108,117,101,58,0
00005537  7565 3A00 
                    7510   @lab3_169:
0000553C  0D0A 3120 7511          dc.b      13,10,49,32,61,32,34,65,65,65,65,65,65,65,65
00005540  3D20 2241 
00005544  4141 4141 
00005548  4141 41   
0000554B  220A 3220 7512          dc.b      34,10,50,32,61,32,34,65,66,65,66,65,66,65,66
0000554F  3D20 2241 
00005553  4241 4241 
00005557  4241 42   
0000555A  220A 3320 7513          dc.b      34,10,51,32,61,32,34,67,67,67,67,68,68,68,68
0000555E  3D20 2243 
00005562  4343 4344 
00005566  4444 44   
00005569  220A 3420 7514          dc.b      34,10,52,32,61,32,34,65,65,66,66,67,67,68,68
0000556D  3D20 2241 
00005571  4142 4243 
00005575  4344 44   
00005578  220D 0A00 7515          dc.b      34,13,10,0
                    7516   @lab3_170:
0000557C  0D0A 5365 7517          dc.b      13,10,83,101,108,101,99,116,32,101,105,116,104
00005580  6C65 6374 
00005584  2065 6974 
00005588  68        
00005589  6572 2031 7518          dc.b      101,114,32,49,44,32,50,44,32,51,44,32,111,114
0000558D  2C20 322C 
00005591  2033 2C20 
00005595  6F72      
00005597  2034 2E0D 7519          dc.b      32,52,46,13,10,0
0000559B  0A00      
                    7520   @lab3_171:
0000559E  0D0A 4552 7521          dc.b      13,10,69,82,82,79,82,58,32,69,120,105,116,105
000055A2  524F 523A 
000055A6  2045 7869 
000055AA  7469      
000055AC  6E67 206D 7522          dc.b      110,103,32,109,101,109,111,114,121,32,116,101
000055B0  656D 6F72 
000055B4  7920 7465 
000055B8  7374 2064 7523          dc.b      115,116,32,100,117,101,32,116,111,32,111,112
000055BC  7565 2074 
000055C0  6F20 6F70 
000055C4  7469 6F6E 7524          dc.b      116,105,111,110,32,109,101,109,111,114,121,32
000055C8  206D 656D 
000055CC  6F72 7920 
000055D0  636F 6D70 7525          dc.b      99,111,109,112,108,105,99,97,116,105,111,110
000055D4  6C69 6361 
000055D8  7469 6F6E 
000055DC  2E20 0D0A 7526          dc.b      46,32,13,10,0
000055E0  00        
                    7527   @lab3_172:
000055E2  0D0A 4552 7528          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
000055E6  524F 523A 
000055EA  2053 7461 
000055EE  7274      
000055F0  696E 6720 7529          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
000055F4  4164 6472 
000055F8  6573 7320 
000055FC  6973 206F 7530          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
00005600  7574 7369 
00005604  6465 206F 
00005608  6620 3638 7531          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
0000560C  4B20 6D65 
00005610  6D6F 7279 
00005614  20        
00005615  7261 6E67 7532          dc.b      114,97,110,103,101,46,32,80,108,101,97,115,101
00005619  652E 2050 
0000561D  6C65 6173 
00005621  65        
00005622  2074 7279 7533          dc.b      32,116,114,121,32,97,103,97,105,110,32,97,110
00005626  2061 6761 
0000562A  696E 2061 
0000562E  6E        
0000562F  6420 656E 7534          dc.b      100,32,101,110,115,117,114,101,32,116,104,101
00005633  7375 7265 
00005637  2074 6865 
0000563B  2061 6464 7535          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
0000563F  7265 7373 
00005643  2069 7320 
00005647  7769 7468 7536          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
0000564B  6E20 3078 
0000564F  3039 3030 
00005653  30        
00005654  3030 3020 7537          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
00005658  2D20 3078 
0000565C  3039 3746 
00005660  4646 46   
00005663  460D 0A00 7538          dc.b      70,13,10,0
                    7539   @lab3_173:
00005668  0D0A 4552 7540          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
0000566C  524F 523A 
00005670  2045 6E64 
00005674  2041      
00005676  6464 7265 7541          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
0000567A  7373 2069 
0000567E  7320 6F75 
00005682  7473 6964 7542          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
00005686  6520 6F66 
0000568A  2036 384B 
0000568E  20        
0000568F  6D65 6D6F 7543          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
00005693  7279 2072 
00005697  616E 6765 
0000569B  2E20 506C 7544          dc.b      46,32,80,108,101,97,115,101,32,116,114,121,32
0000569F  6561 7365 
000056A3  2074 7279 
000056A7  20        
000056A8  6167 6169 7545          dc.b      97,103,97,105,110,32,97,110,100,32,101,110,115
000056AC  6E20 616E 
000056B0  6420 656E 
000056B4  73        
000056B5  7572 6520 7546          dc.b      117,114,101,32,116,104,101,32,97,100,100,114
000056B9  7468 6520 
000056BD  6164 6472 
000056C1  6573 7320 7547          dc.b      101,115,115,32,105,115,32,119,105,116,104,110
000056C5  6973 2077 
000056C9  6974 686E 
000056CD  2030 7830 7548          dc.b      32,48,120,48,57,48,48,48,48,48,48,32,45,32,48
000056D1  3930 3030 
000056D5  3030 3020 
000056D9  2D20 30   
000056DC  7830 3937 7549          dc.b      120,48,57,55,70,70,70,70,70,13,10,0
000056E0  4646 4646 
000056E4  460D 0A00 
                    7550   @lab3_174:
000056E8  0D0A 4552 7551          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
000056EC  524F 523A 
000056F0  2054 6865 
000056F4  2061      
000056F6  6464 7265 7552          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
000056FA  7373 2079 
000056FE  6F75 2068 
00005702  6176 6520 7553          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
00005706  656E 7465 
0000570A  7265 6420 
0000570E  6973 206E 7554          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
00005712  6F74 2065 
00005716  7665 6E2E 
0000571A  2050 6C65 7555          dc.b      32,80,108,101,97,115,101,32,116,114,121,32,97
0000571E  6173 6520 
00005722  7472 7920 
00005726  61        
00005727  6761 696E 7556          dc.b      103,97,105,110,13,10,0
0000572B  0D0A 00   
                    7557   @lab3_175:
0000572E  0D0A 5741 7558          dc.b      13,10,87,65,82,78,73,78,71,58,32,77,101,109
00005732  524E 494E 
00005736  473A 204D 
0000573A  656D      
0000573C  6F72 7920 7559          dc.b      111,114,121,32,119,105,108,108,32,99,111,110
00005740  7769 6C6C 
00005744  2063 6F6E 
00005748  7461 696E 7560          dc.b      116,97,105,110,32,116,114,117,110,99,97,116
0000574C  2074 7275 
00005750  6E63 6174 
00005754  6564 2064 7561          dc.b      101,100,32,100,97,116,97,0
00005758  6174 6100 
                    7562   @lab3_176:
0000575C  0D0A 5752 7563          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,56,88,32
00005760  4954 453A 
00005764  205B 2530 
00005768  3858 20   
0000576B  746F 2025 7564          dc.b      116,111,32,37,48,56,120,93,0
0000576F  3038 785D 
00005773  00        
                    7565   @lab3_177:
00005774  0D0A 4552 7566          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005778  524F 523A 
0000577C  2044 6174 
00005780  6120 77   
00005783  6974 6869 7567          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005787  6E20 6D65 
0000578B  6D6F 7279 
0000578F  2064 6F65 7568          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00005793  7320 6E6F 
00005797  7420 6D61 
0000579B  7463 6820 7569          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
0000579F  7365 6C65 
000057A3  6374 6564 
000057A7  2074 6573 7570          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
000057AB  7420 6461 
000057AF  7461 2120 
000057B3  5B        
000057B4  4164 6472 7571          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
000057B8  6573 733A 
000057BC  2025 3038 
000057C0  78        
000057C1  2045 7861 7572          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
000057C5  6374 2044 
000057C9  6174 613A 
000057CD  2025      
000057CF  3038 5820 7573          dc.b      48,56,88,32,69,120,112,101,99,116,101,100,32
000057D3  4578 7065 
000057D7  6374 6564 
000057DB  20        
000057DC  4461 7461 7574          dc.b      68,97,116,97,58,32,37,48,56,88,93,32,69,120
000057E0  3A20 2530 
000057E4  3858 5D20 
000057E8  4578      
000057EA  6974 696E 7575          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000057EE  6720 6D65 
000057F2  6D6F 7279 
000057F6  2074 6573 7576          dc.b      32,116,101,115,116,46,46,46,13,10,0
000057FA  742E 2E2E 
000057FE  0D0A 00   
                    7577   @lab3_178:
00005802  0D0A 5041 7578          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
00005806  5353 3A20 
0000580A  4D65 6D6F 
0000580E  7279      
00005810  2056 616C 7579          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
00005814  6964 6174 
00005818  696F 6E20 
0000581C  74        
0000581D  6573 7420 7580          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
00005821  6861 7320 
00005825  7061 7373 
00005829  6564 210D 7581          dc.b      101,100,33,13,10,0
0000582D  0A00      
                    7582   @lab3_179:
00005830  0D0A 596F 7583          dc.b      13,10,89,111,117,32,102,97,105,108,101,100,32
00005834  7520 6661 
00005838  696C 6564 
0000583C  20        
0000583D  746F 2073 7584          dc.b      116,111,32,115,101,108,101,99,116,32,97,32,100
00005841  656C 6563 
00005845  7420 6120 
00005849  64        
0000584A  6174 6120 7585          dc.b      97,116,97,32,116,121,112,101,32,116,111,32,117
0000584E  7479 7065 
00005852  2074 6F20 
00005856  75        
00005857  7365 2120 7586          dc.b      115,101,33,32,67,108,105,99,107,32,111,112,101
0000585B  436C 6963 
0000585F  6B20 6F70 
00005863  65        
00005864  6E20 6D65 7587          dc.b      110,32,109,101,109,111,114,121,32,116,101,115
00005868  6D6F 7279 
0000586C  2074 6573 
00005870  7420 6167 7588          dc.b      116,32,97,103,97,105,110,32,116,111,32,116,114
00005874  6169 6E20 
00005878  746F 2074 
0000587C  72        
0000587D  7920 6167 7589          dc.b      121,32,97,103,97,105,110,46,13,10,0
00005881  6169 6E2E 
00005885  0D0A 00   
                    7590   @lab3_180:
00005888  4445 312D 7591          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000588C  3638 6B20 
00005890  4275 6720 
00005894  5631      
00005896  2E37 3700 7592          dc.b      46,55,55,0
                    7593   @lab3_181:
0000589A  436F 7079 7594          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000589E  7269 6768 
000058A2  7420 2843 
000058A6  2920 504A 7595          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000058AA  2044 6176 
000058AE  6965 7320 
000058B2  3230      
000058B4  3136 00   7596          dc.b      49,54,0
                    7597   @lab3_182:
000058B8  0D0A 0D0A 7598          dc.b      13,10,13,10,75,101,110,110,121,32,87,97,107
000058BC  4B65 6E6E 
000058C0  7920 5761 
000058C4  6B        
000058C5  6162 6120 7599          dc.b      97,98,97,32,45,32,57,49,51,55,56,51,49,53,13
000058C9  2D20 3931 
000058CD  3337 3833 
000058D1  3135 0D   
000058D4  0A4A 6163 7600          dc.b      10,74,97,99,111,98,32,89,97,110,103,32,45,32
000058D8  6F62 2059 
000058DC  616E 6720 
000058E0  2D20      
000058E2  3234 3934 7601          dc.b      50,52,57,52,48,56,51,53,0
000058E6  3038 3335 
000058EA  00        
                    7602   @lab3_183:
000058EC  0D0A 5275 7603          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000058F0  6E6E 696E 
000058F4  672E 2E2E 
000058F8  2E        
000058F9  2E00      7604          dc.b      46,0
                    7605   @lab3_184:
000058FC  5275 6E6E 7606          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005900  696E 672E 
00005904  2E2E 2E2E 
00005908  00        
                    7607   @lab3_185:
0000590A  4279 3A20 7608          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000590E  504A 2044 
00005912  6176 6965 
00005916  73        
00005917  00        7609          dc.b      0
                    7610   @lab3_186:
00005918  0D0A 2573 7611          dc.b      13,10,37,115,0
0000591C  00        
                    7612          section   data
0000591E            7613                   align
          0000 591E 7614   DataStart       equ       *
                    7615   
                    7616   *********************************************************************************************************
                    7617   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7618   * to ram as part of the CStart routine in this file
                    7619   *********************************************************************************************************
                    7620   
                    7621   MemoryTest_test_data_byte_list:
0000591E  AAAB CCCD 7622          dc.b      170,171,204,205
                    7623   MemoryTest_test_data_word_list:
00005922  0000 AAAA 7624          dc.l      43690,47802,52445,56797
00005926  0000 BABA 
0000592A  0000 CCDD 
0000592E  0000 DDDD 
                    7625   MemoryTest_test_data_long_word_list:
00005932  AAAA AAAA 7626          dc.l      -1431655766,-1414812757,-858989091,-1430532899
00005936  ABAB ABAB 
0000593A  CCCC DDDD 
0000593E  AABB CCDD 
                    7627   @itoa_1:
00005942  2D32 3134 7628          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005946  3734 3833 
0000594A  3634 3800 
                    7629          section   bss
0000594E            7630                   align
          0000 594E 7631   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7632   
                    7633   *********************************************************************************************************
                    7634   * Section for Uninitialised Data held in ROM as constants
                    7635   *********************************************************************************************************
                    7636   
0B000000            7637                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0030 7638   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7639   
                    7640   
0B000000            7641   bss             org       bss
                    7642   
                    7643   *********************************************************************************************************
                    7644   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7645   * install the exception handler using the C function InstallExceptionHandler()
                    7646   *********************************************************************************************************
                    7647   
                    7648   
                    7649   
0B000000            7650   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7651   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7652   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7653   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7654   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7655   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7656   VCheck           ds.l    1      ditto
0B00001C            7657   VTrapV           ds.l    1      ditto
0B000020            7658   VPrivilege       ds.l    1      ditto
0B000024            7659   VTrace           ds.l    1
0B000028            7660   VLine1010emul    ds.l    1
0B00002C            7661   VLine1111emul    ds.l    1
0B000030            7662   VUnassigned1     ds.l    1
0B000034            7663   VUnassigned2     ds.l    1
0B000038            7664   VUnassigned3     ds.l    1
0B00003C            7665   VUninit_IRQ      ds.l    1
0B000040            7666   VUnassigned4     ds.l    1
0B000044            7667   VUnassigned5     ds.l    1
0B000048            7668   VUnassigned6     ds.l    1
0B00004C            7669   VUnassigned7     ds.l    1
0B000050            7670   VUnassigned8     ds.l    1
0B000054            7671   VUnassigned9     ds.l    1
0B000058            7672   VUnassigned10    ds.l    1
0B00005C            7673   VUnassigned11    ds.l    1
0B000060            7674   VSpuriousIRQ     ds.l    1
                    7675   
                    7676   * Interrupt handlers Vector 25-31
0B000064            7677   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7678   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7679   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7680   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7681   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7682   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7683   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7684   
                    7685   * Trap Handler vectors 32-47
0B000080            7686   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7687   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7688   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7689   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7690   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7691   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7692   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7693   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7694   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7695   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7696   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7697   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7698   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7699   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7700   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7701   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7702   
                    7703   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7704   
                    7705   ***********************************************************************************************************
                    7706   * Other Variables
                    7707   ***********************************************************************************************************
                    7708   *__DebugA5       ds.l    1
                    7709   *__UserA5        ds.l    1
                    7710   
                    7711   ***********************************************************************************************************
0B0000C0            7712   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7713   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7714   __heap:         ds.l    0       ; pointers for malloc functions
                    7715   
                    7716   *__himem:       ds.l    himem            ; highest memory location + 1
                    7717   *__stklen:      ds.l    stklen           ; default stack size
                    7718   
                    7719   *********************************************************************************************************
                    7720   * Section for Heap
                    7721   *********************************************************************************************************
                    7722   
                    7723   _i:
0B0000C4            7724          ds.b      4
                    7725   _x:
0B0000C8            7726          ds.b      4
                    7727   _y:
0B0000CC            7728          ds.b      4
                    7729   _z:
0B0000D0            7730          ds.b      4
                    7731   _PortA_Count:
0B0000D4            7732          ds.b      4
                    7733   _Trace:
0B0000D8            7734          ds.b      4
                    7735   _GoFlag:
0B0000DC            7736          ds.b      4
                    7737   _Echo:
0B0000E0            7738          ds.b      4
                    7739   _d0:
0B0000E4            7740          ds.b      4
                    7741   _d1:
0B0000E8            7742          ds.b      4
                    7743   _d2:
0B0000EC            7744          ds.b      4
                    7745   _d3:
0B0000F0            7746          ds.b      4
                    7747   _d4:
0B0000F4            7748          ds.b      4
                    7749   _d5:
0B0000F8            7750          ds.b      4
                    7751   _d6:
0B0000FC            7752          ds.b      4
                    7753   _d7:
0B000100            7754          ds.b      4
                    7755   _a0:
0B000104            7756          ds.b      4
                    7757   _a1:
0B000108            7758          ds.b      4
                    7759   _a2:
0B00010C            7760          ds.b      4
                    7761   _a3:
0B000110            7762          ds.b      4
                    7763   _a4:
0B000114            7764          ds.b      4
                    7765   _a5:
0B000118            7766          ds.b      4
                    7767   _a6:
0B00011C            7768          ds.b      4
                    7769   _PC:
0B000120            7770          ds.b      4
                    7771   _SSP:
0B000124            7772          ds.b      4
                    7773   _USP:
0B000128            7774          ds.b      4
                    7775   _SR:
0B00012C            7776          ds.b      2
                    7777   _BreakPointAddress:
0B00012E            7778          ds.b      32
                    7779   _BreakPointInstruction:
0B00014E            7780          ds.b      16
                    7781   _BreakPointSetOrCleared:
0B00015E            7782          ds.b      32
                    7783   _InstructionSize:
0B00017E            7784          ds.b      4
                    7785   _WatchPointAddress:
0B000182            7786          ds.b      32
                    7787   _WatchPointSetOrCleared:
0B0001A2            7788          ds.b      32
                    7789   _WatchPointString:
0B0001C2            7790          ds.b      800
                    7791   _TempString:
0B0004E2            7792          ds.b      100
                    7793          section   heap
0B000546            7794                   align
          0B00 0546 7795   bssEnd          equ *                   end of storage space for unitialised variables
                    7796   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7797   heap   equ       *
0B000546            7798                    align
          0000 0000

Assembly errors: 0
