680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 29 Feb 2024      Time: 20:39:53          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB3.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  30AE      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  232C      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB3.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DM.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; // #define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /*************************************************************
                     478   ; ** SPI Controller registers
                     479   ; **************************************************************/
                     480   ; // SPI Registers
                     481   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                     482   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                     483   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                     484   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                     485   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                     486   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                     487   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                     488   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                     489   ; // and write FF to disable it
                     490   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     491   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     492   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     493   ; unsigned int i, x, y, z, PortA_Count;
                     494   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     495   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     496   ; unsigned int d0, d1, d2, d3, d4, d5, d6, d7;
                     497   ; unsigned int a0, a1, a2, a3, a4, a5, a6;
                     498   ; unsigned int PC, SSP, USP;
                     499   ; unsigned short int SR;
                     500   ; // Breakpoint variables
                     501   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     502   ; unsigned short int BreakPointInstruction[8];           // to hold the instruction opcode at the breakpoint
                     503   ; unsigned int BreakPointSetOrCleared[8];
                     504   ; unsigned int InstructionSize;
                     505   ; // watchpoint variables
                     506   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     507   ; unsigned int WatchPointSetOrCleared[8];
                     508   ; char WatchPointString[8][100];
                     509   ; char    TempString[100];
                     510   ; /************************************************************************************
                     511   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     512   ; ************************************************************************************/
                     513   ; void Wait1ms(void)
                     514   ; {
                     515   _Wait1ms:
00000932  2F02       516          move.l    D2,-(A7)
                     517   ; long int  i;
                     518   ; for (i = 0; i < 1000; i++)
00000934  4282       519          clr.l     D2
                     520   Wait1ms_1:
00000936  0C82 0000  521          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       522          bge.s     Wait1ms_3
0000093E  5282       523          addq.l    #1,D2
00000940  60F4       524          bra       Wait1ms_1
                     525   Wait1ms_3:
00000942  241F       526          move.l    (A7)+,D2
00000944  4E75       527          rts
                     528   ; ;
                     529   ; }
                     530   ; /************************************************************************************
                     531   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     532   ; **************************************************************************************/
                     533   ; void Wait3ms(void)
                     534   ; {
                     535   _Wait3ms:
00000946  2F02       536          move.l    D2,-(A7)
                     537   ; int i;
                     538   ; for (i = 0; i < 3; i++)
00000948  4282       539          clr.l     D2
                     540   Wait3ms_1:
0000094A  0C82 0000  541          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       542          bge.s     Wait3ms_3
                     543   ; Wait1ms();
00000952  4EB8 0932  544          jsr       _Wait1ms
00000956  5282       545          addq.l    #1,D2
00000958  60F0       546          bra       Wait3ms_1
                     547   Wait3ms_3:
0000095A  241F       548          move.l    (A7)+,D2
0000095C  4E75       549          rts
                     550   ; }
                     551   ; /*********************************************************************************************
                     552   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     553   ; *********************************************************************************************/
                     554   ; void Init_LCD(void)
                     555   ; {
                     556   _Init_LCD:
                     557   ; LCDcommand = (char)(0x0c);
0000095E  13FC 000C  558          move.b    #12,4194336
00000962  0040 0020 
                     559   ; Wait3ms();
00000966  4EB8 0946  560          jsr       _Wait3ms
                     561   ; LCDcommand = (char)(0x38);
0000096A  13FC 0038  562          move.b    #56,4194336
0000096E  0040 0020 
                     563   ; Wait3ms();
00000972  4EB8 0946  564          jsr       _Wait3ms
00000976  4E75       565          rts
                     566   ; }
                     567   ; /******************************************************************************
                     568   ; *subroutine to output a single character held in d1 to the LCD display
                     569   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     570   ; *current cursor position
                     571   ; *******************************************************************************/
                     572   ; void Outchar(int c)
                     573   ; {
                     574   _Outchar:
00000978  4E56 0000  575          link      A6,#0
                     576   ; LCDdata = (char)(c);
0000097C  202E 0008  577          move.l    8(A6),D0
00000980  13C0 0040  578          move.b    D0,4194338
00000984  0022      
                     579   ; Wait1ms();
00000986  4EB8 0932  580          jsr       _Wait1ms
0000098A  4E5E       581          unlk      A6
0000098C  4E75       582          rts
                     583   ; }
                     584   ; /**********************************************************************************
                     585   ; *subroutine to output a message at the current cursor position of the LCD display
                     586   ; ************************************************************************************/
                     587   ; void OutMess(char* theMessage)
                     588   ; {
                     589   _OutMess:
0000098E  4E56 FFFC  590          link      A6,#-4
                     591   ; char c;
                     592   ; while ((c = *theMessage++) != (char)(0))
                     593   OutMess_1:
00000992  206E 0008  594          move.l    8(A6),A0
00000996  52AE 0008  595          addq.l    #1,8(A6)
0000099A  1D50 FFFF  596          move.b    (A0),-1(A6)
0000099E  1010       597          move.b    (A0),D0
000009A0  6712       598          beq.s     OutMess_3
                     599   ; Outchar(c);
000009A2  122E FFFF  600          move.b    -1(A6),D1
000009A6  4881       601          ext.w     D1
000009A8  48C1       602          ext.l     D1
000009AA  2F01       603          move.l    D1,-(A7)
000009AC  4EB8 0978  604          jsr       _Outchar
000009B0  584F       605          addq.w    #4,A7
000009B2  60DE       606          bra       OutMess_1
                     607   OutMess_3:
000009B4  4E5E       608          unlk      A6
000009B6  4E75       609          rts
                     610   ; }
                     611   ; /******************************************************************************
                     612   ; *subroutine to clear the line by issuing 24 space characters
                     613   ; *******************************************************************************/
                     614   ; void Clearln(void)
                     615   ; {
                     616   _Clearln:
000009B8  2F02       617          move.l    D2,-(A7)
                     618   ; unsigned char i;
                     619   ; for (i = 0; i < 24; i++)
000009BA  4202       620          clr.b     D2
                     621   Clearln_1:
000009BC  0C02 0018  622          cmp.b     #24,D2
000009C0  640E       623          bhs.s     Clearln_3
                     624   ; Outchar(' ');  /* write a space char to the LCD display */
000009C2  4878 0020  625          pea       32
000009C6  4EB8 0978  626          jsr       _Outchar
000009CA  584F       627          addq.w    #4,A7
000009CC  5202       628          addq.b    #1,D2
000009CE  60EC       629          bra       Clearln_1
                     630   Clearln_3:
000009D0  241F       631          move.l    (A7)+,D2
000009D2  4E75       632          rts
                     633   ; }
                     634   ; /******************************************************************************
                     635   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     636   ; *******************************************************************************/
                     637   ; void Oline0(char* theMessage)
                     638   ; {
                     639   _Oline0:
000009D4  4E56 0000  640          link      A6,#0
                     641   ; LCDcommand = (char)(0x80);
000009D8  13FC 0080  642          move.b    #128,4194336
000009DC  0040 0020 
                     643   ; Wait3ms();
000009E0  4EB8 0946  644          jsr       _Wait3ms
                     645   ; Clearln();
000009E4  4EB8 09B8  646          jsr       _Clearln
                     647   ; LCDcommand = (char)(0x80);
000009E8  13FC 0080  648          move.b    #128,4194336
000009EC  0040 0020 
                     649   ; Wait3ms();
000009F0  4EB8 0946  650          jsr       _Wait3ms
                     651   ; OutMess(theMessage);
000009F4  2F2E 0008  652          move.l    8(A6),-(A7)
000009F8  4EB8 098E  653          jsr       _OutMess
000009FC  584F       654          addq.w    #4,A7
000009FE  4E5E       655          unlk      A6
00000A00  4E75       656          rts
                     657   ; }
                     658   ; /******************************************************************************
                     659   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     660   ; *******************************************************************************/
                     661   ; void Oline1(char* theMessage)
                     662   ; {
                     663   _Oline1:
00000A02  4E56 0000  664          link      A6,#0
                     665   ; LCDcommand = (char)(0xC0);
00000A06  13FC 00C0  666          move.b    #192,4194336
00000A0A  0040 0020 
                     667   ; Wait3ms();
00000A0E  4EB8 0946  668          jsr       _Wait3ms
                     669   ; Clearln();
00000A12  4EB8 09B8  670          jsr       _Clearln
                     671   ; LCDcommand = (char)(0xC0);
00000A16  13FC 00C0  672          move.b    #192,4194336
00000A1A  0040 0020 
                     673   ; Wait3ms();
00000A1E  4EB8 0946  674          jsr       _Wait3ms
                     675   ; OutMess(theMessage);
00000A22  2F2E 0008  676          move.l    8(A6),-(A7)
00000A26  4EB8 098E  677          jsr       _OutMess
00000A2A  584F       678          addq.w    #4,A7
00000A2C  4E5E       679          unlk      A6
00000A2E  4E75       680          rts
                     681   ; }
                     682   ; void InstallExceptionHandler(void (*function_ptr)(), int level)
                     683   ; {
                     684   _InstallExceptionHandler:
00000A30  4E56 FFFC  685          link      A6,#-4
                     686   ; volatile long int* RamVectorAddress = (volatile long int*)(StartOfExceptionVectorTable);   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  687          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     688   ; RamVectorAddress[level] = (long int*)(function_ptr);
00000A3C  206E FFFC  689          move.l    -4(A6),A0
00000A40  202E 000C  690          move.l    12(A6),D0
00000A44  E588       691          lsl.l     #2,D0
00000A46  21AE 0008  692          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       693          unlk      A6
00000A4E  4E75       694          rts
                     695   ; }
                     696   ; void TestLEDS(void)
                     697   ; {
                     698   _TestLEDS:
00000A50  48E7 3000  699          movem.l   D2/D3,-(A7)
                     700   ; int delay;
                     701   ; unsigned char count = 0;
00000A54  4202       702          clr.b     D2
                     703   ; while (1) {
                     704   TestLEDS_1:
                     705   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f));
00000A56  1002       706          move.b    D2,D0
00000A58  E908       707          lsl.b     #4,D0
00000A5A  1202       708          move.b    D2,D1
00000A5C  C23C 000F  709          and.b     #15,D1
00000A60  D001       710          add.b     D1,D0
00000A62  13C0 0040  711          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  712          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  713          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  714          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  715          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  716          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  717          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  718          move.b    D0,4194304
00000A90  0000      
                     719   ; for (delay = 0; delay < 200000; delay++)
00000A92  4283       720          clr.l     D3
                     721   TestLEDS_4:
00000A94  0C83 0003  722          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       723          bge.s     TestLEDS_6
00000A9C  5283       724          addq.l    #1,D3
00000A9E  60F4       725          bra       TestLEDS_4
                     726   TestLEDS_6:
                     727   ; ;
                     728   ; count++;
00000AA0  5202       729          addq.b    #1,D2
00000AA2  60B2       730          bra       TestLEDS_1
                     731   ; }
                     732   ; }
                     733   ; void SwitchTest(void)
                     734   ; {
                     735   _SwitchTest:
00000AA4  48E7 3020  736          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  737          lea       _printf.L,A2
00000AAC  3576      
                     738   ; int i, switches = 0;
00000AAE  4283       739          clr.l     D3
                     740   ; printf("\r\n");
00000AB0  4879 0000  741          pea       @lab3_1.L
00000AB4  3EC6      
00000AB6  4E92       742          jsr       (A2)
00000AB8  584F       743          addq.w    #4,A7
                     744   ; while (1) {
                     745   SwitchTest_1:
                     746   ; switches = (PortB << 8) | (PortA);
00000ABA  1039 0040  747          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  748          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       749          lsl.l     #8,D0
00000AC8  1239 0040  750          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  751          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       752          or.l      D1,D0
00000AD6  2600       753          move.l    D0,D3
                     754   ; printf("\rSwitches SW[7-0] = ");
00000AD8  4879 0000  755          pea       @lab3_2.L
00000ADC  3ECA      
00000ADE  4E92       756          jsr       (A2)
00000AE0  584F       757          addq.w    #4,A7
                     758   ; for (i = (int)(0x00000080); i > 0; i = i >> 1) {
00000AE2  243C 0000  759          move.l    #128,D2
00000AE6  0080      
                     760   SwitchTest_4:
00000AE8  0C82 0000  761          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       762          ble.s     SwitchTest_6
                     763   ; if ((switches & i) == 0)
00000AF0  2003       764          move.l    D3,D0
00000AF2  C082       765          and.l     D2,D0
00000AF4  660C       766          bne.s     SwitchTest_7
                     767   ; printf("0");
00000AF6  4879 0000  768          pea       @lab3_3.L
00000AFA  3EE0      
00000AFC  4E92       769          jsr       (A2)
00000AFE  584F       770          addq.w    #4,A7
00000B00  600A       771          bra.s     SwitchTest_8
                     772   SwitchTest_7:
                     773   ; else
                     774   ; printf("1");
00000B02  4879 0000  775          pea       @lab3_4.L
00000B06  3EE2      
00000B08  4E92       776          jsr       (A2)
00000B0A  584F       777          addq.w    #4,A7
                     778   SwitchTest_8:
00000B0C  E282       779          asr.l     #1,D2
00000B0E  60D8       780          bra       SwitchTest_4
                     781   SwitchTest_6:
00000B10  60A8       782          bra       SwitchTest_1
                     783   ; }
                     784   ; }
                     785   ; }
                     786   ; /*********************************************************************************************
                     787   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     788   ; *********************************************************************************************/
                     789   ; void Init_RS232(void)
                     790   ; {
                     791   _Init_RS232:
                     792   ; RS232_Control = (char)(0x15); //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  793          move.b    #21,4194368
00000B16  0040 0040 
                     794   ; RS232_Baud = (char)(0x1);      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  795          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       796          rts
                     797   ; }
                     798   ; int kbhit(void)
                     799   ; {
                     800   _kbhit:
                     801   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  802          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  803          and.b     #1,D0
00000B2E  0C00 0001  804          cmp.b     #1,D0
00000B32  6604       805          bne.s     kbhit_1
                     806   ; return 1;
00000B34  7001       807          moveq     #1,D0
00000B36  6002       808          bra.s     kbhit_3
                     809   kbhit_1:
                     810   ; else
                     811   ; return 0;
00000B38  4280       812          clr.l     D0
                     813   kbhit_3:
00000B3A  4E75       814          rts
                     815   ; }
                     816   ; /*********************************************************************************************************
                     817   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     818   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     819   ; **  to allow the board to communicate with HyperTerminal Program
                     820   ; **
                     821   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     822   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     823   ; **  call _putch() also
                     824   ; *********************************************************************************************************/
                     825   ; int _putch(int c)
                     826   ; {
                     827   __putch:
00000B3C  4E56 0000  828          link      A6,#0
                     829   ; while (((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     830   _putch_1:
00000B40  1039 0040  831          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  832          and.b     #2,D0
00000B4A  0C00 0002  833          cmp.b     #2,D0
00000B4E  6702       834          beq.s     _putch_3
00000B50  60EE       835          bra       _putch_1
                     836   _putch_3:
                     837   ; ;
                     838   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  839          move.l    8(A6),D0
00000B56  C03C 007F  840          and.b     #127,D0
00000B5A  13C0 0040  841          move.b    D0,4194370
00000B5E  0042      
                     842   ; return c;                                              // putchar() expects the character to be returned
00000B60  202E 0008  843          move.l    8(A6),D0
00000B64  4E5E       844          unlk      A6
00000B66  4E75       845          rts
                     846   ; }
                     847   ; /*********************************************************************************************************
                     848   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     849   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     850   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     851   ; **
                     852   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     853   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     854   ; **  call _getch() also
                     855   ; *********************************************************************************************************/
                     856   ; int _getch(void)
                     857   ; {
                     858   __getch:
00000B68  2F02       859          move.l    D2,-(A7)
                     860   ; int c;
                     861   ; while (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     862   _getch_1:
00000B6A  1039 0040  863          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  864          and.b     #1,D0
00000B74  0C00 0001  865          cmp.b     #1,D0
00000B78  6702       866          beq.s     _getch_3
00000B7A  60EE       867          bra       _getch_1
                     868   _getch_3:
                     869   ; ;
                     870   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  871          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  872          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  873          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       874          move.l    D0,D2
                     875   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     876   ; if (Echo)
00000B90  4AB9 0B00  877          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       878          beq.s     _getch_4
                     879   ; _putch(c);
00000B98  2F02       880          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  881          jsr       __putch
00000B9E  584F       882          addq.w    #4,A7
                     883   _getch_4:
                     884   ; return c;
00000BA0  2002       885          move.l    D2,D0
00000BA2  241F       886          move.l    (A7)+,D2
00000BA4  4E75       887          rts
                     888   ; }
                     889   ; // flush the input stream for any unread characters
                     890   ; void FlushKeyboard(void)
                     891   ; {
                     892   _FlushKeyboard:
00000BA6  4E56 FFFC  893          link      A6,#-4
                     894   ; char c;
                     895   ; while (1) {
                     896   FlushKeyboard_1:
                     897   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  898          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  899          and.b     #1,D0
00000BB4  0C00 0001  900          cmp.b     #1,D0
00000BB8  6610       901          bne.s     FlushKeyboard_4
                     902   ; c = ((char)(RS232_RxData) & (char)(0x7f));
00000BBA  1039 0040  903          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  904          and.b     #127,D0
00000BC4  1D40 FFFF  905          move.b    D0,-1(A6)
00000BC8  6002       906          bra.s     FlushKeyboard_5
                     907   FlushKeyboard_4:
                     908   ; else
                     909   ; return;
00000BCA  6002       910          bra.s     FlushKeyboard_6
                     911   FlushKeyboard_5:
00000BCC  60DC       912          bra       FlushKeyboard_1
                     913   FlushKeyboard_6:
00000BCE  4E5E       914          unlk      A6
00000BD0  4E75       915          rts
                     916   ; }
                     917   ; }
                     918   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     919   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     920   ; char xtod(int c)
                     921   ; {
                     922   _xtod:
00000BD2  4E56 0000  923          link      A6,#0
00000BD6  2F02       924          move.l    D2,-(A7)
00000BD8  242E 0008  925          move.l    8(A6),D2
                     926   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  927          cmp.b     #57,D2
00000BE0  6E08       928          bgt.s     xtod_1
                     929   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       930          move.b    D2,D0
00000BE4  0400 0030  931          sub.b     #48,D0
00000BE8  6014       932          bra.s     xtod_3
                     933   xtod_1:
                     934   ; else if ((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  935          cmp.b     #70,D2
00000BEE  6F08       936          ble.s     xtod_4
                     937   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       938          move.b    D2,D0
00000BF2  0400 0057  939          sub.b     #87,D0
00000BF6  6006       940          bra.s     xtod_3
                     941   xtod_4:
                     942   ; else
                     943   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       944          move.b    D2,D0
00000BFA  0400 0037  945          sub.b     #55,D0
                     946   xtod_3:
00000BFE  241F       947          move.l    (A7)+,D2
00000C00  4E5E       948          unlk      A6
00000C02  4E75       949          rts
                     950   ; }
                     951   ; int Get2HexDigits(char* CheckSumPtr)
                     952   ; {
                     953   _Get2HexDigits:
00000C04  4E56 0000  954          link      A6,#0
00000C08  2F02       955          move.l    D2,-(A7)
                     956   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       957          move.l    D0,-(A7)
00000C0C  4EB8 0B68  958          jsr       __getch
00000C10  2200       959          move.l    D0,D1
00000C12  201F       960          move.l    (A7)+,D0
00000C14  2F01       961          move.l    D1,-(A7)
00000C16  4EB8 0BD2  962          jsr       _xtod
00000C1A  584F       963          addq.w    #4,A7
00000C1C  C0BC 0000  964          and.l     #255,D0
00000C20  00FF      
00000C22  E980       965          asl.l     #4,D0
00000C24  2F00       966          move.l    D0,-(A7)
00000C26  2F01       967          move.l    D1,-(A7)
00000C28  4EB8 0B68  968          jsr       __getch
00000C2C  221F       969          move.l    (A7)+,D1
00000C2E  2F00       970          move.l    D0,-(A7)
00000C30  4EB8 0BD2  971          jsr       _xtod
00000C34  584F       972          addq.w    #4,A7
00000C36  2200       973          move.l    D0,D1
00000C38  201F       974          move.l    (A7)+,D0
00000C3A  C2BC 0000  975          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       976          or.l      D1,D0
00000C42  2400       977          move.l    D0,D2
                     978   ; if (CheckSumPtr)
00000C44  4AAE 0008  979          tst.l     8(A6)
00000C48  6706       980          beq.s     Get2HexDigits_1
                     981   ; *CheckSumPtr += i;
00000C4A  206E 0008  982          move.l    8(A6),A0
00000C4E  D510       983          add.b     D2,(A0)
                     984   Get2HexDigits_1:
                     985   ; return i;
00000C50  2002       986          move.l    D2,D0
00000C52  241F       987          move.l    (A7)+,D2
00000C54  4E5E       988          unlk      A6
00000C56  4E75       989          rts
                     990   ; }
                     991   ; int Get4HexDigits(char* CheckSumPtr)
                     992   ; {
                     993   _Get4HexDigits:
00000C58  4E56 0000  994          link      A6,#0
                     995   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  996          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  997          jsr       _Get2HexDigits
00000C64  584F       998          addq.w    #4,A7
00000C66  E180       999          asl.l     #8,D0
00000C68  2F00      1000          move.l    D0,-(A7)
00000C6A  2F2E 0008 1001          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04 1002          jsr       _Get2HexDigits
00000C72  584F      1003          addq.w    #4,A7
00000C74  2200      1004          move.l    D0,D1
00000C76  201F      1005          move.l    (A7)+,D0
00000C78  8081      1006          or.l      D1,D0
00000C7A  4E5E      1007          unlk      A6
00000C7C  4E75      1008          rts
                    1009   ; }
                    1010   ; int Get6HexDigits(char* CheckSumPtr)
                    1011   ; {
                    1012   _Get6HexDigits:
00000C7E  4E56 0000 1013          link      A6,#0
                    1014   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1015          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1016          jsr       _Get4HexDigits
00000C8A  584F      1017          addq.w    #4,A7
00000C8C  E180      1018          asl.l     #8,D0
00000C8E  2F00      1019          move.l    D0,-(A7)
00000C90  2F2E 0008 1020          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1021          jsr       _Get2HexDigits
00000C98  584F      1022          addq.w    #4,A7
00000C9A  2200      1023          move.l    D0,D1
00000C9C  201F      1024          move.l    (A7)+,D0
00000C9E  8081      1025          or.l      D1,D0
00000CA0  4E5E      1026          unlk      A6
00000CA2  4E75      1027          rts
                    1028   ; }
                    1029   ; int Get8HexDigits(char* CheckSumPtr)
                    1030   ; {
                    1031   _Get8HexDigits:
00000CA4  4E56 0000 1032          link      A6,#0
                    1033   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1034          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1035          jsr       _Get4HexDigits
00000CB0  584F      1036          addq.w    #4,A7
00000CB2  E180      1037          asl.l     #8,D0
00000CB4  E180      1038          asl.l     #8,D0
00000CB6  2F00      1039          move.l    D0,-(A7)
00000CB8  2F2E 0008 1040          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1041          jsr       _Get4HexDigits
00000CC0  584F      1042          addq.w    #4,A7
00000CC2  2200      1043          move.l    D0,D1
00000CC4  201F      1044          move.l    (A7)+,D0
00000CC6  8081      1045          or.l      D1,D0
00000CC8  4E5E      1046          unlk      A6
00000CCA  4E75      1047          rts
                    1048   ; }
                    1049   ; void DumpMemory(void)   // simple dump memory fn
                    1050   ; {
                    1051   _DumpMemory:
00000CCC  48E7 3C30 1052          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1053          lea       _printf.L,A2
00000CD4  3576      
00000CD6  47F9 0000 1054          lea       _putch.L,A3
00000CDA  3468      
                    1055   ; int i, j;
                    1056   ; unsigned char* RamPtr, c; // pointer to where the program is download (assumed)
                    1057   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue");
00000CDC  4879 0000 1058          pea       @lab3_5.L
00000CE0  3EE4      
00000CE2  4E92      1059          jsr       (A2)
00000CE4  584F      1060          addq.w    #4,A7
                    1061   ; printf("\r\nEnter Start Address: ");
00000CE6  4879 0000 1062          pea       @lab3_6.L
00000CEA  3F1E      
00000CEC  4E92      1063          jsr       (A2)
00000CEE  584F      1064          addq.w    #4,A7
                    1065   ; RamPtr = Get8HexDigits(0);
00000CF0  42A7      1066          clr.l     -(A7)
00000CF2  4EB8 0CA4 1067          jsr       _Get8HexDigits
00000CF6  584F      1068          addq.w    #4,A7
00000CF8  2600      1069          move.l    D0,D3
                    1070   ; while (1) {
                    1071   DumpMemory_1:
                    1072   ; for (i = 0; i < 16; i++) {
00000CFA  4285      1073          clr.l     D5
                    1074   DumpMemory_4:
00000CFC  0C85 0000 1075          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1076          bge       DumpMemory_6
                    1077   ; printf("\r\n%08x ", RamPtr);
00000D06  2F03      1078          move.l    D3,-(A7)
00000D08  4879 0000 1079          pea       @lab3_7.L
00000D0C  3F36      
00000D0E  4E92      1080          jsr       (A2)
00000D10  504F      1081          addq.w    #8,A7
                    1082   ; for (j = 0; j < 16; j++) {
00000D12  4282      1083          clr.l     D2
                    1084   DumpMemory_7:
00000D14  0C82 0000 1085          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1086          bge.s     DumpMemory_9
                    1087   ; printf("%02X", RamPtr[j]);
00000D1C  2043      1088          move.l    D3,A0
00000D1E  1230 2800 1089          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1090          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1091          move.l    D1,-(A7)
00000D2A  4879 0000 1092          pea       @lab3_8.L
00000D2E  3F3E      
00000D30  4E92      1093          jsr       (A2)
00000D32  504F      1094          addq.w    #8,A7
                    1095   ; putchar(' ');
00000D34  4878 0020 1096          pea       32
00000D38  4E93      1097          jsr       (A3)
00000D3A  584F      1098          addq.w    #4,A7
00000D3C  5282      1099          addq.l    #1,D2
00000D3E  60D4      1100          bra       DumpMemory_7
                    1101   DumpMemory_9:
                    1102   ; }
                    1103   ; // now display the data as ASCII at the end
                    1104   ; printf("  ");
00000D40  4879 0000 1105          pea       @lab3_9.L
00000D44  3F44      
00000D46  4E92      1106          jsr       (A2)
00000D48  584F      1107          addq.w    #4,A7
                    1108   ; for (j = 0; j < 16; j++) {
00000D4A  4282      1109          clr.l     D2
                    1110   DumpMemory_10:
00000D4C  0C82 0000 1111          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1112          bge       DumpMemory_12
                    1113   ; c = ((char)(RamPtr[j]) & 0x7f);
00000D56  2043      1114          move.l    D3,A0
00000D58  1030 2800 1115          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1116          and.b     #127,D0
00000D60  1800      1117          move.b    D0,D4
                    1118   ; if ((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1119          cmp.b     #127,D4
00000D66  6206      1120          bhi.s     DumpMemory_15
00000D68  0C04 0020 1121          cmp.b     #32,D4
00000D6C  640A      1122          bhs.s     DumpMemory_13
                    1123   DumpMemory_15:
                    1124   ; putchar('.');
00000D6E  4878 002E 1125          pea       46
00000D72  4E93      1126          jsr       (A3)
00000D74  584F      1127          addq.w    #4,A7
00000D76  6012      1128          bra.s     DumpMemory_14
                    1129   DumpMemory_13:
                    1130   ; else
                    1131   ; putchar(RamPtr[j]);
00000D78  2043      1132          move.l    D3,A0
00000D7A  1230 2800 1133          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1134          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1135          move.l    D1,-(A7)
00000D86  4E93      1136          jsr       (A3)
00000D88  584F      1137          addq.w    #4,A7
                    1138   DumpMemory_14:
00000D8A  5282      1139          addq.l    #1,D2
00000D8C  60BE      1140          bra       DumpMemory_10
                    1141   DumpMemory_12:
                    1142   ; }
                    1143   ; RamPtr = RamPtr + 16;
00000D8E  0683 0000 1144          add.l     #16,D3
00000D92  0010      
00000D94  5285      1145          addq.l    #1,D5
00000D96  6000 FF64 1146          bra       DumpMemory_4
                    1147   DumpMemory_6:
                    1148   ; }
                    1149   ; printf("\r\n");
00000D9A  4879 0000 1150          pea       @lab3_1.L
00000D9E  3EC6      
00000DA0  4E92      1151          jsr       (A2)
00000DA2  584F      1152          addq.w    #4,A7
                    1153   ; c = _getch();
00000DA4  4EB8 0B68 1154          jsr       __getch
00000DA8  1800      1155          move.b    D0,D4
                    1156   ; if (c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1157          cmp.b     #27,D4
00000DAE  6602      1158          bne.s     DumpMemory_16
                    1159   ; break;
00000DB0  6004      1160          bra.s     DumpMemory_3
                    1161   DumpMemory_16:
00000DB2  6000 FF46 1162          bra       DumpMemory_1
                    1163   DumpMemory_3:
00000DB6  4CDF 0C3C 1164          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1165          rts
                    1166   ; }
                    1167   ; }
                    1168   ; void FillMemory()
                    1169   ; {
                    1170   _FillMemory:
00000DBC  48E7 3820 1171          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1172          lea       _printf.L,A2
00000DC4  3576      
                    1173   ; char* StartRamPtr, * EndRamPtr;
                    1174   ; unsigned char FillData;
                    1175   ; printf("\r\nFill Memory Block");
00000DC6  4879 0000 1176          pea       @lab3_10.L
00000DCA  3F48      
00000DCC  4E92      1177          jsr       (A2)
00000DCE  584F      1178          addq.w    #4,A7
                    1179   ; printf("\r\nEnter Start Address: ");
00000DD0  4879 0000 1180          pea       @lab3_6.L
00000DD4  3F1E      
00000DD6  4E92      1181          jsr       (A2)
00000DD8  584F      1182          addq.w    #4,A7
                    1183   ; StartRamPtr = Get8HexDigits(0);
00000DDA  42A7      1184          clr.l     -(A7)
00000DDC  4EB8 0CA4 1185          jsr       _Get8HexDigits
00000DE0  584F      1186          addq.w    #4,A7
00000DE2  2400      1187          move.l    D0,D2
                    1188   ; printf("\r\nEnter End Address: ");
00000DE4  4879 0000 1189          pea       @lab3_11.L
00000DE8  3F5C      
00000DEA  4E92      1190          jsr       (A2)
00000DEC  584F      1191          addq.w    #4,A7
                    1192   ; EndRamPtr = Get8HexDigits(0);
00000DEE  42A7      1193          clr.l     -(A7)
00000DF0  4EB8 0CA4 1194          jsr       _Get8HexDigits
00000DF4  584F      1195          addq.w    #4,A7
00000DF6  2800      1196          move.l    D0,D4
                    1197   ; printf("\r\nEnter Fill Data: ");
00000DF8  4879 0000 1198          pea       @lab3_12.L
00000DFC  3F72      
00000DFE  4E92      1199          jsr       (A2)
00000E00  584F      1200          addq.w    #4,A7
                    1201   ; FillData = Get2HexDigits(0);
00000E02  42A7      1202          clr.l     -(A7)
00000E04  4EB8 0C04 1203          jsr       _Get2HexDigits
00000E08  584F      1204          addq.w    #4,A7
00000E0A  1600      1205          move.b    D0,D3
                    1206   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00000E0C  C6BC 0000 1207          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1208          move.l    D3,-(A7)
00000E14  2F04      1209          move.l    D4,-(A7)
00000E16  2F02      1210          move.l    D2,-(A7)
00000E18  4879 0000 1211          pea       @lab3_13.L
00000E1C  3F86      
00000E1E  4E92      1212          jsr       (A2)
00000E20  DEFC 0010 1213          add.w     #16,A7
                    1214   ; while (StartRamPtr < EndRamPtr)
                    1215   FillMemory_1:
00000E24  B484      1216          cmp.l     D4,D2
00000E26  6408      1217          bhs.s     FillMemory_3
                    1218   ; *StartRamPtr++ = FillData;
00000E28  2042      1219          move.l    D2,A0
00000E2A  5282      1220          addq.l    #1,D2
00000E2C  1083      1221          move.b    D3,(A0)
00000E2E  60F4      1222          bra       FillMemory_1
                    1223   FillMemory_3:
00000E30  4CDF 041C 1224          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1225          rts
                    1226   ; }
                    1227   ; void Load_SRecordFile()
                    1228   ; {
                    1229   _Load_SRecordFile:
00000E36  4E56 FFDC 1230          link      A6,#-36
00000E3A  48E7 3F3C 1231          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1232          lea       -6(A6),A2
00000E42  47F8 0C04 1233          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1234          lea       _printf.L,A4
00000E4A  3576      
                    1235   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0;
00000E4C  42AE FFEE 1236          clr.l     -18(A6)
00000E50  3A7C 0000 1237          move.w    #0,A5
                    1238   ; int result, ByteCount;
                    1239   ; char c, CheckSum, ReadCheckSum, HeaderType;
                    1240   ; char* RamPtr;                          // pointer to Memory where downloaded program will be stored
                    1241   ; LoadFailed = 0;                        //assume LOAD operation will pass
00000E54  7E00      1242          moveq     #0,D7
                    1243   ; AddressFail = 0;
00000E56  42AE FFEA 1244          clr.l     -22(A6)
                    1245   ; Echo = 0;                              // don't echo S records during download
00000E5A  42B9 0B00 1246          clr.l     _Echo.L
00000E5E  00E0      
                    1247   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n");
00000E60  4879 0000 1248          pea       @lab3_14.L
00000E64  3FB6      
00000E66  4E94      1249          jsr       (A4)
00000E68  584F      1250          addq.w    #4,A7
                    1251   ; while (1) {
                    1252   Load_SRecordFile_1:
                    1253   ; CheckSum = 0;
00000E6A  4212      1254          clr.b     (A2)
                    1255   ; do {
                    1256   Load_SRecordFile_4:
                    1257   ; c = toupper(_getch());
00000E6C  2F00      1258          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1259          jsr       __getch
00000E72  2200      1260          move.l    D0,D1
00000E74  201F      1261          move.l    (A7)+,D0
00000E76  2F01      1262          move.l    D1,-(A7)
00000E78  4EB9 0000 1263          jsr       _toupper
00000E7C  354A      
00000E7E  584F      1264          addq.w    #4,A7
00000E80  1C00      1265          move.b    D0,D6
                    1266   ; if (c == 0x1b)      // if break
00000E82  0C06 001B 1267          cmp.b     #27,D6
00000E86  6604      1268          bne.s     Load_SRecordFile_6
                    1269   ; return;
00000E88  6000 0132 1270          bra       Load_SRecordFile_8
                    1271   Load_SRecordFile_6:
00000E8C  0C06 0053 1272          cmp.b     #83,D6
00000E90  66DA      1273          bne       Load_SRecordFile_4
                    1274   ; } while (c != (char)('S'));   // wait for S start of header
                    1275   ; HeaderType = _getch();
00000E92  4EB8 0B68 1276          jsr       __getch
00000E96  1600      1277          move.b    D0,D3
                    1278   ; if (HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1279          cmp.b     #48,D3
00000E9C  6706      1280          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1281          cmp.b     #53,D3
00000EA2  6604      1282          bne.s     Load_SRecordFile_9
                    1283   Load_SRecordFile_11:
                    1284   ; continue;
00000EA4  6000 00D2 1285          bra       Load_SRecordFile_23
                    1286   Load_SRecordFile_9:
                    1287   ; if (HeaderType >= (char)('7'))
00000EA8  0C03 0037 1288          cmp.b     #55,D3
00000EAC  6D04      1289          blt.s     Load_SRecordFile_12
                    1290   ; break;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1291          bra       Load_SRecordFile_3
                    1292   Load_SRecordFile_12:
                    1293   ; // get the bytecount
                    1294   ; ByteCount = Get2HexDigits(&CheckSum);
00000EB2  2F0A      1295          move.l    A2,-(A7)
00000EB4  4E93      1296          jsr       (A3)
00000EB6  584F      1297          addq.w    #4,A7
00000EB8  2D40 FFF6 1298          move.l    D0,-10(A6)
                    1299   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1300   ; if (HeaderType == (char)('1')) {
00000EBC  0C03 0031 1301          cmp.b     #49,D3
00000EC0  660E      1302          bne.s     Load_SRecordFile_14
                    1303   ; AddressSize = 2;       // 2 byte address
00000EC2  7A02      1304          moveq     #2,D5
                    1305   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1306          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1307          jsr       _Get4HexDigits
00000ECA  584F      1308          addq.w    #4,A7
00000ECC  2800      1309          move.l    D0,D4
00000ECE  6020      1310          bra.s     Load_SRecordFile_17
                    1311   Load_SRecordFile_14:
                    1312   ; }
                    1313   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1314          cmp.b     #50,D3
00000ED4  660E      1315          bne.s     Load_SRecordFile_16
                    1316   ; AddressSize = 3;       // 3 byte address
00000ED6  7A03      1317          moveq     #3,D5
                    1318   ; Address = Get6HexDigits(&CheckSum);
00000ED8  2F0A      1319          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1320          jsr       _Get6HexDigits
00000EDE  584F      1321          addq.w    #4,A7
00000EE0  2800      1322          move.l    D0,D4
00000EE2  600C      1323          bra.s     Load_SRecordFile_17
                    1324   Load_SRecordFile_16:
                    1325   ; }
                    1326   ; else {
                    1327   ; AddressSize = 4;       // 4 byte address
00000EE4  7A04      1328          moveq     #4,D5
                    1329   ; Address = Get8HexDigits(&CheckSum);
00000EE6  2F0A      1330          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1331          jsr       _Get8HexDigits
00000EEC  584F      1332          addq.w    #4,A7
00000EEE  2800      1333          move.l    D0,D4
                    1334   Load_SRecordFile_17:
                    1335   ; }
                    1336   ; RamPtr = (char*)(Address);                            // point to download area
00000EF0  2D44 FFFC 1337          move.l    D4,-4(A6)
                    1338   ; NumDataBytesToRead = ByteCount - AddressSize - 1;
00000EF4  202E FFF6 1339          move.l    -10(A6),D0
00000EF8  9085      1340          sub.l     D5,D0
00000EFA  5380      1341          subq.l    #1,D0
00000EFC  2D40 FFE2 1342          move.l    D0,-30(A6)
                    1343   ; for (i = 0; i < NumDataBytesToRead; i++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1344          clr.l     D2
                    1345   Load_SRecordFile_18:
00000F02  B4AE FFE2 1346          cmp.l     -30(A6),D2
00000F06  6C1E      1347          bge.s     Load_SRecordFile_20
                    1348   ; DataByte = Get2HexDigits(&CheckSum);
00000F08  2F0A      1349          move.l    A2,-(A7)
00000F0A  4E93      1350          jsr       (A3)
00000F0C  584F      1351          addq.w    #4,A7
00000F0E  2D40 FFDE 1352          move.l    D0,-34(A6)
                    1353   ; *RamPtr++ = DataByte;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1354          move.l    -34(A6),D0
00000F16  206E FFFC 1355          move.l    -4(A6),A0
00000F1A  52AE FFFC 1356          addq.l    #1,-4(A6)
00000F1E  1080      1357          move.b    D0,(A0)
                    1358   ; ByteTotal++;
00000F20  524D      1359          addq.w    #1,A5
00000F22  5282      1360          addq.l    #1,D2
00000F24  60DC      1361          bra       Load_SRecordFile_18
                    1362   Load_SRecordFile_20:
                    1363   ; }
                    1364   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1365   ; ReadCheckSum = Get2HexDigits(0);
00000F26  42A7      1366          clr.l     -(A7)
00000F28  4E93      1367          jsr       (A3)
00000F2A  584F      1368          addq.w    #4,A7
00000F2C  1D40 FFFB 1369          move.b    D0,-5(A6)
                    1370   ; if ((~CheckSum & 0Xff) != (ReadCheckSum & 0Xff)) {
00000F30  1012      1371          move.b    (A2),D0
00000F32  4600      1372          not.b     D0
00000F34  4880      1373          ext.w     D0
00000F36  C07C 00FF 1374          and.w     #255,D0
00000F3A  122E FFFB 1375          move.b    -5(A6),D1
00000F3E  4881      1376          ext.w     D1
00000F40  C27C 00FF 1377          and.w     #255,D1
00000F44  B041      1378          cmp.w     D1,D0
00000F46  6708      1379          beq.s     Load_SRecordFile_21
                    1380   ; LoadFailed = 1;
00000F48  7E01      1381          moveq     #1,D7
                    1382   ; FailedAddress = Address;
00000F4A  2D44 FFE6 1383          move.l    D4,-26(A6)
                    1384   ; break;
00000F4E  602C      1385          bra.s     Load_SRecordFile_3
                    1386   Load_SRecordFile_21:
                    1387   ; }
                    1388   ; SRecordCount++;
00000F50  52AE FFEE 1389          addq.l    #1,-18(A6)
                    1390   ; // display feedback on progress
                    1391   ; if (SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1392          move.l    -18(A6),-(A7)
00000F58  4878 0019 1393          pea       25
00000F5C  4EB9 0000 1394          jsr       LDIV
00000F60  339C      
00000F62  202F 0004 1395          move.l    4(A7),D0
00000F66  504F      1396          addq.w    #8,A7
00000F68  4A80      1397          tst.l     D0
00000F6A  660C      1398          bne.s     Load_SRecordFile_23
                    1399   ; putchar('.');
00000F6C  4878 002E 1400          pea       46
00000F70  4EB9 0000 1401          jsr       _putch
00000F74  3468      
00000F76  584F      1402          addq.w    #4,A7
                    1403   Load_SRecordFile_23:
00000F78  6000 FEF0 1404          bra       Load_SRecordFile_1
                    1405   Load_SRecordFile_3:
                    1406   ; }
                    1407   ; if (LoadFailed == 1) {
00000F7C  0C87 0000 1408          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1409          bne.s     Load_SRecordFile_25
                    1410   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress);
00000F84  2F2E FFE6 1411          move.l    -26(A6),-(A7)
00000F88  4879 0000 1412          pea       @lab3_15.L
00000F8C  3FE6      
00000F8E  4E94      1413          jsr       (A4)
00000F90  504F      1414          addq.w    #8,A7
00000F92  600C      1415          bra.s     Load_SRecordFile_26
                    1416   Load_SRecordFile_25:
                    1417   ; }
                    1418   ; else
                    1419   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal);
00000F94  2F0D      1420          move.l    A5,-(A7)
00000F96  4879 0000 1421          pea       @lab3_16.L
00000F9A  400C      
00000F9C  4E94      1422          jsr       (A4)
00000F9E  504F      1423          addq.w    #8,A7
                    1424   Load_SRecordFile_26:
                    1425   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1426   ; for (i = 0; i < 400000; i++)
00000FA0  4282      1427          clr.l     D2
                    1428   Load_SRecordFile_27:
00000FA2  0C82 0006 1429          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1430          bge.s     Load_SRecordFile_29
00000FAA  5282      1431          addq.l    #1,D2
00000FAC  60F4      1432          bra       Load_SRecordFile_27
                    1433   Load_SRecordFile_29:
                    1434   ; ;
                    1435   ; FlushKeyboard();
00000FAE  4EB8 0BA6 1436          jsr       _FlushKeyboard
                    1437   ; Echo = 1;
00000FB2  23FC 0000 1438          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1439   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1440          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1441          unlk      A6
00000FC2  4E75      1442          rts
                    1443   ; }
                    1444   ; void MemoryChange(void)
                    1445   ; {
                    1446   _MemoryChange:
00000FC4  48E7 3820 1447          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1448          lea       _printf.L,A2
00000FCC  3576      
                    1449   ; unsigned char* RamPtr, c; // pointer to memory
                    1450   ; int Data;
                    1451   ; printf("\r\nExamine and Change Memory");
00000FCE  4879 0000 1452          pea       @lab3_17.L
00000FD2  402E      
00000FD4  4E92      1453          jsr       (A2)
00000FD6  584F      1454          addq.w    #4,A7
                    1455   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change");
00000FD8  4879 0000 1456          pea       @lab3_18.L
00000FDC  404A      
00000FDE  4E92      1457          jsr       (A2)
00000FE0  584F      1458          addq.w    #4,A7
                    1459   ; printf("\r\nEnter Address: ");
00000FE2  4879 0000 1460          pea       @lab3_19.L
00000FE6  4090      
00000FE8  4E92      1461          jsr       (A2)
00000FEA  584F      1462          addq.w    #4,A7
                    1463   ; RamPtr = Get8HexDigits(0);
00000FEC  42A7      1464          clr.l     -(A7)
00000FEE  4EB8 0CA4 1465          jsr       _Get8HexDigits
00000FF2  584F      1466          addq.w    #4,A7
00000FF4  2600      1467          move.l    D0,D3
                    1468   ; while (1) {
                    1469   MemoryChange_1:
                    1470   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr);
00000FF6  2043      1471          move.l    D3,A0
00000FF8  1210      1472          move.b    (A0),D1
00000FFA  C2BC 0000 1473          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1474          move.l    D1,-(A7)
00001002  2F03      1475          move.l    D3,-(A7)
00001004  4879 0000 1476          pea       @lab3_20.L
00001008  40A2      
0000100A  4E92      1477          jsr       (A2)
0000100C  DEFC 000C 1478          add.w     #12,A7
                    1479   ; c = tolower(_getch());
00001010  2F00      1480          move.l    D0,-(A7)
00001012  4EB8 0B68 1481          jsr       __getch
00001016  2200      1482          move.l    D0,D1
00001018  201F      1483          move.l    (A7)+,D0
0000101A  2F01      1484          move.l    D1,-(A7)
0000101C  4EB9 0000 1485          jsr       _tolower
00001020  34D4      
00001022  584F      1486          addq.w    #4,A7
00001024  1400      1487          move.b    D0,D2
                    1488   ; if (c == (char)(0x1b))
00001026  0C02 001B 1489          cmp.b     #27,D2
0000102A  6604      1490          bne.s     MemoryChange_4
                    1491   ; return;                                // abort on escape
0000102C  6000 0090 1492          bra       MemoryChange_6
                    1493   MemoryChange_4:
                    1494   ; else if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1495          cmp.b     #48,D2
00001034  6506      1496          blo.s     MemoryChange_10
00001036  0C02 0039 1497          cmp.b     #57,D2
0000103A  6310      1498          bls.s     MemoryChange_9
                    1499   MemoryChange_10:
0000103C  0C02 0061 1500          cmp.b     #97,D2
00001040  6500 006E 1501          blo       MemoryChange_7
00001044  0C02 0066 1502          cmp.b     #102,D2
00001048  6200 0066 1503          bhi       MemoryChange_7
                    1504   MemoryChange_9:
                    1505   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1506          and.l     #255,D2
00001050  00FF      
00001052  2F02      1507          move.l    D2,-(A7)
00001054  4EB8 0BD2 1508          jsr       _xtod
00001058  584F      1509          addq.w    #4,A7
0000105A  C0BC 0000 1510          and.l     #255,D0
0000105E  00FF      
00001060  E980      1511          asl.l     #4,D0
00001062  2F00      1512          move.l    D0,-(A7)
00001064  2F01      1513          move.l    D1,-(A7)
00001066  4EB8 0B68 1514          jsr       __getch
0000106A  221F      1515          move.l    (A7)+,D1
0000106C  2F00      1516          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1517          jsr       _xtod
00001072  584F      1518          addq.w    #4,A7
00001074  2200      1519          move.l    D0,D1
00001076  201F      1520          move.l    (A7)+,D0
00001078  C2BC 0000 1521          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1522          or.l      D1,D0
00001080  2800      1523          move.l    D0,D4
                    1524   ; *RamPtr = (char)(Data);
00001082  2043      1525          move.l    D3,A0
00001084  1084      1526          move.b    D4,(A0)
                    1527   ; if (*RamPtr != Data) {
00001086  2043      1528          move.l    D3,A0
00001088  1010      1529          move.b    (A0),D0
0000108A  C0BC 0000 1530          and.l     #255,D0
0000108E  00FF      
00001090  B084      1531          cmp.l     D4,D0
00001092  671A      1532          beq.s     MemoryChange_11
                    1533   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr);
00001094  2043      1534          move.l    D3,A0
00001096  1210      1535          move.b    (A0),D1
00001098  C2BC 0000 1536          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1537          move.l    D1,-(A7)
000010A0  2F04      1538          move.l    D4,-(A7)
000010A2  4879 0000 1539          pea       @lab3_21.L
000010A6  40B4      
000010A8  4E92      1540          jsr       (A2)
000010AA  DEFC 000C 1541          add.w     #12,A7
                    1542   MemoryChange_11:
000010AE  6008      1543          bra.s     MemoryChange_13
                    1544   MemoryChange_7:
                    1545   ; }
                    1546   ; }
                    1547   ; else if (c == (char)('-'))
000010B0  0C02 002D 1548          cmp.b     #45,D2
000010B4  6602      1549          bne.s     MemoryChange_13
                    1550   ; RamPtr -= 2; ;
000010B6  5583      1551          subq.l    #2,D3
                    1552   MemoryChange_13:
                    1553   ; RamPtr++;
000010B8  5283      1554          addq.l    #1,D3
000010BA  6000 FF3A 1555          bra       MemoryChange_1
                    1556   MemoryChange_6:
000010BE  4CDF 041C 1557          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1558          rts
                    1559   ; }
                    1560   ; }
                    1561   ; /******************************************************************************************
                    1562   ; ** The following code is for the SPI controller
                    1563   ; *******************************************************************************************/
                    1564   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1565   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1566   ; int TestForSPITransmitDataComplete(void)    {
                    1567   _TestForSPITransmitDataComplete:
000010C4  4E56 FFFC 1568          link      A6,#-4
                    1569   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1570   ; int SPIF = SPI_Status >> 7;
000010C8  1039 0040 1571          move.b    4227106,D0
000010CC  8022      
000010CE  C0BC 0000 1572          and.l     #255,D0
000010D2  00FF      
000010D4  EE88      1573          lsr.l     #7,D0
000010D6  2D40 FFFC 1574          move.l    D0,-4(A6)
                    1575   ; return SPIF;
000010DA  202E FFFC 1576          move.l    -4(A6),D0
000010DE  4E5E      1577          unlk      A6
000010E0  4E75      1578          rts
                    1579   ; }
                    1580   ; /************************************************************************************
                    1581   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1582   ; ************************************************************************************/
                    1583   ; void SPI_Init(void)
                    1584   ; {
                    1585   _SPI_Init:
                    1586   ; //TODO
                    1587   ; //
                    1588   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1589   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1590   ; //
                    1591   ; // Here are some settings we want to create
                    1592   ; //
                    1593   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    1594   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1595   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    1596   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1597   ; SPI_Control = (unsigned char) 0x53; // 0101_0011
000010E2  13FC 0053 1598          move.b    #83,4227104
000010E6  0040 8020 
                    1599   ; SPI_Ext = (unsigned char) 0x00; // 00_0000_00
000010EA  4239 0040 1600          clr.b     4227110
000010EE  8026      
                    1601   ; Disable_SPI_CS();
000010F0  13FC 00FF 1602          move.b    #255,4227112
000010F4  0040 8028 
                    1603   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
000010F8  13FC 00C0 1604          move.b    #192,4227106
000010FC  0040 8022 
00001100  4E75      1605          rts
                    1606   ; }
                    1607   ; /************************************************************************************
                    1608   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1609   ; ************************************************************************************/
                    1610   ; void WaitForSPITransmitComplete(void)
                    1611   ; {
                    1612   _WaitForSPITransmitComplete:
                    1613   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1614   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1615   ; // just in case they were set
                    1616   ; while(!TestForSPITransmitDataComplete()) {}
                    1617   WaitForSPITransmitComplete_1:
00001102  4EB8 10C4 1618          jsr       _TestForSPITransmitDataComplete
00001106  4A80      1619          tst.l     D0
00001108  6602      1620          bne.s     WaitForSPITransmitComplete_3
0000110A  60F6      1621          bra       WaitForSPITransmitComplete_1
                    1622   WaitForSPITransmitComplete_3:
                    1623   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
0000110C  13FC 00C0 1624          move.b    #192,4227106
00001110  0040 8022 
00001114  4E75      1625          rts
                    1626   ; }
                    1627   ; /************************************************************************************
                    1628   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1629   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1630   ; ************************************************************************************/
                    1631   ; int WriteSPIChar(int c)
                    1632   ; {
                    1633   _WriteSPIChar:
00001116  4E56 FFFC 1634          link      A6,#-4
                    1635   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1636   ; // wait for completion of transmission
                    1637   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1638   ; // by reading fom the SPI controller Data Register.
                    1639   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1640   ; //
                    1641   ; // modify '0' below to return back read byte from data register
                    1642   ; //
                    1643   ; int read_data;
                    1644   ; SPI_Data = c;
0000111A  202E 0008 1645          move.l    8(A6),D0
0000111E  13C0 0040 1646          move.b    D0,4227108
00001122  8024      
                    1647   ; WaitForSPITransmitComplete();
00001124  4EB8 1102 1648          jsr       _WaitForSPITransmitComplete
                    1649   ; read_data = SPI_Data;
00001128  1039 0040 1650          move.b    4227108,D0
0000112C  8024      
0000112E  C0BC 0000 1651          and.l     #255,D0
00001132  00FF      
00001134  2D40 FFFC 1652          move.l    D0,-4(A6)
                    1653   ; return read_data;            
00001138  202E FFFC 1654          move.l    -4(A6),D0
0000113C  4E5E      1655          unlk      A6
0000113E  4E75      1656          rts
                    1657   ; }
                    1658   ; void SendFlashCmd(int cmd)
                    1659   ; {
                    1660   _SendFlashCmd:
00001140  4E56 0000 1661          link      A6,#0
                    1662   ; Enable_SPI_CS();
00001144  13FC 00FE 1663          move.b    #254,4227112
00001148  0040 8028 
                    1664   ; WriteSPIChar(cmd); 
0000114C  2F2E 0008 1665          move.l    8(A6),-(A7)
00001150  4EB8 1116 1666          jsr       _WriteSPIChar
00001154  584F      1667          addq.w    #4,A7
                    1668   ; Disable_SPI_CS();
00001156  13FC 00FF 1669          move.b    #255,4227112
0000115A  0040 8028 
0000115E  4E5E      1670          unlk      A6
00001160  4E75      1671          rts
                    1672   ; }
                    1673   ; void SendFlashCmdAndAddr(int cmd, int addr)
                    1674   ; {
                    1675   _SendFlashCmdAndAddr:
00001162  4E56 0000 1676          link      A6,#0
00001166  48E7 2020 1677          movem.l   D2/A2,-(A7)
0000116A  45F8 1116 1678          lea       _WriteSPIChar.L,A2
0000116E  242E 000C 1679          move.l    12(A6),D2
                    1680   ; WriteSPIChar(cmd);
00001172  2F2E 0008 1681          move.l    8(A6),-(A7)
00001176  4E92      1682          jsr       (A2)
00001178  584F      1683          addq.w    #4,A7
                    1684   ; WriteSPIChar(addr >> 16);
0000117A  2202      1685          move.l    D2,D1
0000117C  E081      1686          asr.l     #8,D1
0000117E  E081      1687          asr.l     #8,D1
00001180  2F01      1688          move.l    D1,-(A7)
00001182  4E92      1689          jsr       (A2)
00001184  584F      1690          addq.w    #4,A7
                    1691   ; WriteSPIChar(addr >> 8);
00001186  2202      1692          move.l    D2,D1
00001188  E081      1693          asr.l     #8,D1
0000118A  2F01      1694          move.l    D1,-(A7)
0000118C  4E92      1695          jsr       (A2)
0000118E  584F      1696          addq.w    #4,A7
                    1697   ; WriteSPIChar(addr);
00001190  2F02      1698          move.l    D2,-(A7)
00001192  4E92      1699          jsr       (A2)
00001194  584F      1700          addq.w    #4,A7
00001196  4CDF 0404 1701          movem.l   (A7)+,D2/A2
0000119A  4E5E      1702          unlk      A6
0000119C  4E75      1703          rts
                    1704   ; }
                    1705   ; void WaitFlashIdle(void)
                    1706   ; {
                    1707   _WaitFlashIdle:
                    1708   ; Enable_SPI_CS();
0000119E  13FC 00FE 1709          move.b    #254,4227112
000011A2  0040 8028 
                    1710   ; WriteSPIChar(0x05);  // read status
000011A6  4878 0005 1711          pea       5
000011AA  4EB8 1116 1712          jsr       _WriteSPIChar
000011AE  584F      1713          addq.w    #4,A7
                    1714   ; while(WriteSPIChar(0x00) & 0x01){}; // wait until idle
                    1715   WaitFlashIdle_1:
000011B0  42A7      1716          clr.l     -(A7)
000011B2  4EB8 1116 1717          jsr       _WriteSPIChar
000011B6  584F      1718          addq.w    #4,A7
000011B8  C0BC 0000 1719          and.l     #1,D0
000011BC  0001      
000011BE  6702      1720          beq.s     WaitFlashIdle_3
000011C0  60EE      1721          bra       WaitFlashIdle_1
                    1722   WaitFlashIdle_3:
                    1723   ; Disable_SPI_CS();
000011C2  13FC 00FF 1724          move.b    #255,4227112
000011C6  0040 8028 
000011CA  4E75      1725          rts
                    1726   ; }
                    1727   ; void EraseSPIFlashChip(void)
                    1728   ; {
                    1729   _EraseSPIFlashChip:
                    1730   ; SendFlashCmd(0x06);  // write enable
000011CC  4878 0006 1731          pea       6
000011D0  4EB8 1140 1732          jsr       _SendFlashCmd
000011D4  584F      1733          addq.w    #4,A7
                    1734   ; SendFlashCmd(0xC7);  // erase chip
000011D6  4878 00C7 1735          pea       199
000011DA  4EB8 1140 1736          jsr       _SendFlashCmd
000011DE  584F      1737          addq.w    #4,A7
                    1738   ; WaitFlashIdle();
000011E0  4EB8 119E 1739          jsr       _WaitFlashIdle
000011E4  4E75      1740          rts
                    1741   ; }
                    1742   ; void SPIFlashProgram(int AddressOffset, int ByteData)
                    1743   ; {
                    1744   _SPIFlashProgram:
000011E6  4E56 0000 1745          link      A6,#0
                    1746   ; SendFlashCmd(0x06);  // write enable
000011EA  4878 0006 1747          pea       6
000011EE  4EB8 1140 1748          jsr       _SendFlashCmd
000011F2  584F      1749          addq.w    #4,A7
                    1750   ; Enable_SPI_CS();
000011F4  13FC 00FE 1751          move.b    #254,4227112
000011F8  0040 8028 
                    1752   ; SendFlashCmdAndAddr(0x02, AddressOffset); // page program
000011FC  2F2E 0008 1753          move.l    8(A6),-(A7)
00001200  4878 0002 1754          pea       2
00001204  4EB8 1162 1755          jsr       _SendFlashCmdAndAddr
00001208  504F      1756          addq.w    #8,A7
                    1757   ; // if (AddressOffset == 0) {
                    1758   ; //     printf("ByteData: 0x%08x", ByteData);
                    1759   ; // }
                    1760   ; WriteSPIChar(ByteData); // write byte data
0000120A  2F2E 000C 1761          move.l    12(A6),-(A7)
0000120E  4EB8 1116 1762          jsr       _WriteSPIChar
00001212  584F      1763          addq.w    #4,A7
                    1764   ; Disable_SPI_CS();
00001214  13FC 00FF 1765          move.b    #255,4227112
00001218  0040 8028 
                    1766   ; WaitFlashIdle();  // wait idle
0000121C  4EB8 119E 1767          jsr       _WaitFlashIdle
00001220  4E5E      1768          unlk      A6
00001222  4E75      1769          rts
                    1770   ; }
                    1771   ; void WriteSPIFlashData(int FlashAddress, unsigned char *MemoryAddress, int size)
                    1772   ; {
                    1773   _WriteSPIFlashData:
00001224  4E56 0000 1774          link      A6,#0
00001228  2F02      1775          move.l    D2,-(A7)
                    1776   ; int addressOffset = 0;
0000122A  4282      1777          clr.l     D2
                    1778   ; for (addressOffset = 0; addressOffset < size; addressOffset++) {
0000122C  4282      1779          clr.l     D2
                    1780   WriteSPIFlashData_1:
0000122E  B4AE 0010 1781          cmp.l     16(A6),D2
00001232  6C00 0048 1782          bge       WriteSPIFlashData_3
                    1783   ; SPIFlashProgram(addressOffset + FlashAddress, MemoryAddress[addressOffset]);
00001236  206E 000C 1784          move.l    12(A6),A0
0000123A  1230 2800 1785          move.b    0(A0,D2.L),D1
0000123E  C2BC 0000 1786          and.l     #255,D1
00001242  00FF      
00001244  2F01      1787          move.l    D1,-(A7)
00001246  2202      1788          move.l    D2,D1
00001248  D2AE 0008 1789          add.l     8(A6),D1
0000124C  2F01      1790          move.l    D1,-(A7)
0000124E  4EB8 11E6 1791          jsr       _SPIFlashProgram
00001252  504F      1792          addq.w    #8,A7
                    1793   ; if (addressOffset % 2048 == 0){
00001254  2F02      1794          move.l    D2,-(A7)
00001256  4878 0800 1795          pea       2048
0000125A  4EB9 0000 1796          jsr       LDIV
0000125E  339C      
00001260  202F 0004 1797          move.l    4(A7),D0
00001264  504F      1798          addq.w    #8,A7
00001266  4A80      1799          tst.l     D0
00001268  660E      1800          bne.s     WriteSPIFlashData_4
                    1801   ; printf(".");
0000126A  4879 0000 1802          pea       @lab3_22.L
0000126E  40E8      
00001270  4EB9 0000 1803          jsr       _printf
00001274  3576      
00001276  584F      1804          addq.w    #4,A7
                    1805   WriteSPIFlashData_4:
00001278  5282      1806          addq.l    #1,D2
0000127A  60B2      1807          bra       WriteSPIFlashData_1
                    1808   WriteSPIFlashData_3:
0000127C  241F      1809          move.l    (A7)+,D2
0000127E  4E5E      1810          unlk      A6
00001280  4E75      1811          rts
                    1812   ; }
                    1813   ; }
                    1814   ; }
                    1815   ; int SPIFlashRead(int AddressOffset)
                    1816   ; {
                    1817   _SPIFlashRead:
00001282  4E56 FFFC 1818          link      A6,#-4
                    1819   ; int data;
                    1820   ; Enable_SPI_CS();
00001286  13FC 00FE 1821          move.b    #254,4227112
0000128A  0040 8028 
                    1822   ; SendFlashCmdAndAddr(0x03, AddressOffset); // read
0000128E  2F2E 0008 1823          move.l    8(A6),-(A7)
00001292  4878 0003 1824          pea       3
00001296  4EB8 1162 1825          jsr       _SendFlashCmdAndAddr
0000129A  504F      1826          addq.w    #8,A7
                    1827   ; data = WriteSPIChar(0x00); // dummy
0000129C  42A7      1828          clr.l     -(A7)
0000129E  4EB8 1116 1829          jsr       _WriteSPIChar
000012A2  584F      1830          addq.w    #4,A7
000012A4  2D40 FFFC 1831          move.l    D0,-4(A6)
                    1832   ; // if (AddressOffset == 0) {
                    1833   ; //     printf("ByteData: 0x%08x", data);
                    1834   ; // }
                    1835   ; Disable_SPI_CS();
000012A8  13FC 00FF 1836          move.b    #255,4227112
000012AC  0040 8028 
                    1837   ; return data;
000012B0  202E FFFC 1838          move.l    -4(A6),D0
000012B4  4E5E      1839          unlk      A6
000012B6  4E75      1840          rts
                    1841   ; }
                    1842   ; void ReadSPIFlashData(int FlashAddress, unsigned char *MemoryAddress, int size)
                    1843   ; {
                    1844   _ReadSPIFlashData:
000012B8  4E56 0000 1845          link      A6,#0
000012BC  2F02      1846          move.l    D2,-(A7)
                    1847   ; int addressOffset;
                    1848   ; for (addressOffset = 0; addressOffset < size; addressOffset++)
000012BE  4282      1849          clr.l     D2
                    1850   ReadSPIFlashData_1:
000012C0  B4AE 0010 1851          cmp.l     16(A6),D2
000012C4  6C1A      1852          bge.s     ReadSPIFlashData_3
                    1853   ; {
                    1854   ; MemoryAddress[addressOffset] = SPIFlashRead(FlashAddress+addressOffset);
000012C6  222E 0008 1855          move.l    8(A6),D1
000012CA  D282      1856          add.l     D2,D1
000012CC  2F01      1857          move.l    D1,-(A7)
000012CE  4EB8 1282 1858          jsr       _SPIFlashRead
000012D2  584F      1859          addq.w    #4,A7
000012D4  206E 000C 1860          move.l    12(A6),A0
000012D8  1180 2800 1861          move.b    D0,0(A0,D2.L)
000012DC  5282      1862          addq.l    #1,D2
000012DE  60E0      1863          bra       ReadSPIFlashData_1
                    1864   ReadSPIFlashData_3:
000012E0  241F      1865          move.l    (A7)+,D2
000012E2  4E5E      1866          unlk      A6
000012E4  4E75      1867          rts
                    1868   ; }
                    1869   ; }
                    1870   ; /*******************************************************************
                    1871   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1872   ; ********************************************************************/
                    1873   ; void ProgramFlashChip(void)
                    1874   ; {
                    1875   _ProgramFlashChip:
000012E6  4E56 FF00 1876          link      A6,#-256
000012EA  48E7 3C30 1877          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
000012EE  45F9 0000 1878          lea       _printf.L,A2
000012F2  3576      
000012F4  47EE FF00 1879          lea       -256(A6),A3
                    1880   ; //
                    1881   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1882   ; // TODO : then verify by reading it back and comparing to memory
                    1883   ; //
                    1884   ; unsigned char * dataPtr = 0x08000000;
000012F8  263C 0800 1885          move.l    #134217728,D3
000012FC  0000      
                    1886   ; int flashAddress = 0;
000012FE  4285      1887          clr.l     D5
                    1888   ; int i = 0;
00001300  4284      1889          clr.l     D4
                    1890   ; unsigned char readBuffer[256];
                    1891   ; int bufferOffset = 0;
00001302  4282      1892          clr.l     D2
                    1893   ; printf("\n\rErasing\n\r");
00001304  4879 0000 1894          pea       @lab3_23.L
00001308  40EA      
0000130A  4E92      1895          jsr       (A2)
0000130C  584F      1896          addq.w    #4,A7
                    1897   ; EraseSPIFlashChip();
0000130E  4EB8 11CC 1898          jsr       _EraseSPIFlashChip
                    1899   ; printf("Writing Program to memory \n\r");
00001312  4879 0000 1900          pea       @lab3_24.L
00001316  40F6      
00001318  4E92      1901          jsr       (A2)
0000131A  584F      1902          addq.w    #4,A7
                    1903   ; WriteSPIFlashData(0, dataPtr, 262144); // 256kB = 256 * 1024 = 262144
0000131C  4879 0004 1904          pea       262144
00001320  0000      
00001322  2F03      1905          move.l    D3,-(A7)
00001324  42A7      1906          clr.l     -(A7)
00001326  4EB8 1224 1907          jsr       _WriteSPIFlashData
0000132A  DEFC 000C 1908          add.w     #12,A7
                    1909   ; printf("Writing Done\n\r");
0000132E  4879 0000 1910          pea       @lab3_25.L
00001332  4114      
00001334  4E92      1911          jsr       (A2)
00001336  584F      1912          addq.w    #4,A7
                    1913   ; dataPtr = 0x08000000; // reset address
00001338  263C 0800 1914          move.l    #134217728,D3
0000133C  0000      
                    1915   ; printf("Reading Program from memory\n\r");
0000133E  4879 0000 1916          pea       @lab3_26.L
00001342  4124      
00001344  4E92      1917          jsr       (A2)
00001346  584F      1918          addq.w    #4,A7
                    1919   ; for (i = 0; i < 1024; i++) {
00001348  4284      1920          clr.l     D4
                    1921   ProgramFlashChip_1:
0000134A  0C84 0000 1922          cmp.l     #1024,D4
0000134E  0400      
00001350  6C00 0090 1923          bge       ProgramFlashChip_3
                    1924   ; ReadSPIFlashData(flashAddress, readBuffer, 256);
00001354  4878 0100 1925          pea       256
00001358  2F0B      1926          move.l    A3,-(A7)
0000135A  2F05      1927          move.l    D5,-(A7)
0000135C  4EB8 12B8 1928          jsr       _ReadSPIFlashData
00001360  DEFC 000C 1929          add.w     #12,A7
                    1930   ; for (bufferOffset = 0; bufferOffset < 256; bufferOffset++){
00001364  4282      1931          clr.l     D2
                    1932   ProgramFlashChip_4:
00001366  0C82 0000 1933          cmp.l     #256,D2
0000136A  0100      
0000136C  6C00 0042 1934          bge       ProgramFlashChip_6
                    1935   ; if (dataPtr[bufferOffset] != readBuffer[bufferOffset]){
00001370  2043      1936          move.l    D3,A0
00001372  1030 2800 1937          move.b    0(A0,D2.L),D0
00001376  B033 2800 1938          cmp.b     0(A3,D2.L),D0
0000137A  6730      1939          beq.s     ProgramFlashChip_7
                    1940   ; printf("\r\nERROR: DATA Mismatch at addr 0x%08x. WRITE: 0x%02x READ: 0x%02x\r\n", &dataPtr[bufferOffset], dataPtr[bufferOffset], readBuffer[bufferOffset]);
0000137C  1233 2800 1941          move.b    0(A3,D2.L),D1
00001380  C2BC 0000 1942          and.l     #255,D1
00001384  00FF      
00001386  2F01      1943          move.l    D1,-(A7)
00001388  2043      1944          move.l    D3,A0
0000138A  1230 2800 1945          move.b    0(A0,D2.L),D1
0000138E  C2BC 0000 1946          and.l     #255,D1
00001392  00FF      
00001394  2F01      1947          move.l    D1,-(A7)
00001396  2203      1948          move.l    D3,D1
00001398  D282      1949          add.l     D2,D1
0000139A  2F01      1950          move.l    D1,-(A7)
0000139C  4879 0000 1951          pea       @lab3_27.L
000013A0  4142      
000013A2  4E92      1952          jsr       (A2)
000013A4  DEFC 0010 1953          add.w     #16,A7
                    1954   ; return;
000013A8  6000 0042 1955          bra       ProgramFlashChip_9
                    1956   ProgramFlashChip_7:
000013AC  5282      1957          addq.l    #1,D2
000013AE  60B6      1958          bra       ProgramFlashChip_4
                    1959   ProgramFlashChip_6:
                    1960   ; }
                    1961   ; }
                    1962   ; flashAddress += 256;
000013B0  0685 0000 1963          add.l     #256,D5
000013B4  0100      
                    1964   ; dataPtr += 256;
000013B6  0683 0000 1965          add.l     #256,D3
000013BA  0100      
                    1966   ; if (i % 128 == 0){
000013BC  2F04      1967          move.l    D4,-(A7)
000013BE  4878 0080 1968          pea       128
000013C2  4EB9 0000 1969          jsr       LDIV
000013C6  339C      
000013C8  202F 0004 1970          move.l    4(A7),D0
000013CC  504F      1971          addq.w    #8,A7
000013CE  4A80      1972          tst.l     D0
000013D0  660A      1973          bne.s     ProgramFlashChip_10
                    1974   ; printf(".");
000013D2  4879 0000 1975          pea       @lab3_22.L
000013D6  40E8      
000013D8  4E92      1976          jsr       (A2)
000013DA  584F      1977          addq.w    #4,A7
                    1978   ProgramFlashChip_10:
000013DC  5284      1979          addq.l    #1,D4
000013DE  6000 FF6A 1980          bra       ProgramFlashChip_1
                    1981   ProgramFlashChip_3:
                    1982   ; }
                    1983   ; }
                    1984   ; printf("PASS\n\r");
000013E2  4879 0000 1985          pea       @lab3_28.L
000013E6  4186      
000013E8  4E92      1986          jsr       (A2)
000013EA  584F      1987          addq.w    #4,A7
                    1988   ProgramFlashChip_9:
000013EC  4CDF 0C3C 1989          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
000013F0  4E5E      1990          unlk      A6
000013F2  4E75      1991          rts
                    1992   ; }
                    1993   ; /*************************************************************************
                    1994   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1995   ; **************************************************************************/
                    1996   ; void LoadFromFlashChip(void)
                    1997   ; {
                    1998   _LoadFromFlashChip:
000013F4  4E56 FF00 1999          link      A6,#-256
000013F8  48E7 3C20 2000          movem.l   D2/D3/D4/D5/A2,-(A7)
000013FC  45F9 0000 2001          lea       _printf.L,A2
00001400  3576      
                    2002   ; unsigned int flashAddress = 0;
00001402  4285      2003          clr.l     D5
                    2004   ; unsigned char * dataPtr = 0x08000000;
00001404  283C 0800 2005          move.l    #134217728,D4
00001408  0000      
                    2006   ; unsigned int i = 0, j = 0;
0000140A  4283      2007          clr.l     D3
0000140C  4282      2008          clr.l     D2
                    2009   ; unsigned char readBuffer[256];
                    2010   ; printf("\r\nLoading Program From SPI Flash....");
0000140E  4879 0000 2011          pea       @lab3_29.L
00001412  418E      
00001414  4E92      2012          jsr       (A2)
00001416  584F      2013          addq.w    #4,A7
                    2014   ; //
                    2015   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2016   ; //
                    2017   ; for (i = 0; i < 1024; i++){
00001418  4283      2018          clr.l     D3
                    2019   LoadFromFlashChip_1:
0000141A  0C83 0000 2020          cmp.l     #1024,D3
0000141E  0400      
00001420  6400 0048 2021          bhs       LoadFromFlashChip_3
                    2022   ; ReadSPIFlashData(flashAddress, readBuffer, 256);
00001424  4878 0100 2023          pea       256
00001428  486E FF00 2024          pea       -256(A6)
0000142C  2F05      2025          move.l    D5,-(A7)
0000142E  4EB8 12B8 2026          jsr       _ReadSPIFlashData
00001432  DEFC 000C 2027          add.w     #12,A7
                    2028   ; for (j = 0; j < 256; j++){
00001436  4282      2029          clr.l     D2
                    2030   LoadFromFlashChip_4:
00001438  0C82 0000 2031          cmp.l     #256,D2
0000143C  0100      
0000143E  6410      2032          bhs.s     LoadFromFlashChip_6
                    2033   ; dataPtr[j] = readBuffer[j];
00001440  41EE FF00 2034          lea       -256(A6),A0
00001444  2244      2035          move.l    D4,A1
00001446  13B0 2800 2036          move.b    0(A0,D2.L),0(A1,D2.L)
0000144A  2800      
0000144C  5282      2037          addq.l    #1,D2
0000144E  60E8      2038          bra       LoadFromFlashChip_4
                    2039   LoadFromFlashChip_6:
                    2040   ; }
                    2041   ; dataPtr+=256;
00001450  0684 0000 2042          add.l     #256,D4
00001454  0100      
                    2043   ; flashAddress+=256;
00001456  0685 0000 2044          add.l     #256,D5
0000145A  0100      
                    2045   ; printf(".");
0000145C  4879 0000 2046          pea       @lab3_22.L
00001460  40E8      
00001462  4E92      2047          jsr       (A2)
00001464  584F      2048          addq.w    #4,A7
00001466  5283      2049          addq.l    #1,D3
00001468  60B0      2050          bra       LoadFromFlashChip_1
                    2051   LoadFromFlashChip_3:
                    2052   ; }
                    2053   ; printf("\r\nDone loading.\r\n");
0000146A  4879 0000 2054          pea       @lab3_30.L
0000146E  41B4      
00001470  4E92      2055          jsr       (A2)
00001472  584F      2056          addq.w    #4,A7
00001474  4CDF 043C 2057          movem.l   (A7)+,D2/D3/D4/D5/A2
00001478  4E5E      2058          unlk      A6
0000147A  4E75      2059          rts
                    2060   ; }
                    2061   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2062   ; // IMPORTANT
                    2063   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2064   ; // has to be done with an interrupt (IRQ Level 6)
                    2065   ; //
                    2066   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2067   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2068   ; //
                    2069   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2070   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2071   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2072   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2073   ; // program area
                    2074   ; //
                    2075   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2076   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2077   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2078   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2079   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2080   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2081   ; void DumpRegisters()
                    2082   ; {
                    2083   _DumpRegisters:
0000147C  48E7 3F3C 2084          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001480  45F9 0000 2085          lea       _putch.L,A2
00001484  3468      
00001486  47F9 0000 2086          lea       _printf.L,A3
0000148A  3576      
0000148C  49F9 0B00 2087          lea       _SR.L,A4
00001490  012C      
00001492  4BF9 0B00 2088          lea       _WatchPointString.L,A5
00001496  01C2      
                    2089   ; short i, x, j, k;
                    2090   ; unsigned char c, * BytePointer;
                    2091   ; // buld up strings for displaying watchpoints
                    2092   ; for (x = 0; x < (short)(8); x++)
00001498  4242      2093          clr.w     D2
                    2094   DumpRegisters_1:
0000149A  0C42 0008 2095          cmp.w     #8,D2
0000149E  6C00 01C6 2096          bge       DumpRegisters_3
                    2097   ; {
                    2098   ; if (WatchPointSetOrCleared[x] == 1)
000014A2  48C2      2099          ext.l     D2
000014A4  2002      2100          move.l    D2,D0
000014A6  E588      2101          lsl.l     #2,D0
000014A8  41F9 0B00 2102          lea       _WatchPointSetOrCleared.L,A0
000014AC  01A2      
000014AE  2030 0800 2103          move.l    0(A0,D0.L),D0
000014B2  0C80 0000 2104          cmp.l     #1,D0
000014B6  0001      
000014B8  6600 0186 2105          bne       DumpRegisters_4
                    2106   ; {
                    2107   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]);
000014BC  48C2      2108          ext.l     D2
000014BE  2202      2109          move.l    D2,D1
000014C0  E589      2110          lsl.l     #2,D1
000014C2  41F9 0B00 2111          lea       _WatchPointAddress.L,A0
000014C6  0182      
000014C8  2F30 1800 2112          move.l    0(A0,D1.L),-(A7)
000014CC  4879 0000 2113          pea       @lab3_31.L
000014D0  41C6      
000014D2  220D      2114          move.l    A5,D1
000014D4  48C2      2115          ext.l     D2
000014D6  2F00      2116          move.l    D0,-(A7)
000014D8  2002      2117          move.l    D2,D0
000014DA  C1FC 0064 2118          muls      #100,D0
000014DE  D280      2119          add.l     D0,D1
000014E0  201F      2120          move.l    (A7)+,D0
000014E2  2F01      2121          move.l    D1,-(A7)
000014E4  4EB9 0000 2122          jsr       _sprintf
000014E8  3500      
000014EA  DEFC 000C 2123          add.w     #12,A7
                    2124   ; BytePointer = (char*)(WatchPointAddress[x]);
000014EE  48C2      2125          ext.l     D2
000014F0  2002      2126          move.l    D2,D0
000014F2  E588      2127          lsl.l     #2,D0
000014F4  41F9 0B00 2128          lea       _WatchPointAddress.L,A0
000014F8  0182      
000014FA  2A30 0800 2129          move.l    0(A0,D0.L),D5
                    2130   ; for (j = 0; j < (short)(16); j += 2)
000014FE  4243      2131          clr.w     D3
                    2132   DumpRegisters_6:
00001500  0C43 0010 2133          cmp.w     #16,D3
00001504  6C00 0082 2134          bge       DumpRegisters_8
                    2135   ; {
                    2136   ; for (k = 0; k < (short)(2); k++)
00001508  4246      2137          clr.w     D6
                    2138   DumpRegisters_9:
0000150A  0C46 0002 2139          cmp.w     #2,D6
0000150E  6C00 0052 2140          bge       DumpRegisters_11
                    2141   ; {
                    2142   ; sprintf(TempString, "%02X", BytePointer[j + k]);
00001512  2045      2143          move.l    D5,A0
00001514  48C3      2144          ext.l     D3
00001516  2203      2145          move.l    D3,D1
00001518  48C6      2146          ext.l     D6
0000151A  D286      2147          add.l     D6,D1
0000151C  1230 1800 2148          move.b    0(A0,D1.L),D1
00001520  C2BC 0000 2149          and.l     #255,D1
00001524  00FF      
00001526  2F01      2150          move.l    D1,-(A7)
00001528  4879 0000 2151          pea       @lab3_8.L
0000152C  3F3E      
0000152E  4879 0B00 2152          pea       _TempString.L
00001532  04E2      
00001534  4EB9 0000 2153          jsr       _sprintf
00001538  3500      
0000153A  DEFC 000C 2154          add.w     #12,A7
                    2155   ; strcat(WatchPointString[x], TempString);
0000153E  4879 0B00 2156          pea       _TempString.L
00001542  04E2      
00001544  220D      2157          move.l    A5,D1
00001546  48C2      2158          ext.l     D2
00001548  2F00      2159          move.l    D0,-(A7)
0000154A  2002      2160          move.l    D2,D0
0000154C  C1FC 0064 2161          muls      #100,D0
00001550  D280      2162          add.l     D0,D1
00001552  201F      2163          move.l    (A7)+,D0
00001554  2F01      2164          move.l    D1,-(A7)
00001556  4EB9 0000 2165          jsr       _strcat
0000155A  3534      
0000155C  504F      2166          addq.w    #8,A7
0000155E  5246      2167          addq.w    #1,D6
00001560  60A8      2168          bra       DumpRegisters_9
                    2169   DumpRegisters_11:
                    2170   ; }
                    2171   ; strcat(WatchPointString[x], " ");
00001562  4879 0000 2172          pea       @lab3_32.L
00001566  41CE      
00001568  220D      2173          move.l    A5,D1
0000156A  48C2      2174          ext.l     D2
0000156C  2F00      2175          move.l    D0,-(A7)
0000156E  2002      2176          move.l    D2,D0
00001570  C1FC 0064 2177          muls      #100,D0
00001574  D280      2178          add.l     D0,D1
00001576  201F      2179          move.l    (A7)+,D0
00001578  2F01      2180          move.l    D1,-(A7)
0000157A  4EB9 0000 2181          jsr       _strcat
0000157E  3534      
00001580  504F      2182          addq.w    #8,A7
00001582  5443      2183          addq.w    #2,D3
00001584  6000 FF7A 2184          bra       DumpRegisters_6
                    2185   DumpRegisters_8:
                    2186   ; }
                    2187   ; strcat(WatchPointString[x], "  ");
00001588  4879 0000 2188          pea       @lab3_9.L
0000158C  3F44      
0000158E  220D      2189          move.l    A5,D1
00001590  48C2      2190          ext.l     D2
00001592  2F00      2191          move.l    D0,-(A7)
00001594  2002      2192          move.l    D2,D0
00001596  C1FC 0064 2193          muls      #100,D0
0000159A  D280      2194          add.l     D0,D1
0000159C  201F      2195          move.l    (A7)+,D0
0000159E  2F01      2196          move.l    D1,-(A7)
000015A0  4EB9 0000 2197          jsr       _strcat
000015A4  3534      
000015A6  504F      2198          addq.w    #8,A7
                    2199   ; BytePointer = (char*)(WatchPointAddress[x]);
000015A8  48C2      2200          ext.l     D2
000015AA  2002      2201          move.l    D2,D0
000015AC  E588      2202          lsl.l     #2,D0
000015AE  41F9 0B00 2203          lea       _WatchPointAddress.L,A0
000015B2  0182      
000015B4  2A30 0800 2204          move.l    0(A0,D0.L),D5
                    2205   ; for (j = 0; j < (short)(16); j++)
000015B8  4243      2206          clr.w     D3
                    2207   DumpRegisters_12:
000015BA  0C43 0010 2208          cmp.w     #16,D3
000015BE  6C00 007E 2209          bge       DumpRegisters_14
                    2210   ; {
                    2211   ; c = ((char)(BytePointer[j]) & 0x7f);
000015C2  2045      2212          move.l    D5,A0
000015C4  48C3      2213          ext.l     D3
000015C6  1030 3800 2214          move.b    0(A0,D3.L),D0
000015CA  C03C 007F 2215          and.b     #127,D0
000015CE  1E00      2216          move.b    D0,D7
                    2217   ; if ((c > (char)(0x7f)) || (c < (char)(' ')))
000015D0  0C07 007F 2218          cmp.b     #127,D7
000015D4  6206      2219          bhi.s     DumpRegisters_17
000015D6  0C07 0020 2220          cmp.b     #32,D7
000015DA  6416      2221          bhs.s     DumpRegisters_15
                    2222   DumpRegisters_17:
                    2223   ; sprintf(TempString, ".");
000015DC  4879 0000 2224          pea       @lab3_22.L
000015E0  40E8      
000015E2  4879 0B00 2225          pea       _TempString.L
000015E6  04E2      
000015E8  4EB9 0000 2226          jsr       _sprintf
000015EC  3500      
000015EE  504F      2227          addq.w    #8,A7
000015F0  6026      2228          bra.s     DumpRegisters_16
                    2229   DumpRegisters_15:
                    2230   ; else
                    2231   ; sprintf(TempString, "%c", BytePointer[j]);
000015F2  2045      2232          move.l    D5,A0
000015F4  48C3      2233          ext.l     D3
000015F6  1230 3800 2234          move.b    0(A0,D3.L),D1
000015FA  C2BC 0000 2235          and.l     #255,D1
000015FE  00FF      
00001600  2F01      2236          move.l    D1,-(A7)
00001602  4879 0000 2237          pea       @lab3_33.L
00001606  41D0      
00001608  4879 0B00 2238          pea       _TempString.L
0000160C  04E2      
0000160E  4EB9 0000 2239          jsr       _sprintf
00001612  3500      
00001614  DEFC 000C 2240          add.w     #12,A7
                    2241   DumpRegisters_16:
                    2242   ; strcat(WatchPointString[x], TempString);
00001618  4879 0B00 2243          pea       _TempString.L
0000161C  04E2      
0000161E  220D      2244          move.l    A5,D1
00001620  48C2      2245          ext.l     D2
00001622  2F00      2246          move.l    D0,-(A7)
00001624  2002      2247          move.l    D2,D0
00001626  C1FC 0064 2248          muls      #100,D0
0000162A  D280      2249          add.l     D0,D1
0000162C  201F      2250          move.l    (A7)+,D0
0000162E  2F01      2251          move.l    D1,-(A7)
00001630  4EB9 0000 2252          jsr       _strcat
00001634  3534      
00001636  504F      2253          addq.w    #8,A7
00001638  5243      2254          addq.w    #1,D3
0000163A  6000 FF7E 2255          bra       DumpRegisters_12
                    2256   DumpRegisters_14:
0000163E  6020      2257          bra.s     DumpRegisters_5
                    2258   DumpRegisters_4:
                    2259   ; }
                    2260   ; }
                    2261   ; else
                    2262   ; strcpy(WatchPointString[x], "");
00001640  4879 0000 2263          pea       @lab3_34.L
00001644  41D4      
00001646  220D      2264          move.l    A5,D1
00001648  48C2      2265          ext.l     D2
0000164A  2F00      2266          move.l    D0,-(A7)
0000164C  2002      2267          move.l    D2,D0
0000164E  C1FC 0064 2268          muls      #100,D0
00001652  D280      2269          add.l     D0,D1
00001654  201F      2270          move.l    (A7)+,D0
00001656  2F01      2271          move.l    D1,-(A7)
00001658  4EB9 0000 2272          jsr       _strcpy
0000165C  337A      
0000165E  504F      2273          addq.w    #8,A7
                    2274   DumpRegisters_5:
00001660  5242      2275          addq.w    #1,D2
00001662  6000 FE36 2276          bra       DumpRegisters_1
                    2277   DumpRegisters_3:
                    2278   ; }
                    2279   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X", d0, a0);
00001666  2F39 0B00 2280          move.l    _a0.L,-(A7)
0000166A  0104      
0000166C  2F39 0B00 2281          move.l    _d0.L,-(A7)
00001670  00E4      
00001672  4879 0000 2282          pea       @lab3_35.L
00001676  41D6      
00001678  4E93      2283          jsr       (A3)
0000167A  DEFC 000C 2284          add.w     #12,A7
                    2285   ; printf("\r\n D1 = $%08X  A1 = $%08X", d1, a1);
0000167E  2F39 0B00 2286          move.l    _a1.L,-(A7)
00001682  0108      
00001684  2F39 0B00 2287          move.l    _d1.L,-(A7)
00001688  00E8      
0000168A  4879 0000 2288          pea       @lab3_36.L
0000168E  41F2      
00001690  4E93      2289          jsr       (A3)
00001692  DEFC 000C 2290          add.w     #12,A7
                    2291   ; printf("\r\n D2 = $%08X  A2 = $%08X", d2, a2);
00001696  2F39 0B00 2292          move.l    _a2.L,-(A7)
0000169A  010C      
0000169C  2F39 0B00 2293          move.l    _d2.L,-(A7)
000016A0  00EC      
000016A2  4879 0000 2294          pea       @lab3_37.L
000016A6  420C      
000016A8  4E93      2295          jsr       (A3)
000016AA  DEFC 000C 2296          add.w     #12,A7
                    2297   ; printf("\r\n D3 = $%08X  A3 = $%08X", d3, a3);
000016AE  2F39 0B00 2298          move.l    _a3.L,-(A7)
000016B2  0110      
000016B4  2F39 0B00 2299          move.l    _d3.L,-(A7)
000016B8  00F0      
000016BA  4879 0000 2300          pea       @lab3_38.L
000016BE  4226      
000016C0  4E93      2301          jsr       (A3)
000016C2  DEFC 000C 2302          add.w     #12,A7
                    2303   ; printf("\r\n D4 = $%08X  A4 = $%08X", d4, a4);
000016C6  2F39 0B00 2304          move.l    _a4.L,-(A7)
000016CA  0114      
000016CC  2F39 0B00 2305          move.l    _d4.L,-(A7)
000016D0  00F4      
000016D2  4879 0000 2306          pea       @lab3_39.L
000016D6  4240      
000016D8  4E93      2307          jsr       (A3)
000016DA  DEFC 000C 2308          add.w     #12,A7
                    2309   ; printf("\r\n D5 = $%08X  A5 = $%08X", d5, a5);
000016DE  2F39 0B00 2310          move.l    _a5.L,-(A7)
000016E2  0118      
000016E4  2F39 0B00 2311          move.l    _d5.L,-(A7)
000016E8  00F8      
000016EA  4879 0000 2312          pea       @lab3_40.L
000016EE  425A      
000016F0  4E93      2313          jsr       (A3)
000016F2  DEFC 000C 2314          add.w     #12,A7
                    2315   ; printf("\r\n D6 = $%08X  A6 = $%08X", d6, a6);
000016F6  2F39 0B00 2316          move.l    _a6.L,-(A7)
000016FA  011C      
000016FC  2F39 0B00 2317          move.l    _d6.L,-(A7)
00001700  00FC      
00001702  4879 0000 2318          pea       @lab3_41.L
00001706  4274      
00001708  4E93      2319          jsr       (A3)
0000170A  DEFC 000C 2320          add.w     #12,A7
                    2321   ; printf("\r\n D7 = $%08X  A7 = $%08X", d7, ((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP);
0000170E  3214      2322          move.w    (A4),D1
00001710  C27C 2000 2323          and.w     #8192,D1
00001714  0C41 2000 2324          cmp.w     #8192,D1
00001718  6608      2325          bne.s     DumpRegisters_18
0000171A  2239 0B00 2326          move.l    _SSP.L,D1
0000171E  0124      
00001720  6006      2327          bra.s     DumpRegisters_19
                    2328   DumpRegisters_18:
00001722  2239 0B00 2329          move.l    _USP.L,D1
00001726  0128      
                    2330   DumpRegisters_19:
00001728  2F01      2331          move.l    D1,-(A7)
0000172A  2F39 0B00 2332          move.l    _d7.L,-(A7)
0000172E  0100      
00001730  4879 0000 2333          pea       @lab3_42.L
00001734  428E      
00001736  4E93      2334          jsr       (A3)
00001738  DEFC 000C 2335          add.w     #12,A7
                    2336   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP);
0000173C  2F39 0B00 2337          move.l    _USP.L,-(A7)
00001740  0128      
00001742  4879 0000 2338          pea       @lab3_43.L
00001746  42A8      
00001748  4E93      2339          jsr       (A3)
0000174A  504F      2340          addq.w    #8,A7
                    2341   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP);
0000174C  2F39 0B00 2342          move.l    _SSP.L,-(A7)
00001750  0124      
00001752  4879 0000 2343          pea       @lab3_44.L
00001756  42C6      
00001758  4E93      2344          jsr       (A3)
0000175A  504F      2345          addq.w    #8,A7
                    2346   ; printf("\r\n SR = $%04X   ", SR);
0000175C  3214      2347          move.w    (A4),D1
0000175E  C2BC 0000 2348          and.l     #65535,D1
00001762  FFFF      
00001764  2F01      2349          move.l    D1,-(A7)
00001766  4879 0000 2350          pea       @lab3_45.L
0000176A  42E8      
0000176C  4E93      2351          jsr       (A3)
0000176E  504F      2352          addq.w    #8,A7
                    2353   ; // display the status word in characters etc.
                    2354   ; printf("   [");
00001770  4879 0000 2355          pea       @lab3_46.L
00001774  42FA      
00001776  4E93      2356          jsr       (A3)
00001778  584F      2357          addq.w    #4,A7
                    2358   ; if ((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T'); else putchar('-');      // Trace bit(bit 15)
0000177A  3014      2359          move.w    (A4),D0
0000177C  C07C 8000 2360          and.w     #32768,D0
00001780  0C40 8000 2361          cmp.w     #32768,D0
00001784  660A      2362          bne.s     DumpRegisters_20
00001786  4878 0054 2363          pea       84
0000178A  4E92      2364          jsr       (A2)
0000178C  584F      2365          addq.w    #4,A7
0000178E  6008      2366          bra.s     DumpRegisters_21
                    2367   DumpRegisters_20:
00001790  4878 002D 2368          pea       45
00001794  4E92      2369          jsr       (A2)
00001796  584F      2370          addq.w    #4,A7
                    2371   DumpRegisters_21:
                    2372   ; if ((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S'); else putchar('U');      // supervisor bit  (bit 13)
00001798  3014      2373          move.w    (A4),D0
0000179A  C07C 2000 2374          and.w     #8192,D0
0000179E  0C40 2000 2375          cmp.w     #8192,D0
000017A2  660A      2376          bne.s     DumpRegisters_22
000017A4  4878 0053 2377          pea       83
000017A8  4E92      2378          jsr       (A2)
000017AA  584F      2379          addq.w    #4,A7
000017AC  6008      2380          bra.s     DumpRegisters_23
                    2381   DumpRegisters_22:
000017AE  4878 0055 2382          pea       85
000017B2  4E92      2383          jsr       (A2)
000017B4  584F      2384          addq.w    #4,A7
                    2385   DumpRegisters_23:
                    2386   ; if ((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1'); else putchar('0');      // IRQ2 Bit (bit 10)
000017B6  3014      2387          move.w    (A4),D0
000017B8  C07C 0400 2388          and.w     #1024,D0
000017BC  0C40 0400 2389          cmp.w     #1024,D0
000017C0  660A      2390          bne.s     DumpRegisters_24
000017C2  4878 0031 2391          pea       49
000017C6  4E92      2392          jsr       (A2)
000017C8  584F      2393          addq.w    #4,A7
000017CA  6008      2394          bra.s     DumpRegisters_25
                    2395   DumpRegisters_24:
000017CC  4878 0030 2396          pea       48
000017D0  4E92      2397          jsr       (A2)
000017D2  584F      2398          addq.w    #4,A7
                    2399   DumpRegisters_25:
                    2400   ; if ((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1'); else putchar('0');      // IRQ1 Bit (bit 9)
000017D4  3014      2401          move.w    (A4),D0
000017D6  C07C 0200 2402          and.w     #512,D0
000017DA  0C40 0200 2403          cmp.w     #512,D0
000017DE  660A      2404          bne.s     DumpRegisters_26
000017E0  4878 0031 2405          pea       49
000017E4  4E92      2406          jsr       (A2)
000017E6  584F      2407          addq.w    #4,A7
000017E8  6008      2408          bra.s     DumpRegisters_27
                    2409   DumpRegisters_26:
000017EA  4878 0030 2410          pea       48
000017EE  4E92      2411          jsr       (A2)
000017F0  584F      2412          addq.w    #4,A7
                    2413   DumpRegisters_27:
                    2414   ; if ((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1'); else putchar('0');      // IRQ0 Bit (bit 8)
000017F2  3014      2415          move.w    (A4),D0
000017F4  C07C 0100 2416          and.w     #256,D0
000017F8  0C40 0100 2417          cmp.w     #256,D0
000017FC  660A      2418          bne.s     DumpRegisters_28
000017FE  4878 0031 2419          pea       49
00001802  4E92      2420          jsr       (A2)
00001804  584F      2421          addq.w    #4,A7
00001806  6008      2422          bra.s     DumpRegisters_29
                    2423   DumpRegisters_28:
00001808  4878 0030 2424          pea       48
0000180C  4E92      2425          jsr       (A2)
0000180E  584F      2426          addq.w    #4,A7
                    2427   DumpRegisters_29:
                    2428   ; if ((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X'); else putchar('-');      // X Bit (bit 4)
00001810  3014      2429          move.w    (A4),D0
00001812  C07C 0010 2430          and.w     #16,D0
00001816  0C40 0010 2431          cmp.w     #16,D0
0000181A  660A      2432          bne.s     DumpRegisters_30
0000181C  4878 0058 2433          pea       88
00001820  4E92      2434          jsr       (A2)
00001822  584F      2435          addq.w    #4,A7
00001824  6008      2436          bra.s     DumpRegisters_31
                    2437   DumpRegisters_30:
00001826  4878 002D 2438          pea       45
0000182A  4E92      2439          jsr       (A2)
0000182C  584F      2440          addq.w    #4,A7
                    2441   DumpRegisters_31:
                    2442   ; if ((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N'); else putchar('-');      // N Bit (bit 3)
0000182E  3014      2443          move.w    (A4),D0
00001830  C07C 0008 2444          and.w     #8,D0
00001834  0C40 0008 2445          cmp.w     #8,D0
00001838  660A      2446          bne.s     DumpRegisters_32
0000183A  4878 004E 2447          pea       78
0000183E  4E92      2448          jsr       (A2)
00001840  584F      2449          addq.w    #4,A7
00001842  6008      2450          bra.s     DumpRegisters_33
                    2451   DumpRegisters_32:
00001844  4878 002D 2452          pea       45
00001848  4E92      2453          jsr       (A2)
0000184A  584F      2454          addq.w    #4,A7
                    2455   DumpRegisters_33:
                    2456   ; if ((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z'); else putchar('-');      // Z Bit (bit 2)
0000184C  3014      2457          move.w    (A4),D0
0000184E  C07C 0004 2458          and.w     #4,D0
00001852  0C40 0004 2459          cmp.w     #4,D0
00001856  660A      2460          bne.s     DumpRegisters_34
00001858  4878 005A 2461          pea       90
0000185C  4E92      2462          jsr       (A2)
0000185E  584F      2463          addq.w    #4,A7
00001860  6008      2464          bra.s     DumpRegisters_35
                    2465   DumpRegisters_34:
00001862  4878 002D 2466          pea       45
00001866  4E92      2467          jsr       (A2)
00001868  584F      2468          addq.w    #4,A7
                    2469   DumpRegisters_35:
                    2470   ; if ((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V'); else putchar('-');      // V Bit (bit 1)
0000186A  3014      2471          move.w    (A4),D0
0000186C  C07C 0002 2472          and.w     #2,D0
00001870  0C40 0002 2473          cmp.w     #2,D0
00001874  660A      2474          bne.s     DumpRegisters_36
00001876  4878 0056 2475          pea       86
0000187A  4E92      2476          jsr       (A2)
0000187C  584F      2477          addq.w    #4,A7
0000187E  6008      2478          bra.s     DumpRegisters_37
                    2479   DumpRegisters_36:
00001880  4878 002D 2480          pea       45
00001884  4E92      2481          jsr       (A2)
00001886  584F      2482          addq.w    #4,A7
                    2483   DumpRegisters_37:
                    2484   ; if ((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C'); else putchar('-');      // C Bit (bit 0)
00001888  3014      2485          move.w    (A4),D0
0000188A  C07C 0001 2486          and.w     #1,D0
0000188E  0C40 0001 2487          cmp.w     #1,D0
00001892  660A      2488          bne.s     DumpRegisters_38
00001894  4878 0043 2489          pea       67
00001898  4E92      2490          jsr       (A2)
0000189A  584F      2491          addq.w    #4,A7
0000189C  6008      2492          bra.s     DumpRegisters_39
                    2493   DumpRegisters_38:
0000189E  4878 002D 2494          pea       45
000018A2  4E92      2495          jsr       (A2)
000018A4  584F      2496          addq.w    #4,A7
                    2497   DumpRegisters_39:
                    2498   ; putchar(']');
000018A6  4878 005D 2499          pea       93
000018AA  4E92      2500          jsr       (A2)
000018AC  584F      2501          addq.w    #4,A7
                    2502   ; printf("\r\n PC = $%08X  ", PC);
000018AE  2F39 0B00 2503          move.l    _PC.L,-(A7)
000018B2  0120      
000018B4  4879 0000 2504          pea       @lab3_47.L
000018B8  4300      
000018BA  4E93      2505          jsr       (A3)
000018BC  504F      2506          addq.w    #8,A7
                    2507   ; if (*(unsigned short int*)(PC) == 0x4e4e)
000018BE  2039 0B00 2508          move.l    _PC.L,D0
000018C2  0120      
000018C4  2040      2509          move.l    D0,A0
000018C6  3010      2510          move.w    (A0),D0
000018C8  0C40 4E4E 2511          cmp.w     #20046,D0
000018CC  660A      2512          bne.s     DumpRegisters_40
                    2513   ; printf("[@ BREAKPOINT]");
000018CE  4879 0000 2514          pea       @lab3_48.L
000018D2  4310      
000018D4  4E93      2515          jsr       (A3)
000018D6  584F      2516          addq.w    #4,A7
                    2517   DumpRegisters_40:
                    2518   ; printf("\r\n");
000018D8  4879 0000 2519          pea       @lab3_1.L
000018DC  3EC6      
000018DE  4E93      2520          jsr       (A3)
000018E0  584F      2521          addq.w    #4,A7
                    2522   ; for (i = 0; i < 8; i++) {
000018E2  4244      2523          clr.w     D4
                    2524   DumpRegisters_42:
000018E4  0C44 0008 2525          cmp.w     #8,D4
000018E8  6C00 0040 2526          bge       DumpRegisters_44
                    2527   ; if (WatchPointSetOrCleared[i] == 1)
000018EC  48C4      2528          ext.l     D4
000018EE  2004      2529          move.l    D4,D0
000018F0  E588      2530          lsl.l     #2,D0
000018F2  41F9 0B00 2531          lea       _WatchPointSetOrCleared.L,A0
000018F6  01A2      
000018F8  2030 0800 2532          move.l    0(A0,D0.L),D0
000018FC  0C80 0000 2533          cmp.l     #1,D0
00001900  0001      
00001902  6622      2534          bne.s     DumpRegisters_45
                    2535   ; printf("\r\nWP%d = %s", i, WatchPointString[i]);
00001904  220D      2536          move.l    A5,D1
00001906  48C4      2537          ext.l     D4
00001908  2F00      2538          move.l    D0,-(A7)
0000190A  2004      2539          move.l    D4,D0
0000190C  C1FC 0064 2540          muls      #100,D0
00001910  D280      2541          add.l     D0,D1
00001912  201F      2542          move.l    (A7)+,D0
00001914  2F01      2543          move.l    D1,-(A7)
00001916  48C4      2544          ext.l     D4
00001918  2F04      2545          move.l    D4,-(A7)
0000191A  4879 0000 2546          pea       @lab3_49.L
0000191E  4320      
00001920  4E93      2547          jsr       (A3)
00001922  DEFC 000C 2548          add.w     #12,A7
                    2549   DumpRegisters_45:
00001926  5244      2550          addq.w    #1,D4
00001928  60BA      2551          bra       DumpRegisters_42
                    2552   DumpRegisters_44:
0000192A  4CDF 3CFC 2553          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000192E  4E75      2554          rts
                    2555   ; }
                    2556   ; }
                    2557   ; // Trace Exception Handler
                    2558   ; void DumpRegistersandPause(void)
                    2559   ; {
                    2560   _DumpRegistersandPause:
00001930  2F0A      2561          move.l    A2,-(A7)
00001932  45F9 0000 2562          lea       _printf.L,A2
00001936  3576      
                    2563   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]");
00001938  4879 0000 2564          pea       @lab3_50.L
0000193C  432C      
0000193E  4E92      2565          jsr       (A2)
00001940  584F      2566          addq.w    #4,A7
                    2567   ; printf("\r\nBreak Points :[Disabled]");
00001942  4879 0000 2568          pea       @lab3_51.L
00001946  434C      
00001948  4E92      2569          jsr       (A2)
0000194A  584F      2570          addq.w    #4,A7
                    2571   ; DumpRegisters();
0000194C  4EB8 147C 2572          jsr       _DumpRegisters
                    2573   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001950  4879 0000 2574          pea       @lab3_52.L
00001954  4368      
00001956  4E92      2575          jsr       (A2)
00001958  584F      2576          addq.w    #4,A7
                    2577   ; printf("\r\nPress <ESC> to Resume Program");
0000195A  4879 0000 2578          pea       @lab3_53.L
0000195E  4394      
00001960  4E92      2579          jsr       (A2)
00001962  584F      2580          addq.w    #4,A7
                    2581   ; menu();
00001964  4EB9 0000 2582          jsr       _menu
00001968  2514      
0000196A  245F      2583          move.l    (A7)+,A2
0000196C  4E75      2584          rts
                    2585   ; }
                    2586   ; void ChangeRegisters(void)
                    2587   ; {
                    2588   _ChangeRegisters:
0000196E  4E56 FFFC 2589          link      A6,#-4
00001972  48E7 303C 2590          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001976  45F9 0000 2591          lea       _printf.L,A2
0000197A  3576      
0000197C  47EE FFFC 2592          lea       -4(A6),A3
00001980  49F8 0CA4 2593          lea       _Get8HexDigits.L,A4
00001984  4BF8 0B68 2594          lea       __getch.L,A5
                    2595   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2596   ; int reg_val;
                    2597   ; char c, reg[3];
                    2598   ; reg[0] = tolower(_getch());
00001988  2F00      2599          move.l    D0,-(A7)
0000198A  4E95      2600          jsr       (A5)
0000198C  2200      2601          move.l    D0,D1
0000198E  201F      2602          move.l    (A7)+,D0
00001990  2F01      2603          move.l    D1,-(A7)
00001992  4EB9 0000 2604          jsr       _tolower
00001996  34D4      
00001998  584F      2605          addq.w    #4,A7
0000199A  1680      2606          move.b    D0,(A3)
                    2607   ; reg[1] = c = tolower(_getch());
0000199C  2F00      2608          move.l    D0,-(A7)
0000199E  4E95      2609          jsr       (A5)
000019A0  2200      2610          move.l    D0,D1
000019A2  201F      2611          move.l    (A7)+,D0
000019A4  2F01      2612          move.l    D1,-(A7)
000019A6  4EB9 0000 2613          jsr       _tolower
000019AA  34D4      
000019AC  584F      2614          addq.w    #4,A7
000019AE  1400      2615          move.b    D0,D2
000019B0  1740 0001 2616          move.b    D0,1(A3)
                    2617   ; if (reg[0] == (char)('d')) {    // change data register
000019B4  1013      2618          move.b    (A3),D0
000019B6  0C00 0064 2619          cmp.b     #100,D0
000019BA  6600 00AE 2620          bne       ChangeRegisters_1
                    2621   ; if ((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000019BE  102B 0001 2622          move.b    1(A3),D0
000019C2  0C00 0037 2623          cmp.b     #55,D0
000019C6  6E0A      2624          bgt.s     ChangeRegisters_5
000019C8  102B 0001 2625          move.b    1(A3),D0
000019CC  0C00 0030 2626          cmp.b     #48,D0
000019D0  6C0E      2627          bge.s     ChangeRegisters_3
                    2628   ChangeRegisters_5:
                    2629   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n");
000019D2  4879 0000 2630          pea       @lab3_54.L
000019D6  43B4      
000019D8  4E92      2631          jsr       (A2)
000019DA  584F      2632          addq.w    #4,A7
                    2633   ; return;
000019DC  6000 0244 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_3:
                    2636   ; }
                    2637   ; else {
                    2638   ; printf("\r\nD%c = ", c);
000019E0  4882      2639          ext.w     D2
000019E2  48C2      2640          ext.l     D2
000019E4  2F02      2641          move.l    D2,-(A7)
000019E6  4879 0000 2642          pea       @lab3_55.L
000019EA  43E0      
000019EC  4E92      2643          jsr       (A2)
000019EE  504F      2644          addq.w    #8,A7
                    2645   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
000019F0  42A7      2646          clr.l     -(A7)
000019F2  4E94      2647          jsr       (A4)
000019F4  584F      2648          addq.w    #4,A7
000019F6  2600      2649          move.l    D0,D3
                    2650   ; }
                    2651   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2652   ; if (c == (char)('0'))
000019F8  0C02 0030 2653          cmp.b     #48,D2
000019FC  660A      2654          bne.s     ChangeRegisters_7
                    2655   ; d0 = reg_val;
000019FE  23C3 0B00 2656          move.l    D3,_d0.L
00001A02  00E4      
00001A04  6000 0060 2657          bra       ChangeRegisters_20
                    2658   ChangeRegisters_7:
                    2659   ; else if (c == (char)('1'))
00001A08  0C02 0031 2660          cmp.b     #49,D2
00001A0C  660A      2661          bne.s     ChangeRegisters_9
                    2662   ; d1 = reg_val;
00001A0E  23C3 0B00 2663          move.l    D3,_d1.L
00001A12  00E8      
00001A14  6000 0050 2664          bra       ChangeRegisters_20
                    2665   ChangeRegisters_9:
                    2666   ; else if (c == (char)('2'))
00001A18  0C02 0032 2667          cmp.b     #50,D2
00001A1C  660A      2668          bne.s     ChangeRegisters_11
                    2669   ; d2 = reg_val;
00001A1E  23C3 0B00 2670          move.l    D3,_d2.L
00001A22  00EC      
00001A24  6000 0040 2671          bra       ChangeRegisters_20
                    2672   ChangeRegisters_11:
                    2673   ; else if (c == (char)('3'))
00001A28  0C02 0033 2674          cmp.b     #51,D2
00001A2C  6608      2675          bne.s     ChangeRegisters_13
                    2676   ; d3 = reg_val;
00001A2E  23C3 0B00 2677          move.l    D3,_d3.L
00001A32  00F0      
00001A34  6030      2678          bra.s     ChangeRegisters_20
                    2679   ChangeRegisters_13:
                    2680   ; else if (c == (char)('4'))
00001A36  0C02 0034 2681          cmp.b     #52,D2
00001A3A  6608      2682          bne.s     ChangeRegisters_15
                    2683   ; d4 = reg_val;
00001A3C  23C3 0B00 2684          move.l    D3,_d4.L
00001A40  00F4      
00001A42  6022      2685          bra.s     ChangeRegisters_20
                    2686   ChangeRegisters_15:
                    2687   ; else if (c == (char)('5'))
00001A44  0C02 0035 2688          cmp.b     #53,D2
00001A48  6608      2689          bne.s     ChangeRegisters_17
                    2690   ; d5 = reg_val;
00001A4A  23C3 0B00 2691          move.l    D3,_d5.L
00001A4E  00F8      
00001A50  6014      2692          bra.s     ChangeRegisters_20
                    2693   ChangeRegisters_17:
                    2694   ; else if (c == (char)('6'))
00001A52  0C02 0036 2695          cmp.b     #54,D2
00001A56  6608      2696          bne.s     ChangeRegisters_19
                    2697   ; d6 = reg_val;
00001A58  23C3 0B00 2698          move.l    D3,_d6.L
00001A5C  00FC      
00001A5E  6006      2699          bra.s     ChangeRegisters_20
                    2700   ChangeRegisters_19:
                    2701   ; else
                    2702   ; d7 = reg_val;
00001A60  23C3 0B00 2703          move.l    D3,_d7.L
00001A64  0100      
                    2704   ChangeRegisters_20:
00001A66  6000 01B6 2705          bra       ChangeRegisters_51
                    2706   ChangeRegisters_1:
                    2707   ; }
                    2708   ; else if (reg[0] == (char)('a')) {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001A6A  1013      2709          move.b    (A3),D0
00001A6C  0C00 0061 2710          cmp.b     #97,D0
00001A70  6600 00A6 2711          bne       ChangeRegisters_21
                    2712   ; if ((c > (char)('7')) || (c < (char)('0'))) {
00001A74  0C02 0037 2713          cmp.b     #55,D2
00001A78  6E06      2714          bgt.s     ChangeRegisters_25
00001A7A  0C02 0030 2715          cmp.b     #48,D2
00001A7E  6C0E      2716          bge.s     ChangeRegisters_23
                    2717   ChangeRegisters_25:
                    2718   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n");
00001A80  4879 0000 2719          pea       @lab3_56.L
00001A84  43EA      
00001A86  4E92      2720          jsr       (A2)
00001A88  584F      2721          addq.w    #4,A7
                    2722   ; return;
00001A8A  6000 0196 2723          bra       ChangeRegisters_6
                    2724   ChangeRegisters_23:
                    2725   ; }
                    2726   ; else {
                    2727   ; printf("\r\nA%c = ", c);
00001A8E  4882      2728          ext.w     D2
00001A90  48C2      2729          ext.l     D2
00001A92  2F02      2730          move.l    D2,-(A7)
00001A94  4879 0000 2731          pea       @lab3_57.L
00001A98  4418      
00001A9A  4E92      2732          jsr       (A2)
00001A9C  504F      2733          addq.w    #8,A7
                    2734   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001A9E  42A7      2735          clr.l     -(A7)
00001AA0  4E94      2736          jsr       (A4)
00001AA2  584F      2737          addq.w    #4,A7
00001AA4  2600      2738          move.l    D0,D3
                    2739   ; }
                    2740   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2741   ; if (c == (char)('0'))
00001AA6  0C02 0030 2742          cmp.b     #48,D2
00001AAA  660A      2743          bne.s     ChangeRegisters_26
                    2744   ; a0 = reg_val;
00001AAC  23C3 0B00 2745          move.l    D3,_a0.L
00001AB0  0104      
00001AB2  6000 0060 2746          bra       ChangeRegisters_39
                    2747   ChangeRegisters_26:
                    2748   ; else if (c == (char)('1'))
00001AB6  0C02 0031 2749          cmp.b     #49,D2
00001ABA  660A      2750          bne.s     ChangeRegisters_28
                    2751   ; a1 = reg_val;
00001ABC  23C3 0B00 2752          move.l    D3,_a1.L
00001AC0  0108      
00001AC2  6000 0050 2753          bra       ChangeRegisters_39
                    2754   ChangeRegisters_28:
                    2755   ; else if (c == (char)('2'))
00001AC6  0C02 0032 2756          cmp.b     #50,D2
00001ACA  660A      2757          bne.s     ChangeRegisters_30
                    2758   ; a2 = reg_val;
00001ACC  23C3 0B00 2759          move.l    D3,_a2.L
00001AD0  010C      
00001AD2  6000 0040 2760          bra       ChangeRegisters_39
                    2761   ChangeRegisters_30:
                    2762   ; else if (c == (char)('3'))
00001AD6  0C02 0033 2763          cmp.b     #51,D2
00001ADA  6608      2764          bne.s     ChangeRegisters_32
                    2765   ; a3 = reg_val;
00001ADC  23C3 0B00 2766          move.l    D3,_a3.L
00001AE0  0110      
00001AE2  6030      2767          bra.s     ChangeRegisters_39
                    2768   ChangeRegisters_32:
                    2769   ; else if (c == (char)('4'))
00001AE4  0C02 0034 2770          cmp.b     #52,D2
00001AE8  6608      2771          bne.s     ChangeRegisters_34
                    2772   ; a4 = reg_val;
00001AEA  23C3 0B00 2773          move.l    D3,_a4.L
00001AEE  0114      
00001AF0  6022      2774          bra.s     ChangeRegisters_39
                    2775   ChangeRegisters_34:
                    2776   ; else if (c == (char)('5'))
00001AF2  0C02 0035 2777          cmp.b     #53,D2
00001AF6  6608      2778          bne.s     ChangeRegisters_36
                    2779   ; a5 = reg_val;
00001AF8  23C3 0B00 2780          move.l    D3,_a5.L
00001AFC  0118      
00001AFE  6014      2781          bra.s     ChangeRegisters_39
                    2782   ChangeRegisters_36:
                    2783   ; else if (c == (char)('6'))
00001B00  0C02 0036 2784          cmp.b     #54,D2
00001B04  6608      2785          bne.s     ChangeRegisters_38
                    2786   ; a6 = reg_val;
00001B06  23C3 0B00 2787          move.l    D3,_a6.L
00001B0A  011C      
00001B0C  6006      2788          bra.s     ChangeRegisters_39
                    2789   ChangeRegisters_38:
                    2790   ; else
                    2791   ; USP = reg_val;
00001B0E  23C3 0B00 2792          move.l    D3,_USP.L
00001B12  0128      
                    2793   ChangeRegisters_39:
00001B14  6000 0108 2794          bra       ChangeRegisters_51
                    2795   ChangeRegisters_21:
                    2796   ; }
                    2797   ; else if ((reg[0] == (char)('u')) && (c == (char)('s'))) {
00001B18  1013      2798          move.b    (A3),D0
00001B1A  0C00 0075 2799          cmp.b     #117,D0
00001B1E  6600 004E 2800          bne       ChangeRegisters_40
00001B22  0C02 0073 2801          cmp.b     #115,D2
00001B26  6600 0046 2802          bne       ChangeRegisters_40
                    2803   ; if (tolower(_getch()) == 'p') {    // change user stack pointer
00001B2A  2F00      2804          move.l    D0,-(A7)
00001B2C  4E95      2805          jsr       (A5)
00001B2E  2200      2806          move.l    D0,D1
00001B30  201F      2807          move.l    (A7)+,D0
00001B32  2F01      2808          move.l    D1,-(A7)
00001B34  4EB9 0000 2809          jsr       _tolower
00001B38  34D4      
00001B3A  584F      2810          addq.w    #4,A7
00001B3C  0C80 0000 2811          cmp.l     #112,D0
00001B40  0070      
00001B42  6618      2812          bne.s     ChangeRegisters_42
                    2813   ; printf("\r\nUser SP = ");
00001B44  4879 0000 2814          pea       @lab3_58.L
00001B48  4422      
00001B4A  4E92      2815          jsr       (A2)
00001B4C  584F      2816          addq.w    #4,A7
                    2817   ; USP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001B4E  42A7      2818          clr.l     -(A7)
00001B50  4E94      2819          jsr       (A4)
00001B52  584F      2820          addq.w    #4,A7
00001B54  23C0 0B00 2821          move.l    D0,_USP.L
00001B58  0128      
00001B5A  600E      2822          bra.s     ChangeRegisters_43
                    2823   ChangeRegisters_42:
                    2824   ; }
                    2825   ; else {
                    2826   ; printf("\r\nIllegal Register....");
00001B5C  4879 0000 2827          pea       @lab3_59.L
00001B60  4430      
00001B62  4E92      2828          jsr       (A2)
00001B64  584F      2829          addq.w    #4,A7
                    2830   ; return;
00001B66  6000 00BA 2831          bra       ChangeRegisters_6
                    2832   ChangeRegisters_43:
00001B6A  6000 00B2 2833          bra       ChangeRegisters_51
                    2834   ChangeRegisters_40:
                    2835   ; }
                    2836   ; }
                    2837   ; else if ((reg[0] == (char)('s')) && (c == (char)('s'))) {
00001B6E  1013      2838          move.b    (A3),D0
00001B70  0C00 0073 2839          cmp.b     #115,D0
00001B74  6600 004E 2840          bne       ChangeRegisters_44
00001B78  0C02 0073 2841          cmp.b     #115,D2
00001B7C  6600 0046 2842          bne       ChangeRegisters_44
                    2843   ; if (tolower(_getch()) == 'p') {    // change system stack pointer
00001B80  2F00      2844          move.l    D0,-(A7)
00001B82  4E95      2845          jsr       (A5)
00001B84  2200      2846          move.l    D0,D1
00001B86  201F      2847          move.l    (A7)+,D0
00001B88  2F01      2848          move.l    D1,-(A7)
00001B8A  4EB9 0000 2849          jsr       _tolower
00001B8E  34D4      
00001B90  584F      2850          addq.w    #4,A7
00001B92  0C80 0000 2851          cmp.l     #112,D0
00001B96  0070      
00001B98  6618      2852          bne.s     ChangeRegisters_46
                    2853   ; printf("\r\nSystem SP = ");
00001B9A  4879 0000 2854          pea       @lab3_60.L
00001B9E  4448      
00001BA0  4E92      2855          jsr       (A2)
00001BA2  584F      2856          addq.w    #4,A7
                    2857   ; SSP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001BA4  42A7      2858          clr.l     -(A7)
00001BA6  4E94      2859          jsr       (A4)
00001BA8  584F      2860          addq.w    #4,A7
00001BAA  23C0 0B00 2861          move.l    D0,_SSP.L
00001BAE  0124      
00001BB0  600E      2862          bra.s     ChangeRegisters_47
                    2863   ChangeRegisters_46:
                    2864   ; }
                    2865   ; else {
                    2866   ; printf("\r\nIllegal Register....");
00001BB2  4879 0000 2867          pea       @lab3_59.L
00001BB6  4430      
00001BB8  4E92      2868          jsr       (A2)
00001BBA  584F      2869          addq.w    #4,A7
                    2870   ; return;
00001BBC  6000 0064 2871          bra       ChangeRegisters_6
                    2872   ChangeRegisters_47:
00001BC0  6000 005C 2873          bra       ChangeRegisters_51
                    2874   ChangeRegisters_44:
                    2875   ; }
                    2876   ; }
                    2877   ; else if ((reg[0] == (char)('p')) && (c == (char)('c'))) {    // change program counter
00001BC4  1013      2878          move.b    (A3),D0
00001BC6  0C00 0070 2879          cmp.b     #112,D0
00001BCA  6620      2880          bne.s     ChangeRegisters_48
00001BCC  0C02 0063 2881          cmp.b     #99,D2
00001BD0  661A      2882          bne.s     ChangeRegisters_48
                    2883   ; printf("\r\nPC = ");
00001BD2  4879 0000 2884          pea       @lab3_61.L
00001BD6  4458      
00001BD8  4E92      2885          jsr       (A2)
00001BDA  584F      2886          addq.w    #4,A7
                    2887   ; PC = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001BDC  42A7      2888          clr.l     -(A7)
00001BDE  4E94      2889          jsr       (A4)
00001BE0  584F      2890          addq.w    #4,A7
00001BE2  23C0 0B00 2891          move.l    D0,_PC.L
00001BE6  0120      
00001BE8  6000 0034 2892          bra       ChangeRegisters_51
                    2893   ChangeRegisters_48:
                    2894   ; }
                    2895   ; else if ((reg[0] == (char)('s')) && (c == (char)('r'))) {    // change status register
00001BEC  1013      2896          move.b    (A3),D0
00001BEE  0C00 0073 2897          cmp.b     #115,D0
00001BF2  6620      2898          bne.s     ChangeRegisters_50
00001BF4  0C02 0072 2899          cmp.b     #114,D2
00001BF8  661A      2900          bne.s     ChangeRegisters_50
                    2901   ; printf("\r\nSR = ");
00001BFA  4879 0000 2902          pea       @lab3_62.L
00001BFE  4460      
00001C00  4E92      2903          jsr       (A2)
00001C02  584F      2904          addq.w    #4,A7
                    2905   ; SR = Get4HexDigits(0);    // read 16 bit value from user keyboard
00001C04  42A7      2906          clr.l     -(A7)
00001C06  4EB8 0C58 2907          jsr       _Get4HexDigits
00001C0A  584F      2908          addq.w    #4,A7
00001C0C  33C0 0B00 2909          move.w    D0,_SR.L
00001C10  012C      
00001C12  600A      2910          bra.s     ChangeRegisters_51
                    2911   ChangeRegisters_50:
                    2912   ; }
                    2913   ; else
                    2914   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n");
00001C14  4879 0000 2915          pea       @lab3_63.L
00001C18  4468      
00001C1A  4E92      2916          jsr       (A2)
00001C1C  584F      2917          addq.w    #4,A7
                    2918   ChangeRegisters_51:
                    2919   ; DumpRegisters();
00001C1E  4EB8 147C 2920          jsr       _DumpRegisters
                    2921   ChangeRegisters_6:
00001C22  4CDF 3C0C 2922          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001C26  4E5E      2923          unlk      A6
00001C28  4E75      2924          rts
                    2925   ; }
                    2926   ; void BreakPointDisplay(void)
                    2927   ; {
                    2928   _BreakPointDisplay:
00001C2A  48E7 3030 2929          movem.l   D2/D3/A2/A3,-(A7)
00001C2E  45F9 0000 2930          lea       _printf.L,A2
00001C32  3576      
00001C34  47F9 0B00 2931          lea       _BreakPointAddress.L,A3
00001C38  012E      
                    2932   ; int i, BreakPointsSet = 0;
00001C3A  4283      2933          clr.l     D3
                    2934   ; // any break points  set
                    2935   ; for (i = 0; i < 8; i++) {
00001C3C  4282      2936          clr.l     D2
                    2937   BreakPointDisplay_1:
00001C3E  0C82 0000 2938          cmp.l     #8,D2
00001C42  0008      
00001C44  6C1C      2939          bge.s     BreakPointDisplay_3
                    2940   ; if (BreakPointSetOrCleared[i] == 1)
00001C46  2002      2941          move.l    D2,D0
00001C48  E588      2942          lsl.l     #2,D0
00001C4A  41F9 0B00 2943          lea       _BreakPointSetOrCleared.L,A0
00001C4E  015E      
00001C50  2030 0800 2944          move.l    0(A0,D0.L),D0
00001C54  0C80 0000 2945          cmp.l     #1,D0
00001C58  0001      
00001C5A  6602      2946          bne.s     BreakPointDisplay_4
                    2947   ; BreakPointsSet = 1;
00001C5C  7601      2948          moveq     #1,D3
                    2949   BreakPointDisplay_4:
00001C5E  5282      2950          addq.l    #1,D2
00001C60  60DC      2951          bra       BreakPointDisplay_1
                    2952   BreakPointDisplay_3:
                    2953   ; }
                    2954   ; if (BreakPointsSet == 1) {
00001C62  0C83 0000 2955          cmp.l     #1,D3
00001C66  0001      
00001C68  6616      2956          bne.s     BreakPointDisplay_6
                    2957   ; printf("\r\n\r\nNum     Address      Instruction");
00001C6A  4879 0000 2958          pea       @lab3_64.L
00001C6E  44A4      
00001C70  4E92      2959          jsr       (A2)
00001C72  584F      2960          addq.w    #4,A7
                    2961   ; printf("\r\n---     ---------    -----------");
00001C74  4879 0000 2962          pea       @lab3_65.L
00001C78  44CA      
00001C7A  4E92      2963          jsr       (A2)
00001C7C  584F      2964          addq.w    #4,A7
00001C7E  600A      2965          bra.s     BreakPointDisplay_7
                    2966   BreakPointDisplay_6:
                    2967   ; }
                    2968   ; else
                    2969   ; printf("\r\nNo BreakPoints Set");
00001C80  4879 0000 2970          pea       @lab3_66.L
00001C84  44EE      
00001C86  4E92      2971          jsr       (A2)
00001C88  584F      2972          addq.w    #4,A7
                    2973   BreakPointDisplay_7:
                    2974   ; for (i = 0; i < 8; i++) {
00001C8A  4282      2975          clr.l     D2
                    2976   BreakPointDisplay_8:
00001C8C  0C82 0000 2977          cmp.l     #8,D2
00001C90  0008      
00001C92  6C00 005A 2978          bge       BreakPointDisplay_10
                    2979   ; // put opcode back, then put break point back
                    2980   ; if (BreakPointSetOrCleared[i] == 1) {
00001C96  2002      2981          move.l    D2,D0
00001C98  E588      2982          lsl.l     #2,D0
00001C9A  41F9 0B00 2983          lea       _BreakPointSetOrCleared.L,A0
00001C9E  015E      
00001CA0  2030 0800 2984          move.l    0(A0,D0.L),D0
00001CA4  0C80 0000 2985          cmp.l     #1,D0
00001CA8  0001      
00001CAA  6600 003E 2986          bne       BreakPointDisplay_11
                    2987   ; *(unsigned short int*)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001CAE  2002      2988          move.l    D2,D0
00001CB0  E388      2989          lsl.l     #1,D0
00001CB2  41F9 0B00 2990          lea       _BreakPointInstruction.L,A0
00001CB6  014E      
00001CB8  2202      2991          move.l    D2,D1
00001CBA  E589      2992          lsl.l     #2,D1
00001CBC  2233 1800 2993          move.l    0(A3,D1.L),D1
00001CC0  2241      2994          move.l    D1,A1
00001CC2  32B0 0800 2995          move.w    0(A0,D0.L),(A1)
                    2996   ; *(unsigned short int*)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e);
00001CC6  2002      2997          move.l    D2,D0
00001CC8  E588      2998          lsl.l     #2,D0
00001CCA  2033 0800 2999          move.l    0(A3,D0.L),D0
00001CCE  2040      3000          move.l    D0,A0
00001CD0  30BC 4E4E 3001          move.w    #20046,(A0)
                    3002   ; printf("\r\n%3d     $%08x", i, BreakPointAddress[i]);
00001CD4  2202      3003          move.l    D2,D1
00001CD6  E589      3004          lsl.l     #2,D1
00001CD8  2F33 1800 3005          move.l    0(A3,D1.L),-(A7)
00001CDC  2F02      3006          move.l    D2,-(A7)
00001CDE  4879 0000 3007          pea       @lab3_67.L
00001CE2  4504      
00001CE4  4E92      3008          jsr       (A2)
00001CE6  DEFC 000C 3009          add.w     #12,A7
                    3010   BreakPointDisplay_11:
00001CEA  5282      3011          addq.l    #1,D2
00001CEC  609E      3012          bra       BreakPointDisplay_8
                    3013   BreakPointDisplay_10:
                    3014   ; }
                    3015   ; }
                    3016   ; printf("\r\n");
00001CEE  4879 0000 3017          pea       @lab3_1.L
00001CF2  3EC6      
00001CF4  4E92      3018          jsr       (A2)
00001CF6  584F      3019          addq.w    #4,A7
00001CF8  4CDF 0C0C 3020          movem.l   (A7)+,D2/D3/A2/A3
00001CFC  4E75      3021          rts
                    3022   ; }
                    3023   ; void WatchPointDisplay(void)
                    3024   ; {
                    3025   _WatchPointDisplay:
00001CFE  48E7 3020 3026          movem.l   D2/D3/A2,-(A7)
00001D02  45F9 0000 3027          lea       _printf.L,A2
00001D06  3576      
                    3028   ; int i;
                    3029   ; int WatchPointsSet = 0;
00001D08  4283      3030          clr.l     D3
                    3031   ; // any watchpoints set
                    3032   ; for (i = 0; i < 8; i++) {
00001D0A  4282      3033          clr.l     D2
                    3034   WatchPointDisplay_1:
00001D0C  0C82 0000 3035          cmp.l     #8,D2
00001D10  0008      
00001D12  6C1C      3036          bge.s     WatchPointDisplay_3
                    3037   ; if (WatchPointSetOrCleared[i] == 1)
00001D14  2002      3038          move.l    D2,D0
00001D16  E588      3039          lsl.l     #2,D0
00001D18  41F9 0B00 3040          lea       _WatchPointSetOrCleared.L,A0
00001D1C  01A2      
00001D1E  2030 0800 3041          move.l    0(A0,D0.L),D0
00001D22  0C80 0000 3042          cmp.l     #1,D0
00001D26  0001      
00001D28  6602      3043          bne.s     WatchPointDisplay_4
                    3044   ; WatchPointsSet = 1;
00001D2A  7601      3045          moveq     #1,D3
                    3046   WatchPointDisplay_4:
00001D2C  5282      3047          addq.l    #1,D2
00001D2E  60DC      3048          bra       WatchPointDisplay_1
                    3049   WatchPointDisplay_3:
                    3050   ; }
                    3051   ; if (WatchPointsSet == 1) {
00001D30  0C83 0000 3052          cmp.l     #1,D3
00001D34  0001      
00001D36  6616      3053          bne.s     WatchPointDisplay_6
                    3054   ; printf("\r\nNum     Address");
00001D38  4879 0000 3055          pea       @lab3_68.L
00001D3C  4514      
00001D3E  4E92      3056          jsr       (A2)
00001D40  584F      3057          addq.w    #4,A7
                    3058   ; printf("\r\n---     ---------");
00001D42  4879 0000 3059          pea       @lab3_69.L
00001D46  4526      
00001D48  4E92      3060          jsr       (A2)
00001D4A  584F      3061          addq.w    #4,A7
00001D4C  600A      3062          bra.s     WatchPointDisplay_7
                    3063   WatchPointDisplay_6:
                    3064   ; }
                    3065   ; else
                    3066   ; printf("\r\nNo WatchPoints Set");
00001D4E  4879 0000 3067          pea       @lab3_70.L
00001D52  453A      
00001D54  4E92      3068          jsr       (A2)
00001D56  584F      3069          addq.w    #4,A7
                    3070   WatchPointDisplay_7:
                    3071   ; for (i = 0; i < 8; i++) {
00001D58  4282      3072          clr.l     D2
                    3073   WatchPointDisplay_8:
00001D5A  0C82 0000 3074          cmp.l     #8,D2
00001D5E  0008      
00001D60  6C00 0038 3075          bge       WatchPointDisplay_10
                    3076   ; if (WatchPointSetOrCleared[i] == 1)
00001D64  2002      3077          move.l    D2,D0
00001D66  E588      3078          lsl.l     #2,D0
00001D68  41F9 0B00 3079          lea       _WatchPointSetOrCleared.L,A0
00001D6C  01A2      
00001D6E  2030 0800 3080          move.l    0(A0,D0.L),D0
00001D72  0C80 0000 3081          cmp.l     #1,D0
00001D76  0001      
00001D78  661C      3082          bne.s     WatchPointDisplay_11
                    3083   ; printf("\r\n%3d     $%08x", i, WatchPointAddress[i]);
00001D7A  2202      3084          move.l    D2,D1
00001D7C  E589      3085          lsl.l     #2,D1
00001D7E  41F9 0B00 3086          lea       _WatchPointAddress.L,A0
00001D82  0182      
00001D84  2F30 1800 3087          move.l    0(A0,D1.L),-(A7)
00001D88  2F02      3088          move.l    D2,-(A7)
00001D8A  4879 0000 3089          pea       @lab3_67.L
00001D8E  4504      
00001D90  4E92      3090          jsr       (A2)
00001D92  DEFC 000C 3091          add.w     #12,A7
                    3092   WatchPointDisplay_11:
00001D96  5282      3093          addq.l    #1,D2
00001D98  60C0      3094          bra       WatchPointDisplay_8
                    3095   WatchPointDisplay_10:
                    3096   ; }
                    3097   ; printf("\r\n");
00001D9A  4879 0000 3098          pea       @lab3_1.L
00001D9E  3EC6      
00001DA0  4E92      3099          jsr       (A2)
00001DA2  584F      3100          addq.w    #4,A7
00001DA4  4CDF 040C 3101          movem.l   (A7)+,D2/D3/A2
00001DA8  4E75      3102          rts
                    3103   ; }
                    3104   ; void BreakPointClear(void)
                    3105   ; {
                    3106   _BreakPointClear:
00001DAA  4E56 FFFC 3107          link      A6,#-4
00001DAE  48E7 2020 3108          movem.l   D2/A2,-(A7)
00001DB2  45F9 0000 3109          lea       _printf.L,A2
00001DB6  3576      
                    3110   ; unsigned int i;
                    3111   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3112   ; BreakPointDisplay();
00001DB8  4EB8 1C2A 3113          jsr       _BreakPointDisplay
                    3114   ; printf("\r\nEnter Break Point Number: ");
00001DBC  4879 0000 3115          pea       @lab3_71.L
00001DC0  4550      
00001DC2  4E92      3116          jsr       (A2)
00001DC4  584F      3117          addq.w    #4,A7
                    3118   ; i = xtod(_getch());           // get break pointer number
00001DC6  2F00      3119          move.l    D0,-(A7)
00001DC8  4EB8 0B68 3120          jsr       __getch
00001DCC  2200      3121          move.l    D0,D1
00001DCE  201F      3122          move.l    (A7)+,D0
00001DD0  2F01      3123          move.l    D1,-(A7)
00001DD2  4EB8 0BD2 3124          jsr       _xtod
00001DD6  584F      3125          addq.w    #4,A7
00001DD8  C0BC 0000 3126          and.l     #255,D0
00001DDC  00FF      
00001DDE  2400      3127          move.l    D0,D2
                    3128   ; if ((i < 0) || (i > 7)) {
00001DE0  0C82 0000 3129          cmp.l     #0,D2
00001DE4  0000      
00001DE6  6508      3130          blo.s     BreakPointClear_3
00001DE8  0C82 0000 3131          cmp.l     #7,D2
00001DEC  0007      
00001DEE  630E      3132          bls.s     BreakPointClear_1
                    3133   BreakPointClear_3:
                    3134   ; printf("\r\nIllegal Range : Use 0 - 7");
00001DF0  4879 0000 3135          pea       @lab3_72.L
00001DF4  456E      
00001DF6  4E92      3136          jsr       (A2)
00001DF8  584F      3137          addq.w    #4,A7
                    3138   ; return;
00001DFA  6000 0080 3139          bra       BreakPointClear_4
                    3140   BreakPointClear_1:
                    3141   ; }
                    3142   ; if (BreakPointSetOrCleared[i] == 1) {       // if break point set
00001DFE  2002      3143          move.l    D2,D0
00001E00  E588      3144          lsl.l     #2,D0
00001E02  41F9 0B00 3145          lea       _BreakPointSetOrCleared.L,A0
00001E06  015E      
00001E08  2030 0800 3146          move.l    0(A0,D0.L),D0
00001E0C  0C80 0000 3147          cmp.l     #1,D0
00001E10  0001      
00001E12  6600 005A 3148          bne       BreakPointClear_5
                    3149   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program we are about to change
00001E16  2002      3150          move.l    D2,D0
00001E18  E588      3151          lsl.l     #2,D0
00001E1A  41F9 0B00 3152          lea       _BreakPointAddress.L,A0
00001E1E  012E      
00001E20  2D70 0800 3153          move.l    0(A0,D0.L),-4(A6)
00001E24  FFFC      
                    3154   ; BreakPointAddress[i] = 0;
00001E26  2002      3155          move.l    D2,D0
00001E28  E588      3156          lsl.l     #2,D0
00001E2A  41F9 0B00 3157          lea       _BreakPointAddress.L,A0
00001E2E  012E      
00001E30  42B0 0800 3158          clr.l     0(A0,D0.L)
                    3159   ; BreakPointSetOrCleared[i] = 0;
00001E34  2002      3160          move.l    D2,D0
00001E36  E588      3161          lsl.l     #2,D0
00001E38  41F9 0B00 3162          lea       _BreakPointSetOrCleared.L,A0
00001E3C  015E      
00001E3E  42B0 0800 3163          clr.l     0(A0,D0.L)
                    3164   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00001E42  2002      3165          move.l    D2,D0
00001E44  E388      3166          lsl.l     #1,D0
00001E46  41F9 0B00 3167          lea       _BreakPointInstruction.L,A0
00001E4A  014E      
00001E4C  226E FFFC 3168          move.l    -4(A6),A1
00001E50  32B0 0800 3169          move.w    0(A0,D0.L),(A1)
                    3170   ; BreakPointInstruction[i] = 0;
00001E54  2002      3171          move.l    D2,D0
00001E56  E388      3172          lsl.l     #1,D0
00001E58  41F9 0B00 3173          lea       _BreakPointInstruction.L,A0
00001E5C  014E      
00001E5E  4270 0800 3174          clr.w     0(A0,D0.L)
                    3175   ; printf("\r\nBreak Point Cleared.....\r\n");
00001E62  4879 0000 3176          pea       @lab3_73.L
00001E66  458A      
00001E68  4E92      3177          jsr       (A2)
00001E6A  584F      3178          addq.w    #4,A7
00001E6C  600A      3179          bra.s     BreakPointClear_6
                    3180   BreakPointClear_5:
                    3181   ; }
                    3182   ; else
                    3183   ; printf("\r\nBreak Point wasn't Set.....");
00001E6E  4879 0000 3184          pea       @lab3_74.L
00001E72  45A8      
00001E74  4E92      3185          jsr       (A2)
00001E76  584F      3186          addq.w    #4,A7
                    3187   BreakPointClear_6:
                    3188   ; BreakPointDisplay();
00001E78  4EB8 1C2A 3189          jsr       _BreakPointDisplay
                    3190   ; return;
                    3191   BreakPointClear_4:
00001E7C  4CDF 0404 3192          movem.l   (A7)+,D2/A2
00001E80  4E5E      3193          unlk      A6
00001E82  4E75      3194          rts
                    3195   ; }
                    3196   ; void WatchPointClear(void)
                    3197   ; {
                    3198   _WatchPointClear:
00001E84  48E7 2020 3199          movem.l   D2/A2,-(A7)
00001E88  45F9 0000 3200          lea       _printf.L,A2
00001E8C  3576      
                    3201   ; unsigned int i;
                    3202   ; WatchPointDisplay();
00001E8E  4EB8 1CFE 3203          jsr       _WatchPointDisplay
                    3204   ; printf("\r\nEnter Watch Point Number: ");
00001E92  4879 0000 3205          pea       @lab3_75.L
00001E96  45C6      
00001E98  4E92      3206          jsr       (A2)
00001E9A  584F      3207          addq.w    #4,A7
                    3208   ; i = xtod(_getch());           // get watch pointer number
00001E9C  2F00      3209          move.l    D0,-(A7)
00001E9E  4EB8 0B68 3210          jsr       __getch
00001EA2  2200      3211          move.l    D0,D1
00001EA4  201F      3212          move.l    (A7)+,D0
00001EA6  2F01      3213          move.l    D1,-(A7)
00001EA8  4EB8 0BD2 3214          jsr       _xtod
00001EAC  584F      3215          addq.w    #4,A7
00001EAE  C0BC 0000 3216          and.l     #255,D0
00001EB2  00FF      
00001EB4  2400      3217          move.l    D0,D2
                    3218   ; if ((i < 0) || (i > 7)) {
00001EB6  0C82 0000 3219          cmp.l     #0,D2
00001EBA  0000      
00001EBC  6508      3220          blo.s     WatchPointClear_3
00001EBE  0C82 0000 3221          cmp.l     #7,D2
00001EC2  0007      
00001EC4  630E      3222          bls.s     WatchPointClear_1
                    3223   WatchPointClear_3:
                    3224   ; printf("\r\nIllegal Range : Use 0 - 7");
00001EC6  4879 0000 3225          pea       @lab3_72.L
00001ECA  456E      
00001ECC  4E92      3226          jsr       (A2)
00001ECE  584F      3227          addq.w    #4,A7
                    3228   ; return;
00001ED0  6000 004E 3229          bra       WatchPointClear_4
                    3230   WatchPointClear_1:
                    3231   ; }
                    3232   ; if (WatchPointSetOrCleared[i] == 1) {       // if watch point set
00001ED4  2002      3233          move.l    D2,D0
00001ED6  E588      3234          lsl.l     #2,D0
00001ED8  41F9 0B00 3235          lea       _WatchPointSetOrCleared.L,A0
00001EDC  01A2      
00001EDE  2030 0800 3236          move.l    0(A0,D0.L),D0
00001EE2  0C80 0000 3237          cmp.l     #1,D0
00001EE6  0001      
00001EE8  6628      3238          bne.s     WatchPointClear_5
                    3239   ; WatchPointAddress[i] = 0;
00001EEA  2002      3240          move.l    D2,D0
00001EEC  E588      3241          lsl.l     #2,D0
00001EEE  41F9 0B00 3242          lea       _WatchPointAddress.L,A0
00001EF2  0182      
00001EF4  42B0 0800 3243          clr.l     0(A0,D0.L)
                    3244   ; WatchPointSetOrCleared[i] = 0;
00001EF8  2002      3245          move.l    D2,D0
00001EFA  E588      3246          lsl.l     #2,D0
00001EFC  41F9 0B00 3247          lea       _WatchPointSetOrCleared.L,A0
00001F00  01A2      
00001F02  42B0 0800 3248          clr.l     0(A0,D0.L)
                    3249   ; printf("\r\nWatch Point Cleared.....\r\n");
00001F06  4879 0000 3250          pea       @lab3_76.L
00001F0A  45E4      
00001F0C  4E92      3251          jsr       (A2)
00001F0E  584F      3252          addq.w    #4,A7
00001F10  600A      3253          bra.s     WatchPointClear_6
                    3254   WatchPointClear_5:
                    3255   ; }
                    3256   ; else
                    3257   ; printf("\r\nWatch Point Was not Set.....");
00001F12  4879 0000 3258          pea       @lab3_77.L
00001F16  4602      
00001F18  4E92      3259          jsr       (A2)
00001F1A  584F      3260          addq.w    #4,A7
                    3261   WatchPointClear_6:
                    3262   ; WatchPointDisplay();
00001F1C  4EB8 1CFE 3263          jsr       _WatchPointDisplay
                    3264   ; return;
                    3265   WatchPointClear_4:
00001F20  4CDF 0404 3266          movem.l   (A7)+,D2/A2
00001F24  4E75      3267          rts
                    3268   ; }
                    3269   ; void DisableBreakPoints(void)
                    3270   ; {
                    3271   _DisableBreakPoints:
00001F26  4E56 FFFC 3272          link      A6,#-4
00001F2A  2F02      3273          move.l    D2,-(A7)
                    3274   ; int i;
                    3275   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3276   ; for (i = 0; i < 8; i++) {
00001F2C  4282      3277          clr.l     D2
                    3278   DisableBreakPoints_1:
00001F2E  0C82 0000 3279          cmp.l     #8,D2
00001F32  0008      
00001F34  6C00 003E 3280          bge       DisableBreakPoints_3
                    3281   ; if (BreakPointSetOrCleared[i] == 1) {                                                    // if break point set
00001F38  2002      3282          move.l    D2,D0
00001F3A  E588      3283          lsl.l     #2,D0
00001F3C  41F9 0B00 3284          lea       _BreakPointSetOrCleared.L,A0
00001F40  015E      
00001F42  2030 0800 3285          move.l    0(A0,D0.L),D0
00001F46  0C80 0000 3286          cmp.l     #1,D0
00001F4A  0001      
00001F4C  6622      3287          bne.s     DisableBreakPoints_4
                    3288   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001F4E  2002      3289          move.l    D2,D0
00001F50  E588      3290          lsl.l     #2,D0
00001F52  41F9 0B00 3291          lea       _BreakPointAddress.L,A0
00001F56  012E      
00001F58  2D70 0800 3292          move.l    0(A0,D0.L),-4(A6)
00001F5C  FFFC      
                    3293   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001F5E  2002      3294          move.l    D2,D0
00001F60  E388      3295          lsl.l     #1,D0
00001F62  41F9 0B00 3296          lea       _BreakPointInstruction.L,A0
00001F66  014E      
00001F68  226E FFFC 3297          move.l    -4(A6),A1
00001F6C  32B0 0800 3298          move.w    0(A0,D0.L),(A1)
                    3299   DisableBreakPoints_4:
00001F70  5282      3300          addq.l    #1,D2
00001F72  60BA      3301          bra       DisableBreakPoints_1
                    3302   DisableBreakPoints_3:
00001F74  241F      3303          move.l    (A7)+,D2
00001F76  4E5E      3304          unlk      A6
00001F78  4E75      3305          rts
                    3306   ; }
                    3307   ; }
                    3308   ; }
                    3309   ; void EnableBreakPoints(void)
                    3310   ; {
                    3311   _EnableBreakPoints:
00001F7A  4E56 FFFC 3312          link      A6,#-4
00001F7E  2F02      3313          move.l    D2,-(A7)
                    3314   ; int i;
                    3315   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3316   ; for (i = 0; i < 8; i++) {
00001F80  4282      3317          clr.l     D2
                    3318   EnableBreakPoints_1:
00001F82  0C82 0000 3319          cmp.l     #8,D2
00001F86  0008      
00001F88  6C32      3320          bge.s     EnableBreakPoints_3
                    3321   ; if (BreakPointSetOrCleared[i] == 1) {                                                     // if break point set
00001F8A  2002      3322          move.l    D2,D0
00001F8C  E588      3323          lsl.l     #2,D0
00001F8E  41F9 0B00 3324          lea       _BreakPointSetOrCleared.L,A0
00001F92  015E      
00001F94  2030 0800 3325          move.l    0(A0,D0.L),D0
00001F98  0C80 0000 3326          cmp.l     #1,D0
00001F9C  0001      
00001F9E  6618      3327          bne.s     EnableBreakPoints_4
                    3328   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001FA0  2002      3329          move.l    D2,D0
00001FA2  E588      3330          lsl.l     #2,D0
00001FA4  41F9 0B00 3331          lea       _BreakPointAddress.L,A0
00001FA8  012E      
00001FAA  2D70 0800 3332          move.l    0(A0,D0.L),-4(A6)
00001FAE  FFFC      
                    3333   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001FB0  206E FFFC 3334          move.l    -4(A6),A0
00001FB4  30BC 4E4E 3335          move.w    #20046,(A0)
                    3336   EnableBreakPoints_4:
00001FB8  5282      3337          addq.l    #1,D2
00001FBA  60C6      3338          bra       EnableBreakPoints_1
                    3339   EnableBreakPoints_3:
00001FBC  241F      3340          move.l    (A7)+,D2
00001FBE  4E5E      3341          unlk      A6
00001FC0  4E75      3342          rts
                    3343   ; }
                    3344   ; }
                    3345   ; }
                    3346   ; void KillAllBreakPoints(void)
                    3347   ; {
                    3348   _KillAllBreakPoints:
00001FC2  4E56 FFFC 3349          link      A6,#-4
00001FC6  2F02      3350          move.l    D2,-(A7)
                    3351   ; int i;
                    3352   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3353   ; for (i = 0; i < 8; i++) {
00001FC8  4282      3354          clr.l     D2
                    3355   KillAllBreakPoints_1:
00001FCA  0C82 0000 3356          cmp.l     #8,D2
00001FCE  0008      
00001FD0  6C00 0052 3357          bge       KillAllBreakPoints_3
                    3358   ; // clear BP
                    3359   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001FD4  2002      3360          move.l    D2,D0
00001FD6  E588      3361          lsl.l     #2,D0
00001FD8  41F9 0B00 3362          lea       _BreakPointAddress.L,A0
00001FDC  012E      
00001FDE  2D70 0800 3363          move.l    0(A0,D0.L),-4(A6)
00001FE2  FFFC      
                    3364   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001FE4  2002      3365          move.l    D2,D0
00001FE6  E388      3366          lsl.l     #1,D0
00001FE8  41F9 0B00 3367          lea       _BreakPointInstruction.L,A0
00001FEC  014E      
00001FEE  226E FFFC 3368          move.l    -4(A6),A1
00001FF2  32B0 0800 3369          move.w    0(A0,D0.L),(A1)
                    3370   ; BreakPointAddress[i] = 0;                                                             // set BP address to NULL
00001FF6  2002      3371          move.l    D2,D0
00001FF8  E588      3372          lsl.l     #2,D0
00001FFA  41F9 0B00 3373          lea       _BreakPointAddress.L,A0
00001FFE  012E      
00002000  42B0 0800 3374          clr.l     0(A0,D0.L)
                    3375   ; BreakPointInstruction[i] = 0;
00002004  2002      3376          move.l    D2,D0
00002006  E388      3377          lsl.l     #1,D0
00002008  41F9 0B00 3378          lea       _BreakPointInstruction.L,A0
0000200C  014E      
0000200E  4270 0800 3379          clr.w     0(A0,D0.L)
                    3380   ; BreakPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00002012  2002      3381          move.l    D2,D0
00002014  E588      3382          lsl.l     #2,D0
00002016  41F9 0B00 3383          lea       _BreakPointSetOrCleared.L,A0
0000201A  015E      
0000201C  42B0 0800 3384          clr.l     0(A0,D0.L)
00002020  5282      3385          addq.l    #1,D2
00002022  60A6      3386          bra       KillAllBreakPoints_1
                    3387   KillAllBreakPoints_3:
00002024  241F      3388          move.l    (A7)+,D2
00002026  4E5E      3389          unlk      A6
00002028  4E75      3390          rts
                    3391   ; }
                    3392   ; //BreakPointDisplay() ;       // display the break points
                    3393   ; }
                    3394   ; void KillAllWatchPoints(void)
                    3395   ; {
                    3396   _KillAllWatchPoints:
0000202A  2F02      3397          move.l    D2,-(A7)
                    3398   ; int i;
                    3399   ; for (i = 0; i < 8; i++) {
0000202C  4282      3400          clr.l     D2
                    3401   KillAllWatchPoints_1:
0000202E  0C82 0000 3402          cmp.l     #8,D2
00002032  0008      
00002034  6C20      3403          bge.s     KillAllWatchPoints_3
                    3404   ; WatchPointAddress[i] = 0;                                                             // set BP address to NULL
00002036  2002      3405          move.l    D2,D0
00002038  E588      3406          lsl.l     #2,D0
0000203A  41F9 0B00 3407          lea       _WatchPointAddress.L,A0
0000203E  0182      
00002040  42B0 0800 3408          clr.l     0(A0,D0.L)
                    3409   ; WatchPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00002044  2002      3410          move.l    D2,D0
00002046  E588      3411          lsl.l     #2,D0
00002048  41F9 0B00 3412          lea       _WatchPointSetOrCleared.L,A0
0000204C  01A2      
0000204E  42B0 0800 3413          clr.l     0(A0,D0.L)
00002052  5282      3414          addq.l    #1,D2
00002054  60D8      3415          bra       KillAllWatchPoints_1
                    3416   KillAllWatchPoints_3:
00002056  241F      3417          move.l    (A7)+,D2
00002058  4E75      3418          rts
                    3419   ; }
                    3420   ; //WatchPointDisplay() ;       // display the break points
                    3421   ; }
                    3422   ; void SetBreakPoint(void)
                    3423   ; {
                    3424   _SetBreakPoint:
0000205A  4E56 FFFC 3425          link      A6,#-4
0000205E  48E7 3830 3426          movem.l   D2/D3/D4/A2/A3,-(A7)
00002062  45F9 0000 3427          lea       _printf.L,A2
00002066  3576      
00002068  47F9 0B00 3428          lea       _BreakPointSetOrCleared.L,A3
0000206C  015E      
                    3429   ; int i;
                    3430   ; int BPNumber;
                    3431   ; int BPAddress;
                    3432   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3433   ; // see if any free break points
                    3434   ; for (i = 0; i < 8; i++) {
0000206E  4282      3435          clr.l     D2
                    3436   SetBreakPoint_1:
00002070  0C82 0000 3437          cmp.l     #8,D2
00002074  0008      
00002076  6C10      3438          bge.s     SetBreakPoint_3
                    3439   ; if (BreakPointSetOrCleared[i] == 0)
00002078  2002      3440          move.l    D2,D0
0000207A  E588      3441          lsl.l     #2,D0
0000207C  2033 0800 3442          move.l    0(A3,D0.L),D0
00002080  6602      3443          bne.s     SetBreakPoint_4
                    3444   ; break;         // if spare BP found allow user to set it
00002082  6004      3445          bra.s     SetBreakPoint_3
                    3446   SetBreakPoint_4:
00002084  5282      3447          addq.l    #1,D2
00002086  60E8      3448          bra       SetBreakPoint_1
                    3449   SetBreakPoint_3:
                    3450   ; }
                    3451   ; if (i == 8) {
00002088  0C82 0000 3452          cmp.l     #8,D2
0000208C  0008      
0000208E  660E      3453          bne.s     SetBreakPoint_6
                    3454   ; printf("\r\nNo FREE Break Points.....");
00002090  4879 0000 3455          pea       @lab3_78.L
00002094  4622      
00002096  4E92      3456          jsr       (A2)
00002098  584F      3457          addq.w    #4,A7
                    3458   ; return;
0000209A  6000 00D6 3459          bra       SetBreakPoint_15
                    3460   SetBreakPoint_6:
                    3461   ; }
                    3462   ; printf("\r\nBreak Point Address: ");
0000209E  4879 0000 3463          pea       @lab3_79.L
000020A2  463E      
000020A4  4E92      3464          jsr       (A2)
000020A6  584F      3465          addq.w    #4,A7
                    3466   ; BPAddress = Get8HexDigits(0);
000020A8  42A7      3467          clr.l     -(A7)
000020AA  4EB8 0CA4 3468          jsr       _Get8HexDigits
000020AE  584F      3469          addq.w    #4,A7
000020B0  2600      3470          move.l    D0,D3
                    3471   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BPAddress);     // point to the instruction in the user program we are about to change
000020B2  2803      3472          move.l    D3,D4
                    3473   ; if ((BPAddress & 0x00000001) == 0x00000001) {   // cannot set BP at an odd address
000020B4  2003      3474          move.l    D3,D0
000020B6  C0BC 0000 3475          and.l     #1,D0
000020BA  0001      
000020BC  0C80 0000 3476          cmp.l     #1,D0
000020C0  0001      
000020C2  660E      3477          bne.s     SetBreakPoint_9
                    3478   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses");
000020C4  4879 0000 3479          pea       @lab3_80.L
000020C8  4656      
000020CA  4E92      3480          jsr       (A2)
000020CC  584F      3481          addq.w    #4,A7
                    3482   ; return;
000020CE  6000 00A2 3483          bra       SetBreakPoint_15
                    3484   SetBreakPoint_9:
                    3485   ; }
                    3486   ; if (BPAddress < 0x00008000) {   // cannot set BP in ROM
000020D2  0C83 0000 3487          cmp.l     #32768,D3
000020D6  8000      
000020D8  640E      3488          bhs.s     SetBreakPoint_11
                    3489   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]");
000020DA  4879 0000 3490          pea       @lab3_81.L
000020DE  468C      
000020E0  4E92      3491          jsr       (A2)
000020E2  584F      3492          addq.w    #4,A7
                    3493   ; return;
000020E4  6000 008C 3494          bra       SetBreakPoint_15
                    3495   SetBreakPoint_11:
                    3496   ; }
                    3497   ; // search for first free bp or existing same BP
                    3498   ; for (i = 0; i < 8; i++) {
000020E8  4282      3499          clr.l     D2
                    3500   SetBreakPoint_13:
000020EA  0C82 0000 3501          cmp.l     #8,D2
000020EE  0008      
000020F0  6C00 0080 3502          bge       SetBreakPoint_15
                    3503   ; if (BreakPointAddress[i] == BPAddress) {
000020F4  2002      3504          move.l    D2,D0
000020F6  E588      3505          lsl.l     #2,D0
000020F8  41F9 0B00 3506          lea       _BreakPointAddress.L,A0
000020FC  012E      
000020FE  B6B0 0800 3507          cmp.l     0(A0,D0.L),D3
00002102  6610      3508          bne.s     SetBreakPoint_16
                    3509   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress);
00002104  2F03      3510          move.l    D3,-(A7)
00002106  4879 0000 3511          pea       @lab3_82.L
0000210A  46D4      
0000210C  4E92      3512          jsr       (A2)
0000210E  504F      3513          addq.w    #8,A7
                    3514   ; return;
00002110  6000 0060 3515          bra       SetBreakPoint_15
                    3516   SetBreakPoint_16:
                    3517   ; }
                    3518   ; if (BreakPointSetOrCleared[i] == 0) {
00002114  2002      3519          move.l    D2,D0
00002116  E588      3520          lsl.l     #2,D0
00002118  2033 0800 3521          move.l    0(A3,D0.L),D0
0000211C  6600 004E 3522          bne       SetBreakPoint_18
                    3523   ; // set BP here
                    3524   ; BreakPointSetOrCleared[i] = 1;                                 // mark this breakpoint as set
00002120  2002      3525          move.l    D2,D0
00002122  E588      3526          lsl.l     #2,D0
00002124  27BC 0000 3527          move.l    #1,0(A3,D0.L)
00002128  0001 0800 
                    3528   ; BreakPointInstruction[i] = *ProgramBreakPointAddress;          // copy the user program instruction here so we can put it back afterwards
0000212C  2044      3529          move.l    D4,A0
0000212E  2002      3530          move.l    D2,D0
00002130  E388      3531          lsl.l     #1,D0
00002132  43F9 0B00 3532          lea       _BreakPointInstruction.L,A1
00002136  014E      
00002138  3390 0800 3533          move.w    (A0),0(A1,D0.L)
                    3534   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress);
0000213C  2F04      3535          move.l    D4,-(A7)
0000213E  4879 0000 3536          pea       @lab3_83.L
00002142  470C      
00002144  4E92      3537          jsr       (A2)
00002146  504F      3538          addq.w    #8,A7
                    3539   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);   // put a Trap14 instruction at the user specified address
00002148  2044      3540          move.l    D4,A0
0000214A  30BC 4E4E 3541          move.w    #20046,(A0)
                    3542   ; BreakPointAddress[i] = BPAddress;                              // record the address of this break point in the debugger
0000214E  2002      3543          move.l    D2,D0
00002150  E588      3544          lsl.l     #2,D0
00002152  41F9 0B00 3545          lea       _BreakPointAddress.L,A0
00002156  012E      
00002158  2183 0800 3546          move.l    D3,0(A0,D0.L)
                    3547   ; printf("\r\n");
0000215C  4879 0000 3548          pea       @lab3_1.L
00002160  3EC6      
00002162  4E92      3549          jsr       (A2)
00002164  584F      3550          addq.w    #4,A7
                    3551   ; BreakPointDisplay();       // display the break points
00002166  4EB8 1C2A 3552          jsr       _BreakPointDisplay
                    3553   ; return;
0000216A  6006      3554          bra.s     SetBreakPoint_15
                    3555   SetBreakPoint_18:
0000216C  5282      3556          addq.l    #1,D2
0000216E  6000 FF7A 3557          bra       SetBreakPoint_13
                    3558   SetBreakPoint_15:
00002172  4CDF 0C1C 3559          movem.l   (A7)+,D2/D3/D4/A2/A3
00002176  4E5E      3560          unlk      A6
00002178  4E75      3561          rts
                    3562   ; }
                    3563   ; }
                    3564   ; }
                    3565   ; void SetWatchPoint(void)
                    3566   ; {
                    3567   _SetWatchPoint:
0000217A  4E56 FFF8 3568          link      A6,#-8
0000217E  48E7 3030 3569          movem.l   D2/D3/A2/A3,-(A7)
00002182  45F9 0000 3570          lea       _printf.L,A2
00002186  3576      
00002188  47F9 0B00 3571          lea       _WatchPointSetOrCleared.L,A3
0000218C  01A2      
                    3572   ; int i;
                    3573   ; int WPNumber;
                    3574   ; int WPAddress;
                    3575   ; volatile unsigned short int* ProgramWatchPointAddress;
                    3576   ; // see if any free break points
                    3577   ; for (i = 0; i < 8; i++) {
0000218E  4282      3578          clr.l     D2
                    3579   SetWatchPoint_1:
00002190  0C82 0000 3580          cmp.l     #8,D2
00002194  0008      
00002196  6C10      3581          bge.s     SetWatchPoint_3
                    3582   ; if (WatchPointSetOrCleared[i] == 0)
00002198  2002      3583          move.l    D2,D0
0000219A  E588      3584          lsl.l     #2,D0
0000219C  2033 0800 3585          move.l    0(A3,D0.L),D0
000021A0  6602      3586          bne.s     SetWatchPoint_4
                    3587   ; break;         // if spare WP found allow user to set it
000021A2  6004      3588          bra.s     SetWatchPoint_3
                    3589   SetWatchPoint_4:
000021A4  5282      3590          addq.l    #1,D2
000021A6  60E8      3591          bra       SetWatchPoint_1
                    3592   SetWatchPoint_3:
                    3593   ; }
                    3594   ; if (i == 8) {
000021A8  0C82 0000 3595          cmp.l     #8,D2
000021AC  0008      
000021AE  660E      3596          bne.s     SetWatchPoint_6
                    3597   ; printf("\r\nNo FREE Watch Points.....");
000021B0  4879 0000 3598          pea       @lab3_84.L
000021B4  4732      
000021B6  4E92      3599          jsr       (A2)
000021B8  584F      3600          addq.w    #4,A7
                    3601   ; return;
000021BA  6000 008C 3602          bra       SetWatchPoint_11
                    3603   SetWatchPoint_6:
                    3604   ; }
                    3605   ; printf("\r\nWatch Point Address: ");
000021BE  4879 0000 3606          pea       @lab3_85.L
000021C2  474E      
000021C4  4E92      3607          jsr       (A2)
000021C6  584F      3608          addq.w    #4,A7
                    3609   ; WPAddress = Get8HexDigits(0);
000021C8  42A7      3610          clr.l     -(A7)
000021CA  4EB8 0CA4 3611          jsr       _Get8HexDigits
000021CE  584F      3612          addq.w    #4,A7
000021D0  2600      3613          move.l    D0,D3
                    3614   ; // search for first free wp or existing same wp
                    3615   ; for (i = 0; i < 8; i++) {
000021D2  4282      3616          clr.l     D2
                    3617   SetWatchPoint_9:
000021D4  0C82 0000 3618          cmp.l     #8,D2
000021D8  0008      
000021DA  6C00 006C 3619          bge       SetWatchPoint_11
                    3620   ; if (WatchPointAddress[i] == WPAddress && WPAddress != 0) {     //so we can set a wp at 0
000021DE  2002      3621          move.l    D2,D0
000021E0  E588      3622          lsl.l     #2,D0
000021E2  41F9 0B00 3623          lea       _WatchPointAddress.L,A0
000021E6  0182      
000021E8  B6B0 0800 3624          cmp.l     0(A0,D0.L),D3
000021EC  6614      3625          bne.s     SetWatchPoint_12
000021EE  4A83      3626          tst.l     D3
000021F0  6710      3627          beq.s     SetWatchPoint_12
                    3628   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress);
000021F2  2F03      3629          move.l    D3,-(A7)
000021F4  4879 0000 3630          pea       @lab3_86.L
000021F8  4766      
000021FA  4E92      3631          jsr       (A2)
000021FC  504F      3632          addq.w    #8,A7
                    3633   ; return;
000021FE  6000 0048 3634          bra       SetWatchPoint_11
                    3635   SetWatchPoint_12:
                    3636   ; }
                    3637   ; if (WatchPointSetOrCleared[i] == 0) {
00002202  2002      3638          move.l    D2,D0
00002204  E588      3639          lsl.l     #2,D0
00002206  2033 0800 3640          move.l    0(A3,D0.L),D0
0000220A  6600 0038 3641          bne       SetWatchPoint_14
                    3642   ; WatchPointSetOrCleared[i] = 1;                                 // mark this watchpoint as set
0000220E  2002      3643          move.l    D2,D0
00002210  E588      3644          lsl.l     #2,D0
00002212  27BC 0000 3645          move.l    #1,0(A3,D0.L)
00002216  0001 0800 
                    3646   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress);
0000221A  2F03      3647          move.l    D3,-(A7)
0000221C  4879 0000 3648          pea       @lab3_87.L
00002220  479C      
00002222  4E92      3649          jsr       (A2)
00002224  504F      3650          addq.w    #8,A7
                    3651   ; WatchPointAddress[i] = WPAddress;                              // record the address of this watch point in the debugger
00002226  2002      3652          move.l    D2,D0
00002228  E588      3653          lsl.l     #2,D0
0000222A  41F9 0B00 3654          lea       _WatchPointAddress.L,A0
0000222E  0182      
00002230  2183 0800 3655          move.l    D3,0(A0,D0.L)
                    3656   ; printf("\r\n");
00002234  4879 0000 3657          pea       @lab3_1.L
00002238  3EC6      
0000223A  4E92      3658          jsr       (A2)
0000223C  584F      3659          addq.w    #4,A7
                    3660   ; WatchPointDisplay();       // display the break points
0000223E  4EB8 1CFE 3661          jsr       _WatchPointDisplay
                    3662   ; return;
00002242  6004      3663          bra.s     SetWatchPoint_11
                    3664   SetWatchPoint_14:
00002244  5282      3665          addq.l    #1,D2
00002246  608C      3666          bra       SetWatchPoint_9
                    3667   SetWatchPoint_11:
00002248  4CDF 0C0C 3668          movem.l   (A7)+,D2/D3/A2/A3
0000224C  4E5E      3669          unlk      A6
0000224E  4E75      3670          rts
                    3671   ; }
                    3672   ; }
                    3673   ; }
                    3674   ; void HandleBreakPoint(void)
                    3675   ; {
                    3676   _HandleBreakPoint:
00002250  4E56 FFFC 3677          link      A6,#-4
00002254  48E7 0038 3678          movem.l   A2/A3/A4,-(A7)
00002258  45F9 0B00 3679          lea       _i.L,A2
0000225C  00C4      
0000225E  47F9 0000 3680          lea       _printf.L,A3
00002262  3576      
00002264  49F9 0B00 3681          lea       _PC.L,A4
00002268  0120      
                    3682   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3683   ; // now we have to put the break point back to run the instruction
                    3684   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3685   ; PC = PC - 2;  // ready for user to resume after reaching breakpoint
0000226A  5594      3686          subq.l    #2,(A4)
                    3687   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT");
0000226C  4879 0000 3688          pea       @lab3_88.L
00002270  47C2      
00002272  4E93      3689          jsr       (A3)
00002274  584F      3690          addq.w    #4,A7
                    3691   ; printf("\r\nSingle Step : [ON]");
00002276  4879 0000 3692          pea       @lab3_89.L
0000227A  47D6      
0000227C  4E93      3693          jsr       (A3)
0000227E  584F      3694          addq.w    #4,A7
                    3695   ; printf("\r\nBreakPoints : [Enabled]");
00002280  4879 0000 3696          pea       @lab3_90.L
00002284  47EC      
00002286  4E93      3697          jsr       (A3)
00002288  584F      3698          addq.w    #4,A7
                    3699   ; // now clear the break point (put original instruction back)
                    3700   ; ProgramBreakPointAddress = PC;
0000228A  2D54 FFFC 3701          move.l    (A4),-4(A6)
                    3702   ; for (i = 0; i < 8; i++) {
0000228E  4292      3703          clr.l     (A2)
                    3704   HandleBreakPoint_1:
00002290  2012      3705          move.l    (A2),D0
00002292  0C80 0000 3706          cmp.l     #8,D0
00002296  0008      
00002298  6400 0056 3707          bhs       HandleBreakPoint_3
                    3708   ; if (BreakPointAddress[i] == PC) {        // if we have found the breakpoint
0000229C  2012      3709          move.l    (A2),D0
0000229E  E588      3710          lsl.l     #2,D0
000022A0  41F9 0B00 3711          lea       _BreakPointAddress.L,A0
000022A4  012E      
000022A6  2230 0800 3712          move.l    0(A0,D0.L),D1
000022AA  B294      3713          cmp.l     (A4),D1
000022AC  6600 003E 3714          bne       HandleBreakPoint_4
                    3715   ; BreakPointAddress[i] = 0;
000022B0  2012      3716          move.l    (A2),D0
000022B2  E588      3717          lsl.l     #2,D0
000022B4  41F9 0B00 3718          lea       _BreakPointAddress.L,A0
000022B8  012E      
000022BA  42B0 0800 3719          clr.l     0(A0,D0.L)
                    3720   ; BreakPointSetOrCleared[i] = 0;
000022BE  2012      3721          move.l    (A2),D0
000022C0  E588      3722          lsl.l     #2,D0
000022C2  41F9 0B00 3723          lea       _BreakPointSetOrCleared.L,A0
000022C6  015E      
000022C8  42B0 0800 3724          clr.l     0(A0,D0.L)
                    3725   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
000022CC  2012      3726          move.l    (A2),D0
000022CE  E388      3727          lsl.l     #1,D0
000022D0  41F9 0B00 3728          lea       _BreakPointInstruction.L,A0
000022D4  014E      
000022D6  226E FFFC 3729          move.l    -4(A6),A1
000022DA  32B0 0800 3730          move.w    0(A0,D0.L),(A1)
                    3731   ; BreakPointInstruction[i] = 0;
000022DE  2012      3732          move.l    (A2),D0
000022E0  E388      3733          lsl.l     #1,D0
000022E2  41F9 0B00 3734          lea       _BreakPointInstruction.L,A0
000022E6  014E      
000022E8  4270 0800 3735          clr.w     0(A0,D0.L)
                    3736   HandleBreakPoint_4:
000022EC  5292      3737          addq.l    #1,(A2)
000022EE  60A0      3738          bra       HandleBreakPoint_1
                    3739   HandleBreakPoint_3:
                    3740   ; }
                    3741   ; }
                    3742   ; DumpRegisters();
000022F0  4EB8 147C 3743          jsr       _DumpRegisters
                    3744   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000022F4  4879 0000 3745          pea       @lab3_52.L
000022F8  4368      
000022FA  4E93      3746          jsr       (A3)
000022FC  584F      3747          addq.w    #4,A7
                    3748   ; printf("\r\nPress <ESC> to Resume User Program\r\n");
000022FE  4879 0000 3749          pea       @lab3_91.L
00002302  4806      
00002304  4E93      3750          jsr       (A3)
00002306  584F      3751          addq.w    #4,A7
                    3752   ; menu();
00002308  4EB9 0000 3753          jsr       _menu
0000230C  2514      
0000230E  4CDF 1C00 3754          movem.l   (A7)+,A2/A3/A4
00002312  4E5E      3755          unlk      A6
00002314  4E75      3756          rts
                    3757   ; }
                    3758   ; void UnknownCommand()
                    3759   ; {
                    3760   _UnknownCommand:
                    3761   ; printf("\r\nUnknown Command.....\r\n");
00002316  4879 0000 3762          pea       @lab3_92.L
0000231A  482E      
0000231C  4EB9 0000 3763          jsr       _printf
00002320  3576      
00002322  584F      3764          addq.w    #4,A7
                    3765   ; Help();
00002324  4EB9 0000 3766          jsr       _Help
00002328  243A      
0000232A  4E75      3767          rts
                    3768   ; }
                    3769   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3770   ; void CallDebugMonitor(void)
                    3771   ; {
                    3772   _CallDebugMonitor:
                    3773   ; printf("\r\nProgram Ended (TRAP #15)....");
0000232C  4879 0000 3774          pea       @lab3_93.L
00002330  4848      
00002332  4EB9 0000 3775          jsr       _printf
00002336  3576      
00002338  584F      3776          addq.w    #4,A7
                    3777   ; menu();
0000233A  4EB9 0000 3778          jsr       _menu
0000233E  2514      
00002340  4E75      3779          rts
                    3780   ; }
                    3781   ; void Breakpoint(void)
                    3782   ; {
                    3783   _Breakpoint:
00002342  2F02      3784          move.l    D2,-(A7)
                    3785   ; char c;
                    3786   ; c = toupper(_getch());
00002344  2F00      3787          move.l    D0,-(A7)
00002346  4EB8 0B68 3788          jsr       __getch
0000234A  2200      3789          move.l    D0,D1
0000234C  201F      3790          move.l    (A7)+,D0
0000234E  2F01      3791          move.l    D1,-(A7)
00002350  4EB9 0000 3792          jsr       _toupper
00002354  354A      
00002356  584F      3793          addq.w    #4,A7
00002358  1400      3794          move.b    D0,D2
                    3795   ; if (c == (char)('D'))                                      // BreakPoint Display
0000235A  0C02 0044 3796          cmp.b     #68,D2
0000235E  6608      3797          bne.s     Breakpoint_1
                    3798   ; BreakPointDisplay();
00002360  4EB8 1C2A 3799          jsr       _BreakPointDisplay
00002364  6000 0054 3800          bra       Breakpoint_10
                    3801   Breakpoint_1:
                    3802   ; else if (c == (char)('K')) {                                 // breakpoint Kill
00002368  0C02 004B 3803          cmp.b     #75,D2
0000236C  6630      3804          bne.s     Breakpoint_3
                    3805   ; printf("\r\nKill All Break Points...(y/n)?");
0000236E  4879 0000 3806          pea       @lab3_94.L
00002372  4868      
00002374  4EB9 0000 3807          jsr       _printf
00002378  3576      
0000237A  584F      3808          addq.w    #4,A7
                    3809   ; c = toupper(_getch());
0000237C  2F00      3810          move.l    D0,-(A7)
0000237E  4EB8 0B68 3811          jsr       __getch
00002382  2200      3812          move.l    D0,D1
00002384  201F      3813          move.l    (A7)+,D0
00002386  2F01      3814          move.l    D1,-(A7)
00002388  4EB9 0000 3815          jsr       _toupper
0000238C  354A      
0000238E  584F      3816          addq.w    #4,A7
00002390  1400      3817          move.b    D0,D2
                    3818   ; if (c == (char)('Y'))
00002392  0C02 0059 3819          cmp.b     #89,D2
00002396  6604      3820          bne.s     Breakpoint_5
                    3821   ; KillAllBreakPoints();
00002398  4EB8 1FC2 3822          jsr       _KillAllBreakPoints
                    3823   Breakpoint_5:
0000239C  601C      3824          bra.s     Breakpoint_10
                    3825   Breakpoint_3:
                    3826   ; }
                    3827   ; else if (c == (char)('S')) {
0000239E  0C02 0053 3828          cmp.b     #83,D2
000023A2  6606      3829          bne.s     Breakpoint_7
                    3830   ; SetBreakPoint();
000023A4  4EB8 205A 3831          jsr       _SetBreakPoint
000023A8  6010      3832          bra.s     Breakpoint_10
                    3833   Breakpoint_7:
                    3834   ; }
                    3835   ; else if (c == (char)('C')) {
000023AA  0C02 0043 3836          cmp.b     #67,D2
000023AE  6606      3837          bne.s     Breakpoint_9
                    3838   ; BreakPointClear();
000023B0  4EB8 1DAA 3839          jsr       _BreakPointClear
000023B4  6004      3840          bra.s     Breakpoint_10
                    3841   Breakpoint_9:
                    3842   ; }
                    3843   ; else
                    3844   ; UnknownCommand();
000023B6  4EB8 2316 3845          jsr       _UnknownCommand
                    3846   Breakpoint_10:
000023BA  241F      3847          move.l    (A7)+,D2
000023BC  4E75      3848          rts
                    3849   ; }
                    3850   ; void Watchpoint(void)
                    3851   ; {
                    3852   _Watchpoint:
000023BE  2F02      3853          move.l    D2,-(A7)
                    3854   ; char c;
                    3855   ; c = toupper(_getch());
000023C0  2F00      3856          move.l    D0,-(A7)
000023C2  4EB8 0B68 3857          jsr       __getch
000023C6  2200      3858          move.l    D0,D1
000023C8  201F      3859          move.l    (A7)+,D0
000023CA  2F01      3860          move.l    D1,-(A7)
000023CC  4EB9 0000 3861          jsr       _toupper
000023D0  354A      
000023D2  584F      3862          addq.w    #4,A7
000023D4  1400      3863          move.b    D0,D2
                    3864   ; if (c == (char)('D'))                                      // WatchPoint Display
000023D6  0C02 0044 3865          cmp.b     #68,D2
000023DA  6608      3866          bne.s     Watchpoint_1
                    3867   ; WatchPointDisplay();
000023DC  4EB8 1CFE 3868          jsr       _WatchPointDisplay
000023E0  6000 0054 3869          bra       Watchpoint_10
                    3870   Watchpoint_1:
                    3871   ; else if (c == (char)('K')) {                                 // wtahcpoint Kill
000023E4  0C02 004B 3872          cmp.b     #75,D2
000023E8  6630      3873          bne.s     Watchpoint_3
                    3874   ; printf("\r\nKill All Watch Points...(y/n)?");
000023EA  4879 0000 3875          pea       @lab3_95.L
000023EE  488A      
000023F0  4EB9 0000 3876          jsr       _printf
000023F4  3576      
000023F6  584F      3877          addq.w    #4,A7
                    3878   ; c = toupper(_getch());
000023F8  2F00      3879          move.l    D0,-(A7)
000023FA  4EB8 0B68 3880          jsr       __getch
000023FE  2200      3881          move.l    D0,D1
00002400  201F      3882          move.l    (A7)+,D0
00002402  2F01      3883          move.l    D1,-(A7)
00002404  4EB9 0000 3884          jsr       _toupper
00002408  354A      
0000240A  584F      3885          addq.w    #4,A7
0000240C  1400      3886          move.b    D0,D2
                    3887   ; if (c == (char)('Y'))
0000240E  0C02 0059 3888          cmp.b     #89,D2
00002412  6604      3889          bne.s     Watchpoint_5
                    3890   ; KillAllWatchPoints();
00002414  4EB8 202A 3891          jsr       _KillAllWatchPoints
                    3892   Watchpoint_5:
00002418  601C      3893          bra.s     Watchpoint_10
                    3894   Watchpoint_3:
                    3895   ; }
                    3896   ; else if (c == (char)('S')) {
0000241A  0C02 0053 3897          cmp.b     #83,D2
0000241E  6606      3898          bne.s     Watchpoint_7
                    3899   ; SetWatchPoint();
00002420  4EB8 217A 3900          jsr       _SetWatchPoint
00002424  6010      3901          bra.s     Watchpoint_10
                    3902   Watchpoint_7:
                    3903   ; }
                    3904   ; else if (c == (char)('C')) {
00002426  0C02 0043 3905          cmp.b     #67,D2
0000242A  6606      3906          bne.s     Watchpoint_9
                    3907   ; WatchPointClear();
0000242C  4EB8 1E84 3908          jsr       _WatchPointClear
00002430  6004      3909          bra.s     Watchpoint_10
                    3910   Watchpoint_9:
                    3911   ; }
                    3912   ; else
                    3913   ; UnknownCommand();
00002432  4EB8 2316 3914          jsr       _UnknownCommand
                    3915   Watchpoint_10:
00002436  241F      3916          move.l    (A7)+,D2
00002438  4E75      3917          rts
                    3918   ; }
                    3919   ; void Help(void)
                    3920   ; {
                    3921   _Help:
0000243A  48E7 2020 3922          movem.l   D2/A2,-(A7)
0000243E  45F9 0000 3923          lea       _printf.L,A2
00002442  3576      
                    3924   ; char* banner = "\r\n----------------------------------------------------------------";
00002444  41F9 0000 3925          lea       @lab3_96.L,A0
00002448  48AC      
0000244A  2408      3926          move.l    A0,D2
                    3927   ; printf(banner);
0000244C  2F02      3928          move.l    D2,-(A7)
0000244E  4E92      3929          jsr       (A2)
00002450  584F      3930          addq.w    #4,A7
                    3931   ; printf("\r\n  Debugger Command Summary");
00002452  4879 0000 3932          pea       @lab3_97.L
00002456  48F0      
00002458  4E92      3933          jsr       (A2)
0000245A  584F      3934          addq.w    #4,A7
                    3935   ; printf(banner);
0000245C  2F02      3936          move.l    D2,-(A7)
0000245E  4E92      3937          jsr       (A2)
00002460  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002462  4879 0000 3940          pea       @lab3_98.L
00002466  490E      
00002468  4E92      3941          jsr       (A2)
0000246A  584F      3942          addq.w    #4,A7
                    3943   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill");
0000246C  4879 0000 3944          pea       @lab3_99.L
00002470  4952      
00002472  4E92      3945          jsr       (A2)
00002474  584F      3946          addq.w    #4,A7
                    3947   ; printf("\r\n  C            - Copy Program from Flash to Main Memory");
00002476  4879 0000 3948          pea       @lab3_100.L
0000247A  498A      
0000247C  4E92      3949          jsr       (A2)
0000247E  584F      3950          addq.w    #4,A7
                    3951   ; printf("\r\n  D            - Dump Memory Contents to Screen");
00002480  4879 0000 3952          pea       @lab3_101.L
00002484  49C4      
00002486  4E92      3953          jsr       (A2)
00002488  584F      3954          addq.w    #4,A7
                    3955   ; printf("\r\n  E            - Enter String into Memory");
0000248A  4879 0000 3956          pea       @lab3_102.L
0000248E  49F6      
00002490  4E92      3957          jsr       (A2)
00002492  584F      3958          addq.w    #4,A7
                    3959   ; printf("\r\n  F            - Fill Memory with Data");
00002494  4879 0000 3960          pea       @lab3_103.L
00002498  4A22      
0000249A  4E92      3961          jsr       (A2)
0000249C  584F      3962          addq.w    #4,A7
                    3963   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC);
0000249E  2F39 0B00 3964          move.l    _PC.L,-(A7)
000024A2  0120      
000024A4  4879 0000 3965          pea       @lab3_104.L
000024A8  4A4C      
000024AA  4E92      3966          jsr       (A2)
000024AC  504F      3967          addq.w    #8,A7
                    3968   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop");
000024AE  4879 0000 3969          pea       @lab3_105.L
000024B2  4A86      
000024B4  4E92      3970          jsr       (A2)
000024B6  584F      3971          addq.w    #4,A7
                    3972   ; printf("\r\n  M            - Memory Examine and Change");
000024B8  4879 0000 3973          pea       @lab3_106.L
000024BC  4ABE      
000024BE  4E92      3974          jsr       (A2)
000024C0  584F      3975          addq.w    #4,A7
                    3976   ; printf("\r\n  P            - Program Flash Memory with User Program");
000024C2  4879 0000 3977          pea       @lab3_107.L
000024C6  4AEC      
000024C8  4E92      3978          jsr       (A2)
000024CA  584F      3979          addq.w    #4,A7
                    3980   ; printf("\r\n  R            - Display 68000 Registers");
000024CC  4879 0000 3981          pea       @lab3_108.L
000024D0  4B26      
000024D2  4E92      3982          jsr       (A2)
000024D4  584F      3983          addq.w    #4,A7
                    3984   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode");
000024D6  4879 0000 3985          pea       @lab3_109.L
000024DA  4B52      
000024DC  4E92      3986          jsr       (A2)
000024DE  584F      3987          addq.w    #4,A7
                    3988   ; printf("\r\n  TM           - Test Memory");
000024E0  4879 0000 3989          pea       @lab3_110.L
000024E4  4B84      
000024E6  4E92      3990          jsr       (A2)
000024E8  584F      3991          addq.w    #4,A7
                    3992   ; printf("\r\n  TS           - Test Switches: SW7-0");
000024EA  4879 0000 3993          pea       @lab3_111.L
000024EE  4BA4      
000024F0  4E92      3994          jsr       (A2)
000024F2  584F      3995          addq.w    #4,A7
                    3996   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment");
000024F4  4879 0000 3997          pea       @lab3_112.L
000024F8  4BCC      
000024FA  4E92      3998          jsr       (A2)
000024FC  584F      3999          addq.w    #4,A7
                    4000   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill");
000024FE  4879 0000 4001          pea       @lab3_113.L
00002502  4C02      
00002504  4E92      4002          jsr       (A2)
00002506  584F      4003          addq.w    #4,A7
                    4004   ; printf(banner);
00002508  2F02      4005          move.l    D2,-(A7)
0000250A  4E92      4006          jsr       (A2)
0000250C  584F      4007          addq.w    #4,A7
0000250E  4CDF 0404 4008          movem.l   (A7)+,D2/A2
00002512  4E75      4009          rts
                    4010   ; }
                    4011   ; void menu(void)
                    4012   ; {
                    4013   _menu:
00002514  48E7 303C 4014          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002518  45F9 0000 4015          lea       _printf.L,A2
0000251C  3576      
0000251E  47F9 0B00 4016          lea       _Trace.L,A3
00002522  00D8      
00002524  49F9 0B00 4017          lea       _x.L,A4
00002528  00C8      
0000252A  4BF9 0B00 4018          lea       _SR.L,A5
0000252E  012C      
                    4019   ; char c, c1;
                    4020   ; while (1) {
                    4021   menu_1:
                    4022   ; FlushKeyboard();               // dump unread characters from keyboard
00002530  4EB8 0BA6 4023          jsr       _FlushKeyboard
                    4024   ; printf("\r\n#");
00002534  4879 0000 4025          pea       @lab3_114.L
00002538  4C3A      
0000253A  4E92      4026          jsr       (A2)
0000253C  584F      4027          addq.w    #4,A7
                    4028   ; c = toupper(_getch());
0000253E  2F00      4029          move.l    D0,-(A7)
00002540  4EB8 0B68 4030          jsr       __getch
00002544  2200      4031          move.l    D0,D1
00002546  201F      4032          move.l    (A7)+,D0
00002548  2F01      4033          move.l    D1,-(A7)
0000254A  4EB9 0000 4034          jsr       _toupper
0000254E  354A      
00002550  584F      4035          addq.w    #4,A7
00002552  1400      4036          move.b    D0,D2
                    4037   ; if (c == (char)('L'))                  // load s record file
00002554  0C02 004C 4038          cmp.b     #76,D2
00002558  6608      4039          bne.s     menu_4
                    4040   ; Load_SRecordFile();
0000255A  4EB8 0E36 4041          jsr       _Load_SRecordFile
0000255E  6000 021E 4042          bra       menu_46
                    4043   menu_4:
                    4044   ; else if (c == (char)('D'))             // dump memory
00002562  0C02 0044 4045          cmp.b     #68,D2
00002566  6608      4046          bne.s     menu_6
                    4047   ; DumpMemory();
00002568  4EB8 0CCC 4048          jsr       _DumpMemory
0000256C  6000 0210 4049          bra       menu_46
                    4050   menu_6:
                    4051   ; else if (c == (char)('E'))             // Enter String into memory
00002570  0C02 0045 4052          cmp.b     #69,D2
00002574  660A      4053          bne.s     menu_8
                    4054   ; EnterString();
00002576  4EB9 0000 4055          jsr       _EnterString
0000257A  28C6      
0000257C  6000 0200 4056          bra       menu_46
                    4057   menu_8:
                    4058   ; else if (c == (char)('F'))             // fill memory
00002580  0C02 0046 4059          cmp.b     #70,D2
00002584  6608      4060          bne.s     menu_10
                    4061   ; FillMemory();
00002586  4EB8 0DBC 4062          jsr       _FillMemory
0000258A  6000 01F2 4063          bra       menu_46
                    4064   menu_10:
                    4065   ; else if (c == (char)('G')) {           // go user program
0000258E  0C02 0047 4066          cmp.b     #71,D2
00002592  6626      4067          bne.s     menu_12
                    4068   ; printf("\r\nProgram Running.....");
00002594  4879 0000 4069          pea       @lab3_115.L
00002598  4C3E      
0000259A  4E92      4070          jsr       (A2)
0000259C  584F      4071          addq.w    #4,A7
                    4072   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
0000259E  4879 0000 4073          pea       @lab3_116.L
000025A2  4C56      
000025A4  4E92      4074          jsr       (A2)
000025A6  584F      4075          addq.w    #4,A7
                    4076   ; GoFlag = 1;
000025A8  23FC 0000 4077          move.l    #1,_GoFlag.L
000025AC  0001 0B00 
000025B0  00DC      
                    4078   ; go();
000025B2  4EB8 08B8 4079          jsr       _go
000025B6  6000 01C6 4080          bra       menu_46
                    4081   menu_12:
                    4082   ; }
                    4083   ; else if (c == (char)('M'))           // memory examine and modify
000025BA  0C02 004D 4084          cmp.b     #77,D2
000025BE  6608      4085          bne.s     menu_14
                    4086   ; MemoryChange();
000025C0  4EB8 0FC4 4087          jsr       _MemoryChange
000025C4  6000 01B8 4088          bra       menu_46
                    4089   menu_14:
                    4090   ; else if (c == (char)('P'))            // Program Flash Chip
000025C8  0C02 0050 4091          cmp.b     #80,D2
000025CC  6608      4092          bne.s     menu_16
                    4093   ; ProgramFlashChip();
000025CE  4EB8 12E6 4094          jsr       _ProgramFlashChip
000025D2  6000 01AA 4095          bra       menu_46
                    4096   menu_16:
                    4097   ; else if (c == (char)('C'))             // copy flash chip to ram and go
000025D6  0C02 0043 4098          cmp.b     #67,D2
000025DA  6608      4099          bne.s     menu_18
                    4100   ; LoadFromFlashChip();
000025DC  4EB8 13F4 4101          jsr       _LoadFromFlashChip
000025E0  6000 019C 4102          bra       menu_46
                    4103   menu_18:
                    4104   ; else if (c == (char)('R'))             // dump registers
000025E4  0C02 0052 4105          cmp.b     #82,D2
000025E8  6608      4106          bne.s     menu_20
                    4107   ; DumpRegisters();
000025EA  4EB8 147C 4108          jsr       _DumpRegisters
000025EE  6000 018E 4109          bra       menu_46
                    4110   menu_20:
                    4111   ; else if (c == (char)('.'))           // change registers
000025F2  0C02 002E 4112          cmp.b     #46,D2
000025F6  6608      4113          bne.s     menu_22
                    4114   ; ChangeRegisters();
000025F8  4EB8 196E 4115          jsr       _ChangeRegisters
000025FC  6000 0180 4116          bra       menu_46
                    4117   menu_22:
                    4118   ; else if (c == (char)('B'))              // breakpoint command
00002600  0C02 0042 4119          cmp.b     #66,D2
00002604  6608      4120          bne.s     menu_24
                    4121   ; Breakpoint();
00002606  4EB8 2342 4122          jsr       _Breakpoint
0000260A  6000 0172 4123          bra       menu_46
                    4124   menu_24:
                    4125   ; else if (c == (char)('T')) {          // Test command
0000260E  0C02 0054 4126          cmp.b     #84,D2
00002612  6600 0046 4127          bne       menu_26
                    4128   ; c1 = toupper(_getch());
00002616  2F00      4129          move.l    D0,-(A7)
00002618  4EB8 0B68 4130          jsr       __getch
0000261C  2200      4131          move.l    D0,D1
0000261E  201F      4132          move.l    (A7)+,D0
00002620  2F01      4133          move.l    D1,-(A7)
00002622  4EB9 0000 4134          jsr       _toupper
00002626  354A      
00002628  584F      4135          addq.w    #4,A7
0000262A  1600      4136          move.b    D0,D3
                    4137   ; if (c1 == (char)('M'))                    // memory test
0000262C  0C03 004D 4138          cmp.b     #77,D3
00002630  6608      4139          bne.s     menu_28
                    4140   ; MemoryTest();
00002632  4EB9 0000 4141          jsr       _MemoryTest
00002636  2916      
00002638  601C      4142          bra.s     menu_33
                    4143   menu_28:
                    4144   ; else if (c1 == (char)('S'))              // Switch Test command
0000263A  0C03 0053 4145          cmp.b     #83,D3
0000263E  6606      4146          bne.s     menu_30
                    4147   ; SwitchTest();
00002640  4EB8 0AA4 4148          jsr       _SwitchTest
00002644  6010      4149          bra.s     menu_33
                    4150   menu_30:
                    4151   ; else if (c1 == (char)('D'))              // display Test command
00002646  0C03 0044 4152          cmp.b     #68,D3
0000264A  6606      4153          bne.s     menu_32
                    4154   ; TestLEDS();
0000264C  4EB8 0A50 4155          jsr       _TestLEDS
00002650  6004      4156          bra.s     menu_33
                    4157   menu_32:
                    4158   ; else
                    4159   ; UnknownCommand();
00002652  4EB8 2316 4160          jsr       _UnknownCommand
                    4161   menu_33:
00002656  6000 0126 4162          bra       menu_46
                    4163   menu_26:
                    4164   ; }
                    4165   ; else if (c == (char)(' ')) {             // Next instruction command
0000265A  0C02 0020 4166          cmp.b     #32,D2
0000265E  6636      4167          bne.s     menu_34
                    4168   ; DisableBreakPoints();
00002660  4EB8 1F26 4169          jsr       _DisableBreakPoints
                    4170   ; if (Trace == 1 && GoFlag == 1) {    // if the program is running and trace mode on then 'N' is valid
00002664  2013      4171          move.l    (A3),D0
00002666  0C80 0000 4172          cmp.l     #1,D0
0000266A  0001      
0000266C  661A      4173          bne.s     menu_36
0000266E  2039 0B00 4174          move.l    _GoFlag.L,D0
00002672  00DC      
00002674  0C80 0000 4175          cmp.l     #1,D0
00002678  0001      
0000267A  660C      4176          bne.s     menu_36
                    4177   ; TraceException = 1;             // generate a trace exception for the next instruction if user wants to single step though next instruction
0000267C  13FC 0001 4178          move.b    #1,4194314
00002680  0040 000A 
                    4179   ; return;
00002684  6000 00FC 4180          bra       menu_38
                    4181   menu_36:
                    4182   ; }
                    4183   ; else
                    4184   ; printf("\r\nError: Press 'G' first to start program");
00002688  4879 0000 4185          pea       @lab3_117.L
0000268C  4C84      
0000268E  4E92      4186          jsr       (A2)
00002690  584F      4187          addq.w    #4,A7
00002692  6000 00EA 4188          bra       menu_46
                    4189   menu_34:
                    4190   ; }
                    4191   ; else if (c == (char)('S')) {             // single step
00002696  0C02 0053 4192          cmp.b     #83,D2
0000269A  6600 008C 4193          bne       menu_39
                    4194   ; if (Trace == 0) {
0000269E  2013      4195          move.l    (A3),D0
000026A0  6600 0050 4196          bne       menu_41
                    4197   ; DisableBreakPoints();
000026A4  4EB8 1F26 4198          jsr       _DisableBreakPoints
                    4199   ; printf("\r\nSingle Step  :[ON]");
000026A8  4879 0000 4200          pea       @lab3_118.L
000026AC  4CAE      
000026AE  4E92      4201          jsr       (A2)
000026B0  584F      4202          addq.w    #4,A7
                    4203   ; printf("\r\nBreak Points :[Disabled]");
000026B2  4879 0000 4204          pea       @lab3_51.L
000026B6  434C      
000026B8  4E92      4205          jsr       (A2)
000026BA  584F      4206          addq.w    #4,A7
                    4207   ; SR = SR | (unsigned short int)(0x8000);    // set T bit in status register
000026BC  0055 8000 4208          or.w      #32768,(A5)
                    4209   ; printf("\r\nPress 'G' to Trace Program from address $%X.....", PC);
000026C0  2F39 0B00 4210          move.l    _PC.L,-(A7)
000026C4  0120      
000026C6  4879 0000 4211          pea       @lab3_119.L
000026CA  4CC4      
000026CC  4E92      4212          jsr       (A2)
000026CE  504F      4213          addq.w    #8,A7
                    4214   ; printf("\r\nPush <RESET Button> to Stop.....");
000026D0  4879 0000 4215          pea       @lab3_120.L
000026D4  4CF8      
000026D6  4E92      4216          jsr       (A2)
000026D8  584F      4217          addq.w    #4,A7
                    4218   ; DumpRegisters();
000026DA  4EB8 147C 4219          jsr       _DumpRegisters
                    4220   ; Trace = 1;
000026DE  26BC 0000 4221          move.l    #1,(A3)
000026E2  0001      
                    4222   ; TraceException = 1;
000026E4  13FC 0001 4223          move.b    #1,4194314
000026E8  0040 000A 
                    4224   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000026EC  28B8 0074 4225          move.l    116,(A4)
000026F0  6032      4226          bra.s     menu_42
                    4227   menu_41:
                    4228   ; }
                    4229   ; else {
                    4230   ; Trace = 0;
000026F2  4293      4231          clr.l     (A3)
                    4232   ; TraceException = 0;
000026F4  4239 0040 4233          clr.b     4194314
000026F8  000A      
                    4234   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000026FA  28B8 0074 4235          move.l    116,(A4)
                    4236   ; EnableBreakPoints();
000026FE  4EB8 1F7A 4237          jsr       _EnableBreakPoints
                    4238   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
00002702  0255 7FFF 4239          and.w     #32767,(A5)
                    4240   ; printf("\r\nSingle Step : [OFF]");
00002706  4879 0000 4241          pea       @lab3_121.L
0000270A  4D1C      
0000270C  4E92      4242          jsr       (A2)
0000270E  584F      4243          addq.w    #4,A7
                    4244   ; printf("\r\nBreak Points :[Enabled]");
00002710  4879 0000 4245          pea       @lab3_122.L
00002714  4D32      
00002716  4E92      4246          jsr       (A2)
00002718  584F      4247          addq.w    #4,A7
                    4248   ; printf("\r\nPress <ESC> to Resume User Program.....");
0000271A  4879 0000 4249          pea       @lab3_123.L
0000271E  4D4C      
00002720  4E92      4250          jsr       (A2)
00002722  584F      4251          addq.w    #4,A7
                    4252   menu_42:
00002724  6000 0058 4253          bra       menu_46
                    4254   menu_39:
                    4255   ; }
                    4256   ; }
                    4257   ; else if (c == (char)(0x1b)) {   // if user choses to end trace and run program
00002728  0C02 001B 4258          cmp.b     #27,D2
0000272C  6600 0040 4259          bne       menu_43
                    4260   ; Trace = 0;
00002730  4293      4261          clr.l     (A3)
                    4262   ; TraceException = 0;
00002732  4239 0040 4263          clr.b     4194314
00002736  000A      
                    4264   ; x = *(unsigned int*)(0x00000074);   // read IRQ 5 vector to reset trace vector generator
00002738  28B8 0074 4265          move.l    116,(A4)
                    4266   ; EnableBreakPoints();
0000273C  4EB8 1F7A 4267          jsr       _EnableBreakPoints
                    4268   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
00002740  0255 7FFF 4269          and.w     #32767,(A5)
                    4270   ; printf("\r\nSingle Step  :[OFF]");
00002744  4879 0000 4271          pea       @lab3_124.L
00002748  4D76      
0000274A  4E92      4272          jsr       (A2)
0000274C  584F      4273          addq.w    #4,A7
                    4274   ; printf("\r\nBreak Points :[Enabled]");
0000274E  4879 0000 4275          pea       @lab3_122.L
00002752  4D32      
00002754  4E92      4276          jsr       (A2)
00002756  584F      4277          addq.w    #4,A7
                    4278   ; printf("\r\nProgram Running.....");
00002758  4879 0000 4279          pea       @lab3_115.L
0000275C  4C3E      
0000275E  4E92      4280          jsr       (A2)
00002760  584F      4281          addq.w    #4,A7
                    4282   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
00002762  4879 0000 4283          pea       @lab3_116.L
00002766  4C56      
00002768  4E92      4284          jsr       (A2)
0000276A  584F      4285          addq.w    #4,A7
                    4286   ; return;
0000276C  6014      4287          bra.s     menu_38
                    4288   menu_43:
                    4289   ; }
                    4290   ; else if (c == (char)('W'))              // Watchpoint command
0000276E  0C02 0057 4291          cmp.b     #87,D2
00002772  6606      4292          bne.s     menu_45
                    4293   ; Watchpoint();
00002774  4EB8 23BE 4294          jsr       _Watchpoint
00002778  6004      4295          bra.s     menu_46
                    4296   menu_45:
                    4297   ; else
                    4298   ; UnknownCommand();
0000277A  4EB8 2316 4299          jsr       _UnknownCommand
                    4300   menu_46:
0000277E  6000 FDB0 4301          bra       menu_1
                    4302   menu_38:
00002782  4CDF 3C0C 4303          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002786  4E75      4304          rts
                    4305   ; }
                    4306   ; }
                    4307   ; void PrintErrorMessageandAbort(char* string) {
                    4308   _PrintErrorMessageandAbort:
00002788  4E56 0000 4309          link      A6,#0
                    4310   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n");
0000278C  4879 0000 4311          pea       @lab3_125.L
00002790  4D8C      
00002792  4EB9 0000 4312          jsr       _printf
00002796  3576      
00002798  584F      4313          addq.w    #4,A7
                    4314   ; printf("%s\r\n", string);
0000279A  2F2E 0008 4315          move.l    8(A6),-(A7)
0000279E  4879 0000 4316          pea       @lab3_126.L
000027A2  4DA8      
000027A4  4EB9 0000 4317          jsr       _printf
000027A8  3576      
000027AA  504F      4318          addq.w    #8,A7
                    4319   ; menu();
000027AC  4EB8 2514 4320          jsr       _menu
000027B0  4E5E      4321          unlk      A6
000027B2  4E75      4322          rts
                    4323   ; }
                    4324   ; void IRQMessage(int level) {
                    4325   _IRQMessage:
000027B4  4E56 0000 4326          link      A6,#0
                    4327   ; printf("\r\n\r\nProgram ABORT !!!!!");
000027B8  4879 0000 4328          pea       @lab3_127.L
000027BC  4DAE      
000027BE  4EB9 0000 4329          jsr       _printf
000027C2  3576      
000027C4  584F      4330          addq.w    #4,A7
                    4331   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level);
000027C6  2F2E 0008 4332          move.l    8(A6),-(A7)
000027CA  4879 0000 4333          pea       @lab3_128.L
000027CE  4DC6      
000027D0  4EB9 0000 4334          jsr       _printf
000027D4  3576      
000027D6  504F      4335          addq.w    #8,A7
                    4336   ; menu();
000027D8  4EB8 2514 4337          jsr       _menu
000027DC  4E5E      4338          unlk      A6
000027DE  4E75      4339          rts
                    4340   ; }
                    4341   ; void UnhandledIRQ1(void) {
                    4342   _UnhandledIRQ1:
                    4343   ; IRQMessage(1);
000027E0  4878 0001 4344          pea       1
000027E4  4EB8 27B4 4345          jsr       _IRQMessage
000027E8  584F      4346          addq.w    #4,A7
000027EA  4E75      4347          rts
                    4348   ; }
                    4349   ; void UnhandledIRQ2(void) {
                    4350   _UnhandledIRQ2:
                    4351   ; IRQMessage(2);
000027EC  4878 0002 4352          pea       2
000027F0  4EB8 27B4 4353          jsr       _IRQMessage
000027F4  584F      4354          addq.w    #4,A7
000027F6  4E75      4355          rts
                    4356   ; }
                    4357   ; void UnhandledIRQ3(void) {
                    4358   _UnhandledIRQ3:
                    4359   ; IRQMessage(3);
000027F8  4878 0003 4360          pea       3
000027FC  4EB8 27B4 4361          jsr       _IRQMessage
00002800  584F      4362          addq.w    #4,A7
00002802  4E75      4363          rts
                    4364   ; }
                    4365   ; void UnhandledIRQ4(void) {
                    4366   _UnhandledIRQ4:
                    4367   ; IRQMessage(4);
00002804  4878 0004 4368          pea       4
00002808  4EB8 27B4 4369          jsr       _IRQMessage
0000280C  584F      4370          addq.w    #4,A7
0000280E  4E75      4371          rts
                    4372   ; }
                    4373   ; void UnhandledIRQ5(void) {
                    4374   _UnhandledIRQ5:
                    4375   ; IRQMessage(5);
00002810  4878 0005 4376          pea       5
00002814  4EB8 27B4 4377          jsr       _IRQMessage
00002818  584F      4378          addq.w    #4,A7
0000281A  4E75      4379          rts
                    4380   ; }
                    4381   ; void UnhandledIRQ6(void) {
                    4382   _UnhandledIRQ6:
                    4383   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....");
0000281C  4879 0000 4384          pea       @lab3_129.L
00002820  4DEA      
00002822  4EB8 2788 4385          jsr       _PrintErrorMessageandAbort
00002826  584F      4386          addq.w    #4,A7
                    4387   ; menu();
00002828  4EB8 2514 4388          jsr       _menu
0000282C  4E75      4389          rts
                    4390   ; }
                    4391   ; void UnhandledIRQ7(void) {
                    4392   _UnhandledIRQ7:
                    4393   ; IRQMessage(7);
0000282E  4878 0007 4394          pea       7
00002832  4EB8 27B4 4395          jsr       _IRQMessage
00002836  584F      4396          addq.w    #4,A7
00002838  4E75      4397          rts
                    4398   ; }
                    4399   ; void UnhandledTrap(void) {
                    4400   _UnhandledTrap:
                    4401   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!");
0000283A  4879 0000 4402          pea       @lab3_130.L
0000283E  4E2A      
00002840  4EB8 2788 4403          jsr       _PrintErrorMessageandAbort
00002844  584F      4404          addq.w    #4,A7
00002846  4E75      4405          rts
                    4406   ; }
                    4407   ; void BusError() {
                    4408   _BusError:
                    4409   ; PrintErrorMessageandAbort("BUS Error!");
00002848  4879 0000 4410          pea       @lab3_131.L
0000284C  4E40      
0000284E  4EB8 2788 4411          jsr       _PrintErrorMessageandAbort
00002852  584F      4412          addq.w    #4,A7
00002854  4E75      4413          rts
                    4414   ; }
                    4415   ; void AddressError() {
                    4416   _AddressError:
                    4417   ; PrintErrorMessageandAbort("ADDRESS Error!");
00002856  4879 0000 4418          pea       @lab3_132.L
0000285A  4E4C      
0000285C  4EB8 2788 4419          jsr       _PrintErrorMessageandAbort
00002860  584F      4420          addq.w    #4,A7
00002862  4E75      4421          rts
                    4422   ; }
                    4423   ; void IllegalInstruction() {
                    4424   _IllegalInstruction:
                    4425   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION");
00002864  4879 0000 4426          pea       @lab3_133.L
00002868  4E5C      
0000286A  4EB8 2788 4427          jsr       _PrintErrorMessageandAbort
0000286E  584F      4428          addq.w    #4,A7
00002870  4E75      4429          rts
                    4430   ; }
                    4431   ; void Dividebyzero() {
                    4432   _Dividebyzero:
                    4433   ; PrintErrorMessageandAbort("DIVIDE BY ZERO");
00002872  4879 0000 4434          pea       @lab3_134.L
00002876  4E70      
00002878  4EB8 2788 4435          jsr       _PrintErrorMessageandAbort
0000287C  584F      4436          addq.w    #4,A7
0000287E  4E75      4437          rts
                    4438   ; }
                    4439   ; void Check() {
                    4440   _Check:
                    4441   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION");
00002880  4879 0000 4442          pea       @lab3_135.L
00002884  4E80      
00002886  4EB8 2788 4443          jsr       _PrintErrorMessageandAbort
0000288A  584F      4444          addq.w    #4,A7
0000288C  4E75      4445          rts
                    4446   ; }
                    4447   ; void Trapv() {
                    4448   _Trapv:
                    4449   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION");
0000288E  4879 0000 4450          pea       @lab3_136.L
00002892  4E92      
00002894  4EB8 2788 4451          jsr       _PrintErrorMessageandAbort
00002898  584F      4452          addq.w    #4,A7
0000289A  4E75      4453          rts
                    4454   ; }
                    4455   ; void PrivError() {
                    4456   _PrivError:
                    4457   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION");
0000289C  4879 0000 4458          pea       @lab3_137.L
000028A0  4EA4      
000028A2  4EB8 2788 4459          jsr       _PrintErrorMessageandAbort
000028A6  584F      4460          addq.w    #4,A7
000028A8  4E75      4461          rts
                    4462   ; }
                    4463   ; void UnitIRQ() {
                    4464   _UnitIRQ:
                    4465   ; PrintErrorMessageandAbort("UNINITIALISED IRQ");
000028AA  4879 0000 4466          pea       @lab3_138.L
000028AE  4EB8      
000028B0  4EB8 2788 4467          jsr       _PrintErrorMessageandAbort
000028B4  584F      4468          addq.w    #4,A7
000028B6  4E75      4469          rts
                    4470   ; }
                    4471   ; void Spurious() {
                    4472   _Spurious:
                    4473   ; PrintErrorMessageandAbort("SPURIOUS IRQ");
000028B8  4879 0000 4474          pea       @lab3_139.L
000028BC  4ECA      
000028BE  4EB8 2788 4475          jsr       _PrintErrorMessageandAbort
000028C2  584F      4476          addq.w    #4,A7
000028C4  4E75      4477          rts
                    4478   ; }
                    4479   ; void EnterString(void)
                    4480   ; {
                    4481   _EnterString:
000028C6  4E56 FFFC 4482          link      A6,#-4
000028CA  2F02      4483          move.l    D2,-(A7)
                    4484   ; unsigned char* Start;
                    4485   ; unsigned char c;
                    4486   ; printf("\r\nStart Address in Memory: ");
000028CC  4879 0000 4487          pea       @lab3_140.L
000028D0  4ED8      
000028D2  4EB9 0000 4488          jsr       _printf
000028D6  3576      
000028D8  584F      4489          addq.w    #4,A7
                    4490   ; Start = Get8HexDigits(0);
000028DA  42A7      4491          clr.l     -(A7)
000028DC  4EB8 0CA4 4492          jsr       _Get8HexDigits
000028E0  584F      4493          addq.w    #4,A7
000028E2  2400      4494          move.l    D0,D2
                    4495   ; printf("\r\nEnter String (ESC to end) :");
000028E4  4879 0000 4496          pea       @lab3_141.L
000028E8  4EF4      
000028EA  4EB9 0000 4497          jsr       _printf
000028EE  3576      
000028F0  584F      4498          addq.w    #4,A7
                    4499   ; while ((c = getchar()) != 0x1b)
                    4500   EnterString_1:
000028F2  4EB9 0000 4501          jsr       _getch
000028F6  3498      
000028F8  1D40 FFFF 4502          move.b    D0,-1(A6)
000028FC  0C00 001B 4503          cmp.b     #27,D0
00002900  670A      4504          beq.s     EnterString_3
                    4505   ; *Start++ = c;
00002902  2042      4506          move.l    D2,A0
00002904  5282      4507          addq.l    #1,D2
00002906  10AE FFFF 4508          move.b    -1(A6),(A0)
0000290A  60E6      4509          bra       EnterString_1
                    4510   EnterString_3:
                    4511   ; *Start = 0x00;  // terminate with a null
0000290C  2042      4512          move.l    D2,A0
0000290E  4210      4513          clr.b     (A0)
00002910  241F      4514          move.l    (A7)+,D2
00002912  4E5E      4515          unlk      A6
00002914  4E75      4516          rts
                    4517   ; }
                    4518   ; void MemoryTest(void)
                    4519   ; {
                    4520   _MemoryTest:
00002916  4E56 FFB8 4521          link      A6,#-72
0000291A  48E7 3F3C 4522          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000291E  45F9 0000 4523          lea       _printf.L,A2
00002922  3576      
00002924  49F8 0CA4 4524          lea       _Get8HexDigits.L,A4
                    4525   ; char data_type_num;
                    4526   ; unsigned int test_data_num;
                    4527   ; unsigned char* StartPtrByte, * EndPtrByte, * TempPtrByte;
                    4528   ; unsigned short int* StartPtrWord, * EndPtrWord, * TempPtrWord;
                    4529   ; unsigned int* StartPtrLongWord, * EndPtrLongWord, * TempPtrLongWord;
                    4530   ; int StartPtrLongWordTruc, EndPtrLongWordTruc;
                    4531   ; unsigned char test_data_byte_list[] = { 0xAA, 0xAB, 0xCC, 0xCD };
00002928  41EE FFD4 4532          lea       -44(A6),A0
0000292C  43F9 0000 4533          lea       MemoryTest_test_data_byte_list.L,A1
00002930  58EE      
00002932  20D9      4534          move.l    (A1)+,(A0)+
                    4535   ; unsigned char test_data_byte;
                    4536   ; unsigned char read_data_byte;
                    4537   ; unsigned  int test_data_word_list[] = { 0xAAAA, 0xBABA, 0xCCDD, 0xDDDD };
00002934  41EE FFDA 4538          lea       -38(A6),A0
00002938  43F9 0000 4539          lea       MemoryTest_test_data_word_list.L,A1
0000293C  58F2      
0000293E  7003      4540          moveq     #3,D0
00002940  20D9      4541          move.l    (A1)+,(A0)+
00002942  51C8 FFFC 4542          dbra      D0,*-2
                    4543   ; unsigned  int test_data_word;
                    4544   ; unsigned int test_data_long_word_list[] = { 0xAAAAAAAA, 0xABABABAB, 0xCCCCDDDD, 0xAABBCCDD };
00002946  41EE FFEE 4545          lea       -18(A6),A0
0000294A  43F9 0000 4546          lea       MemoryTest_test_data_long_word_list.L,A1
0000294E  58DE      
00002950  7003      4547          moveq     #3,D0
00002952  20D9      4548          move.l    (A1)+,(A0)+
00002954  51C8 FFFC 4549          dbra      D0,*-2
                    4550   ; unsigned int test_data_long_word;
                    4551   ; unsigned short truncated_data;
                    4552   ; unsigned int counter = 9999;
00002958  2C3C 0000 4553          move.l    #9999,D6
0000295C  270F      
                    4554   ; printf("\r\nSelect data type:\n1 = bytes (8 bits)\n2 = words (16 bits)\n3 = long words (32 bits)\n");
0000295E  4879 0000 4555          pea       @lab3_142.L
00002962  4F12      
00002964  4E92      4556          jsr       (A2)
00002966  584F      4557          addq.w    #4,A7
                    4558   ; data_type_num = _getch();
00002968  4EB8 0B68 4559          jsr       __getch
0000296C  1D40 FFBB 4560          move.b    D0,-69(A6)
                    4561   ; switch (data_type_num) {
00002970  102E FFBB 4562          move.b    -69(A6),D0
00002974  4880      4563          ext.w     D0
00002976  48C0      4564          ext.l     D0
00002978  0C80 0000 4565          cmp.l     #50,D0
0000297C  0032      
0000297E  6700 022A 4566          beq       MemoryTest_4
00002982  6E0C      4567          bgt.s     MemoryTest_7
00002984  0C80 0000 4568          cmp.l     #49,D0
00002988  0031      
0000298A  6712      4569          beq.s     MemoryTest_3
0000298C  6000 070E 4570          bra       MemoryTest_1
                    4571   MemoryTest_7:
00002990  0C80 0000 4572          cmp.l     #51,D0
00002994  0033      
00002996  6700 045A 4573          beq       MemoryTest_5
0000299A  6000 0700 4574          bra       MemoryTest_1
                    4575   MemoryTest_3:
                    4576   ; case (char)('1') :
                    4577   ; printf("\nSelecting byte size\n");
0000299E  4879 0000 4578          pea       @lab3_143.L
000029A2  4F68      
000029A4  4E92      4579          jsr       (A2)
000029A6  584F      4580          addq.w    #4,A7
                    4581   ; printf("Select data value:\n");
000029A8  4879 0000 4582          pea       @lab3_144.L
000029AC  4F7E      
000029AE  4E92      4583          jsr       (A2)
000029B0  584F      4584          addq.w    #4,A7
                    4585   ; printf("1 = \"AA\"\n2 = \"AB\"\n3 = \"CC\"\n4 = \"CD\"\n");
000029B2  4879 0000 4586          pea       @lab3_145.L
000029B6  4F92      
000029B8  4E92      4587          jsr       (A2)
000029BA  584F      4588          addq.w    #4,A7
                    4589   ; do {
                    4590   MemoryTest_8:
                    4591   ; test_data_num = (int)(_getch());
000029BC  4EB8 0B68 4592          jsr       __getch
000029C0  2400      4593          move.l    D0,D2
                    4594   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
000029C2  0C82 0000 4595          cmp.l     #49,D2
000029C6  0031      
000029C8  6722      4596          beq.s     MemoryTest_10
000029CA  0C82 0000 4597          cmp.l     #50,D2
000029CE  0032      
000029D0  671A      4598          beq.s     MemoryTest_10
000029D2  0C82 0000 4599          cmp.l     #51,D2
000029D6  0033      
000029D8  6712      4600          beq.s     MemoryTest_10
000029DA  0C82 0000 4601          cmp.l     #52,D2
000029DE  0034      
000029E0  670A      4602          beq.s     MemoryTest_10
                    4603   ; printf("\r\nERROR: Select either 1, 2, 3, or 4\r\n");
000029E2  4879 0000 4604          pea       @lab3_146.L
000029E6  4FB8      
000029E8  4E92      4605          jsr       (A2)
000029EA  584F      4606          addq.w    #4,A7
                    4607   MemoryTest_10:
000029EC  0C82 0000 4608          cmp.l     #49,D2
000029F0  0031      
000029F2  6718      4609          beq.s     MemoryTest_12
000029F4  0C82 0000 4610          cmp.l     #50,D2
000029F8  0032      
000029FA  6710      4611          beq.s     MemoryTest_12
000029FC  0C82 0000 4612          cmp.l     #51,D2
00002A00  0033      
00002A02  6708      4613          beq.s     MemoryTest_12
00002A04  0C82 0000 4614          cmp.l     #52,D2
00002A08  0034      
00002A0A  66B0      4615          bne       MemoryTest_8
                    4616   MemoryTest_12:
                    4617   ; }
                    4618   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4619   ; if (test_data_num == (int)('1')) {
00002A0C  0C82 0000 4620          cmp.l     #49,D2
00002A10  0031      
00002A12  660A      4621          bne.s     MemoryTest_13
                    4622   ; test_data_byte = test_data_byte_list[0];
00002A14  1D6E FFD4 4623          move.b    -44+0(A6),-40(A6)
00002A18  FFD8      
00002A1A  6000 0040 4624          bra       MemoryTest_20
                    4625   MemoryTest_13:
                    4626   ; }
                    4627   ; else if (test_data_num == (int)('2')) {
00002A1E  0C82 0000 4628          cmp.l     #50,D2
00002A22  0032      
00002A24  6608      4629          bne.s     MemoryTest_15
                    4630   ; test_data_byte = test_data_byte_list[1];
00002A26  1D6E FFD5 4631          move.b    -44+1(A6),-40(A6)
00002A2A  FFD8      
00002A2C  602E      4632          bra.s     MemoryTest_20
                    4633   MemoryTest_15:
                    4634   ; }
                    4635   ; else if (test_data_num == (int)('3')) {
00002A2E  0C82 0000 4636          cmp.l     #51,D2
00002A32  0033      
00002A34  6608      4637          bne.s     MemoryTest_17
                    4638   ; test_data_byte = test_data_byte_list[2];
00002A36  1D6E FFD6 4639          move.b    -44+2(A6),-40(A6)
00002A3A  FFD8      
00002A3C  601E      4640          bra.s     MemoryTest_20
                    4641   MemoryTest_17:
                    4642   ; }
                    4643   ; else if (test_data_num == (int)('4')) {
00002A3E  0C82 0000 4644          cmp.l     #52,D2
00002A42  0034      
00002A44  6608      4645          bne.s     MemoryTest_19
                    4646   ; test_data_byte = test_data_byte_list[3];
00002A46  1D6E FFD7 4647          move.b    -44+3(A6),-40(A6)
00002A4A  FFD8      
00002A4C  600E      4648          bra.s     MemoryTest_20
                    4649   MemoryTest_19:
                    4650   ; }
                    4651   ; else {
                    4652   ; printf("\r\nERROR: Exiting memory test due to option memory complication.\r\n");
00002A4E  4879 0000 4653          pea       @lab3_147.L
00002A52  4FE0      
00002A54  4E92      4654          jsr       (A2)
00002A56  584F      4655          addq.w    #4,A7
                    4656   ; return;
00002A58  6000 064C 4657          bra       MemoryTest_2
                    4658   MemoryTest_20:
                    4659   ; }
                    4660   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF:\r\n");
00002A5C  4879 0000 4661          pea       @lab3_148.L
00002A60  5022      
00002A62  4E92      4662          jsr       (A2)
00002A64  584F      4663          addq.w    #4,A7
                    4664   ; do{
                    4665   MemoryTest_22:
                    4666   ; StartPtrByte = (int)Get8HexDigits(0);
00002A66  42A7      4667          clr.l     -(A7)
00002A68  4E94      4668          jsr       (A4)
00002A6A  584F      4669          addq.w    #4,A7
00002A6C  2A00      4670          move.l    D0,D5
                    4671   ; if(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x097FFFFF)){
00002A6E  0C85 0900 4672          cmp.l     #150994944,D5
00002A72  0000      
00002A74  6508      4673          blo.s     MemoryTest_26
00002A76  0C85 097F 4674          cmp.l     #159383551,D5
00002A7A  FFFF      
00002A7C  630A      4675          bls.s     MemoryTest_24
                    4676   MemoryTest_26:
                    4677   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002A7E  4879 0000 4678          pea       @lab3_149.L
00002A82  505A      
00002A84  4E92      4679          jsr       (A2)
00002A86  584F      4680          addq.w    #4,A7
                    4681   MemoryTest_24:
00002A88  0C85 0900 4682          cmp.l     #150994944,D5
00002A8C  0000      
00002A8E  65D6      4683          blo       MemoryTest_22
00002A90  0C85 097F 4684          cmp.l     #159383551,D5
00002A94  FFFF      
00002A96  62CE      4685          bhi       MemoryTest_22
                    4686   ; }
                    4687   ; } while(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x097FFFFF));
                    4688   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF:\r\n");
00002A98  4879 0000 4689          pea       @lab3_150.L
00002A9C  50CA      
00002A9E  4E92      4690          jsr       (A2)
00002AA0  584F      4691          addq.w    #4,A7
                    4692   ; do{
                    4693   MemoryTest_27:
                    4694   ; EndPtrByte = (int)Get8HexDigits(0);
00002AA2  42A7      4695          clr.l     -(A7)
00002AA4  4E94      4696          jsr       (A4)
00002AA6  584F      4697          addq.w    #4,A7
00002AA8  2D40 FFBC 4698          move.l    D0,-68(A6)
                    4699   ; if(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x097FFFFF)){
00002AAC  202E FFBC 4700          move.l    -68(A6),D0
00002AB0  0C80 0900 4701          cmp.l     #150994944,D0
00002AB4  0000      
00002AB6  650C      4702          blo.s     MemoryTest_31
00002AB8  202E FFBC 4703          move.l    -68(A6),D0
00002ABC  0C80 097F 4704          cmp.l     #159383551,D0
00002AC0  FFFF      
00002AC2  630A      4705          bls.s     MemoryTest_29
                    4706   MemoryTest_31:
                    4707   ; printf("\r\nERROR: End Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002AC4  4879 0000 4708          pea       @lab3_151.L
00002AC8  5100      
00002ACA  4E92      4709          jsr       (A2)
00002ACC  584F      4710          addq.w    #4,A7
                    4711   MemoryTest_29:
00002ACE  202E FFBC 4712          move.l    -68(A6),D0
00002AD2  0C80 0900 4713          cmp.l     #150994944,D0
00002AD6  0000      
00002AD8  65C8      4714          blo       MemoryTest_27
00002ADA  202E FFBC 4715          move.l    -68(A6),D0
00002ADE  0C80 097F 4716          cmp.l     #159383551,D0
00002AE2  FFFF      
00002AE4  62BC      4717          bhi       MemoryTest_27
                    4718   ; }
                    4719   ; } while(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x097FFFFF));
                    4720   ; printf("\r\n\r\nWriting to memory");
00002AE6  4879 0000 4721          pea       @lab3_152.L
00002AEA  516C      
00002AEC  4E92      4722          jsr       (A2)
00002AEE  584F      4723          addq.w    #4,A7
                    4724   ; TempPtrByte = StartPtrByte;
00002AF0  2D45 FFC0 4725          move.l    D5,-64(A6)
                    4726   ; while (StartPtrByte < EndPtrByte) {
                    4727   MemoryTest_32:
00002AF4  BAAE FFBC 4728          cmp.l     -68(A6),D5
00002AF8  6430      4729          bhs.s     MemoryTest_34
                    4730   ; *StartPtrByte = test_data_byte;
00002AFA  2045      4731          move.l    D5,A0
00002AFC  10AE FFD8 4732          move.b    -40(A6),(A0)
                    4733   ; counter++;
00002B00  5286      4734          addq.l    #1,D6
                    4735   ; if (counter == 10000) {
00002B02  0C86 0000 4736          cmp.l     #10000,D6
00002B06  2710      
00002B08  661C      4737          bne.s     MemoryTest_35
                    4738   ; printf("\r\nWrite: [%02X to %08x]", test_data_byte, StartPtrByte);
00002B0A  2F05      4739          move.l    D5,-(A7)
00002B0C  122E FFD8 4740          move.b    -40(A6),D1
00002B10  C2BC 0000 4741          and.l     #255,D1
00002B14  00FF      
00002B16  2F01      4742          move.l    D1,-(A7)
00002B18  4879 0000 4743          pea       @lab3_153.L
00002B1C  5182      
00002B1E  4E92      4744          jsr       (A2)
00002B20  DEFC 000C 4745          add.w     #12,A7
                    4746   ; counter = 0;
00002B24  4286      4747          clr.l     D6
                    4748   MemoryTest_35:
                    4749   ; }
                    4750   ; StartPtrByte++;
00002B26  5285      4751          addq.l    #1,D5
00002B28  60CA      4752          bra       MemoryTest_32
                    4753   MemoryTest_34:
                    4754   ; }
                    4755   ; counter = 9999;
00002B2A  2C3C 0000 4756          move.l    #9999,D6
00002B2E  270F      
                    4757   ; printf("\r\n\r\nStarting memory validation test");
00002B30  4879 0000 4758          pea       @lab3_154.L
00002B34  519A      
00002B36  4E92      4759          jsr       (A2)
00002B38  584F      4760          addq.w    #4,A7
                    4761   ; StartPtrByte = TempPtrByte;
00002B3A  2A2E FFC0 4762          move.l    -64(A6),D5
                    4763   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrByte, EndPtrByte, test_data_byte);
00002B3E  122E FFD8 4764          move.b    -40(A6),D1
00002B42  C2BC 0000 4765          and.l     #255,D1
00002B46  00FF      
00002B48  2F01      4766          move.l    D1,-(A7)
00002B4A  2F2E FFBC 4767          move.l    -68(A6),-(A7)
00002B4E  2F05      4768          move.l    D5,-(A7)
00002B50  4879 0000 4769          pea       @lab3_155.L
00002B54  51BE      
00002B56  4E92      4770          jsr       (A2)
00002B58  DEFC 0010 4771          add.w     #16,A7
                    4772   ; while (StartPtrByte < EndPtrByte) {
                    4773   MemoryTest_37:
00002B5C  BAAE FFBC 4774          cmp.l     -68(A6),D5
00002B60  6400 003A 4775          bhs       MemoryTest_39
                    4776   ; if (*StartPtrByte != test_data_byte) {
00002B64  2045      4777          move.l    D5,A0
00002B66  1010      4778          move.b    (A0),D0
00002B68  B02E FFD8 4779          cmp.b     -40(A6),D0
00002B6C  672A      4780          beq.s     MemoryTest_40
                    4781   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...\r\n", StartPtrByte, *StartPtrByte, test_data_byte);
00002B6E  122E FFD8 4782          move.b    -40(A6),D1
00002B72  C2BC 0000 4783          and.l     #255,D1
00002B76  00FF      
00002B78  2F01      4784          move.l    D1,-(A7)
00002B7A  2045      4785          move.l    D5,A0
00002B7C  1210      4786          move.b    (A0),D1
00002B7E  C2BC 0000 4787          and.l     #255,D1
00002B82  00FF      
00002B84  2F01      4788          move.l    D1,-(A7)
00002B86  2F05      4789          move.l    D5,-(A7)
00002B88  4879 0000 4790          pea       @lab3_156.L
00002B8C  5206      
00002B8E  4E92      4791          jsr       (A2)
00002B90  DEFC 0010 4792          add.w     #16,A7
                    4793   ; return;
00002B94  6000 0510 4794          bra       MemoryTest_2
                    4795   MemoryTest_40:
                    4796   ; }
                    4797   ; StartPtrByte++;
00002B98  5285      4798          addq.l    #1,D5
00002B9A  60C0      4799          bra       MemoryTest_37
                    4800   MemoryTest_39:
                    4801   ; }
                    4802   ; printf("\r\nPASS: Memory Validation test has passed\r\n");
00002B9C  4879 0000 4803          pea       @lab3_157.L
00002BA0  5294      
00002BA2  4E92      4804          jsr       (A2)
00002BA4  584F      4805          addq.w    #4,A7
                    4806   ; break;
00002BA6  6000 04FE 4807          bra       MemoryTest_2
                    4808   MemoryTest_4:
                    4809   ; case (char)('2') :
                    4810   ; printf("\r\nSelecting word size");
00002BAA  4879 0000 4811          pea       @lab3_158.L
00002BAE  52C0      
00002BB0  4E92      4812          jsr       (A2)
00002BB2  584F      4813          addq.w    #4,A7
                    4814   ; printf("Select data value:\n");
00002BB4  4879 0000 4815          pea       @lab3_144.L
00002BB8  4F7E      
00002BBA  4E92      4816          jsr       (A2)
00002BBC  584F      4817          addq.w    #4,A7
                    4818   ; printf("\r\n1 = \"AAAA\"\n2 = \"BABA\"\n3 = \"CCDD\"\n4 = \"DDDD\"\r\n");
00002BBE  4879 0000 4819          pea       @lab3_159.L
00002BC2  52D6      
00002BC4  4E92      4820          jsr       (A2)
00002BC6  584F      4821          addq.w    #4,A7
                    4822   ; do {
                    4823   MemoryTest_42:
                    4824   ; test_data_num = (int)(_getch());
00002BC8  4EB8 0B68 4825          jsr       __getch
00002BCC  2400      4826          move.l    D0,D2
                    4827   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00002BCE  0C82 0000 4828          cmp.l     #49,D2
00002BD2  0031      
00002BD4  6722      4829          beq.s     MemoryTest_44
00002BD6  0C82 0000 4830          cmp.l     #50,D2
00002BDA  0032      
00002BDC  671A      4831          beq.s     MemoryTest_44
00002BDE  0C82 0000 4832          cmp.l     #51,D2
00002BE2  0033      
00002BE4  6712      4833          beq.s     MemoryTest_44
00002BE6  0C82 0000 4834          cmp.l     #52,D2
00002BEA  0034      
00002BEC  670A      4835          beq.s     MemoryTest_44
                    4836   ; printf("\r\nERROR: Select either 1, 2, 3, or 4\r\n");
00002BEE  4879 0000 4837          pea       @lab3_146.L
00002BF2  4FB8      
00002BF4  4E92      4838          jsr       (A2)
00002BF6  584F      4839          addq.w    #4,A7
                    4840   MemoryTest_44:
00002BF8  0C82 0000 4841          cmp.l     #49,D2
00002BFC  0031      
00002BFE  6718      4842          beq.s     MemoryTest_46
00002C00  0C82 0000 4843          cmp.l     #50,D2
00002C04  0032      
00002C06  6710      4844          beq.s     MemoryTest_46
00002C08  0C82 0000 4845          cmp.l     #51,D2
00002C0C  0033      
00002C0E  6708      4846          beq.s     MemoryTest_46
00002C10  0C82 0000 4847          cmp.l     #52,D2
00002C14  0034      
00002C16  66B0      4848          bne       MemoryTest_42
                    4849   MemoryTest_46:
                    4850   ; }
                    4851   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4852   ; if (test_data_num == (int)('1')) {
00002C18  0C82 0000 4853          cmp.l     #49,D2
00002C1C  0031      
00002C1E  660A      4854          bne.s     MemoryTest_47
                    4855   ; test_data_word = test_data_word_list[0];
00002C20  2D6E FFDA 4856          move.l    -38+0(A6),-22(A6)
00002C24  FFEA      
00002C26  6000 0040 4857          bra       MemoryTest_54
                    4858   MemoryTest_47:
                    4859   ; }
                    4860   ; else if (test_data_num == (int)('2')) {
00002C2A  0C82 0000 4861          cmp.l     #50,D2
00002C2E  0032      
00002C30  6608      4862          bne.s     MemoryTest_49
                    4863   ; test_data_word = test_data_word_list[1];
00002C32  2D6E FFDE 4864          move.l    -38+4(A6),-22(A6)
00002C36  FFEA      
00002C38  602E      4865          bra.s     MemoryTest_54
                    4866   MemoryTest_49:
                    4867   ; }
                    4868   ; else if (test_data_num == (int)('3')) {
00002C3A  0C82 0000 4869          cmp.l     #51,D2
00002C3E  0033      
00002C40  6608      4870          bne.s     MemoryTest_51
                    4871   ; test_data_word = test_data_word_list[2];
00002C42  2D6E FFE2 4872          move.l    -38+8(A6),-22(A6)
00002C46  FFEA      
00002C48  601E      4873          bra.s     MemoryTest_54
                    4874   MemoryTest_51:
                    4875   ; }
                    4876   ; else if (test_data_num == (int)('4')) {
00002C4A  0C82 0000 4877          cmp.l     #52,D2
00002C4E  0034      
00002C50  6608      4878          bne.s     MemoryTest_53
                    4879   ; test_data_word = test_data_word_list[3];
00002C52  2D6E FFE6 4880          move.l    -38+12(A6),-22(A6)
00002C56  FFEA      
00002C58  600E      4881          bra.s     MemoryTest_54
                    4882   MemoryTest_53:
                    4883   ; }
                    4884   ; else {
                    4885   ; printf("\r\nERROR: Exiting memory test due to option memory complication.\r\n");
00002C5A  4879 0000 4886          pea       @lab3_147.L
00002C5E  4FE0      
00002C60  4E92      4887          jsr       (A2)
00002C62  584F      4888          addq.w    #4,A7
                    4889   ; return;
00002C64  6000 0440 4890          bra       MemoryTest_2
                    4891   MemoryTest_54:
                    4892   ; }
                    4893   ; do {
                    4894   MemoryTest_55:
                    4895   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002C68  4879 0000 4896          pea       @lab3_160.L
00002C6C  5306      
00002C6E  4E92      4897          jsr       (A2)
00002C70  584F      4898          addq.w    #4,A7
                    4899   ; StartPtrWord = Get8HexDigits(0);
00002C72  42A7      4900          clr.l     -(A7)
00002C74  4E94      4901          jsr       (A4)
00002C76  584F      4902          addq.w    #4,A7
00002C78  2800      4903          move.l    D0,D4
                    4904   ; while(StartPtrWord < (int)(0x09000000) || StartPtrWord > (int)(0x097FFFFF)){
                    4905   MemoryTest_57:
00002C7A  0C84 0900 4906          cmp.l     #150994944,D4
00002C7E  0000      
00002C80  6508      4907          blo.s     MemoryTest_60
00002C82  0C84 097F 4908          cmp.l     #159383551,D4
00002C86  FFFF      
00002C88  6314      4909          bls.s     MemoryTest_59
                    4910   MemoryTest_60:
                    4911   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002C8A  4879 0000 4912          pea       @lab3_149.L
00002C8E  505A      
00002C90  4E92      4913          jsr       (A2)
00002C92  584F      4914          addq.w    #4,A7
                    4915   ; StartPtrWord = Get8HexDigits(0);
00002C94  42A7      4916          clr.l     -(A7)
00002C96  4E94      4917          jsr       (A4)
00002C98  584F      4918          addq.w    #4,A7
00002C9A  2800      4919          move.l    D0,D4
00002C9C  60DC      4920          bra       MemoryTest_57
                    4921   MemoryTest_59:
                    4922   ; }
                    4923   ; if (StartPtrWord % 2 != 0) {
00002C9E  2F04      4924          move.l    D4,-(A7)
00002CA0  4878 0002 4925          pea       2
00002CA4  4EB9 0000 4926          jsr       ULDIV
00002CA8  338A      
00002CAA  202F 0004 4927          move.l    4(A7),D0
00002CAE  504F      4928          addq.w    #8,A7
00002CB0  4A80      4929          tst.l     D0
00002CB2  670A      4930          beq.s     MemoryTest_61
                    4931   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
00002CB4  4879 0000 4932          pea       @lab3_161.L
00002CB8  5360      
00002CBA  4E92      4933          jsr       (A2)
00002CBC  584F      4934          addq.w    #4,A7
                    4935   MemoryTest_61:
00002CBE  2F04      4936          move.l    D4,-(A7)
00002CC0  4878 0002 4937          pea       2
00002CC4  4EB9 0000 4938          jsr       ULDIV
00002CC8  338A      
00002CCA  202F 0004 4939          move.l    4(A7),D0
00002CCE  504F      4940          addq.w    #8,A7
00002CD0  4A80      4941          tst.l     D0
00002CD2  6694      4942          bne       MemoryTest_55
                    4943   ; }
                    4944   ; } while (StartPtrWord % 2 != 0);
                    4945   ; do {
                    4946   MemoryTest_63:
                    4947   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002CD4  4879 0000 4948          pea       @lab3_162.L
00002CD8  53A0      
00002CDA  4E92      4949          jsr       (A2)
00002CDC  584F      4950          addq.w    #4,A7
                    4951   ; EndPtrWord = Get8HexDigits(0);
00002CDE  42A7      4952          clr.l     -(A7)
00002CE0  4E94      4953          jsr       (A4)
00002CE2  584F      4954          addq.w    #4,A7
00002CE4  2A40      4955          move.l    D0,A5
                    4956   ; while(EndPtrWord < (int)(0x09000000) || EndPtrWord > (int)(0x097FFFFF)){
                    4957   MemoryTest_65:
00002CE6  200D      4958          move.l    A5,D0
00002CE8  0C80 0900 4959          cmp.l     #150994944,D0
00002CEC  0000      
00002CEE  650A      4960          blo.s     MemoryTest_68
00002CF0  200D      4961          move.l    A5,D0
00002CF2  0C80 097F 4962          cmp.l     #159383551,D0
00002CF6  FFFF      
00002CF8  6314      4963          bls.s     MemoryTest_67
                    4964   MemoryTest_68:
                    4965   ; printf("\r\nERROR: End Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002CFA  4879 0000 4966          pea       @lab3_151.L
00002CFE  5100      
00002D00  4E92      4967          jsr       (A2)
00002D02  584F      4968          addq.w    #4,A7
                    4969   ; EndPtrWord = Get8HexDigits(0);
00002D04  42A7      4970          clr.l     -(A7)
00002D06  4E94      4971          jsr       (A4)
00002D08  584F      4972          addq.w    #4,A7
00002D0A  2A40      4973          move.l    D0,A5
00002D0C  60D8      4974          bra       MemoryTest_65
                    4975   MemoryTest_67:
                    4976   ; }
                    4977   ; if (EndPtrWord % 2 != 0) {
00002D0E  2F0D      4978          move.l    A5,-(A7)
00002D10  4878 0002 4979          pea       2
00002D14  4EB9 0000 4980          jsr       ULDIV
00002D18  338A      
00002D1A  202F 0004 4981          move.l    4(A7),D0
00002D1E  504F      4982          addq.w    #8,A7
00002D20  4A80      4983          tst.l     D0
00002D22  670A      4984          beq.s     MemoryTest_69
                    4985   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
00002D24  4879 0000 4986          pea       @lab3_161.L
00002D28  5360      
00002D2A  4E92      4987          jsr       (A2)
00002D2C  584F      4988          addq.w    #4,A7
                    4989   MemoryTest_69:
00002D2E  2F0D      4990          move.l    A5,-(A7)
00002D30  4878 0002 4991          pea       2
00002D34  4EB9 0000 4992          jsr       ULDIV
00002D38  338A      
00002D3A  202F 0004 4993          move.l    4(A7),D0
00002D3E  504F      4994          addq.w    #8,A7
00002D40  4A80      4995          tst.l     D0
00002D42  6690      4996          bne       MemoryTest_63
                    4997   ; }
                    4998   ; } while (EndPtrWord % 2 != 0);
                    4999   ; printf("\r\n\r\nWriting to memory");
00002D44  4879 0000 5000          pea       @lab3_152.L
00002D48  516C      
00002D4A  4E92      5001          jsr       (A2)
00002D4C  584F      5002          addq.w    #4,A7
                    5003   ; TempPtrWord = StartPtrWord;
00002D4E  2D44 FFC4 5004          move.l    D4,-60(A6)
                    5005   ; while (StartPtrWord < EndPtrWord) {
                    5006   MemoryTest_71:
00002D52  B88D      5007          cmp.l     A5,D4
00002D54  642A      5008          bhs.s     MemoryTest_73
                    5009   ; *StartPtrWord = test_data_word;
00002D56  202E FFEA 5010          move.l    -22(A6),D0
00002D5A  2044      5011          move.l    D4,A0
00002D5C  3080      5012          move.w    D0,(A0)
                    5013   ; counter++;
00002D5E  5286      5014          addq.l    #1,D6
                    5015   ; if (counter == 10000) {
00002D60  0C86 0000 5016          cmp.l     #10000,D6
00002D64  2710      
00002D66  6614      5017          bne.s     MemoryTest_74
                    5018   ; printf("\r\nWRITE: [%04X to %08x]", test_data_word, StartPtrWord);
00002D68  2F04      5019          move.l    D4,-(A7)
00002D6A  2F2E FFEA 5020          move.l    -22(A6),-(A7)
00002D6E  4879 0000 5021          pea       @lab3_163.L
00002D72  53F8      
00002D74  4E92      5022          jsr       (A2)
00002D76  DEFC 000C 5023          add.w     #12,A7
                    5024   ; counter = 0;
00002D7A  4286      5025          clr.l     D6
                    5026   MemoryTest_74:
                    5027   ; }
                    5028   ; StartPtrWord++;
00002D7C  5484      5029          addq.l    #2,D4
00002D7E  60D2      5030          bra       MemoryTest_71
                    5031   MemoryTest_73:
                    5032   ; }
                    5033   ; counter = 9999;
00002D80  2C3C 0000 5034          move.l    #9999,D6
00002D84  270F      
                    5035   ; printf("\r\n\r\nStarting memory validation test");
00002D86  4879 0000 5036          pea       @lab3_154.L
00002D8A  519A      
00002D8C  4E92      5037          jsr       (A2)
00002D8E  584F      5038          addq.w    #4,A7
                    5039   ; StartPtrWord = TempPtrWord;
00002D90  282E FFC4 5040          move.l    -60(A6),D4
                    5041   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrWord, EndPtrWord, test_data_word);
00002D94  2F2E FFEA 5042          move.l    -22(A6),-(A7)
00002D98  2F0D      5043          move.l    A5,-(A7)
00002D9A  2F04      5044          move.l    D4,-(A7)
00002D9C  4879 0000 5045          pea       @lab3_155.L
00002DA0  51BE      
00002DA2  4E92      5046          jsr       (A2)
00002DA4  DEFC 0010 5047          add.w     #16,A7
                    5048   ; while (StartPtrWord < EndPtrWord) {
                    5049   MemoryTest_76:
00002DA8  B88D      5050          cmp.l     A5,D4
00002DAA  6400 0038 5051          bhs       MemoryTest_78
                    5052   ; if (*StartPtrWord != test_data_word) {
00002DAE  2044      5053          move.l    D4,A0
00002DB0  3010      5054          move.w    (A0),D0
00002DB2  C0BC 0000 5055          and.l     #65535,D0
00002DB6  FFFF      
00002DB8  B0AE FFEA 5056          cmp.l     -22(A6),D0
00002DBC  6722      5057          beq.s     MemoryTest_79
                    5058   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...", StartPtrWord, *StartPtrWord, test_data_word);
00002DBE  2F2E FFEA 5059          move.l    -22(A6),-(A7)
00002DC2  2044      5060          move.l    D4,A0
00002DC4  3210      5061          move.w    (A0),D1
00002DC6  C2BC 0000 5062          and.l     #65535,D1
00002DCA  FFFF      
00002DCC  2F01      5063          move.l    D1,-(A7)
00002DCE  2F04      5064          move.l    D4,-(A7)
00002DD0  4879 0000 5065          pea       @lab3_164.L
00002DD4  5410      
00002DD6  4E92      5066          jsr       (A2)
00002DD8  DEFC 0010 5067          add.w     #16,A7
                    5068   ; return;
00002DDC  6000 02C8 5069          bra       MemoryTest_2
                    5070   MemoryTest_79:
                    5071   ; }
                    5072   ; StartPtrWord++;
00002DE0  5484      5073          addq.l    #2,D4
00002DE2  60C4      5074          bra       MemoryTest_76
                    5075   MemoryTest_78:
                    5076   ; }
                    5077   ; printf("\r\nPASS: Memory Validation test has passed.\r\n");
00002DE4  4879 0000 5078          pea       @lab3_165.L
00002DE8  549C      
00002DEA  4E92      5079          jsr       (A2)
00002DEC  584F      5080          addq.w    #4,A7
                    5081   ; break;
00002DEE  6000 02B6 5082          bra       MemoryTest_2
                    5083   MemoryTest_5:
                    5084   ; case (char)('3') :
                    5085   ; printf("\r\nSelecting long word size");
00002DF2  4879 0000 5086          pea       @lab3_166.L
00002DF6  54CA      
00002DF8  4E92      5087          jsr       (A2)
00002DFA  584F      5088          addq.w    #4,A7
                    5089   ; printf("\r\nSelect data value:");
00002DFC  4879 0000 5090          pea       @lab3_167.L
00002E00  54E6      
00002E02  4E92      5091          jsr       (A2)
00002E04  584F      5092          addq.w    #4,A7
                    5093   ; printf("\r\n1 = \"AAAAAAAA\"\n2 = \"ABABABAB\"\n3 = \"CCCCDDDD\"\n4 = \"AABBCCDD\"\r\n");
00002E06  4879 0000 5094          pea       @lab3_168.L
00002E0A  54FC      
00002E0C  4E92      5095          jsr       (A2)
00002E0E  584F      5096          addq.w    #4,A7
                    5097   ; do {
                    5098   MemoryTest_81:
                    5099   ; test_data_num = (int)(_getch());
00002E10  4EB8 0B68 5100          jsr       __getch
00002E14  2400      5101          move.l    D0,D2
                    5102   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00002E16  0C82 0000 5103          cmp.l     #49,D2
00002E1A  0031      
00002E1C  6722      5104          beq.s     MemoryTest_83
00002E1E  0C82 0000 5105          cmp.l     #50,D2
00002E22  0032      
00002E24  671A      5106          beq.s     MemoryTest_83
00002E26  0C82 0000 5107          cmp.l     #51,D2
00002E2A  0033      
00002E2C  6712      5108          beq.s     MemoryTest_83
00002E2E  0C82 0000 5109          cmp.l     #52,D2
00002E32  0034      
00002E34  670A      5110          beq.s     MemoryTest_83
                    5111   ; printf("\r\nSelect either 1, 2, 3, or 4.\r\n");
00002E36  4879 0000 5112          pea       @lab3_169.L
00002E3A  553C      
00002E3C  4E92      5113          jsr       (A2)
00002E3E  584F      5114          addq.w    #4,A7
                    5115   MemoryTest_83:
00002E40  0C82 0000 5116          cmp.l     #49,D2
00002E44  0031      
00002E46  6718      5117          beq.s     MemoryTest_85
00002E48  0C82 0000 5118          cmp.l     #50,D2
00002E4C  0032      
00002E4E  6710      5119          beq.s     MemoryTest_85
00002E50  0C82 0000 5120          cmp.l     #51,D2
00002E54  0033      
00002E56  6708      5121          beq.s     MemoryTest_85
00002E58  0C82 0000 5122          cmp.l     #52,D2
00002E5C  0034      
00002E5E  66B0      5123          bne       MemoryTest_81
                    5124   MemoryTest_85:
                    5125   ; }
                    5126   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    5127   ; if (test_data_num == (int)('1')) {
00002E60  0C82 0000 5128          cmp.l     #49,D2
00002E64  0031      
00002E66  6608      5129          bne.s     MemoryTest_86
                    5130   ; test_data_long_word = test_data_long_word_list[0];
00002E68  2E2E FFEE 5131          move.l    -18+0(A6),D7
00002E6C  6000 003A 5132          bra       MemoryTest_93
                    5133   MemoryTest_86:
                    5134   ; }
                    5135   ; else if (test_data_num == (int)('2')) {
00002E70  0C82 0000 5136          cmp.l     #50,D2
00002E74  0032      
00002E76  6606      5137          bne.s     MemoryTest_88
                    5138   ; test_data_long_word = test_data_long_word_list[1];
00002E78  2E2E FFF2 5139          move.l    -18+4(A6),D7
00002E7C  602A      5140          bra.s     MemoryTest_93
                    5141   MemoryTest_88:
                    5142   ; }
                    5143   ; else if (test_data_num == (int)('3')) {
00002E7E  0C82 0000 5144          cmp.l     #51,D2
00002E82  0033      
00002E84  6606      5145          bne.s     MemoryTest_90
                    5146   ; test_data_long_word = test_data_long_word_list[2];
00002E86  2E2E FFF6 5147          move.l    -18+8(A6),D7
00002E8A  601C      5148          bra.s     MemoryTest_93
                    5149   MemoryTest_90:
                    5150   ; }
                    5151   ; else if (test_data_num == (int)('4')) {
00002E8C  0C82 0000 5152          cmp.l     #52,D2
00002E90  0034      
00002E92  6606      5153          bne.s     MemoryTest_92
                    5154   ; test_data_long_word = test_data_long_word_list[3];
00002E94  2E2E FFFA 5155          move.l    -18+12(A6),D7
00002E98  600E      5156          bra.s     MemoryTest_93
                    5157   MemoryTest_92:
                    5158   ; }
                    5159   ; else {
                    5160   ; printf("\r\nERROR: Exiting memory test due to option memory complication. \r\n");
00002E9A  4879 0000 5161          pea       @lab3_170.L
00002E9E  555E      
00002EA0  4E92      5162          jsr       (A2)
00002EA2  584F      5163          addq.w    #4,A7
                    5164   ; return;
00002EA4  6000 0200 5165          bra       MemoryTest_2
                    5166   MemoryTest_93:
                    5167   ; }
                    5168   ; do {
                    5169   MemoryTest_94:
                    5170   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002EA8  4879 0000 5171          pea       @lab3_160.L
00002EAC  5306      
00002EAE  4E92      5172          jsr       (A2)
00002EB0  584F      5173          addq.w    #4,A7
                    5174   ; StartPtrLongWord = Get8HexDigits(0);
00002EB2  42A7      5175          clr.l     -(A7)
00002EB4  4E94      5176          jsr       (A4)
00002EB6  584F      5177          addq.w    #4,A7
00002EB8  2600      5178          move.l    D0,D3
                    5179   ; while(StartPtrLongWord < (int)(0x09000000) || StartPtrLongWord > (int)(0x097FFFFF)){
                    5180   MemoryTest_96:
00002EBA  0C83 0900 5181          cmp.l     #150994944,D3
00002EBE  0000      
00002EC0  6508      5182          blo.s     MemoryTest_99
00002EC2  0C83 097F 5183          cmp.l     #159383551,D3
00002EC6  FFFF      
00002EC8  6314      5184          bls.s     MemoryTest_98
                    5185   MemoryTest_99:
                    5186   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002ECA  4879 0000 5187          pea       @lab3_171.L
00002ECE  55A2      
00002ED0  4E92      5188          jsr       (A2)
00002ED2  584F      5189          addq.w    #4,A7
                    5190   ; StartPtrLongWord = Get8HexDigits(0);
00002ED4  42A7      5191          clr.l     -(A7)
00002ED6  4E94      5192          jsr       (A4)
00002ED8  584F      5193          addq.w    #4,A7
00002EDA  2600      5194          move.l    D0,D3
00002EDC  60DC      5195          bra       MemoryTest_96
                    5196   MemoryTest_98:
                    5197   ; }
                    5198   ; if (StartPtrLongWord % 2 != 0) {
00002EDE  2F03      5199          move.l    D3,-(A7)
00002EE0  4878 0002 5200          pea       2
00002EE4  4EB9 0000 5201          jsr       ULDIV
00002EE8  338A      
00002EEA  202F 0004 5202          move.l    4(A7),D0
00002EEE  504F      5203          addq.w    #8,A7
00002EF0  4A80      5204          tst.l     D0
00002EF2  670A      5205          beq.s     MemoryTest_100
                    5206   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
00002EF4  4879 0000 5207          pea       @lab3_161.L
00002EF8  5360      
00002EFA  4E92      5208          jsr       (A2)
00002EFC  584F      5209          addq.w    #4,A7
                    5210   MemoryTest_100:
00002EFE  2F03      5211          move.l    D3,-(A7)
00002F00  4878 0002 5212          pea       2
00002F04  4EB9 0000 5213          jsr       ULDIV
00002F08  338A      
00002F0A  202F 0004 5214          move.l    4(A7),D0
00002F0E  504F      5215          addq.w    #8,A7
00002F10  4A80      5216          tst.l     D0
00002F12  6694      5217          bne       MemoryTest_94
                    5218   ; }
                    5219   ; } while (StartPtrLongWord % 2 != 0);
                    5220   ; do {
                    5221   MemoryTest_102:
                    5222   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002F14  4879 0000 5223          pea       @lab3_162.L
00002F18  53A0      
00002F1A  4E92      5224          jsr       (A2)
00002F1C  584F      5225          addq.w    #4,A7
                    5226   ; EndPtrLongWord = Get8HexDigits(0);
00002F1E  42A7      5227          clr.l     -(A7)
00002F20  4E94      5228          jsr       (A4)
00002F22  584F      5229          addq.w    #4,A7
00002F24  2640      5230          move.l    D0,A3
                    5231   ; while(EndPtrLongWord < (int)(0x09000000) || EndPtrLongWord > (int)(0x097FFFFF)){
                    5232   MemoryTest_104:
00002F26  200B      5233          move.l    A3,D0
00002F28  0C80 0900 5234          cmp.l     #150994944,D0
00002F2C  0000      
00002F2E  650A      5235          blo.s     MemoryTest_107
00002F30  200B      5236          move.l    A3,D0
00002F32  0C80 097F 5237          cmp.l     #159383551,D0
00002F36  FFFF      
00002F38  6314      5238          bls.s     MemoryTest_106
                    5239   MemoryTest_107:
                    5240   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002F3A  4879 0000 5241          pea       @lab3_172.L
00002F3E  5628      
00002F40  4E92      5242          jsr       (A2)
00002F42  584F      5243          addq.w    #4,A7
                    5244   ; EndPtrLongWord = Get8HexDigits(0);
00002F44  42A7      5245          clr.l     -(A7)
00002F46  4E94      5246          jsr       (A4)
00002F48  584F      5247          addq.w    #4,A7
00002F4A  2640      5248          move.l    D0,A3
00002F4C  60D8      5249          bra       MemoryTest_104
                    5250   MemoryTest_106:
                    5251   ; }
                    5252   ; if (EndPtrLongWord % 2 != 0) {
00002F4E  2F0B      5253          move.l    A3,-(A7)
00002F50  4878 0002 5254          pea       2
00002F54  4EB9 0000 5255          jsr       ULDIV
00002F58  338A      
00002F5A  202F 0004 5256          move.l    4(A7),D0
00002F5E  504F      5257          addq.w    #8,A7
00002F60  4A80      5258          tst.l     D0
00002F62  670A      5259          beq.s     MemoryTest_108
                    5260   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00002F64  4879 0000 5261          pea       @lab3_173.L
00002F68  56A8      
00002F6A  4E92      5262          jsr       (A2)
00002F6C  584F      5263          addq.w    #4,A7
                    5264   MemoryTest_108:
00002F6E  2F0B      5265          move.l    A3,-(A7)
00002F70  4878 0002 5266          pea       2
00002F74  4EB9 0000 5267          jsr       ULDIV
00002F78  338A      
00002F7A  202F 0004 5268          move.l    4(A7),D0
00002F7E  504F      5269          addq.w    #8,A7
00002F80  4A80      5270          tst.l     D0
00002F82  6690      5271          bne       MemoryTest_102
                    5272   ; }
                    5273   ; } while (EndPtrLongWord % 2 != 0);
                    5274   ; printf("\r\n\r\nWriting to memory");
00002F84  4879 0000 5275          pea       @lab3_152.L
00002F88  516C      
00002F8A  4E92      5276          jsr       (A2)
00002F8C  584F      5277          addq.w    #4,A7
                    5278   ; StartPtrLongWordTruc = StartPtrLongWord;
00002F8E  2D43 FFCC 5279          move.l    D3,-52(A6)
                    5280   ; EndPtrLongWordTruc = EndPtrLongWord;
00002F92  2D4B FFD0 5281          move.l    A3,-48(A6)
                    5282   ; TempPtrLongWord = StartPtrLongWord;
00002F96  2D43 FFC8 5283          move.l    D3,-56(A6)
                    5284   ; if((EndPtrLongWordTruc-StartPtrLongWordTruc) % 0x4 != 0){
00002F9A  202E FFD0 5285          move.l    -48(A6),D0
00002F9E  90AE FFCC 5286          sub.l     -52(A6),D0
00002FA2  2F00      5287          move.l    D0,-(A7)
00002FA4  4878 0004 5288          pea       4
00002FA8  4EB9 0000 5289          jsr       LDIV
00002FAC  339C      
00002FAE  202F 0004 5290          move.l    4(A7),D0
00002FB2  504F      5291          addq.w    #8,A7
00002FB4  4A80      5292          tst.l     D0
00002FB6  670E      5293          beq.s     MemoryTest_110
                    5294   ; printf("\r\nWARNING: Memory will contain truncated data"); 
00002FB8  4879 0000 5295          pea       @lab3_174.L
00002FBC  56EE      
00002FBE  4E92      5296          jsr       (A2)
00002FC0  584F      5297          addq.w    #4,A7
                    5298   ; truncated_data = test_data_long_word;   
00002FC2  3D47 FFFE 5299          move.w    D7,-2(A6)
                    5300   MemoryTest_110:
                    5301   ; }
                    5302   ; while (StartPtrLongWord < EndPtrLongWord) {
                    5303   MemoryTest_112:
00002FC6  B68B      5304          cmp.l     A3,D3
00002FC8  6400 005E 5305          bhs       MemoryTest_114
                    5306   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00002FCC  202E FFD0 5307          move.l    -48(A6),D0
00002FD0  90AE FFCC 5308          sub.l     -52(A6),D0
00002FD4  0C80 0000 5309          cmp.l     #4,D0
00002FD8  0004      
00002FDA  6C00 0030 5310          bge       MemoryTest_115
                    5311   ; StartPtrWord = StartPtrLongWord;
00002FDE  2803      5312          move.l    D3,D4
                    5313   ; *StartPtrWord = test_data_long_word;
00002FE0  2044      5314          move.l    D4,A0
00002FE2  3087      5315          move.w    D7,(A0)
                    5316   ; counter++;
00002FE4  5286      5317          addq.l    #1,D6
                    5318   ; if (counter == 10000) {
00002FE6  0C86 0000 5319          cmp.l     #10000,D6
00002FEA  2710      
00002FEC  661C      5320          bne.s     MemoryTest_117
                    5321   ; printf("\r\nWRITE: [%08X to %08x]", *StartPtrWord, StartPtrWord);
00002FEE  2F04      5322          move.l    D4,-(A7)
00002FF0  2044      5323          move.l    D4,A0
00002FF2  3210      5324          move.w    (A0),D1
00002FF4  C2BC 0000 5325          and.l     #65535,D1
00002FF8  FFFF      
00002FFA  2F01      5326          move.l    D1,-(A7)
00002FFC  4879 0000 5327          pea       @lab3_175.L
00003000  571C      
00003002  4E92      5328          jsr       (A2)
00003004  DEFC 000C 5329          add.w     #12,A7
                    5330   ; counter = 0;
00003008  4286      5331          clr.l     D6
                    5332   MemoryTest_117:
0000300A  6014      5333          bra.s     MemoryTest_116
                    5334   MemoryTest_115:
                    5335   ; }
                    5336   ; }else{
                    5337   ; *StartPtrLongWord = test_data_long_word;
0000300C  2043      5338          move.l    D3,A0
0000300E  2087      5339          move.l    D7,(A0)
                    5340   ; printf("\r\nWRITE: [%08X to %08x]", test_data_long_word, StartPtrLongWord);
00003010  2F03      5341          move.l    D3,-(A7)
00003012  2F07      5342          move.l    D7,-(A7)
00003014  4879 0000 5343          pea       @lab3_175.L
00003018  571C      
0000301A  4E92      5344          jsr       (A2)
0000301C  DEFC 000C 5345          add.w     #12,A7
                    5346   MemoryTest_116:
                    5347   ; }
                    5348   ; StartPtrLongWord++;
00003020  5883      5349          addq.l    #4,D3
                    5350   ; StartPtrLongWordTruc = StartPtrLongWord;
00003022  2D43 FFCC 5351          move.l    D3,-52(A6)
00003026  609E      5352          bra       MemoryTest_112
                    5353   MemoryTest_114:
                    5354   ; }
                    5355   ; counter = 9999;
00003028  2C3C 0000 5356          move.l    #9999,D6
0000302C  270F      
                    5357   ; printf("\r\n\r\nStarting memory validation test");
0000302E  4879 0000 5358          pea       @lab3_154.L
00003032  519A      
00003034  4E92      5359          jsr       (A2)
00003036  584F      5360          addq.w    #4,A7
                    5361   ; StartPtrLongWord = TempPtrLongWord;
00003038  262E FFC8 5362          move.l    -56(A6),D3
                    5363   ; truncated_data = test_data_long_word;
0000303C  3D47 FFFE 5364          move.w    D7,-2(A6)
                    5365   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrLongWord, EndPtrLongWord, test_data_long_word);
00003040  2F07      5366          move.l    D7,-(A7)
00003042  2F0B      5367          move.l    A3,-(A7)
00003044  2F03      5368          move.l    D3,-(A7)
00003046  4879 0000 5369          pea       @lab3_155.L
0000304A  51BE      
0000304C  4E92      5370          jsr       (A2)
0000304E  DEFC 0010 5371          add.w     #16,A7
                    5372   ; while (StartPtrLongWord < EndPtrLongWord) {
                    5373   MemoryTest_119:
00003052  B68B      5374          cmp.l     A3,D3
00003054  6400 003A 5375          bhs       MemoryTest_121
                    5376   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00003058  202E FFD0 5377          move.l    -48(A6),D0
0000305C  90AE FFCC 5378          sub.l     -52(A6),D0
00003060  0C80 0000 5379          cmp.l     #4,D0
00003064  0004      
00003066  6C04      5380          bge.s     MemoryTest_122
                    5381   ; StartPtrWord = StartPtrLongWord;
00003068  2803      5382          move.l    D3,D4
0000306A  601C      5383          bra.s     MemoryTest_124
                    5384   MemoryTest_122:
                    5385   ; }else{
                    5386   ; if (*StartPtrLongWord != test_data_long_word) {
0000306C  2043      5387          move.l    D3,A0
0000306E  BE90      5388          cmp.l     (A0),D7
00003070  6716      5389          beq.s     MemoryTest_124
                    5390   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %08X Expected Data: %08X] Exiting memory test...\r\n", StartPtrLongWord, *StartPtrLongWord, test_data_long_word);
00003072  2F07      5391          move.l    D7,-(A7)
00003074  2043      5392          move.l    D3,A0
00003076  2F10      5393          move.l    (A0),-(A7)
00003078  2F03      5394          move.l    D3,-(A7)
0000307A  4879 0000 5395          pea       @lab3_176.L
0000307E  5734      
00003080  4E92      5396          jsr       (A2)
00003082  DEFC 0010 5397          add.w     #16,A7
                    5398   ; return;
00003086  601E      5399          bra.s     MemoryTest_2
                    5400   MemoryTest_124:
                    5401   ; }
                    5402   ; }
                    5403   ; StartPtrLongWord++;
00003088  5883      5404          addq.l    #4,D3
                    5405   ; StartPtrLongWordTruc = StartPtrLongWord;
0000308A  2D43 FFCC 5406          move.l    D3,-52(A6)
0000308E  60C2      5407          bra       MemoryTest_119
                    5408   MemoryTest_121:
                    5409   ; }
                    5410   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
00003090  4879 0000 5411          pea       @lab3_177.L
00003094  57C2      
00003096  4E92      5412          jsr       (A2)
00003098  584F      5413          addq.w    #4,A7
                    5414   ; break;
0000309A  600A      5415          bra.s     MemoryTest_2
                    5416   MemoryTest_1:
                    5417   ; default:
                    5418   ; printf("\r\nYou failed to select a data type to use! Click open memory test again to try again.\r\n");
0000309C  4879 0000 5419          pea       @lab3_178.L
000030A0  57F0      
000030A2  4E92      5420          jsr       (A2)
000030A4  584F      5421          addq.w    #4,A7
                    5422   MemoryTest_2:
000030A6  4CDF 3CFC 5423          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000030AA  4E5E      5424          unlk      A6
000030AC  4E75      5425          rts
                    5426   ; }
                    5427   ; }
                    5428   ; void main(void)
                    5429   ; {
                    5430   _main:
000030AE  4E56 FFF0 5431          link      A6,#-16
000030B2  48E7 3030 5432          movem.l   D2/D3/A2/A3,-(A7)
000030B6  45F8 0A30 5433          lea       _InstallExceptionHandler.L,A2
000030BA  47F9 0000 5434          lea       _printf.L,A3
000030BE  3576      
                    5435   ; char c;
                    5436   ; int i, j;
                    5437   ; char* BugMessage = "DE1-68k Bug V1.77";
000030C0  41F9 0000 5438          lea       @lab3_179.L,A0
000030C4  5848      
000030C6  2608      5439          move.l    A0,D3
                    5440   ; char* CopyrightMessage = "Copyright (C) PJ Davies 2016";
000030C8  41F9 0000 5441          lea       @lab3_180.L,A0
000030CC  585A      
000030CE  2D48 FFF8 5442          move.l    A0,-8(A6)
                    5443   ; char* NamesAndStudentNumbers = "\r\n\r\nKenny Wakaba - 91378315\r\nJacob Yang - 24940835";
000030D2  41F9 0000 5444          lea       @lab3_181.L,A0
000030D6  5878      
000030D8  2D48 FFFC 5445          move.l    A0,-4(A6)
                    5446   ; KillAllBreakPoints();
000030DC  4EB8 1FC2 5447          jsr       _KillAllBreakPoints
                    5448   ; i = x = y = z = PortA_Count = 0;
000030E0  42B9 0B00 5449          clr.l     _PortA_Count.L
000030E4  00D4      
000030E6  42B9 0B00 5450          clr.l     _z.L
000030EA  00D0      
000030EC  42B9 0B00 5451          clr.l     _y.L
000030F0  00CC      
000030F2  42B9 0B00 5452          clr.l     _x.L
000030F6  00C8      
000030F8  4282      5453          clr.l     D2
                    5454   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
000030FA  42B9 0B00 5455          clr.l     _GoFlag.L
000030FE  00DC      
00003100  42B9 0B00 5456          clr.l     _Trace.L
00003104  00D8      
                    5457   ; Echo = 1;
00003106  23FC 0000 5458          move.l    #1,_Echo.L
0000310A  0001 0B00 
0000310E  00E0      
                    5459   ; d0 = d1 = d2 = d3 = d4 = d5 = d6 = d7 = 0;
00003110  42B9 0B00 5460          clr.l     _d7.L
00003114  0100      
00003116  42B9 0B00 5461          clr.l     _d6.L
0000311A  00FC      
0000311C  42B9 0B00 5462          clr.l     _d5.L
00003120  00F8      
00003122  42B9 0B00 5463          clr.l     _d4.L
00003126  00F4      
00003128  42B9 0B00 5464          clr.l     _d3.L
0000312C  00F0      
0000312E  42B9 0B00 5465          clr.l     _d2.L
00003132  00EC      
00003134  42B9 0B00 5466          clr.l     _d1.L
00003138  00E8      
0000313A  42B9 0B00 5467          clr.l     _d0.L
0000313E  00E4      
                    5468   ; a0 = a1 = a2 = a3 = a4 = a5 = a6 = 0;
00003140  42B9 0B00 5469          clr.l     _a6.L
00003144  011C      
00003146  42B9 0B00 5470          clr.l     _a5.L
0000314A  0118      
0000314C  42B9 0B00 5471          clr.l     _a4.L
00003150  0114      
00003152  42B9 0B00 5472          clr.l     _a3.L
00003156  0110      
00003158  42B9 0B00 5473          clr.l     _a2.L
0000315C  010C      
0000315E  42B9 0B00 5474          clr.l     _a1.L
00003162  0108      
00003164  42B9 0B00 5475          clr.l     _a0.L
00003168  0104      
                    5476   ; PC = ProgramStart, SSP = TopOfStack, USP = TopOfStack;
0000316A  23FC 0800 5477          move.l    #134217728,_PC.L
0000316E  0000 0B00 
00003172  0120      
00003174  23FC 0C00 5478          move.l    #201326592,_SSP.L
00003178  0000 0B00 
0000317C  0124      
0000317E  23FC 0C00 5479          move.l    #201326592,_USP.L
00003182  0000 0B00 
00003186  0128      
                    5480   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00003188  33FC 2000 5481          move.w    #8192,_SR.L
0000318C  0B00 012C 
                    5482   ; // Initialise Breakpoint variables
                    5483   ; for (i = 0; i < 8; i++) {
00003190  4282      5484          clr.l     D2
                    5485   main_1:
00003192  0C82 0000 5486          cmp.l     #8,D2
00003196  0008      
00003198  6C00 004C 5487          bge       main_3
                    5488   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
0000319C  2002      5489          move.l    D2,D0
0000319E  E588      5490          lsl.l     #2,D0
000031A0  41F9 0B00 5491          lea       _BreakPointAddress.L,A0
000031A4  012E      
000031A6  42B0 0800 5492          clr.l     0(A0,D0.L)
                    5493   ; WatchPointAddress[i] = 0;
000031AA  2002      5494          move.l    D2,D0
000031AC  E588      5495          lsl.l     #2,D0
000031AE  41F9 0B00 5496          lea       _WatchPointAddress.L,A0
000031B2  0182      
000031B4  42B0 0800 5497          clr.l     0(A0,D0.L)
                    5498   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000031B8  2002      5499          move.l    D2,D0
000031BA  E388      5500          lsl.l     #1,D0
000031BC  41F9 0B00 5501          lea       _BreakPointInstruction.L,A0
000031C0  014E      
000031C2  4270 0800 5502          clr.w     0(A0,D0.L)
                    5503   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000031C6  2002      5504          move.l    D2,D0
000031C8  E588      5505          lsl.l     #2,D0
000031CA  41F9 0B00 5506          lea       _BreakPointSetOrCleared.L,A0
000031CE  015E      
000031D0  42B0 0800 5507          clr.l     0(A0,D0.L)
                    5508   ; WatchPointSetOrCleared[i] = 0;
000031D4  2002      5509          move.l    D2,D0
000031D6  E588      5510          lsl.l     #2,D0
000031D8  41F9 0B00 5511          lea       _WatchPointSetOrCleared.L,A0
000031DC  01A2      
000031DE  42B0 0800 5512          clr.l     0(A0,D0.L)
000031E2  5282      5513          addq.l    #1,D2
000031E4  60AC      5514          bra       main_1
                    5515   main_3:
                    5516   ; }
                    5517   ; Init_RS232();     // initialise the RS232 port
000031E6  4EB8 0B12 5518          jsr       _Init_RS232
                    5519   ; Init_LCD();
000031EA  4EB8 095E 5520          jsr       _Init_LCD
                    5521   ; SPI_Init();
000031EE  4EB8 10E2 5522          jsr       _SPI_Init
                    5523   ; for (i = 32; i < 48; i++)
000031F2  7420      5524          moveq     #32,D2
                    5525   main_4:
000031F4  0C82 0000 5526          cmp.l     #48,D2
000031F8  0030      
000031FA  6C0E      5527          bge.s     main_6
                    5528   ; InstallExceptionHandler(UnhandledTrap, i);		        // install Trap exception handler on vector 32-47
000031FC  2F02      5529          move.l    D2,-(A7)
000031FE  4878 283A 5530          pea       _UnhandledTrap.L
00003202  4E92      5531          jsr       (A2)
00003204  504F      5532          addq.w    #8,A7
00003206  5282      5533          addq.l    #1,D2
00003208  60EA      5534          bra       main_4
                    5535   main_6:
                    5536   ; InstallExceptionHandler(menu, 47);		                   // TRAP #15 call debug and end program
0000320A  4878 002F 5537          pea       47
0000320E  4878 2514 5538          pea       _menu.L
00003212  4E92      5539          jsr       (A2)
00003214  504F      5540          addq.w    #8,A7
                    5541   ; InstallExceptionHandler(UnhandledIRQ1, 25);		      // install handler for interrupts
00003216  4878 0019 5542          pea       25
0000321A  4878 27E0 5543          pea       _UnhandledIRQ1.L
0000321E  4E92      5544          jsr       (A2)
00003220  504F      5545          addq.w    #8,A7
                    5546   ; InstallExceptionHandler(UnhandledIRQ2, 26);		      // install handler for interrupts
00003222  4878 001A 5547          pea       26
00003226  4878 27EC 5548          pea       _UnhandledIRQ2.L
0000322A  4E92      5549          jsr       (A2)
0000322C  504F      5550          addq.w    #8,A7
                    5551   ; InstallExceptionHandler(UnhandledIRQ3, 27);		      // install handler for interrupts
0000322E  4878 001B 5552          pea       27
00003232  4878 27F8 5553          pea       _UnhandledIRQ3.L
00003236  4E92      5554          jsr       (A2)
00003238  504F      5555          addq.w    #8,A7
                    5556   ; InstallExceptionHandler(UnhandledIRQ4, 28);		      // install handler for interrupts
0000323A  4878 001C 5557          pea       28
0000323E  4878 2804 5558          pea       _UnhandledIRQ4.L
00003242  4E92      5559          jsr       (A2)
00003244  504F      5560          addq.w    #8,A7
                    5561   ; InstallExceptionHandler(UnhandledIRQ5, 29);		      // install handler for interrupts
00003246  4878 001D 5562          pea       29
0000324A  4878 2810 5563          pea       _UnhandledIRQ5.L
0000324E  4E92      5564          jsr       (A2)
00003250  504F      5565          addq.w    #8,A7
                    5566   ; InstallExceptionHandler(UnhandledIRQ6, 30);		      // install handler for interrupts
00003252  4878 001E 5567          pea       30
00003256  4878 281C 5568          pea       _UnhandledIRQ6.L
0000325A  4E92      5569          jsr       (A2)
0000325C  504F      5570          addq.w    #8,A7
                    5571   ; InstallExceptionHandler(UnhandledIRQ7, 31);		      // install handler for interrupts
0000325E  4878 001F 5572          pea       31
00003262  4878 282E 5573          pea       _UnhandledIRQ7.L
00003266  4E92      5574          jsr       (A2)
00003268  504F      5575          addq.w    #8,A7
                    5576   ; InstallExceptionHandler(HandleBreakPoint, 46);		           // install Trap 14 Break Point exception handler on vector 46
0000326A  4878 002E 5577          pea       46
0000326E  4878 2250 5578          pea       _HandleBreakPoint.L
00003272  4E92      5579          jsr       (A2)
00003274  504F      5580          addq.w    #8,A7
                    5581   ; InstallExceptionHandler(DumpRegistersandPause, 29);		   // install TRACE handler for IRQ5 on vector 29
00003276  4878 001D 5582          pea       29
0000327A  4878 1930 5583          pea       _DumpRegistersandPause.L
0000327E  4E92      5584          jsr       (A2)
00003280  504F      5585          addq.w    #8,A7
                    5586   ; InstallExceptionHandler(BusError, 2);                          // install Bus error handler
00003282  4878 0002 5587          pea       2
00003286  4878 2848 5588          pea       _BusError.L
0000328A  4E92      5589          jsr       (A2)
0000328C  504F      5590          addq.w    #8,A7
                    5591   ; InstallExceptionHandler(AddressError, 3);                      // install address error handler (doesn't work on soft core 68k implementation)
0000328E  4878 0003 5592          pea       3
00003292  4878 2856 5593          pea       _AddressError.L
00003296  4E92      5594          jsr       (A2)
00003298  504F      5595          addq.w    #8,A7
                    5596   ; InstallExceptionHandler(IllegalInstruction, 4);                // install illegal instruction exception handler
0000329A  4878 0004 5597          pea       4
0000329E  4878 2864 5598          pea       _IllegalInstruction.L
000032A2  4E92      5599          jsr       (A2)
000032A4  504F      5600          addq.w    #8,A7
                    5601   ; InstallExceptionHandler(Dividebyzero, 5);                      // install /0 exception handler
000032A6  4878 0005 5602          pea       5
000032AA  4878 2872 5603          pea       _Dividebyzero.L
000032AE  4E92      5604          jsr       (A2)
000032B0  504F      5605          addq.w    #8,A7
                    5606   ; InstallExceptionHandler(Check, 6);                             // install check instruction exception handler
000032B2  4878 0006 5607          pea       6
000032B6  4878 2880 5608          pea       _Check.L
000032BA  4E92      5609          jsr       (A2)
000032BC  504F      5610          addq.w    #8,A7
                    5611   ; InstallExceptionHandler(Trapv, 7);                             // install trapv instruction exception handler
000032BE  4878 0007 5612          pea       7
000032C2  4878 288E 5613          pea       _Trapv.L
000032C6  4E92      5614          jsr       (A2)
000032C8  504F      5615          addq.w    #8,A7
                    5616   ; InstallExceptionHandler(PrivError, 8);                         // install Priv Violation exception handler
000032CA  4878 0008 5617          pea       8
000032CE  4878 289C 5618          pea       _PrivError.L
000032D2  4E92      5619          jsr       (A2)
000032D4  504F      5620          addq.w    #8,A7
                    5621   ; InstallExceptionHandler(UnitIRQ, 15);                          // install uninitialised IRQ exception handler
000032D6  4878 000F 5622          pea       15
000032DA  4878 28AA 5623          pea       _UnitIRQ.L
000032DE  4E92      5624          jsr       (A2)
000032E0  504F      5625          addq.w    #8,A7
                    5626   ; InstallExceptionHandler(Check, 24);                            // install spurious IRQ exception handler
000032E2  4878 0018 5627          pea       24
000032E6  4878 2880 5628          pea       _Check.L
000032EA  4E92      5629          jsr       (A2)
000032EC  504F      5630          addq.w    #8,A7
                    5631   ; FlushKeyboard();                        // dump unread characters from keyboard
000032EE  4EB8 0BA6 5632          jsr       _FlushKeyboard
                    5633   ; TraceException = 0;                     // clear trace exception port to remove any software generated single step/trace
000032F2  4239 0040 5634          clr.b     4194314
000032F6  000A      
                    5635   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5636   ; while (((char)(PortB & 0x02)) == (char)(0x02)) {
                    5637   main_7:
000032F8  1039 0040 5638          move.b    4194306,D0
000032FC  0002      
000032FE  C03C 0002 5639          and.b     #2,D0
00003302  0C00 0002 5640          cmp.b     #2,D0
00003306  662A      5641          bne.s     main_9
                    5642   ; LoadFromFlashChip();
00003308  4EB8 13F4 5643          jsr       _LoadFromFlashChip
                    5644   ; printf("\r\nRunning.....");
0000330C  4879 0000 5645          pea       @lab3_182.L
00003310  58AC      
00003312  4E93      5646          jsr       (A3)
00003314  584F      5647          addq.w    #4,A7
                    5648   ; Oline1("Running.....");
00003316  4879 0000 5649          pea       @lab3_183.L
0000331A  58BC      
0000331C  4EB8 0A02 5650          jsr       _Oline1
00003320  584F      5651          addq.w    #4,A7
                    5652   ; GoFlag = 1;
00003322  23FC 0000 5653          move.l    #1,_GoFlag.L
00003326  0001 0B00 
0000332A  00DC      
                    5654   ; go();
0000332C  4EB8 08B8 5655          jsr       _go
00003330  60C6      5656          bra       main_7
                    5657   main_9:
                    5658   ; }
                    5659   ; // otherwise start the debug monitor
                    5660   ; Oline0(BugMessage);
00003332  2F03      5661          move.l    D3,-(A7)
00003334  4EB8 09D4 5662          jsr       _Oline0
00003338  584F      5663          addq.w    #4,A7
                    5664   ; Oline1("By: PJ Davies");
0000333A  4879 0000 5665          pea       @lab3_184.L
0000333E  58CA      
00003340  4EB8 0A02 5666          jsr       _Oline1
00003344  584F      5667          addq.w    #4,A7
                    5668   ; printf("\r\n%s", BugMessage);
00003346  2F03      5669          move.l    D3,-(A7)
00003348  4879 0000 5670          pea       @lab3_185.L
0000334C  58D8      
0000334E  4E93      5671          jsr       (A3)
00003350  504F      5672          addq.w    #8,A7
                    5673   ; printf("\r\n%s", CopyrightMessage);
00003352  2F2E FFF8 5674          move.l    -8(A6),-(A7)
00003356  4879 0000 5675          pea       @lab3_185.L
0000335A  58D8      
0000335C  4E93      5676          jsr       (A3)
0000335E  504F      5677          addq.w    #8,A7
                    5678   ; printf("\r\n%s", NamesAndStudentNumbers);
00003360  2F2E FFFC 5679          move.l    -4(A6),-(A7)
00003364  4879 0000 5680          pea       @lab3_185.L
00003368  58D8      
0000336A  4E93      5681          jsr       (A3)
0000336C  504F      5682          addq.w    #8,A7
                    5683   ; menu();
0000336E  4EB8 2514 5684          jsr       _menu
00003372  4CDF 0C0C 5685          movem.l   (A7)+,D2/D3/A2/A3
00003376  4E5E      5686          unlk      A6
00003378  4E75      5687          rts
                    5688   ; }
                    5689   _strcpy:
0000337A  206F 0004 5690          move.l    (4,A7),A0
0000337E  226F 0008 5691          move.l    (8,A7),A1
00003382  2008      5692          move.l    A0,D0
                    5693   strcpy_1:
00003384  10D9      5694          move.b    (A1)+,(A0)+
00003386  66FC      5695          bne       strcpy_1
00003388  4E75      5696          rts
                    5697   ULDIV:
0000338A  4E56 0000 5698          link    A6,#0
0000338E  48E7 C000 5699          movem.l D0/D1,-(A7)
00003392  222E 0008 5700          move.l  8(A6),D1
00003396  202E 000C 5701          move.l  12(A6),D0
0000339A  6036      5702          bra.s   ldiv_3
                    5703   LDIV:
0000339C  4E56 0000 5704          link    A6,#0
000033A0  48E7 C000 5705          movem.l D0/D1,-(A7)
000033A4  222E 0008 5706          move.l  8(A6),D1
000033A8  202E 000C 5707          move.l  12(A6),D0
000033AC  4A80      5708          tst.l   D0
000033AE  6A0E      5709          bpl.s   ldiv_1
000033B0  4480      5710          neg.l   D0
000033B2  4A81      5711          tst.l   D1
000033B4  6A14      5712          bpl.s   ldiv_2
000033B6  4481      5713          neg.l   D1
000033B8  612A      5714          bsr.s   dodiv
000033BA  4481      5715          neg.l   D1
000033BC  6016      5716          bra.s   ldiv_4
                    5717   ldiv_1:
000033BE  4A81      5718          tst.l   D1
000033C0  6A10      5719          bpl.s   ldiv_3
000033C2  4481      5720          neg.l   D1
000033C4  611E      5721          bsr.s   dodiv
000033C6  4480      5722          neg.l   D0
000033C8  600A      5723          bra.s   ldiv_4
                    5724   ldiv_2:
000033CA  6118      5725          bsr.s   dodiv
000033CC  4480      5726          neg.l   D0
000033CE  4481      5727          neg.l   D1
000033D0  6002      5728          bra.s   ldiv_4
                    5729   ldiv_3:
000033D2  6110      5730          bsr.s   dodiv
                    5731   ldiv_4:
000033D4  2D40 0008 5732          move.l  D0,8(A6)
000033D8  2D41 000C 5733          move.l  D1,12(A6)
000033DC  4CDF 0003 5734          movem.l (A7)+,D0/D1
000033E0  4E5E      5735          unlk    A6
000033E2  4E75      5736          rts
                    5737   dodiv:
000033E4  0C81 0000 5738          cmpi.l  #$FFFF,D1
000033E8  FFFF      
000033EA  6236      5739          bhi.s   dodiv_2
000033EC  0C80 0000 5740          cmpi.l  #$FFFF,D0
000033F0  FFFF      
000033F2  6210      5741          bhi.s   dodiv_1
000033F4  80C1      5742          divu    D1,D0
000033F6  2200      5743          move.l  D0,D1
000033F8  4241      5744          clr.w   D1
000033FA  4841      5745          swap    D1
000033FC  0280 0000 5746          andi.l  #$FFFF,D0
00003400  FFFF      
00003402  4E75      5747          rts
                    5748   dodiv_1:
00003404  48A7 A000 5749          movem.w D0/D2,-(A7)
00003408  4240      5750          clr.w   D0
0000340A  4840      5751          swap    D0
0000340C  80C1      5752          divu    D1,D0
0000340E  3400      5753          move.w  D0,D2
00003410  301F      5754          move.w  (A7)+,D0
00003412  80C1      5755          divu    D1,D0
00003414  4840      5756          swap    D0
00003416  4281      5757          clr.l   D1
00003418  3200      5758          move.w  D0,D1
0000341A  3002      5759          move.w  D2,D0
0000341C  4840      5760          swap    D0
0000341E  341F      5761          move.w  (A7)+,D2
00003420  4E75      5762          rts
                    5763   dodiv_2:
00003422  48E7 3800 5764          movem.l D2/D3/D4,-(A7)
00003426  2401      5765          move.l  D1,D2
00003428  4242      5766          clr.w   D2
0000342A  4842      5767          swap    D2
0000342C  5282      5768          addq.l  #1,D2
0000342E  2600      5769          move.l  D0,D3
00003430  2801      5770          move.l  D1,D4
00003432  2202      5771          move.l  D2,D1
00003434  61CE      5772          bsr.s   dodiv_1
00003436  2204      5773          move.l  D4,D1
00003438  82C2      5774          divu    D2,D1
0000343A  80C1      5775          divu    D1,D0
0000343C  0280 0000 5776          andi.l  #$FFFF,D0
00003440  FFFF      
                    5777   dodiv_3:
00003442  2204      5778          move.l  D4,D1
00003444  2404      5779          move.l  D4,D2
00003446  4842      5780          swap    D2
00003448  C2C0      5781          mulu    D0,D1
0000344A  C4C0      5782          mulu    D0,D2
0000344C  4842      5783          swap    D2
0000344E  D282      5784          add.l   D2,D1
00003450  9283      5785          sub.l   D3,D1
00003452  620A      5786          bhi.s   dodiv_4
00003454  4481      5787          neg.l   D1
00003456  B881      5788          cmp.l   D1,D4
00003458  6208      5789          bhi.s   dodiv_5
0000345A  5280      5790          addq.l  #1,D0
0000345C  60E4      5791          bra.s   dodiv_3
                    5792   dodiv_4:
0000345E  5380      5793          subq.l  #1,D0
00003460  60E0      5794          bra.s   dodiv_3
                    5795   dodiv_5:
00003462  4CDF 001C 5796          movem.l (A7)+,D2/D3/D4
00003466  4E75      5797          rts
                    5798   _putch:
00003468  4E56 0000 5799          link      A6,#0
0000346C  48E7 2000 5800          movem.l   D2,-(A7)
00003470  242E 0008 5801          move.l    8(A6),D2
00003474  0C82 0000 5802          cmp.l     #10,D2
00003478  000A      
0000347A  660A      5803          bne.s     putch_1
0000347C  4878 000D 5804          pea       13
00003480  6100 D6BA 5805          bsr       __putch
00003484  584F      5806          addq.w    #4,A7
                    5807   putch_1:
00003486  2F02      5808          move.l    D2,-(A7)
00003488  6100 D6B2 5809          bsr       __putch
0000348C  584F      5810          addq.w    #4,A7
0000348E  2002      5811          move.l    D2,D0
00003490  4CDF 0004 5812          movem.l   (A7)+,D2
00003494  4E5E      5813          unlk      A6
00003496  4E75      5814          rts
                    5815   _getch:
00003498  48E7 2000 5816          movem.l   D2,-(A7)
0000349C  2439 0B00 5817          move.l    __ungetbuf,D2
000034A0  00C0      
000034A2  2039 0B00 5818          move.l    __ungetbuf,D0
000034A6  00C0      
000034A8  0C80 FFFF 5819          cmp.l     #-1,D0
000034AC  FFFF      
000034AE  670C      5820          beq.s     getch_1
000034B0  23FC FFFF 5821          move.l    #-1,__ungetbuf
000034B4  FFFF 0B00 
000034B8  00C0      
000034BA  6010      5822          bra.s     getch_3
                    5823   getch_1:
000034BC  6100 D6AA 5824          bsr       __getch
000034C0  2400      5825          move.l    D0,D2
000034C2  0C80 0000 5826          cmp.l     #13,D0
000034C6  000D      
000034C8  6602      5827          bne.s     getch_3
000034CA  740A      5828          moveq     #10,D2
                    5829   getch_3:
000034CC  2002      5830          move.l    D2,D0
000034CE  4CDF 0004 5831          movem.l   (A7)+,D2
000034D2  4E75      5832          rts
                    5833   _tolower:
000034D4  4E56 0000 5834          link      A6,#0
000034D8  48E7 2000 5835          movem.l   D2,-(A7)
000034DC  242E 0008 5836          move.l    8(A6),D2
000034E0  0C82 0000 5837          cmp.l     #65,D2
000034E4  0041      
000034E6  6D0E      5838          blt.s     tolower_1
000034E8  0C82 0000 5839          cmp.l     #90,D2
000034EC  005A      
000034EE  6E06      5840          bgt.s     tolower_1
000034F0  84BC 0000 5841          or.l      #32,D2
000034F4  0020      
                    5842   tolower_1:
000034F6  2002      5843          move.l    D2,D0
000034F8  4CDF 0004 5844          movem.l   (A7)+,D2
000034FC  4E5E      5845          unlk      A6
000034FE  4E75      5846          rts
                    5847   _sprintf:
00003500  4E56 FFFC 5848          link      A6,#-4
00003504  48E7 2000 5849          movem.l   D2,-(A7)
00003508  41EE 000C 5850          lea       12(A6),A0
0000350C  5848      5851          addq.w    #4,A0
0000350E  2408      5852          move.l    A0,D2
00003510  2F02      5853          move.l    D2,-(A7)
00003512  2F2E 000C 5854          move.l    12(A6),-(A7)
00003516  2F2E 0008 5855          move.l    8(A6),-(A7)
0000351A  6100 013E 5856          bsr       _vsprintf
0000351E  DEFC 000C 5857          add.w     #12,A7
00003522  2D40 FFFC 5858          move.l    D0,-4(A6)
00003526  4282      5859          clr.l     D2
00003528  202E FFFC 5860          move.l    -4(A6),D0
0000352C  4CDF 0004 5861          movem.l   (A7)+,D2
00003530  4E5E      5862          unlk      A6
00003532  4E75      5863          rts
                    5864   _strcat:
00003534  206F 0004 5865          move.l    (4,A7),A0	
00003538  226F 0008 5866          move.l    (8,A7),A1	
0000353C  2008      5867          move.l    A0,D0		
                    5868   strcat_0:
0000353E  4A18      5869          tst.b     (A0)+
00003540  66FC      5870          bne       strcat_0
00003542  5348      5871          subq      #1,A0
                    5872   strcat_1:
00003544  10D9      5873          move.b    (A1)+,(A0)+
00003546  66FC      5874          bne       strcat_1
00003548  4E75      5875          rts
                    5876   _toupper:
0000354A  4E56 0000 5877          link      A6,#0
0000354E  48E7 2000 5878          movem.l   D2,-(A7)
00003552  242E 0008 5879          move.l    8(A6),D2
00003556  0C82 0000 5880          cmp.l     #97,D2
0000355A  0061      
0000355C  6D0E      5881          blt.s     toupper_1
0000355E  0C82 0000 5882          cmp.l     #122,D2
00003562  007A      
00003564  6E06      5883          bgt.s     toupper_1
00003566  C4BC 0000 5884          and.l     #95,D2
0000356A  005F      
                    5885   toupper_1:
0000356C  2002      5886          move.l    D2,D0
0000356E  4CDF 0004 5887          movem.l   (A7)+,D2
00003572  4E5E      5888          unlk      A6
00003574  4E75      5889          rts
                    5890   _printf:
00003576  4E56 FFFC 5891          link      A6,#-4
0000357A  48E7 2000 5892          movem.l   D2,-(A7)
0000357E  41EE 0008 5893          lea       8(A6),A0
00003582  5848      5894          addq.w    #4,A0
00003584  2408      5895          move.l    A0,D2
00003586  2F02      5896          move.l    D2,-(A7)
00003588  2F2E 0008 5897          move.l    8(A6),-(A7)
0000358C  42A7      5898          clr.l     -(A7)
0000358E  6100 00CA 5899          bsr       _vsprintf
00003592  DEFC 000C 5900          add.w     #12,A7
00003596  2D40 FFFC 5901          move.l    D0,-4(A6)
0000359A  4282      5902          clr.l     D2
0000359C  202E FFFC 5903          move.l    -4(A6),D0
000035A0  4CDF 0004 5904          movem.l   (A7)+,D2
000035A4  4E5E      5905          unlk      A6
000035A6  4E75      5906          rts
                    5907   @vsprintf_copy:
000035A8  4E56 0000 5908          link      A6,#0
000035AC  206E 0008 5909          move.l    8(A6),A0
000035B0  4A90      5910          tst.l     (A0)
000035B2  6710      5911          beq.s     @vsprintf_copy_1
000035B4  202E 000C 5912          move.l    12(A6),D0
000035B8  206E 0008 5913          move.l    8(A6),A0
000035BC  2250      5914          move.l    (A0),A1
000035BE  5290      5915          addq.l    #1,(A0)
000035C0  1280      5916          move.b    D0,(A1)
000035C2  600A      5917          bra.s     @vsprintf_copy_2
                    5918   @vsprintf_copy_1:
000035C4  2F2E 000C 5919          move.l    12(A6),-(A7)
000035C8  6100 FE9E 5920          bsr       _putch
000035CC  584F      5921          addq.w    #4,A7
                    5922   @vsprintf_copy_2:
000035CE  4E5E      5923          unlk      A6
000035D0  4E75      5924          rts
                    5925   @vsprintf_getval:
000035D2  4E56 0000 5926          link      A6,#0
000035D6  48E7 3000 5927          movem.l   D2/D3,-(A7)
000035DA  242E 0008 5928          move.l    8(A6),D2
000035DE  4283      5929          clr.l     D3
000035E0  2042      5930          move.l    D2,A0
000035E2  2050      5931          move.l    (A0),A0
000035E4  1010      5932          move.b    (A0),D0
000035E6  4880      5933          ext.w     D0
000035E8  48C0      5934          ext.l     D0
000035EA  0C80 0000 5935          cmp.l     #42,D0
000035EE  002A      
000035F0  6612      5936          bne.s     @vsprintf_getval_1
000035F2  206E 000C 5937          move.l    12(A6),A0
000035F6  2250      5938          move.l    (A0),A1
000035F8  5890      5939          addq.l    #4,(A0)
000035FA  2611      5940          move.l    (A1),D3
000035FC  2042      5941          move.l    D2,A0
000035FE  5290      5942          addq.l    #1,(A0)
00003600  6000 004E 5943          bra       @vsprintf_getval_5
                    5944   @vsprintf_getval_1:
00003604  2042      5945          move.l    D2,A0
00003606  2050      5946          move.l    (A0),A0
00003608  1010      5947          move.b    (A0),D0
0000360A  4880      5948          ext.w     D0
0000360C  48C0      5949          ext.l     D0
0000360E  0C80 0000 5950          cmp.l     #48,D0
00003612  0030      
00003614  6D00 003A 5951          blt       @vsprintf_getval_5
00003618  2042      5952          move.l    D2,A0
0000361A  2050      5953          move.l    (A0),A0
0000361C  1010      5954          move.b    (A0),D0
0000361E  4880      5955          ext.w     D0
00003620  48C0      5956          ext.l     D0
00003622  0C80 0000 5957          cmp.l     #57,D0
00003626  0039      
00003628  6E26      5958          bgt.s     @vsprintf_getval_5
0000362A  2F03      5959          move.l    D3,-(A7)
0000362C  4878 000A 5960          pea       10
00003630  6100 07F4 5961          bsr       LMUL
00003634  2017      5962          move.l    (A7),D0
00003636  504F      5963          addq.w    #8,A7
00003638  2042      5964          move.l    D2,A0
0000363A  2250      5965          move.l    (A0),A1
0000363C  5290      5966          addq.l    #1,(A0)
0000363E  1211      5967          move.b    (A1),D1
00003640  4881      5968          ext.w     D1
00003642  48C1      5969          ext.l     D1
00003644  D081      5970          add.l     D1,D0
00003646  0480 0000 5971          sub.l     #48,D0
0000364A  0030      
0000364C  2600      5972          move.l    D0,D3
0000364E  60B4      5973          bra       @vsprintf_getval_1
                    5974   @vsprintf_getval_5:
00003650  2003      5975          move.l    D3,D0
00003652  4CDF 000C 5976          movem.l   (A7)+,D2/D3
00003656  4E5E      5977          unlk      A6
00003658  4E75      5978          rts
                    5979   _vsprintf:
0000365A  4E56 FFCC 5980          link      A6,#-52
0000365E  48E7 3F3C 5981          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003662  45EE 0008 5982          lea       8(A6),A2
00003666  47F8 35A8 5983          lea       @vsprintf_copy,A3
0000366A  49F9 0000 5984          lea       _ultoa,A4
0000366E  3DB2      
00003670  4286      5985          clr.l     D6
                    5986   vsprintf_1:
00003672  206E 000C 5987          move.l    12(A6),A0
00003676  4A10      5988          tst.b     (A0)
00003678  6700 0624 5989          beq       vsprintf_3
0000367C  206E 000C 5990          move.l    12(A6),A0
00003680  1010      5991          move.b    (A0),D0
00003682  4880      5992          ext.w     D0
00003684  48C0      5993          ext.l     D0
00003686  0C80 0000 5994          cmp.l     #37,D0
0000368A  0025      
0000368C  671C      5995          beq.s     vsprintf_4
0000368E  206E 000C 5996          move.l    12(A6),A0
00003692  52AE 000C 5997          addq.l    #1,12(A6)
00003696  1210      5998          move.b    (A0),D1
00003698  4881      5999          ext.w     D1
0000369A  48C1      6000          ext.l     D1
0000369C  2F01      6001          move.l    D1,-(A7)
0000369E  2F0A      6002          move.l    A2,-(A7)
000036A0  4E93      6003          jsr       (A3)
000036A2  504F      6004          addq.w    #8,A7
000036A4  5286      6005          addq.l    #1,D6
000036A6  6000 05F2 6006          bra       vsprintf_2
                    6007   vsprintf_4:
000036AA  52AE 000C 6008          addq.l    #1,12(A6)
000036AE  422E FFD3 6009          clr.b     -45(A6)
000036B2  422E FFD2 6010          clr.b     -46(A6)
000036B6  422E FFD0 6011          clr.b     -48(A6)
000036BA  422E FFCF 6012          clr.b     -49(A6)
000036BE  422E FFCE 6013          clr.b     -50(A6)
000036C2  422E FFCD 6014          clr.b     -51(A6)
000036C6  42AE FFFC 6015          clr.l     -4(A6)
000036CA  7AFF      6016          moveq     #-1,D5
000036CC  41EE FFDC 6017          lea       -36(A6),A0
000036D0  2608      6018          move.l    A0,D3
000036D2  2408      6019          move.l    A0,D2
                    6020   vsprintf_6:
000036D4  206E 000C 6021          move.l    12(A6),A0
000036D8  1010      6022          move.b    (A0),D0
000036DA  4880      6023          ext.w     D0
000036DC  48C0      6024          ext.l     D0
000036DE  0C80 0000 6025          cmp.l     #43,D0
000036E2  002B      
000036E4  6730      6026          beq.s     vsprintf_12
000036E6  6E18      6027          bgt.s     vsprintf_15
000036E8  0C80 0000 6028          cmp.l     #35,D0
000036EC  0023      
000036EE  6700 003E 6029          beq       vsprintf_14
000036F2  6E00 0046 6030          bgt       vsprintf_9
000036F6  0C80 0000 6031          cmp.l     #32,D0
000036FA  0020      
000036FC  6724      6032          beq.s     vsprintf_13
000036FE  603A      6033          bra.s     vsprintf_9
                    6034   vsprintf_15:
00003700  0C80 0000 6035          cmp.l     #45,D0
00003704  002D      
00003706  6702      6036          beq.s     vsprintf_11
00003708  6030      6037          bra.s     vsprintf_9
                    6038   vsprintf_11:
0000370A  1D7C 0001 6039          move.b    #1,-51(A6)
0000370E  FFCD      
00003710  52AE 000C 6040          addq.l    #1,12(A6)
00003714  6026      6041          bra.s     vsprintf_7
                    6042   vsprintf_12:
00003716  1D7C 0001 6043          move.b    #1,-50(A6)
0000371A  FFCE      
0000371C  52AE 000C 6044          addq.l    #1,12(A6)
00003720  601A      6045          bra.s     vsprintf_7
                    6046   vsprintf_13:
00003722  1D7C 0001 6047          move.b    #1,-49(A6)
00003726  FFCF      
00003728  52AE 000C 6048          addq.l    #1,12(A6)
0000372C  600E      6049          bra.s     vsprintf_7
                    6050   vsprintf_14:
0000372E  1D7C 0001 6051          move.b    #1,-48(A6)
00003732  FFD0      
00003734  52AE 000C 6052          addq.l    #1,12(A6)
00003738  6002      6053          bra.s     vsprintf_7
                    6054   vsprintf_9:
0000373A  6002      6055          bra.s     vsprintf_8
                    6056   vsprintf_7:
0000373C  6096      6057          bra       vsprintf_6
                    6058   vsprintf_8:
0000373E  206E 000C 6059          move.l    12(A6),A0
00003742  1010      6060          move.b    (A0),D0
00003744  4880      6061          ext.w     D0
00003746  48C0      6062          ext.l     D0
00003748  0C80 0000 6063          cmp.l     #48,D0
0000374C  0030      
0000374E  660A      6064          bne.s     vsprintf_16
00003750  52AE 000C 6065          addq.l    #1,12(A6)
00003754  1D7C 0001 6066          move.b    #1,-46(A6)
00003758  FFD2      
                    6067   vsprintf_16:
0000375A  486E 0010 6068          pea       16(A6)
0000375E  486E 000C 6069          pea       12(A6)
00003762  6100 FE6E 6070          bsr       @vsprintf_getval
00003766  504F      6071          addq.w    #8,A7
00003768  2A40      6072          move.l    D0,A5
0000376A  206E 000C 6073          move.l    12(A6),A0
0000376E  1010      6074          move.b    (A0),D0
00003770  4880      6075          ext.w     D0
00003772  48C0      6076          ext.l     D0
00003774  0C80 0000 6077          cmp.l     #46,D0
00003778  002E      
0000377A  6614      6078          bne.s     vsprintf_18
0000377C  52AE 000C 6079          addq.l    #1,12(A6)
00003780  486E 0010 6080          pea       16(A6)
00003784  486E 000C 6081          pea       12(A6)
00003788  6100 FE48 6082          bsr       @vsprintf_getval
0000378C  504F      6083          addq.w    #8,A7
0000378E  2A00      6084          move.l    D0,D5
                    6085   vsprintf_18:
00003790  206E 000C 6086          move.l    12(A6),A0
00003794  1010      6087          move.b    (A0),D0
00003796  4880      6088          ext.w     D0
00003798  48C0      6089          ext.l     D0
0000379A  0C80 0000 6090          cmp.l     #108,D0
0000379E  006C      
000037A0  660A      6091          bne.s     vsprintf_20
000037A2  52AE 000C 6092          addq.l    #1,12(A6)
000037A6  1D7C 0001 6093          move.b    #1,-45(A6)
000037AA  FFD3      
                    6094   vsprintf_20:
000037AC  206E 000C 6095          move.l    12(A6),A0
000037B0  1010      6096          move.b    (A0),D0
000037B2  4880      6097          ext.w     D0
000037B4  48C0      6098          ext.l     D0
000037B6  0C80 0000 6099          cmp.l     #111,D0
000037BA  006F      
000037BC  6700 00D4 6100          beq       vsprintf_27
000037C0  6E34      6101          bgt.s     vsprintf_33
000037C2  0C80 0000 6102          cmp.l     #100,D0
000037C6  0064      
000037C8  6700 0054 6103          beq       vsprintf_24
000037CC  6E1C      6104          bgt.s     vsprintf_34
000037CE  0C80 0000 6105          cmp.l     #99,D0
000037D2  0063      
000037D4  6700 012C 6106          beq       vsprintf_30
000037D8  6E00 016A 6107          bgt       vsprintf_22
000037DC  0C80 0000 6108          cmp.l     #88,D0
000037E0  0058      
000037E2  6700 00E6 6109          beq       vsprintf_28
000037E6  6000 015C 6110          bra       vsprintf_22
                    6111   vsprintf_34:
000037EA  0C80 0000 6112          cmp.l     #105,D0
000037EE  0069      
000037F0  672C      6113          beq.s     vsprintf_24
000037F2  6000 0150 6114          bra       vsprintf_22
                    6115   vsprintf_33:
000037F6  0C80 0000 6116          cmp.l     #117,D0
000037FA  0075      
000037FC  6700 005C 6117          beq       vsprintf_26
00003800  6E0E      6118          bgt.s     vsprintf_35
00003802  0C80 0000 6119          cmp.l     #115,D0
00003806  0073      
00003808  6700 011C 6120          beq       vsprintf_31
0000380C  6000 0136 6121          bra       vsprintf_22
                    6122   vsprintf_35:
00003810  0C80 0000 6123          cmp.l     #120,D0
00003814  0078      
00003816  6700 00B2 6124          beq       vsprintf_28
0000381A  6000 0128 6125          bra       vsprintf_22
                    6126   vsprintf_24:
0000381E  4A2E FFD3 6127          tst.b     -45(A6)
00003822  671A      6128          beq.s     vsprintf_36
00003824  4878 000A 6129          pea       10
00003828  2F03      6130          move.l    D3,-(A7)
0000382A  206E 0010 6131          move.l    16(A6),A0
0000382E  58AE 0010 6132          addq.l    #4,16(A6)
00003832  2F10      6133          move.l    (A0),-(A7)
00003834  6100 04F8 6134          bsr       _ltoa
00003838  DEFC 000C 6135          add.w     #12,A7
0000383C  6018      6136          bra.s     vsprintf_37
                    6137   vsprintf_36:
0000383E  4878 000A 6138          pea       10
00003842  2F03      6139          move.l    D3,-(A7)
00003844  206E 0010 6140          move.l    16(A6),A0
00003848  58AE 0010 6141          addq.l    #4,16(A6)
0000384C  2F10      6142          move.l    (A0),-(A7)
0000384E  6100 04DE 6143          bsr       _ltoa
00003852  DEFC 000C 6144          add.w     #12,A7
                    6145   vsprintf_37:
00003856  6000 00FA 6146          bra       vsprintf_23
                    6147   vsprintf_26:
0000385A  4A2E FFD3 6148          tst.b     -45(A6)
0000385E  6718      6149          beq.s     vsprintf_38
00003860  4878 000A 6150          pea       10
00003864  2F03      6151          move.l    D3,-(A7)
00003866  206E 0010 6152          move.l    16(A6),A0
0000386A  58AE 0010 6153          addq.l    #4,16(A6)
0000386E  2F10      6154          move.l    (A0),-(A7)
00003870  4E94      6155          jsr       (A4)
00003872  DEFC 000C 6156          add.w     #12,A7
00003876  6016      6157          bra.s     vsprintf_39
                    6158   vsprintf_38:
00003878  4878 000A 6159          pea       10
0000387C  2F03      6160          move.l    D3,-(A7)
0000387E  206E 0010 6161          move.l    16(A6),A0
00003882  58AE 0010 6162          addq.l    #4,16(A6)
00003886  2F10      6163          move.l    (A0),-(A7)
00003888  4E94      6164          jsr       (A4)
0000388A  DEFC 000C 6165          add.w     #12,A7
                    6166   vsprintf_39:
0000388E  6000 00C2 6167          bra       vsprintf_23
                    6168   vsprintf_27:
00003892  4A2E FFD3 6169          tst.b     -45(A6)
00003896  6718      6170          beq.s     vsprintf_40
00003898  4878 0008 6171          pea       8
0000389C  2F03      6172          move.l    D3,-(A7)
0000389E  206E 0010 6173          move.l    16(A6),A0
000038A2  58AE 0010 6174          addq.l    #4,16(A6)
000038A6  2F10      6175          move.l    (A0),-(A7)
000038A8  4E94      6176          jsr       (A4)
000038AA  DEFC 000C 6177          add.w     #12,A7
000038AE  6016      6178          bra.s     vsprintf_41
                    6179   vsprintf_40:
000038B0  4878 0008 6180          pea       8
000038B4  2F03      6181          move.l    D3,-(A7)
000038B6  206E 0010 6182          move.l    16(A6),A0
000038BA  58AE 0010 6183          addq.l    #4,16(A6)
000038BE  2F10      6184          move.l    (A0),-(A7)
000038C0  4E94      6185          jsr       (A4)
000038C2  DEFC 000C 6186          add.w     #12,A7
                    6187   vsprintf_41:
000038C6  6000 008A 6188          bra       vsprintf_23
                    6189   vsprintf_28:
000038CA  4A2E FFD3 6190          tst.b     -45(A6)
000038CE  6718      6191          beq.s     vsprintf_42
000038D0  4878 0010 6192          pea       16
000038D4  2F03      6193          move.l    D3,-(A7)
000038D6  206E 0010 6194          move.l    16(A6),A0
000038DA  58AE 0010 6195          addq.l    #4,16(A6)
000038DE  2F10      6196          move.l    (A0),-(A7)
000038E0  4E94      6197          jsr       (A4)
000038E2  DEFC 000C 6198          add.w     #12,A7
000038E6  6016      6199          bra.s     vsprintf_43
                    6200   vsprintf_42:
000038E8  4878 0010 6201          pea       16
000038EC  2F03      6202          move.l    D3,-(A7)
000038EE  206E 0010 6203          move.l    16(A6),A0
000038F2  58AE 0010 6204          addq.l    #4,16(A6)
000038F6  2F10      6205          move.l    (A0),-(A7)
000038F8  4E94      6206          jsr       (A4)
000038FA  DEFC 000C 6207          add.w     #12,A7
                    6208   vsprintf_43:
000038FE  6000 0052 6209          bra       vsprintf_23
                    6210   vsprintf_30:
00003902  206E 0010 6211          move.l    16(A6),A0
00003906  58AE 0010 6212          addq.l    #4,16(A6)
0000390A  2010      6213          move.l    (A0),D0
0000390C  2042      6214          move.l    D2,A0
0000390E  5282      6215          addq.l    #1,D2
00003910  1080      6216          move.b    D0,(A0)
00003912  2042      6217          move.l    D2,A0
00003914  4210      6218          clr.b     (A0)
00003916  200D      6219          move.l    A5,D0
00003918  6704      6220          beq.s     vsprintf_44
0000391A  200D      6221          move.l    A5,D0
0000391C  6002      6222          bra.s     vsprintf_45
                    6223   vsprintf_44:
0000391E  7001      6224          moveq     #1,D0
                    6225   vsprintf_45:
00003920  2A00      6226          move.l    D0,D5
00003922  6000 002E 6227          bra       vsprintf_23
                    6228   vsprintf_31:
00003926  206E 0010 6229          move.l    16(A6),A0
0000392A  58AE 0010 6230          addq.l    #4,16(A6)
0000392E  2610      6231          move.l    (A0),D3
00003930  0C85 FFFF 6232          cmp.l     #-1,D5
00003934  FFFF      
00003936  660A      6233          bne.s     vsprintf_46
00003938  2F03      6234          move.l    D3,-(A7)
0000393A  6100 0578 6235          bsr       _strlen
0000393E  584F      6236          addq.w    #4,A7
00003940  2A00      6237          move.l    D0,D5
                    6238   vsprintf_46:
00003942  600E      6239          bra.s     vsprintf_23
                    6240   vsprintf_22:
00003944  206E 000C 6241          move.l    12(A6),A0
00003948  2242      6242          move.l    D2,A1
0000394A  5282      6243          addq.l    #1,D2
0000394C  1290      6244          move.b    (A0),(A1)
0000394E  2042      6245          move.l    D2,A0
00003950  4210      6246          clr.b     (A0)
                    6247   vsprintf_23:
00003952  2F03      6248          move.l    D3,-(A7)
00003954  6100 055E 6249          bsr       _strlen
00003958  584F      6250          addq.w    #4,A7
0000395A  1800      6251          move.b    D0,D4
0000395C  206E 000C 6252          move.l    12(A6),A0
00003960  1010      6253          move.b    (A0),D0
00003962  4880      6254          ext.w     D0
00003964  48C0      6255          ext.l     D0
00003966  0C80 0000 6256          cmp.l     #115,D0
0000396A  0073      
0000396C  6618      6257          bne.s     vsprintf_48
0000396E  0C85 0000 6258          cmp.l     #0,D5
00003972  0000      
00003974  6D10      6259          blt.s     vsprintf_48
00003976  4884      6260          ext.w     D4
00003978  48C4      6261          ext.l     D4
0000397A  B885      6262          cmp.l     D5,D4
0000397C  6F04      6263          ble.s     vsprintf_50
0000397E  1005      6264          move.b    D5,D0
00003980  6002      6265          bra.s     vsprintf_51
                    6266   vsprintf_50:
00003982  1004      6267          move.b    D4,D0
                    6268   vsprintf_51:
00003984  1800      6269          move.b    D0,D4
                    6270   vsprintf_48:
00003986  206E 000C 6271          move.l    12(A6),A0
0000398A  1010      6272          move.b    (A0),D0
0000398C  4880      6273          ext.w     D0
0000398E  48C0      6274          ext.l     D0
00003990  0C80 0000 6275          cmp.l     #88,D0
00003994  0058      
00003996  6600 0026 6276          bne       vsprintf_56
0000399A  41EE FFDC 6277          lea       -36(A6),A0
0000399E  2408      6278          move.l    A0,D2
                    6279   vsprintf_54:
000039A0  2042      6280          move.l    D2,A0
000039A2  4A10      6281          tst.b     (A0)
000039A4  6718      6282          beq.s     vsprintf_56
000039A6  2042      6283          move.l    D2,A0
000039A8  1210      6284          move.b    (A0),D1
000039AA  4881      6285          ext.w     D1
000039AC  48C1      6286          ext.l     D1
000039AE  2F01      6287          move.l    D1,-(A7)
000039B0  6100 FB98 6288          bsr       _toupper
000039B4  584F      6289          addq.w    #4,A7
000039B6  2042      6290          move.l    D2,A0
000039B8  1080      6291          move.b    D0,(A0)
000039BA  5282      6292          addq.l    #1,D2
000039BC  60E2      6293          bra       vsprintf_54
                    6294   vsprintf_56:
000039BE  7E00      6295          moveq     #0,D7
000039C0  41EE FFD4 6296          lea       -44(A6),A0
000039C4  2408      6297          move.l    A0,D2
000039C6  206E 000C 6298          move.l    12(A6),A0
000039CA  1010      6299          move.b    (A0),D0
000039CC  4880      6300          ext.w     D0
000039CE  48C0      6301          ext.l     D0
000039D0  0C80 0000 6302          cmp.l     #100,D0
000039D4  0064      
000039D6  6714      6303          beq.s     vsprintf_59
000039D8  206E 000C 6304          move.l    12(A6),A0
000039DC  1010      6305          move.b    (A0),D0
000039DE  4880      6306          ext.w     D0
000039E0  48C0      6307          ext.l     D0
000039E2  0C80 0000 6308          cmp.l     #105,D0
000039E6  0069      
000039E8  6600 0076 6309          bne       vsprintf_65
                    6310   vsprintf_59:
000039EC  4A2E FFCE 6311          tst.b     -50(A6)
000039F0  6612      6312          bne.s     vsprintf_62
000039F2  2043      6313          move.l    D3,A0
000039F4  1010      6314          move.b    (A0),D0
000039F6  4880      6315          ext.w     D0
000039F8  48C0      6316          ext.l     D0
000039FA  0C80 0000 6317          cmp.l     #45,D0
000039FE  002D      
00003A00  6600 002E 6318          bne       vsprintf_60
                    6319   vsprintf_62:
00003A04  2043      6320          move.l    D3,A0
00003A06  1010      6321          move.b    (A0),D0
00003A08  4880      6322          ext.w     D0
00003A0A  48C0      6323          ext.l     D0
00003A0C  0C80 0000 6324          cmp.l     #45,D0
00003A10  002D      
00003A12  660E      6325          bne.s     vsprintf_63
00003A14  2043      6326          move.l    D3,A0
00003A16  5283      6327          addq.l    #1,D3
00003A18  2242      6328          move.l    D2,A1
00003A1A  5282      6329          addq.l    #1,D2
00003A1C  1290      6330          move.b    (A0),(A1)
00003A1E  5304      6331          subq.b    #1,D4
00003A20  6008      6332          bra.s     vsprintf_64
                    6333   vsprintf_63:
00003A22  2042      6334          move.l    D2,A0
00003A24  5282      6335          addq.l    #1,D2
00003A26  10BC 002B 6336          move.b    #43,(A0)
                    6337   vsprintf_64:
00003A2A  5287      6338          addq.l    #1,D7
00003A2C  6000 0032 6339          bra       vsprintf_65
                    6340   vsprintf_60:
00003A30  4A2E FFCF 6341          tst.b     -49(A6)
00003A34  6700 002A 6342          beq       vsprintf_65
00003A38  2043      6343          move.l    D3,A0
00003A3A  1010      6344          move.b    (A0),D0
00003A3C  4880      6345          ext.w     D0
00003A3E  48C0      6346          ext.l     D0
00003A40  0C80 0000 6347          cmp.l     #45,D0
00003A44  002D      
00003A46  660E      6348          bne.s     vsprintf_67
00003A48  2043      6349          move.l    D3,A0
00003A4A  5283      6350          addq.l    #1,D3
00003A4C  2242      6351          move.l    D2,A1
00003A4E  5282      6352          addq.l    #1,D2
00003A50  1290      6353          move.b    (A0),(A1)
00003A52  5304      6354          subq.b    #1,D4
00003A54  6008      6355          bra.s     vsprintf_68
                    6356   vsprintf_67:
00003A56  2042      6357          move.l    D2,A0
00003A58  5282      6358          addq.l    #1,D2
00003A5A  10BC 0020 6359          move.b    #32,(A0)
                    6360   vsprintf_68:
00003A5E  5287      6361          addq.l    #1,D7
                    6362   vsprintf_65:
00003A60  4A2E FFD0 6363          tst.b     -48(A6)
00003A64  6700 0066 6364          beq       vsprintf_77
00003A68  206E 000C 6365          move.l    12(A6),A0
00003A6C  1010      6366          move.b    (A0),D0
00003A6E  4880      6367          ext.w     D0
00003A70  48C0      6368          ext.l     D0
00003A72  0C80 0000 6369          cmp.l     #111,D0
00003A76  006F      
00003A78  671A      6370          beq.s     vsprintf_73
00003A7A  6E0C      6371          bgt.s     vsprintf_76
00003A7C  0C80 0000 6372          cmp.l     #88,D0
00003A80  0058      
00003A82  6710      6373          beq.s     vsprintf_73
00003A84  6000 0046 6374          bra       vsprintf_77
                    6375   vsprintf_76:
00003A88  0C80 0000 6376          cmp.l     #120,D0
00003A8C  0078      
00003A8E  6704      6377          beq.s     vsprintf_73
00003A90  6000 003A 6378          bra       vsprintf_77
                    6379   vsprintf_73:
00003A94  2042      6380          move.l    D2,A0
00003A96  5282      6381          addq.l    #1,D2
00003A98  10BC 0030 6382          move.b    #48,(A0)
00003A9C  5287      6383          addq.l    #1,D7
00003A9E  206E 000C 6384          move.l    12(A6),A0
00003AA2  1010      6385          move.b    (A0),D0
00003AA4  4880      6386          ext.w     D0
00003AA6  48C0      6387          ext.l     D0
00003AA8  0C80 0000 6388          cmp.l     #120,D0
00003AAC  0078      
00003AAE  6712      6389          beq.s     vsprintf_79
00003AB0  206E 000C 6390          move.l    12(A6),A0
00003AB4  1010      6391          move.b    (A0),D0
00003AB6  4880      6392          ext.w     D0
00003AB8  48C0      6393          ext.l     D0
00003ABA  0C80 0000 6394          cmp.l     #88,D0
00003ABE  0058      
00003AC0  660A      6395          bne.s     vsprintf_77
                    6396   vsprintf_79:
00003AC2  2042      6397          move.l    D2,A0
00003AC4  5282      6398          addq.l    #1,D2
00003AC6  10BC 0078 6399          move.b    #120,(A0)
00003ACA  5287      6400          addq.l    #1,D7
                    6401   vsprintf_77:
00003ACC  2042      6402          move.l    D2,A0
00003ACE  4210      6403          clr.b     (A0)
00003AD0  206E 000C 6404          move.l    12(A6),A0
00003AD4  1010      6405          move.b    (A0),D0
00003AD6  4880      6406          ext.w     D0
00003AD8  48C0      6407          ext.l     D0
00003ADA  0C80 0000 6408          cmp.l     #105,D0
00003ADE  0069      
00003AE0  6700 0076 6409          beq       vsprintf_82
00003AE4  6E42      6410          bgt.s     vsprintf_93
00003AE6  0C80 0000 6411          cmp.l     #99,D0
00003AEA  0063      
00003AEC  6700 0084 6412          beq       vsprintf_96
00003AF0  6E1C      6413          bgt.s     vsprintf_94
00003AF2  0C80 0000 6414          cmp.l     #88,D0
00003AF6  0058      
00003AF8  6700 005E 6415          beq       vsprintf_82
00003AFC  6E00 0184 6416          bgt       vsprintf_80
00003B00  0C80 0000 6417          cmp.l     #69,D0
00003B04  0045      
00003B06  6700 0050 6418          beq       vsprintf_82
00003B0A  6000 0176 6419          bra       vsprintf_80
                    6420   vsprintf_94:
00003B0E  0C80 0000 6421          cmp.l     #101,D0
00003B12  0065      
00003B14  6700 0042 6422          beq       vsprintf_82
00003B18  6E00 0168 6423          bgt       vsprintf_80
00003B1C  0C80 0000 6424          cmp.l     #100,D0
00003B20  0064      
00003B22  6734      6425          beq.s     vsprintf_82
00003B24  6000 015C 6426          bra       vsprintf_80
                    6427   vsprintf_93:
00003B28  0C80 0000 6428          cmp.l     #117,D0
00003B2C  0075      
00003B2E  6728      6429          beq.s     vsprintf_82
00003B30  6E1A      6430          bgt.s     vsprintf_95
00003B32  0C80 0000 6431          cmp.l     #115,D0
00003B36  0073      
00003B38  6700 0038 6432          beq       vsprintf_96
00003B3C  6E00 0144 6433          bgt       vsprintf_80
00003B40  0C80 0000 6434          cmp.l     #111,D0
00003B44  006F      
00003B46  6710      6435          beq.s     vsprintf_82
00003B48  6000 0138 6436          bra       vsprintf_80
                    6437   vsprintf_95:
00003B4C  0C80 0000 6438          cmp.l     #120,D0
00003B50  0078      
00003B52  6704      6439          beq.s     vsprintf_82
00003B54  6000 012C 6440          bra       vsprintf_80
                    6441   vsprintf_82:
00003B58  4A2E FFD2 6442          tst.b     -46(A6)
00003B5C  6714      6443          beq.s     vsprintf_96
00003B5E  4A2E FFCD 6444          tst.b     -51(A6)
00003B62  660E      6445          bne.s     vsprintf_96
00003B64  200D      6446          move.l    A5,D0
00003B66  9087      6447          sub.l     D7,D0
00003B68  4884      6448          ext.w     D4
00003B6A  48C4      6449          ext.l     D4
00003B6C  9084      6450          sub.l     D4,D0
00003B6E  2D40 FFFC 6451          move.l    D0,-4(A6)
                    6452   vsprintf_96:
00003B72  202E FFFC 6453          move.l    -4(A6),D0
00003B76  0C80 0000 6454          cmp.l     #0,D0
00003B7A  0000      
00003B7C  6C04      6455          bge.s     vsprintf_98
00003B7E  42AE FFFC 6456          clr.l     -4(A6)
                    6457   vsprintf_98:
00003B82  4A2E FFCD 6458          tst.b     -51(A6)
00003B86  6600 0030 6459          bne       vsprintf_104
00003B8A  4884      6460          ext.w     D4
00003B8C  48C4      6461          ext.l     D4
00003B8E  2004      6462          move.l    D4,D0
00003B90  D0AE FFFC 6463          add.l     -4(A6),D0
00003B94  D087      6464          add.l     D7,D0
00003B96  1D40 FFD1 6465          move.b    D0,-47(A6)
                    6466   vsprintf_102:
00003B9A  102E FFD1 6467          move.b    -47(A6),D0
00003B9E  4880      6468          ext.w     D0
00003BA0  48C0      6469          ext.l     D0
00003BA2  220D      6470          move.l    A5,D1
00003BA4  534D      6471          subq.w    #1,A5
00003BA6  B081      6472          cmp.l     D1,D0
00003BA8  6C0E      6473          bge.s     vsprintf_104
00003BAA  4878 0020 6474          pea       32
00003BAE  2F0A      6475          move.l    A2,-(A7)
00003BB0  4E93      6476          jsr       (A3)
00003BB2  504F      6477          addq.w    #8,A7
00003BB4  5286      6478          addq.l    #1,D6
00003BB6  60E2      6479          bra       vsprintf_102
                    6480   vsprintf_104:
00003BB8  41EE FFD4 6481          lea       -44(A6),A0
00003BBC  2408      6482          move.l    A0,D2
                    6483   vsprintf_105:
00003BBE  2042      6484          move.l    D2,A0
00003BC0  4A10      6485          tst.b     (A0)
00003BC2  6716      6486          beq.s     vsprintf_107
00003BC4  2042      6487          move.l    D2,A0
00003BC6  5282      6488          addq.l    #1,D2
00003BC8  1210      6489          move.b    (A0),D1
00003BCA  4881      6490          ext.w     D1
00003BCC  48C1      6491          ext.l     D1
00003BCE  2F01      6492          move.l    D1,-(A7)
00003BD0  2F0A      6493          move.l    A2,-(A7)
00003BD2  4E93      6494          jsr       (A3)
00003BD4  504F      6495          addq.w    #8,A7
00003BD6  5286      6496          addq.l    #1,D6
00003BD8  60E4      6497          bra       vsprintf_105
                    6498   vsprintf_107:
00003BDA  202E FFFC 6499          move.l    -4(A6),D0
00003BDE  1D40 FFD1 6500          move.b    D0,-47(A6)
                    6501   vsprintf_108:
00003BE2  102E FFD1 6502          move.b    -47(A6),D0
00003BE6  532E FFD1 6503          subq.b    #1,-47(A6)
00003BEA  4A00      6504          tst.b     D0
00003BEC  670E      6505          beq.s     vsprintf_110
00003BEE  4878 0030 6506          pea       48
00003BF2  2F0A      6507          move.l    A2,-(A7)
00003BF4  4E93      6508          jsr       (A3)
00003BF6  504F      6509          addq.w    #8,A7
00003BF8  5286      6510          addq.l    #1,D6
00003BFA  60E6      6511          bra       vsprintf_108
                    6512   vsprintf_110:
00003BFC  2043      6513          move.l    D3,A0
00003BFE  4A10      6514          tst.b     (A0)
00003C00  6700 0048 6515          beq       vsprintf_113
00003C04  206E 000C 6516          move.l    12(A6),A0
00003C08  1010      6517          move.b    (A0),D0
00003C0A  4880      6518          ext.w     D0
00003C0C  48C0      6519          ext.l     D0
00003C0E  0C80 0000 6520          cmp.l     #115,D0
00003C12  0073      
00003C14  670C      6521          beq.s     vsprintf_116
00003C16  6E18      6522          bgt.s     vsprintf_119
00003C18  0C80 0000 6523          cmp.l     #99,D0
00003C1C  0063      
00003C1E  6702      6524          beq.s     vsprintf_116
00003C20  600E      6525          bra.s     vsprintf_119
                    6526   vsprintf_116:
00003C22  2005      6527          move.l    D5,D0
00003C24  5385      6528          subq.l    #1,D5
00003C26  0C80 0000 6529          cmp.l     #0,D0
00003C2A  0000      
00003C2C  6E02      6530          bgt.s     vsprintf_119
00003C2E  6016      6531          bra.s     vsprintf_115
                    6532   vsprintf_119:
00003C30  2043      6533          move.l    D3,A0
00003C32  5283      6534          addq.l    #1,D3
00003C34  1210      6535          move.b    (A0),D1
00003C36  4881      6536          ext.w     D1
00003C38  48C1      6537          ext.l     D1
00003C3A  2F01      6538          move.l    D1,-(A7)
00003C3C  2F0A      6539          move.l    A2,-(A7)
00003C3E  4E93      6540          jsr       (A3)
00003C40  504F      6541          addq.w    #8,A7
00003C42  5286      6542          addq.l    #1,D6
00003C44  6002      6543          bra.s     vsprintf_112
                    6544   vsprintf_115:
00003C46  6002      6545          bra.s     vsprintf_113
                    6546   vsprintf_112:
00003C48  60B2      6547          bra       vsprintf_110
                    6548   vsprintf_113:
00003C4A  4A2E FFCD 6549          tst.b     -51(A6)
00003C4E  6700 0030 6550          beq       vsprintf_125
00003C52  4884      6551          ext.w     D4
00003C54  48C4      6552          ext.l     D4
00003C56  2004      6553          move.l    D4,D0
00003C58  D0AE FFFC 6554          add.l     -4(A6),D0
00003C5C  D087      6555          add.l     D7,D0
00003C5E  1D40 FFD1 6556          move.b    D0,-47(A6)
                    6557   vsprintf_123:
00003C62  102E FFD1 6558          move.b    -47(A6),D0
00003C66  4880      6559          ext.w     D0
00003C68  48C0      6560          ext.l     D0
00003C6A  220D      6561          move.l    A5,D1
00003C6C  534D      6562          subq.w    #1,A5
00003C6E  B081      6563          cmp.l     D1,D0
00003C70  6C0E      6564          bge.s     vsprintf_125
00003C72  4878 0020 6565          pea       32
00003C76  2F0A      6566          move.l    A2,-(A7)
00003C78  4E93      6567          jsr       (A3)
00003C7A  504F      6568          addq.w    #8,A7
00003C7C  5386      6569          subq.l    #1,D6
00003C7E  60E2      6570          bra       vsprintf_123
                    6571   vsprintf_125:
00003C80  6014      6572          bra.s     vsprintf_81
                    6573   vsprintf_80:
00003C82  206E 000C 6574          move.l    12(A6),A0
00003C86  1210      6575          move.b    (A0),D1
00003C88  4881      6576          ext.w     D1
00003C8A  48C1      6577          ext.l     D1
00003C8C  2F01      6578          move.l    D1,-(A7)
00003C8E  2F0A      6579          move.l    A2,-(A7)
00003C90  4E93      6580          jsr       (A3)
00003C92  504F      6581          addq.w    #8,A7
00003C94  5286      6582          addq.l    #1,D6
                    6583   vsprintf_81:
00003C96  52AE 000C 6584          addq.l    #1,12(A6)
                    6585   vsprintf_2:
00003C9A  6000 F9D6 6586          bra       vsprintf_1
                    6587   vsprintf_3:
00003C9E  4A92      6588          tst.l     (A2)
00003CA0  6710      6589          beq.s     vsprintf_126
00003CA2  4201      6590          clr.b     D1
00003CA4  C2BC 0000 6591          and.l     #255,D1
00003CA8  00FF      
00003CAA  2F01      6592          move.l    D1,-(A7)
00003CAC  2F0A      6593          move.l    A2,-(A7)
00003CAE  4E93      6594          jsr       (A3)
00003CB0  504F      6595          addq.w    #8,A7
                    6596   vsprintf_126:
00003CB2  2006      6597          move.l    D6,D0
00003CB4  4CDF 3CFC 6598          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003CB8  4E5E      6599          unlk      A6
00003CBA  4E75      6600          rts
                    6601   @itoa_convert:
00003CBC  4E56 0000 6602          link      A6,#0
00003CC0  48E7 3C00 6603          movem.l   D2/D3/D4/D5,-(A7)
00003CC4  242E 0008 6604          move.l    8(A6),D2
00003CC8  262E 0010 6605          move.l    16(A6),D3
00003CCC  2A2E 000C 6606          move.l    12(A6),D5
00003CD0  2F05      6607          move.l    D5,-(A7)
00003CD2  2F03      6608          move.l    D3,-(A7)
00003CD4  6100 F6B4 6609          bsr       ULDIV
00003CD8  202F 0004 6610          move.l    4(A7),D0
00003CDC  504F      6611          addq.w    #8,A7
00003CDE  2800      6612          move.l    D0,D4
00003CE0  BA83      6613          cmp.l     D3,D5
00003CE2  651A      6614          blo.s     @itoa_convert_1
00003CE4  2F03      6615          move.l    D3,-(A7)
00003CE6  2F05      6616          move.l    D5,-(A7)
00003CE8  2F03      6617          move.l    D3,-(A7)
00003CEA  6100 F69E 6618          bsr       ULDIV
00003CEE  2217      6619          move.l    (A7),D1
00003CF0  504F      6620          addq.w    #8,A7
00003CF2  2F01      6621          move.l    D1,-(A7)
00003CF4  2F02      6622          move.l    D2,-(A7)
00003CF6  61C4      6623          bsr       @itoa_convert
00003CF8  DEFC 000C 6624          add.w     #12,A7
00003CFC  2400      6625          move.l    D0,D2
                    6626   @itoa_convert_1:
00003CFE  0C84 0000 6627          cmp.l     #9,D4
00003D02  0009      
00003D04  6E0A      6628          bgt.s     @itoa_convert_3
00003D06  2004      6629          move.l    D4,D0
00003D08  0680 0000 6630          add.l     #48,D0
00003D0C  0030      
00003D0E  600E      6631          bra.s     @itoa_convert_4
                    6632   @itoa_convert_3:
00003D10  2004      6633          move.l    D4,D0
00003D12  0680 0000 6634          add.l     #97,D0
00003D16  0061      
00003D18  0480 0000 6635          sub.l     #10,D0
00003D1C  000A      
                    6636   @itoa_convert_4:
00003D1E  2042      6637          move.l    D2,A0
00003D20  1080      6638          move.b    D0,(A0)
00003D22  2002      6639          move.l    D2,D0
00003D24  5280      6640          addq.l    #1,D0
00003D26  4CDF 003C 6641          movem.l   (A7)+,D2/D3/D4/D5
00003D2A  4E5E      6642          unlk      A6
00003D2C  4E75      6643          rts
                    6644   _ltoa:
00003D2E  4E56 0000 6645          link      A6,#0
00003D32  48E7 3C00 6646          movem.l   D2/D3/D4/D5,-(A7)
00003D36  242E 0008 6647          move.l    8(A6),D2
00003D3A  262E 000C 6648          move.l    12(A6),D3
00003D3E  2A2E 0010 6649          move.l    16(A6),D5
00003D42  2803      6650          move.l    D3,D4
00003D44  0C85 0000 6651          cmp.l     #2,D5
00003D48  0002      
00003D4A  6D08      6652          blt.s     ltoa_3
00003D4C  0C85 0000 6653          cmp.l     #36,D5
00003D50  0024      
00003D52  6F06      6654          ble.s     ltoa_1
                    6655   ltoa_3:
00003D54  2003      6656          move.l    D3,D0
00003D56  6000 0052 6657          bra       ltoa_4
                    6658   ltoa_1:
00003D5A  0C85 0000 6659          cmp.l     #10,D5
00003D5E  000A      
00003D60  6600 0032 6660          bne       ltoa_5
00003D64  0C82 0000 6661          cmp.l     #0,D2
00003D68  0000      
00003D6A  6C28      6662          bge.s     ltoa_5
00003D6C  2002      6663          move.l    D2,D0
00003D6E  4480      6664          neg.l     D0
00003D70  2400      6665          move.l    D0,D2
00003D72  0C82 0000 6666          cmp.l     #0,D2
00003D76  0000      
00003D78  6C12      6667          bge.s     ltoa_7
00003D7A  4879 0000 6668          pea       @itoa_1
00003D7E  5902      
00003D80  2F03      6669          move.l    D3,-(A7)
00003D82  6100 F5F6 6670          bsr       _strcpy
00003D86  504F      6671          addq.w    #8,A7
00003D88  2003      6672          move.l    D3,D0
00003D8A  601E      6673          bra.s     ltoa_4
                    6674   ltoa_7:
00003D8C  2044      6675          move.l    D4,A0
00003D8E  5284      6676          addq.l    #1,D4
00003D90  10BC 002D 6677          move.b    #45,(A0)
                    6678   ltoa_5:
00003D94  2F05      6679          move.l    D5,-(A7)
00003D96  2F02      6680          move.l    D2,-(A7)
00003D98  2F04      6681          move.l    D4,-(A7)
00003D9A  6100 FF20 6682          bsr       @itoa_convert
00003D9E  DEFC 000C 6683          add.w     #12,A7
00003DA2  2800      6684          move.l    D0,D4
00003DA4  2044      6685          move.l    D4,A0
00003DA6  4210      6686          clr.b     (A0)
00003DA8  2003      6687          move.l    D3,D0
                    6688   ltoa_4:
00003DAA  4CDF 003C 6689          movem.l   (A7)+,D2/D3/D4/D5
00003DAE  4E5E      6690          unlk      A6
00003DB0  4E75      6691          rts
                    6692   _ultoa:
00003DB2  4E56 0000 6693          link      A6,#0
00003DB6  48E7 3800 6694          movem.l   D2/D3/D4,-(A7)
00003DBA  262E 0010 6695          move.l    16(A6),D3
00003DBE  282E 000C 6696          move.l    12(A6),D4
00003DC2  2404      6697          move.l    D4,D2
00003DC4  0C83 0000 6698          cmp.l     #2,D3
00003DC8  0002      
00003DCA  6D08      6699          blt.s     ultoa_3
00003DCC  0C83 0000 6700          cmp.l     #36,D3
00003DD0  0024      
00003DD2  6F04      6701          ble.s     ultoa_1
                    6702   ultoa_3:
00003DD4  2004      6703          move.l    D4,D0
00003DD6  6018      6704          bra.s     ultoa_4
                    6705   ultoa_1:
00003DD8  2F03      6706          move.l    D3,-(A7)
00003DDA  2F2E 0008 6707          move.l    8(A6),-(A7)
00003DDE  2F02      6708          move.l    D2,-(A7)
00003DE0  6100 FEDA 6709          bsr       @itoa_convert
00003DE4  DEFC 000C 6710          add.w     #12,A7
00003DE8  2400      6711          move.l    D0,D2
00003DEA  2042      6712          move.l    D2,A0
00003DEC  4210      6713          clr.b     (A0)
00003DEE  2004      6714          move.l    D4,D0
                    6715   ultoa_4:
00003DF0  4CDF 001C 6716          movem.l   (A7)+,D2/D3/D4
00003DF4  4E5E      6717          unlk      A6
00003DF6  4E75      6718          rts
                    6719   _itoa:
00003DF8  4E56 0000 6720          link      A6,#0
00003DFC  2F2E 0010 6721          move.l    16(A6),-(A7)
00003E00  2F2E 000C 6722          move.l    12(A6),-(A7)
00003E04  2F2E 0008 6723          move.l    8(A6),-(A7)
00003E08  6100 FF24 6724          bsr       _ltoa
00003E0C  DEFC 000C 6725          add.w     #12,A7
00003E10  4E5E      6726          unlk      A6
00003E12  4E75      6727          rts
                    6728   ULMUL:
00003E14  4E56 0000 6729          link    A6,#0
00003E18  48E7 C000 6730          movem.l D0/D1,-(A7)
00003E1C  222E 0008 6731          move.l  8(A6),D1
00003E20  202E 000C 6732          move.l  12(A6),D0
00003E24  602C      6733          bra.s   lmul_3
                    6734   LMUL:
00003E26  4E56 0000 6735          link    A6,#0
00003E2A  48E7 C000 6736          movem.l D0/D1,-(A7)
00003E2E  222E 0008 6737          move.l  8(A6),D1
00003E32  202E 000C 6738          move.l  12(A6),D0
00003E36  4A80      6739          tst.l   D0
00003E38  6A0A      6740          bpl.s   lmul_1
00003E3A  4480      6741          neg.l   D0
00003E3C  4A81      6742          tst.l   D1
00003E3E  6A0A      6743          bpl.s   lmul_2
00003E40  4481      6744          neg.l   D1
00003E42  600E      6745          bra.s   lmul_3
                    6746   lmul_1:
00003E44  4A81      6747          tst.l   D1
00003E46  6A0A      6748          bpl.s   lmul_3
00003E48  4481      6749          neg.l   D1
                    6750   lmul_2:
00003E4A  6114      6751          bsr.s   domul
00003E4C  4481      6752          neg.l   D1
00003E4E  4080      6753          negx.l  D0
00003E50  6002      6754          bra.s   lmul_4
                    6755   lmul_3:
00003E52  610C      6756          bsr.s   domul
                    6757   lmul_4:
00003E54  2D41 0008 6758          move.l  D1,8(A6)
00003E58  4CDF 0003 6759          movem.l (A7)+,D0/D1
00003E5C  4E5E      6760          unlk    A6
00003E5E  4E75      6761          rts
                    6762   domul:
00003E60  0C81 0000 6763          cmpi.l  #$FFFF,D1
00003E64  FFFF      
00003E66  620C      6764          bhi.s   domul_1
00003E68  0C80 0000 6765          cmpi.l  #$FFFF,D0
00003E6C  FFFF      
00003E6E  620E      6766          bhi.s   domul_2
00003E70  C2C0      6767          mulu    D0,D1
00003E72  4E75      6768          rts
                    6769   domul_1:
00003E74  0C80 0000 6770          cmpi.l  #$FFFF,D0
00003E78  FFFF      
00003E7A  6218      6771          bhi.s   domul_4
00003E7C  6002      6772          bra.s   domul_3
                    6773   domul_2
00003E7E  C141      6774          exg     D0,D1
                    6775   domul_3:
00003E80  2F02      6776          move.l  D2,-(A7)
00003E82  2401      6777          move.l  D1,D2
00003E84  4842      6778          swap    D2
00003E86  C2C0      6779          mulu    D0,D1
00003E88  C4C0      6780          mulu    D0,D2
00003E8A  4842      6781          swap    D2
00003E8C  4242      6782          clr.w   D2
00003E8E  D282      6783          add.l   D2,D1
00003E90  241F      6784          move.l  (A7)+,D2
00003E92  4E75      6785          rts
                    6786   domul_4:
00003E94  48E7 3000 6787          movem.l D2/D3,-(A7)
00003E98  2401      6788          move.l  D1,D2
00003E9A  2601      6789          move.l  D1,D3
00003E9C  C2C0      6790          mulu    D0,D1
00003E9E  4842      6791          swap    D2
00003EA0  C4C0      6792          mulu    D0,D2
00003EA2  4840      6793          swap    D0
00003EA4  C6C0      6794          mulu    D0,D3
00003EA6  D483      6795          add.l   D3,D2
00003EA8  4842      6796          swap    D2
00003EAA  4242      6797          clr.w   D2
00003EAC  D282      6798          add.l   D2,D1
00003EAE  4CDF 000C 6799          movem.l (A7)+,D2/D3
00003EB2  4E75      6800          rts
                    6801   _strlen:
00003EB4  206F 0004 6802          move.l    (4,A7),A0
00003EB8  2248      6803          move.l    A0,A1
                    6804   strlen_1:
00003EBA  4A19      6805          tst.b     (A1)+
00003EBC  66FC      6806          bne       strlen_1
00003EBE  2009      6807          move.l    A1,D0
00003EC0  9088      6808          sub.l     A0,D0
00003EC2  5380      6809          subq.l    #1,D0
00003EC4  4E75      6810          rts
                    6811          section   const
                    6812   
                    6813   @lab3_1:
00003EC6  0D0A 00   6814          dc.b      13,10,0
                    6815   @lab3_2:
00003ECA  0D53 7769 6816          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003ECE  7463 6865 
00003ED2  7320 5357 
00003ED6  5B        
00003ED7  372D 305D 6817          dc.b      55,45,48,93,32,61,32,0
00003EDB  203D 2000 
                    6818   @lab3_3:
00003EE0  3000      6819          dc.b      48,0
                    6820   @lab3_4:
00003EE2  3100      6821          dc.b      49,0
                    6822   @lab3_5:
00003EE4  0D0A 4475 6823          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003EE8  6D70 204D 
00003EEC  656D 6F72 
00003EF0  79        
00003EF1  2042 6C6F 6824          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003EF5  636B 3A20 
00003EF9  3C45 5343 
00003EFD  3E20      
00003EFF  746F 2041 6825          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003F03  626F 7274 
00003F07  2C20 3C53 
00003F0B  50        
00003F0C  4143 453E 6826          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003F10  2074 6F20 
00003F14  436F 6E74 
00003F18  69        
00003F19  6E75 6500 6827          dc.b      110,117,101,0
                    6828   @lab3_6:
00003F1E  0D0A 456E 6829          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003F22  7465 7220 
00003F26  5374 6172 
00003F2A  74        
00003F2B  2041 6464 6830          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003F2F  7265 7373 
00003F33  3A20 00   
                    6831   @lab3_7:
00003F36  0D0A 2530 6832          dc.b      13,10,37,48,56,120,32,0
00003F3A  3878 2000 
                    6833   @lab3_8:
00003F3E  2530 3258 6834          dc.b      37,48,50,88,0
00003F42  00        
                    6835   @lab3_9:
00003F44  2020 00   6836          dc.b      32,32,0
                    6837   @lab3_10:
00003F48  0D0A 4669 6838          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003F4C  6C6C 204D 
00003F50  656D 6F72 
00003F54  79        
00003F55  2042 6C6F 6839          dc.b      32,66,108,111,99,107,0
00003F59  636B 00   
                    6840   @lab3_11:
00003F5C  0D0A 456E 6841          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003F60  7465 7220 
00003F64  456E 6420 
00003F68  41        
00003F69  6464 7265 6842          dc.b      100,100,114,101,115,115,58,32,0
00003F6D  7373 3A20 
00003F71  00        
                    6843   @lab3_12:
00003F72  0D0A 456E 6844          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003F76  7465 7220 
00003F7A  4669 6C6C 
00003F7E  20        
00003F7F  4461 7461 6845          dc.b      68,97,116,97,58,32,0
00003F83  3A20 00   
                    6846   @lab3_13:
00003F86  0D0A 4669 6847          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003F8A  6C6C 696E 
00003F8E  6720 4164 
00003F92  64        
00003F93  7265 7373 6848          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003F97  6573 205B 
00003F9B  2425 3038 
00003F9F  58        
00003FA0  202D 2024 6849          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003FA4  2530 3858 
00003FA8  5D20 7769 
00003FAC  7468      
00003FAE  2024 2530 6850          dc.b      32,36,37,48,50,88,0
00003FB2  3258 00   
                    6851   @lab3_14:
00003FB6  0D0A 5573 6852          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003FBA  6520 4879 
00003FBE  7065 7254 
00003FC2  65        
00003FC3  726D 696E 6853          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003FC7  616C 2074 
00003FCB  6F20 5365 
00003FCF  6E64 2054 6854          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003FD3  6578 7420 
00003FD7  4669 6C65 
00003FDB  2028 2E68 6855          dc.b      32,40,46,104,101,120,41,13,10,0
00003FDF  6578 290D 
00003FE3  0A00      
                    6856   @lab3_15:
00003FE6  0D0A 4C6F 6857          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003FEA  6164 2046 
00003FEE  6169 6C65 
00003FF2  64        
00003FF3  2061 7420 6858          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003FF7  4164 6472 
00003FFB  6573 7320 
00003FFF  3D        
00004000  205B 2425 6859          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004004  3038 585D 
00004008  0D0A 00   
                    6860   @lab3_16:
0000400C  0D0A 5375 6861          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004010  6363 6573 
00004014  733A 2044 
00004018  6F        
00004019  776E 6C6F 6862          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000401D  6164 6564 
00004021  2025 6420 
00004025  6279 7465 6863          dc.b      98,121,116,101,115,13,10,0
00004029  730D 0A00 
                    6864   @lab3_17:
0000402E  0D0A 4578 6865          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004032  616D 696E 
00004036  6520 616E 
0000403A  64        
0000403B  2043 6861 6866          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000403F  6E67 6520 
00004043  4D65 6D6F 
00004047  72        
00004048  7900      6867          dc.b      121,0
                    6868   @lab3_18:
0000404A  0D0A 3C45 6869          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000404E  5343 3E20 
00004052  746F 2053 
00004056  746F      
00004058  702C 203C 6870          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000405C  5350 4143 
00004060  453E 2074 
00004064  6F20      
00004066  4164 7661 6871          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000406A  6E63 652C 
0000406E  2027 2D27 
00004072  2074      
00004074  6F20 476F 6872          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004078  2042 6163 
0000407C  6B2C 203C 
00004080  4441      
00004082  5441 3E20 6873          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004086  746F 2063 
0000408A  6861 6E67 
0000408E  65        
0000408F  00        6874          dc.b      0
                    6875   @lab3_19:
00004090  0D0A 456E 6876          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004094  7465 7220 
00004098  4164 6472 
0000409C  65        
0000409D  7373 3A20 6877          dc.b      115,115,58,32,0
000040A1  00        
                    6878   @lab3_20:
000040A2  0D0A 5B25 6879          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000040A6  3038 785D 
000040AA  203A 2025 
000040AE  3032 78   
000040B1  2020 00   6880          dc.b      32,32,0
                    6881   @lab3_21:
000040B4  0D0A 5761 6882          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000040B8  726E 696E 
000040BC  6720 4368 
000040C0  61        
000040C1  6E67 6520 6883          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000040C5  4661 696C 
000040C9  6564 3A20 
000040CD  57        
000040CE  726F 7465 6884          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000040D2  205B 2530 
000040D6  3278 5D2C 
000040DA  20        
000040DB  5265 6164 6885          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000040DF  205B 2530 
000040E3  3278 5D00 
                    6886   @lab3_22:
000040E8  2E00      6887          dc.b      46,0
                    6888   @lab3_23:
000040EA  0A0D 4572 6889          dc.b      10,13,69,114,97,115,105,110,103,10,13,0
000040EE  6173 696E 
000040F2  670A 0D00 
                    6890   @lab3_24:
000040F6  5772 6974 6891          dc.b      87,114,105,116,105,110,103,32,80,114,111,103
000040FA  696E 6720 
000040FE  5072 6F67 
00004102  7261 6D20 6892          dc.b      114,97,109,32,116,111,32,109,101,109,111,114
00004106  746F 206D 
0000410A  656D 6F72 
0000410E  7920 0A0D 6893          dc.b      121,32,10,13,0
00004112  00        
                    6894   @lab3_25:
00004114  5772 6974 6895          dc.b      87,114,105,116,105,110,103,32,68,111,110,101
00004118  696E 6720 
0000411C  446F 6E65 
00004120  0A0D 00   6896          dc.b      10,13,0
                    6897   @lab3_26:
00004124  5265 6164 6898          dc.b      82,101,97,100,105,110,103,32,80,114,111,103
00004128  696E 6720 
0000412C  5072 6F67 
00004130  7261 6D20 6899          dc.b      114,97,109,32,102,114,111,109,32,109,101,109
00004134  6672 6F6D 
00004138  206D 656D 
0000413C  6F72 790A 6900          dc.b      111,114,121,10,13,0
00004140  0D00      
                    6901   @lab3_27:
00004142  0D0A 4552 6902          dc.b      13,10,69,82,82,79,82,58,32,68,65,84,65,32,77
00004146  524F 523A 
0000414A  2044 4154 
0000414E  4120 4D   
00004151  6973 6D61 6903          dc.b      105,115,109,97,116,99,104,32,97,116,32,97,100
00004155  7463 6820 
00004159  6174 2061 
0000415D  64        
0000415E  6472 2030 6904          dc.b      100,114,32,48,120,37,48,56,120,46,32,87,82,73
00004162  7825 3038 
00004166  782E 2057 
0000416A  5249      
0000416C  5445 3A20 6905          dc.b      84,69,58,32,48,120,37,48,50,120,32,82,69,65
00004170  3078 2530 
00004174  3278 2052 
00004178  4541      
0000417A  443A 2030 6906          dc.b      68,58,32,48,120,37,48,50,120,13,10,0
0000417E  7825 3032 
00004182  780D 0A00 
                    6907   @lab3_28:
00004186  5041 5353 6908          dc.b      80,65,83,83,10,13,0
0000418A  0A0D 00   
                    6909   @lab3_29:
0000418E  0D0A 4C6F 6910          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004192  6164 696E 
00004196  6720 5072 
0000419A  6F        
0000419B  6772 616D 6911          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
0000419F  2046 726F 
000041A3  6D20 5350 
000041A7  49        
000041A8  2046 6C61 6912          dc.b      32,70,108,97,115,104,46,46,46,46,0
000041AC  7368 2E2E 
000041B0  2E2E 00   
                    6913   @lab3_30:
000041B4  0D0A 446F 6914          dc.b      13,10,68,111,110,101,32,108,111,97,100,105,110
000041B8  6E65 206C 
000041BC  6F61 6469 
000041C0  6E        
000041C1  672E 0D0A 6915          dc.b      103,46,13,10,0
000041C5  00        
                    6916   @lab3_31:
000041C6  2425 3038 6917          dc.b      36,37,48,56,88,32,32,0
000041CA  5820 2000 
                    6918   @lab3_32:
000041CE  2000      6919          dc.b      32,0
                    6920   @lab3_33:
000041D0  2563 00   6921          dc.b      37,99,0
                    6922   @lab3_34:
000041D4  00        6923          dc.b      0
                    6924   @lab3_35:
000041D6  0D0A 0D0A 6925          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000041DA  2044 3020 
000041DE  3D20 2425 
000041E2  3038 58   
000041E5  2020 4130 6926          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000041E9  203D 2024 
000041ED  2530 3858 
000041F1  00        
                    6927   @lab3_36:
000041F2  0D0A 2044 6928          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000041F6  3120 3D20 
000041FA  2425 3038 
000041FE  5820 20   
00004201  4131 203D 6929          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004205  2024 2530 
00004209  3858 00   
                    6930   @lab3_37:
0000420C  0D0A 2044 6931          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004210  3220 3D20 
00004214  2425 3038 
00004218  5820 20   
0000421B  4132 203D 6932          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000421F  2024 2530 
00004223  3858 00   
                    6933   @lab3_38:
00004226  0D0A 2044 6934          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000422A  3320 3D20 
0000422E  2425 3038 
00004232  5820 20   
00004235  4133 203D 6935          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004239  2024 2530 
0000423D  3858 00   
                    6936   @lab3_39:
00004240  0D0A 2044 6937          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004244  3420 3D20 
00004248  2425 3038 
0000424C  5820 20   
0000424F  4134 203D 6938          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004253  2024 2530 
00004257  3858 00   
                    6939   @lab3_40:
0000425A  0D0A 2044 6940          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000425E  3520 3D20 
00004262  2425 3038 
00004266  5820 20   
00004269  4135 203D 6941          dc.b      65,53,32,61,32,36,37,48,56,88,0
0000426D  2024 2530 
00004271  3858 00   
                    6942   @lab3_41:
00004274  0D0A 2044 6943          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004278  3620 3D20 
0000427C  2425 3038 
00004280  5820 20   
00004283  4136 203D 6944          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004287  2024 2530 
0000428B  3858 00   
                    6945   @lab3_42:
0000428E  0D0A 2044 6946          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004292  3720 3D20 
00004296  2425 3038 
0000429A  5820 20   
0000429D  4137 203D 6947          dc.b      65,55,32,61,32,36,37,48,56,88,0
000042A1  2024 2530 
000042A5  3858 00   
                    6948   @lab3_43:
000042A8  0D0A 0D0A 6949          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000042AC  5553 5020 
000042B0  3D20 2425 
000042B4  3038 58   
000042B7  2020 2841 6950          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000042BB  3729 2055 
000042BF  7365 7220 
000042C3  5350      
000042C5  00        6951          dc.b      0
                    6952   @lab3_44:
000042C6  0D0A 5353 6953          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000042CA  5020 3D20 
000042CE  2425 3038 
000042D2  5820 20   
000042D5  2841 3729 6954          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000042D9  2053 7570 
000042DD  6572 7669 
000042E1  73        
000042E2  6F72 2053 6955          dc.b      111,114,32,83,80,0
000042E6  5000      
                    6956   @lab3_45:
000042E8  0D0A 2053 6957          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000042EC  5220 3D20 
000042F0  2425 3034 
000042F4  5820 20   
000042F7  2000      6958          dc.b      32,0
                    6959   @lab3_46:
000042FA  2020 205B 6960          dc.b      32,32,32,91,0
000042FE  00        
                    6961   @lab3_47:
00004300  0D0A 2050 6962          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004304  4320 3D20 
00004308  2425 3038 
0000430C  5820 20   
0000430F  00        6963          dc.b      0
                    6964   @lab3_48:
00004310  5B40 2042 6965          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004314  5245 414B 
00004318  504F 494E 
0000431C  545D 00   
                    6966   @lab3_49:
00004320  0D0A 5750 6967          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004324  2564 203D 
00004328  2025 7300 
                    6968   @lab3_50:
0000432C  0D0A 0D0A 6969          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004330  0D0A 0D0A 
00004334  0D0A 0D0A 
00004338  5369 6E   
0000433B  676C 6520 6970          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000433F  5374 6570 
00004343  2020 3A5B 
00004347  4F        
00004348  4E5D 00   6971          dc.b      78,93,0
                    6972   @lab3_51:
0000434C  0D0A 4272 6973          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004350  6561 6B20 
00004354  506F 696E 
00004358  74        
00004359  7320 3A5B 6974          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
0000435D  4469 7361 
00004361  626C 6564 
00004365  5D        
00004366  00        6975          dc.b      0
                    6976   @lab3_52:
00004368  0D0A 5072 6977          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000436C  6573 7320 
00004370  3C53 5041 
00004374  4345      
00004376  3E20 746F 6978          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
0000437A  2045 7865 
0000437E  6375 7465 
00004382  20        
00004383  4E65 7874 6979          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004387  2049 6E73 
0000438B  7472 7563 
0000438F  7469 6F6E 6980          dc.b      116,105,111,110,0
00004393  00        
                    6981   @lab3_53:
00004394  0D0A 5072 6982          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004398  6573 7320 
0000439C  3C45 5343 
000043A0  3E20      
000043A2  746F 2052 6983          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000043A6  6573 756D 
000043AA  6520 5072 
000043AE  6F67 7261 6984          dc.b      111,103,114,97,109,0
000043B2  6D00      
                    6985   @lab3_54:
000043B4  0D0A 496C 6986          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000043B8  6C65 6761 
000043BC  6C20 4461 
000043C0  74        
000043C1  6120 5265 6987          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000043C5  6769 7374 
000043C9  6572 203A 
000043CD  20        
000043CE  5573 6520 6988          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000043D2  4430 2D44 
000043D6  372E 2E2E 
000043DA  2E2E      
000043DC  0D0A 00   6989          dc.b      13,10,0
                    6990   @lab3_55:
000043E0  0D0A 4425 6991          dc.b      13,10,68,37,99,32,61,32,0
000043E4  6320 3D20 
000043E8  00        
                    6992   @lab3_56:
000043EA  0D0A 496C 6993          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000043EE  6C65 6761 
000043F2  6C20 4164 
000043F6  64        
000043F7  7265 7373 6994          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000043FB  2052 6567 
000043FF  6973 7465 
00004403  7220 3A20 6995          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004407  5573 6520 
0000440B  4130 2D41 
0000440F  372E      
00004411  2E2E 2E2E 6996          dc.b      46,46,46,46,13,10,0
00004415  0D0A 00   
                    6997   @lab3_57:
00004418  0D0A 4125 6998          dc.b      13,10,65,37,99,32,61,32,0
0000441C  6320 3D20 
00004420  00        
                    6999   @lab3_58:
00004422  0D0A 5573 7000          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004426  6572 2053 
0000442A  5020 3D20 
0000442E  00        
                    7001   @lab3_59:
00004430  0D0A 496C 7002          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004434  6C65 6761 
00004438  6C20 5265 
0000443C  67        
0000443D  6973 7465 7003          dc.b      105,115,116,101,114,46,46,46,46,0
00004441  722E 2E2E 
00004445  2E00      
                    7004   @lab3_60:
00004448  0D0A 5379 7005          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
0000444C  7374 656D 
00004450  2053 5020 
00004454  3D        
00004455  2000      7006          dc.b      32,0
                    7007   @lab3_61:
00004458  0D0A 5043 7008          dc.b      13,10,80,67,32,61,32,0
0000445C  203D 2000 
                    7009   @lab3_62:
00004460  0D0A 5352 7010          dc.b      13,10,83,82,32,61,32,0
00004464  203D 2000 
                    7011   @lab3_63:
00004468  0D0A 496C 7012          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000446C  6C65 6761 
00004470  6C20 5265 
00004474  67        
00004475  6973 7465 7013          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004479  723A 2055 
0000447D  7365 2041 
00004481  30        
00004482  2D41 372C 7014          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004486  2044 302D 
0000448A  4437 2C20 
0000448E  5353 50   
00004491  2C20 5553 7015          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004495  502C 2050 
00004499  4320 6F72 
0000449D  2053      
0000449F  520D 0A00 7016          dc.b      82,13,10,0
                    7017   @lab3_64:
000044A4  0D0A 0D0A 7018          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000044A8  4E75 6D20 
000044AC  2020 2020 
000044B0  4164      
000044B2  6472 6573 7019          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000044B6  7320 2020 
000044BA  2020 2049 
000044BE  6E        
000044BF  7374 7275 7020          dc.b      115,116,114,117,99,116,105,111,110,0
000044C3  6374 696F 
000044C7  6E00      
                    7021   @lab3_65:
000044CA  0D0A 2D2D 7022          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000044CE  2D20 2020 
000044D2  2020 2D2D 
000044D6  2D2D 2D   
000044D9  2D2D 2D2D 7023          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000044DD  2020 2020 
000044E1  2D2D 2D2D 
000044E5  2D2D 2D   
000044E8  2D2D 2D2D 7024          dc.b      45,45,45,45,0
000044EC  00        
                    7025   @lab3_66:
000044EE  0D0A 4E6F 7026          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000044F2  2042 7265 
000044F6  616B 506F 
000044FA  69        
000044FB  6E74 7320 7027          dc.b      110,116,115,32,83,101,116,0
000044FF  5365 7400 
                    7028   @lab3_67:
00004504  0D0A 2533 7029          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004508  6420 2020 
0000450C  2020 2425 
00004510  3038 78   
00004513  00        7030          dc.b      0
                    7031   @lab3_68:
00004514  0D0A 4E75 7032          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004518  6D20 2020 
0000451C  2020 4164 
00004520  6472      
00004522  6573 7300 7033          dc.b      101,115,115,0
                    7034   @lab3_69:
00004526  0D0A 2D2D 7035          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000452A  2D20 2020 
0000452E  2020 2D2D 
00004532  2D2D 2D   
00004535  2D2D 2D2D 7036          dc.b      45,45,45,45,0
00004539  00        
                    7037   @lab3_70:
0000453A  0D0A 4E6F 7038          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000453E  2057 6174 
00004542  6368 506F 
00004546  69        
00004547  6E74 7320 7039          dc.b      110,116,115,32,83,101,116,0
0000454B  5365 7400 
                    7040   @lab3_71:
00004550  0D0A 456E 7041          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004554  7465 7220 
00004558  4272 6561 
0000455C  6B        
0000455D  2050 6F69 7042          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004561  6E74 204E 
00004565  756D 6265 
00004569  72        
0000456A  3A20 00   7043          dc.b      58,32,0
                    7044   @lab3_72:
0000456E  0D0A 496C 7045          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004572  6C65 6761 
00004576  6C20 5261 
0000457A  6E        
0000457B  6765 203A 7046          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000457F  2055 7365 
00004583  2030 202D 
00004587  2037      
00004589  00        7047          dc.b      0
                    7048   @lab3_73:
0000458A  0D0A 4272 7049          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000458E  6561 6B20 
00004592  506F 696E 
00004596  74        
00004597  2043 6C65 7050          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000459B  6172 6564 
0000459F  2E2E 2E2E 
000045A3  2E        
000045A4  0D0A 00   7051          dc.b      13,10,0
                    7052   @lab3_74:
000045A8  0D0A 4272 7053          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000045AC  6561 6B20 
000045B0  506F 696E 
000045B4  74        
000045B5  2077 6173 7054          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000045B9  6E27 7420 
000045BD  5365 742E 
000045C1  2E        
000045C2  2E2E 2E00 7055          dc.b      46,46,46,0
                    7056   @lab3_75:
000045C6  0D0A 456E 7057          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000045CA  7465 7220 
000045CE  5761 7463 
000045D2  68        
000045D3  2050 6F69 7058          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000045D7  6E74 204E 
000045DB  756D 6265 
000045DF  72        
000045E0  3A20 00   7059          dc.b      58,32,0
                    7060   @lab3_76:
000045E4  0D0A 5761 7061          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000045E8  7463 6820 
000045EC  506F 696E 
000045F0  74        
000045F1  2043 6C65 7062          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000045F5  6172 6564 
000045F9  2E2E 2E2E 
000045FD  2E        
000045FE  0D0A 00   7063          dc.b      13,10,0
                    7064   @lab3_77:
00004602  0D0A 5761 7065          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004606  7463 6820 
0000460A  506F 696E 
0000460E  74        
0000460F  2057 6173 7066          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004613  206E 6F74 
00004617  2053 6574 
0000461B  2E        
0000461C  2E2E 2E2E 7067          dc.b      46,46,46,46,0
00004620  00        
                    7068   @lab3_78:
00004622  0D0A 4E6F 7069          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004626  2046 5245 
0000462A  4520 4272 
0000462E  6561      
00004630  6B20 506F 7070          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004634  696E 7473 
00004638  2E2E 2E2E 
0000463C  2E        
0000463D  00        7071          dc.b      0
                    7072   @lab3_79:
0000463E  0D0A 4272 7073          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004642  6561 6B20 
00004646  506F 696E 
0000464A  74        
0000464B  2041 6464 7074          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000464F  7265 7373 
00004653  3A20 00   
                    7075   @lab3_80:
00004656  0D0A 4572 7076          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000465A  726F 7220 
0000465E  3A20 4272 
00004662  65        
00004663  616B 2050 7077          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004667  6F69 6E74 
0000466B  7320 4341 
0000466F  4E        
00004670  4E4F 5420 7078          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004674  6265 2073 
00004678  6574 2061 
0000467C  74        
0000467D  204F 4444 7079          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004681  2061 6464 
00004685  7265 7373 
00004689  65        
0000468A  7300      7080          dc.b      115,0
                    7081   @lab3_81:
0000468C  0D0A 4572 7082          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004690  726F 7220 
00004694  3A20 4272 
00004698  65        
00004699  616B 2050 7083          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000469D  6F69 6E74 
000046A1  7320 4341 
000046A5  4E        
000046A6  4E4F 5420 7084          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000046AA  6265 2073 
000046AE  6574 2066 
000046B2  6F        
000046B3  7220 524F 7085          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000046B7  4D20 696E 
000046BB  2052 616E 
000046BF  67        
000046C0  6520 3A20 7086          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000046C4  5B24 302D 
000046C8  2430 3030 
000046CC  3037 46   
000046CF  4646 5D00 7087          dc.b      70,70,93,0
                    7088   @lab3_82:
000046D4  0D0A 4572 7089          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000046D8  726F 723A 
000046DC  2042 7265 
000046E0  61        
000046E1  6B20 506F 7090          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000046E5  696E 7420 
000046E9  416C 7265 
000046ED  6164 7920 7091          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000046F1  4578 6973 
000046F5  7473 2061 
000046F9  74        
000046FA  2041 6464 7092          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000046FE  7265 7373 
00004702  203A 2025 
00004706  30        
00004707  3878 0D0A 7093          dc.b      56,120,13,10,0
0000470B  00        
                    7094   @lab3_83:
0000470C  0D0A 4272 7095          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004710  6561 6B20 
00004714  506F 696E 
00004718  74        
00004719  2053 6574 7096          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000471D  2061 7420 
00004721  4164 6472 
00004725  65        
00004726  7373 3A20 7097          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000472A  5B24 2530 
0000472E  3878 5D00 
                    7098   @lab3_84:
00004732  0D0A 4E6F 7099          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004736  2046 5245 
0000473A  4520 5761 
0000473E  7463      
00004740  6820 506F 7100          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004744  696E 7473 
00004748  2E2E 2E2E 
0000474C  2E        
0000474D  00        7101          dc.b      0
                    7102   @lab3_85:
0000474E  0D0A 5761 7103          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004752  7463 6820 
00004756  506F 696E 
0000475A  74        
0000475B  2041 6464 7104          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000475F  7265 7373 
00004763  3A20 00   
                    7105   @lab3_86:
00004766  0D0A 4572 7106          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
0000476A  726F 723A 
0000476E  2057 6174 
00004772  63        
00004773  6820 506F 7107          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004777  696E 7420 
0000477B  416C 7265 
0000477F  6164 7920 7108          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004783  5365 7420 
00004787  6174 2041 
0000478B  64        
0000478C  6472 6573 7109          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004790  7320 3A20 
00004794  2530 3878 
00004798  0D        
00004799  0A00      7110          dc.b      10,0
                    7111   @lab3_87:
0000479C  0D0A 5761 7112          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000047A0  7463 6820 
000047A4  506F 696E 
000047A8  74        
000047A9  2053 6574 7113          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000047AD  2061 7420 
000047B1  4164 6472 
000047B5  65        
000047B6  7373 3A20 7114          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000047BA  5B24 2530 
000047BE  3878 5D00 
                    7115   @lab3_88:
000047C2  0D0A 0D0A 7116          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000047C6  0D0A 0D0A 
000047CA  4042 5245 
000047CE  414B 50   
000047D1  4F49 4E54 7117          dc.b      79,73,78,84,0
000047D5  00        
                    7118   @lab3_89:
000047D6  0D0A 5369 7119          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000047DA  6E67 6C65 
000047DE  2053 7465 
000047E2  70        
000047E3  203A 205B 7120          dc.b      32,58,32,91,79,78,93,0
000047E7  4F4E 5D00 
                    7121   @lab3_90:
000047EC  0D0A 4272 7122          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000047F0  6561 6B50 
000047F4  6F69 6E74 
000047F8  73        
000047F9  203A 205B 7123          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000047FD  456E 6162 
00004801  6C65 645D 
00004805  00        
                    7124   @lab3_91:
00004806  0D0A 5072 7125          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000480A  6573 7320 
0000480E  3C45 5343 
00004812  3E20      
00004814  746F 2052 7126          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004818  6573 756D 
0000481C  6520 5573 
00004820  6572 2050 7127          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004824  726F 6772 
00004828  616D 0D0A 
0000482C  00        
                    7128   @lab3_92:
0000482E  0D0A 556E 7129          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004832  6B6E 6F77 
00004836  6E20 436F 
0000483A  6D        
0000483B  6D61 6E64 7130          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000483F  2E2E 2E2E 
00004843  2E0D 0A00 
                    7131   @lab3_93:
00004848  0D0A 5072 7132          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
0000484C  6F67 7261 
00004850  6D20 456E 
00004854  64        
00004855  6564 2028 7133          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004859  5452 4150 
0000485D  2023 3135 
00004861  292E      
00004863  2E2E 2E00 7134          dc.b      46,46,46,0
                    7135   @lab3_94:
00004868  0D0A 4B69 7136          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
0000486C  6C6C 2041 
00004870  6C6C 2042 
00004874  72        
00004875  6561 6B20 7137          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004879  506F 696E 
0000487D  7473 2E2E 
00004881  2E        
00004882  2879 2F6E 7138          dc.b      40,121,47,110,41,63,0
00004886  293F 00   
                    7139   @lab3_95:
0000488A  0D0A 4B69 7140          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000488E  6C6C 2041 
00004892  6C6C 2057 
00004896  61        
00004897  7463 6820 7141          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
0000489B  506F 696E 
0000489F  7473 2E2E 
000048A3  2E        
000048A4  2879 2F6E 7142          dc.b      40,121,47,110,41,63,0
000048A8  293F 00   
                    7143   @lab3_96:
000048AC  0D0A 2D2D 7144          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000048B0  2D2D 2D2D 
000048B4  2D2D 2D2D 
000048B8  2D2D 2D   
000048BB  2D2D 2D2D 7145          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000048BF  2D2D 2D2D 
000048C3  2D2D 2D2D 
000048C7  2D2D 2D   
000048CA  2D2D 2D2D 7146          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000048CE  2D2D 2D2D 
000048D2  2D2D 2D2D 
000048D6  2D2D 2D   
000048D9  2D2D 2D2D 7147          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000048DD  2D2D 2D2D 
000048E1  2D2D 2D2D 
000048E5  2D2D 2D   
000048E8  2D2D 2D2D 7148          dc.b      45,45,45,45,45,45,0
000048EC  2D2D 00   
                    7149   @lab3_97:
000048F0  0D0A 2020 7150          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000048F4  4465 6275 
000048F8  6767 6572 
000048FC  20        
000048FD  436F 6D6D 7151          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004901  616E 6420 
00004905  5375 6D6D 
00004909  6172 7900 7152          dc.b      97,114,121,0
                    7153   @lab3_98:
0000490E  0D0A 2020 7154          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004912  2E28 7265 
00004916  6729 2020 
0000491A  2020      
0000491C  2020 202D 7155          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004920  2043 6861 
00004924  6E67 6520 
00004928  5265      
0000492A  6769 7374 7156          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0000492E  6572 733A 
00004932  2065 2E67 
00004936  2041 302D 7157          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000493A  4137 2C44 
0000493E  302D 4437 
00004942  2C50 43   
00004945  2C53 5350 7158          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004949  2C55 5350 
0000494D  2C53 5200 
                    7159   @lab3_99:
00004952  0D0A 2020 7160          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004956  4244 2F42 
0000495A  532F 4243 
0000495E  2F42 4B   
00004961  2020 2D20 7161          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004965  4272 6561 
00004969  6B20 506F 
0000496D  69        
0000496E  6E74 3A20 7162          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004972  4469 7370 
00004976  6C61 792F 
0000497A  53        
0000497B  6574 2F43 7163          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
0000497F  6C65 6172 
00004983  2F4B 696C 
00004987  6C        
00004988  00        7164          dc.b      0
                    7165   @lab3_100:
0000498A  0D0A 2020 7166          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
0000498E  4320 2020 
00004992  2020 2020 
00004996  2020 20   
00004999  2020 2D20 7167          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
0000499D  436F 7079 
000049A1  2050 726F 
000049A5  67        
000049A6  7261 6D20 7168          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000049AA  6672 6F6D 
000049AE  2046 6C61 
000049B2  73        
000049B3  6820 746F 7169          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000049B7  204D 6169 
000049BB  6E20 4D65 
000049BF  6D        
000049C0  6F72 7900 7170          dc.b      111,114,121,0
                    7171   @lab3_101:
000049C4  0D0A 2020 7172          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
000049C8  4420 2020 
000049CC  2020 2020 
000049D0  2020 20   
000049D3  2020 2D20 7173          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000049D7  4475 6D70 
000049DB  204D 656D 
000049DF  6F        
000049E0  7279 2043 7174          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000049E4  6F6E 7465 
000049E8  6E74 7320 
000049EC  746F 2053 7175          dc.b      116,111,32,83,99,114,101,101,110,0
000049F0  6372 6565 
000049F4  6E00      
                    7176   @lab3_102:
000049F6  0D0A 2020 7177          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000049FA  4520 2020 
000049FE  2020 2020 
00004A02  2020 20   
00004A05  2020 2D20 7178          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004A09  456E 7465 
00004A0D  7220 5374 
00004A11  72        
00004A12  696E 6720 7179          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004A16  696E 746F 
00004A1A  204D 656D 
00004A1E  6F72 7900 7180          dc.b      111,114,121,0
                    7181   @lab3_103:
00004A22  0D0A 2020 7182          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004A26  4620 2020 
00004A2A  2020 2020 
00004A2E  2020 20   
00004A31  2020 2D20 7183          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004A35  4669 6C6C 
00004A39  204D 656D 
00004A3D  6F        
00004A3E  7279 2077 7184          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004A42  6974 6820 
00004A46  4461 7461 
00004A4A  00        
                    7185   @lab3_104:
00004A4C  0D0A 2020 7186          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004A50  4720 2020 
00004A54  2020 2020 
00004A58  2020 20   
00004A5B  2020 2D20 7187          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004A5F  476F 2050 
00004A63  726F 6772 
00004A67  61        
00004A68  6D20 5374 7188          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004A6C  6172 7469 
00004A70  6E67 2061 
00004A74  74        
00004A75  2041 6464 7189          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004A79  7265 7373 
00004A7D  3A20 2425 
00004A81  30        
00004A82  3858 00   7190          dc.b      56,88,0
                    7191   @lab3_105:
00004A86  0D0A 2020 7192          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004A8A  4C20 2020 
00004A8E  2020 2020 
00004A92  2020 20   
00004A95  2020 2D20 7193          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004A99  4C6F 6164 
00004A9D  2050 726F 
00004AA1  67        
00004AA2  7261 6D20 7194          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004AA6  282E 4845 
00004AAA  5820 6669 
00004AAE  6C        
00004AAF  6529 2066 7195          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004AB3  726F 6D20 
00004AB7  4C61 7074 
00004ABB  6F        
00004ABC  7000      7196          dc.b      112,0
                    7197   @lab3_106:
00004ABE  0D0A 2020 7198          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004AC2  4D20 2020 
00004AC6  2020 2020 
00004ACA  2020 20   
00004ACD  2020 2D20 7199          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00004AD1  4D65 6D6F 
00004AD5  7279 2045 
00004AD9  78        
00004ADA  616D 696E 7200          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004ADE  6520 616E 
00004AE2  6420 4368 
00004AE6  61        
00004AE7  6E67 6500 7201          dc.b      110,103,101,0
                    7202   @lab3_107:
00004AEC  0D0A 2020 7203          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004AF0  5020 2020 
00004AF4  2020 2020 
00004AF8  2020 20   
00004AFB  2020 2D20 7204          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004AFF  5072 6F67 
00004B03  7261 6D20 
00004B07  46        
00004B08  6C61 7368 7205          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004B0C  204D 656D 
00004B10  6F72 7920 
00004B14  7769 7468 7206          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004B18  2055 7365 
00004B1C  7220 5072 
00004B20  6F67 7261 7207          dc.b      111,103,114,97,109,0
00004B24  6D00      
                    7208   @lab3_108:
00004B26  0D0A 2020 7209          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004B2A  5220 2020 
00004B2E  2020 2020 
00004B32  2020 20   
00004B35  2020 2D20 7210          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004B39  4469 7370 
00004B3D  6C61 7920 
00004B41  36        
00004B42  3830 3030 7211          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004B46  2052 6567 
00004B4A  6973 7465 
00004B4E  72        
00004B4F  7300      7212          dc.b      115,0
                    7213   @lab3_109:
00004B52  0D0A 2020 7214          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004B56  5320 2020 
00004B5A  2020 2020 
00004B5E  2020 20   
00004B61  2020 2D20 7215          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004B65  546F 6767 
00004B69  6C65 204F 
00004B6D  4E        
00004B6E  2F4F 4646 7216          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004B72  2053 696E 
00004B76  676C 6520 
00004B7A  53        
00004B7B  7465 7020 7217          dc.b      116,101,112,32,77,111,100,101,0
00004B7F  4D6F 6465 
00004B83  00        
                    7218   @lab3_110:
00004B84  0D0A 2020 7219          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004B88  544D 2020 
00004B8C  2020 2020 
00004B90  2020 20   
00004B93  2020 2D20 7220          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004B97  5465 7374 
00004B9B  204D 656D 
00004B9F  6F        
00004BA0  7279 00   7221          dc.b      114,121,0
                    7222   @lab3_111:
00004BA4  0D0A 2020 7223          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004BA8  5453 2020 
00004BAC  2020 2020 
00004BB0  2020 20   
00004BB3  2020 2D20 7224          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004BB7  5465 7374 
00004BBB  2053 7769 
00004BBF  74        
00004BC0  6368 6573 7225          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004BC4  3A20 5357 
00004BC8  372D 3000 
                    7226   @lab3_112:
00004BCC  0D0A 2020 7227          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00004BD0  5444 2020 
00004BD4  2020 2020 
00004BD8  2020 20   
00004BDB  2020 2D20 7228          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004BDF  5465 7374 
00004BE3  2044 6973 
00004BE7  70        
00004BE8  6C61 7973 7229          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004BEC  3A20 4C45 
00004BF0  4473 2061 
00004BF4  6E        
00004BF5  6420 372D 7230          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004BF9  5365 676D 
00004BFD  656E 7400 
                    7231   @lab3_113:
00004C02  0D0A 2020 7232          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004C06  5744 2F57 
00004C0A  532F 5743 
00004C0E  2F57 4B   
00004C11  2020 2D20 7233          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004C15  5761 7463 
00004C19  6820 506F 
00004C1D  696E      
00004C1F  743A 2044 7234          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004C23  6973 706C 
00004C27  6179 2F53 
00004C2B  65        
00004C2C  742F 436C 7235          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004C30  6561 722F 
00004C34  4B69 6C6C 
00004C38  00        
                    7236   @lab3_114:
00004C3A  0D0A 2300 7237          dc.b      13,10,35,0
                    7238   @lab3_115:
00004C3E  0D0A 5072 7239          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004C42  6F67 7261 
00004C46  6D20 5275 
00004C4A  6E        
00004C4B  6E69 6E67 7240          dc.b      110,105,110,103,46,46,46,46,46,0
00004C4F  2E2E 2E2E 
00004C53  2E00      
                    7241   @lab3_116:
00004C56  0D0A 5072 7242          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004C5A  6573 7320 
00004C5E  3C52 4553 
00004C62  4554      
00004C64  3E20 6275 7243          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004C68  7474 6F6E 
00004C6C  203C 4B65 
00004C70  79        
00004C71  303E 206F 7244          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004C75  6E20 4445 
00004C79  3120 746F 
00004C7D  2073      
00004C7F  746F 7000 7245          dc.b      116,111,112,0
                    7246   @lab3_117:
00004C84  0D0A 4572 7247          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004C88  726F 723A 
00004C8C  2050 7265 
00004C90  73        
00004C91  7320 2747 7248          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004C95  2720 6669 
00004C99  7273 7420 
00004C9D  74        
00004C9E  6F20 7374 7249          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004CA2  6172 7420 
00004CA6  7072 6F67 
00004CAA  7261 6D00 7250          dc.b      114,97,109,0
                    7251   @lab3_118:
00004CAE  0D0A 5369 7252          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004CB2  6E67 6C65 
00004CB6  2053 7465 
00004CBA  70        
00004CBB  2020 3A5B 7253          dc.b      32,32,58,91,79,78,93,0
00004CBF  4F4E 5D00 
                    7254   @lab3_119:
00004CC4  0D0A 5072 7255          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004CC8  6573 7320 
00004CCC  2747 2720 
00004CD0  74        
00004CD1  6F20 5472 7256          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004CD5  6163 6520 
00004CD9  5072 6F67 
00004CDD  72        
00004CDE  616D 2066 7257          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004CE2  726F 6D20 
00004CE6  6164 6472 
00004CEA  6573 7320 7258          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004CEE  2425 582E 
00004CF2  2E2E 2E2E 
00004CF6  00        
                    7259   @lab3_120:
00004CF8  0D0A 5075 7260          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004CFC  7368 203C 
00004D00  5245 5345 
00004D04  5420      
00004D06  4275 7474 7261          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004D0A  6F6E 3E20 
00004D0E  746F 2053 
00004D12  74        
00004D13  6F70 2E2E 7262          dc.b      111,112,46,46,46,46,46,0
00004D17  2E2E 2E00 
                    7263   @lab3_121:
00004D1C  0D0A 5369 7264          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D20  6E67 6C65 
00004D24  2053 7465 
00004D28  70        
00004D29  203A 205B 7265          dc.b      32,58,32,91,79,70,70,93,0
00004D2D  4F46 465D 
00004D31  00        
                    7266   @lab3_122:
00004D32  0D0A 4272 7267          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D36  6561 6B20 
00004D3A  506F 696E 
00004D3E  74        
00004D3F  7320 3A5B 7268          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004D43  456E 6162 
00004D47  6C65 645D 
00004D4B  00        
                    7269   @lab3_123:
00004D4C  0D0A 5072 7270          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004D50  6573 7320 
00004D54  3C45 5343 
00004D58  3E20      
00004D5A  746F 2052 7271          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004D5E  6573 756D 
00004D62  6520 5573 
00004D66  6572 2050 7272          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004D6A  726F 6772 
00004D6E  616D 2E2E 
00004D72  2E        
00004D73  2E2E 00   7273          dc.b      46,46,0
                    7274   @lab3_124:
00004D76  0D0A 5369 7275          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004D7A  6E67 6C65 
00004D7E  2053 7465 
00004D82  70        
00004D83  2020 3A5B 7276          dc.b      32,32,58,91,79,70,70,93,0
00004D87  4F46 465D 
00004D8B  00        
                    7277   @lab3_125:
00004D8C  0D0A 0D0A 7278          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004D90  5072 6F67 
00004D94  7261 6D20 
00004D98  41        
00004D99  424F 5254 7279          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004D9D  2021 2121 
00004DA1  2121 210D 
00004DA5  0A00      
                    7280   @lab3_126:
00004DA8  2573 0D0A 7281          dc.b      37,115,13,10,0
00004DAC  00        
                    7282   @lab3_127:
00004DAE  0D0A 0D0A 7283          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004DB2  5072 6F67 
00004DB6  7261 6D20 
00004DBA  41        
00004DBB  424F 5254 7284          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004DBF  2021 2121 
00004DC3  2121 00   
                    7285   @lab3_128:
00004DC6  0D0A 556E 7286          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004DCA  6861 6E64 
00004DCE  6C65 6420 
00004DD2  49        
00004DD3  6E74 6572 7287          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004DD7  7275 7074 
00004DDB  3A20 4952 
00004DDF  5125 6420 7288          dc.b      81,37,100,32,33,33,33,33,33,0
00004DE3  2121 2121 
00004DE7  2100      
                    7289   @lab3_129:
00004DEA  4144 4452 7290          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004DEE  4553 5320 
00004DF2  4552 524F 
00004DF6  523A 20   
00004DF9  3136 206F 7291          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004DFD  7220 3332 
00004E01  2042 6974 
00004E05  2054      
00004E07  7261 6E73 7292          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004E0B  6665 7220 
00004E0F  746F 2F66 
00004E13  726F 6D20 7293          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004E17  616E 204F 
00004E1B  4444 2041 
00004E1F  64        
00004E20  6472 6573 7294          dc.b      100,114,101,115,115,46,46,46,46,0
00004E24  732E 2E2E 
00004E28  2E00      
                    7295   @lab3_130:
00004E2A  556E 6861 7296          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004E2E  6E64 6C65 
00004E32  6420 5472 
00004E36  6170 2021 7297          dc.b      97,112,32,33,33,33,33,33,0
00004E3A  2121 2121 
00004E3E  00        
                    7298   @lab3_131:
00004E40  4255 5320 7299          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004E44  4572 726F 
00004E48  7221 00   
                    7300   @lab3_132:
00004E4C  4144 4452 7301          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004E50  4553 5320 
00004E54  4572 726F 
00004E58  7221      
00004E5A  00        7302          dc.b      0
                    7303   @lab3_133:
00004E5C  494C 4C45 7304          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004E60  4741 4C20 
00004E64  494E 5354 
00004E68  5255 43   
00004E6B  5449 4F4E 7305          dc.b      84,73,79,78,0
00004E6F  00        
                    7306   @lab3_134:
00004E70  4449 5649 7307          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004E74  4445 2042 
00004E78  5920 5A45 
00004E7C  524F 00   
                    7308   @lab3_135:
00004E80  2743 484B 7309          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004E84  2720 494E 
00004E88  5354 5255 
00004E8C  4354 49   
00004E8F  4F4E 00   7310          dc.b      79,78,0
                    7311   @lab3_136:
00004E92  5452 4150 7312          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004E96  5620 494E 
00004E9A  5354 5255 
00004E9E  4354 49   
00004EA1  4F4E 00   7313          dc.b      79,78,0
                    7314   @lab3_137:
00004EA4  5052 4956 7315          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004EA8  494C 4547 
00004EAC  4520 5649 
00004EB0  4F4C 41   
00004EB3  5449 4F4E 7316          dc.b      84,73,79,78,0
00004EB7  00        
                    7317   @lab3_138:
00004EB8  554E 494E 7318          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004EBC  4954 4941 
00004EC0  4C49 5345 
00004EC4  4420 49   
00004EC7  5251 00   7319          dc.b      82,81,0
                    7320   @lab3_139:
00004ECA  5350 5552 7321          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004ECE  494F 5553 
00004ED2  2049 5251 
00004ED6  00        
                    7322   @lab3_140:
00004ED8  0D0A 5374 7323          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004EDC  6172 7420 
00004EE0  4164 6472 
00004EE4  65        
00004EE5  7373 2069 7324          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004EE9  6E20 4D65 
00004EED  6D6F 7279 
00004EF1  3A20 00   7325          dc.b      58,32,0
                    7326   @lab3_141:
00004EF4  0D0A 456E 7327          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004EF8  7465 7220 
00004EFC  5374 7269 
00004F00  6E        
00004F01  6720 2845 7328          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004F05  5343 2074 
00004F09  6F20 656E 
00004F0D  64        
00004F0E  2920 3A00 7329          dc.b      41,32,58,0
                    7330   @lab3_142:
00004F12  0D0A 5365 7331          dc.b      13,10,83,101,108,101,99,116,32,100,97,116,97
00004F16  6C65 6374 
00004F1A  2064 6174 
00004F1E  61        
00004F1F  2074 7970 7332          dc.b      32,116,121,112,101,58,10,49,32,61,32,98,121
00004F23  653A 0A31 
00004F27  203D 2062 
00004F2B  79        
00004F2C  7465 7320 7333          dc.b      116,101,115,32,40,56,32,98,105,116,115,41,10
00004F30  2838 2062 
00004F34  6974 7329 
00004F38  0A        
00004F39  3220 3D20 7334          dc.b      50,32,61,32,119,111,114,100,115,32,40,49,54
00004F3D  776F 7264 
00004F41  7320 2831 
00004F45  36        
00004F46  2062 6974 7335          dc.b      32,98,105,116,115,41,10,51,32,61,32,108,111
00004F4A  7329 0A33 
00004F4E  203D 206C 
00004F52  6F        
00004F53  6E67 2077 7336          dc.b      110,103,32,119,111,114,100,115,32,40,51,50,32
00004F57  6F72 6473 
00004F5B  2028 3332 
00004F5F  20        
00004F60  6269 7473 7337          dc.b      98,105,116,115,41,10,0
00004F64  290A 00   
                    7338   @lab3_143:
00004F68  0A53 656C 7339          dc.b      10,83,101,108,101,99,116,105,110,103,32,98,121
00004F6C  6563 7469 
00004F70  6E67 2062 
00004F74  79        
00004F75  7465 2073 7340          dc.b      116,101,32,115,105,122,101,10,0
00004F79  697A 650A 
00004F7D  00        
                    7341   @lab3_144:
00004F7E  5365 6C65 7342          dc.b      83,101,108,101,99,116,32,100,97,116,97,32,118
00004F82  6374 2064 
00004F86  6174 6120 
00004F8A  76        
00004F8B  616C 7565 7343          dc.b      97,108,117,101,58,10,0
00004F8F  3A0A 00   
                    7344   @lab3_145:
00004F92  3120 3D20 7345          dc.b      49,32,61,32,34,65,65,34,10,50,32,61,32,34,65
00004F96  2241 4122 
00004F9A  0A32 203D 
00004F9E  2022 41   
00004FA1  4222 0A33 7346          dc.b      66,34,10,51,32,61,32,34,67,67,34,10,52,32,61
00004FA5  203D 2022 
00004FA9  4343 220A 
00004FAD  3420 3D   
00004FB0  2022 4344 7347          dc.b      32,34,67,68,34,10,0
00004FB4  220A 00   
                    7348   @lab3_146:
00004FB8  0D0A 4552 7349          dc.b      13,10,69,82,82,79,82,58,32,83,101,108,101,99
00004FBC  524F 523A 
00004FC0  2053 656C 
00004FC4  6563      
00004FC6  7420 6569 7350          dc.b      116,32,101,105,116,104,101,114,32,49,44,32,50
00004FCA  7468 6572 
00004FCE  2031 2C20 
00004FD2  32        
00004FD3  2C20 332C 7351          dc.b      44,32,51,44,32,111,114,32,52,13,10,0
00004FD7  206F 7220 
00004FDB  340D 0A00 
                    7352   @lab3_147:
00004FE0  0D0A 4552 7353          dc.b      13,10,69,82,82,79,82,58,32,69,120,105,116,105
00004FE4  524F 523A 
00004FE8  2045 7869 
00004FEC  7469      
00004FEE  6E67 206D 7354          dc.b      110,103,32,109,101,109,111,114,121,32,116,101
00004FF2  656D 6F72 
00004FF6  7920 7465 
00004FFA  7374 2064 7355          dc.b      115,116,32,100,117,101,32,116,111,32,111,112
00004FFE  7565 2074 
00005002  6F20 6F70 
00005006  7469 6F6E 7356          dc.b      116,105,111,110,32,109,101,109,111,114,121,32
0000500A  206D 656D 
0000500E  6F72 7920 
00005012  636F 6D70 7357          dc.b      99,111,109,112,108,105,99,97,116,105,111,110
00005016  6C69 6361 
0000501A  7469 6F6E 
0000501E  2E0D 0A00 7358          dc.b      46,13,10,0
                    7359   @lab3_148:
00005022  0D0A 456E 7360          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00005026  7465 7220 
0000502A  7374 6172 
0000502E  74        
0000502F  2061 6464 7361          dc.b      32,97,100,100,114,101,115,115,32,119,105,116
00005033  7265 7373 
00005037  2077 6974 
0000503B  6869 6E20 7362          dc.b      104,105,110,32,48,120,48,57,48,48,48,48,48,48
0000503F  3078 3039 
00005043  3030 3030 
00005047  3030      
00005049  202D 2030 7363          dc.b      32,45,32,48,120,48,57,55,70,70,70,70,70,58,13
0000504D  7830 3937 
00005051  4646 4646 
00005055  463A 0D   
00005058  0A00      7364          dc.b      10,0
                    7365   @lab3_149:
0000505A  0D0A 4552 7366          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
0000505E  524F 523A 
00005062  2053 7461 
00005066  7274      
00005068  696E 6720 7367          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
0000506C  4164 6472 
00005070  6573 7320 
00005074  6973 206F 7368          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
00005078  7574 7369 
0000507C  6465 206F 
00005080  6620 3638 7369          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
00005084  4B20 6D65 
00005088  6D6F 7279 
0000508C  20        
0000508D  7261 6E67 7370          dc.b      114,97,110,103,101,46,32,69,110,115,117,114
00005091  652E 2045 
00005095  6E73 7572 
00005099  6520 7468 7371          dc.b      101,32,116,104,101,32,97,100,100,114,101,115
0000509D  6520 6164 
000050A1  6472 6573 
000050A5  7320 6973 7372          dc.b      115,32,105,115,32,119,105,116,104,110,32,48
000050A9  2077 6974 
000050AD  686E 2030 
000050B1  7830 3930 7373          dc.b      120,48,57,48,48,48,48,48,48,32,45,32,48,120
000050B5  3030 3030 
000050B9  3020 2D20 
000050BD  3078      
000050BF  3039 3746 7374          dc.b      48,57,55,70,70,70,70,70,13,10,0
000050C3  4646 4646 
000050C7  0D0A 00   
                    7375   @lab3_150:
000050CA  0D0A 456E 7376          dc.b      13,10,69,110,116,101,114,32,101,110,100,32,97
000050CE  7465 7220 
000050D2  656E 6420 
000050D6  61        
000050D7  6464 7265 7377          dc.b      100,100,114,101,115,115,32,119,105,116,104,105
000050DB  7373 2077 
000050DF  6974 6869 
000050E3  6E20 3078 7378          dc.b      110,32,48,120,48,57,48,48,48,48,48,48,32,45
000050E7  3039 3030 
000050EB  3030 3030 
000050EF  202D      
000050F1  2030 7830 7379          dc.b      32,48,120,48,57,55,70,70,70,70,70,58,13,10,0
000050F5  3937 4646 
000050F9  4646 463A 
000050FD  0D0A 00   
                    7380   @lab3_151:
00005100  0D0A 4552 7381          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
00005104  524F 523A 
00005108  2045 6E64 
0000510C  2041      
0000510E  6464 7265 7382          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
00005112  7373 2069 
00005116  7320 6F75 
0000511A  7473 6964 7383          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
0000511E  6520 6F66 
00005122  2036 384B 
00005126  20        
00005127  6D65 6D6F 7384          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
0000512B  7279 2072 
0000512F  616E 6765 
00005133  2E20 456E 7385          dc.b      46,32,69,110,115,117,114,101,32,116,104,101
00005137  7375 7265 
0000513B  2074 6865 
0000513F  2061 6464 7386          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
00005143  7265 7373 
00005147  2069 7320 
0000514B  7769 7468 7387          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
0000514F  6E20 3078 
00005153  3039 3030 
00005157  30        
00005158  3030 3020 7388          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
0000515C  2D20 3078 
00005160  3039 3746 
00005164  4646 46   
00005167  460D 0A00 7389          dc.b      70,13,10,0
                    7390   @lab3_152:
0000516C  0D0A 0D0A 7391          dc.b      13,10,13,10,87,114,105,116,105,110,103,32,116
00005170  5772 6974 
00005174  696E 6720 
00005178  74        
00005179  6F20 6D65 7392          dc.b      111,32,109,101,109,111,114,121,0
0000517D  6D6F 7279 
00005181  00        
                    7393   @lab3_153:
00005182  0D0A 5772 7394          dc.b      13,10,87,114,105,116,101,58,32,91,37,48,50,88
00005186  6974 653A 
0000518A  205B 2530 
0000518E  3258      
00005190  2074 6F20 7395          dc.b      32,116,111,32,37,48,56,120,93,0
00005194  2530 3878 
00005198  5D00      
                    7396   @lab3_154:
0000519A  0D0A 0D0A 7397          dc.b      13,10,13,10,83,116,97,114,116,105,110,103,32
0000519E  5374 6172 
000051A2  7469 6E67 
000051A6  20        
000051A7  6D65 6D6F 7398          dc.b      109,101,109,111,114,121,32,118,97,108,105,100
000051AB  7279 2076 
000051AF  616C 6964 
000051B3  6174 696F 7399          dc.b      97,116,105,111,110,32,116,101,115,116,0
000051B7  6E20 7465 
000051BB  7374 00   
                    7400   @lab3_155:
000051BE  0D0A 5665 7401          dc.b      13,10,86,101,114,105,102,121,105,110,103,32
000051C2  7269 6679 
000051C6  696E 6720 
000051CA  7468 6520 7402          dc.b      116,104,101,32,97,100,100,114,101,115,115,101
000051CE  6164 6472 
000051D2  6573 7365 
000051D6  7320 5B25 7403          dc.b      115,32,91,37,48,56,120,32,116,111,32,37,48,56
000051DA  3038 7820 
000051DE  746F 2025 
000051E2  3038      
000051E4  785D 2063 7404          dc.b      120,93,32,99,111,110,116,97,105,110,115,32,116
000051E8  6F6E 7461 
000051EC  696E 7320 
000051F0  74        
000051F1  6573 7420 7405          dc.b      101,115,116,32,100,97,116,97,32,91,37,48,50
000051F5  6461 7461 
000051F9  205B 2530 
000051FD  32        
000051FE  585D 2E2E 7406          dc.b      88,93,46,46,46,46,46,0
00005202  2E2E 2E00 
                    7407   @lab3_156:
00005206  0D0A 4552 7408          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
0000520A  524F 523A 
0000520E  2044 6174 
00005212  6120 77   
00005215  6974 6869 7409          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005219  6E20 6D65 
0000521D  6D6F 7279 
00005221  2064 6F65 7410          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00005225  7320 6E6F 
00005229  7420 6D61 
0000522D  7463 6820 7411          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
00005231  7365 6C65 
00005235  6374 6564 
00005239  2074 6573 7412          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
0000523D  7420 6461 
00005241  7461 2120 
00005245  5B        
00005246  4164 6472 7413          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
0000524A  6573 733A 
0000524E  2025 3038 
00005252  78        
00005253  2045 7861 7414          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00005257  6374 2044 
0000525B  6174 613A 
0000525F  2025      
00005261  3032 5820 7415          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
00005265  4578 7065 
00005269  6374 6564 
0000526D  20        
0000526E  4461 7461 7416          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
00005272  3A20 2530 
00005276  3258 5D20 
0000527A  4578      
0000527C  6974 696E 7417          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
00005280  6720 6D65 
00005284  6D6F 7279 
00005288  2074 6573 7418          dc.b      32,116,101,115,116,46,46,46,13,10,0
0000528C  742E 2E2E 
00005290  0D0A 00   
                    7419   @lab3_157:
00005294  0D0A 5041 7420          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
00005298  5353 3A20 
0000529C  4D65 6D6F 
000052A0  7279      
000052A2  2056 616C 7421          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000052A6  6964 6174 
000052AA  696F 6E20 
000052AE  74        
000052AF  6573 7420 7422          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
000052B3  6861 7320 
000052B7  7061 7373 
000052BB  6564 0D0A 7423          dc.b      101,100,13,10,0
000052BF  00        
                    7424   @lab3_158:
000052C0  0D0A 5365 7425          dc.b      13,10,83,101,108,101,99,116,105,110,103,32,119
000052C4  6C65 6374 
000052C8  696E 6720 
000052CC  77        
000052CD  6F72 6420 7426          dc.b      111,114,100,32,115,105,122,101,0
000052D1  7369 7A65 
000052D5  00        
                    7427   @lab3_159:
000052D6  0D0A 3120 7428          dc.b      13,10,49,32,61,32,34,65,65,65,65,34,10,50,32
000052DA  3D20 2241 
000052DE  4141 4122 
000052E2  0A32 20   
000052E5  3D20 2242 7429          dc.b      61,32,34,66,65,66,65,34,10,51,32,61,32,34,67
000052E9  4142 4122 
000052ED  0A33 203D 
000052F1  2022 43   
000052F4  4344 4422 7430          dc.b      67,68,68,34,10,52,32,61,32,34,68,68,68,68,34
000052F8  0A34 203D 
000052FC  2022 4444 
00005300  4444 22   
00005303  0D0A 00   7431          dc.b      13,10,0
                    7432   @lab3_160:
00005306  0D0A 456E 7433          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
0000530A  7465 7220 
0000530E  7374 6172 
00005312  74        
00005313  2061 6464 7434          dc.b      32,97,100,100,114,101,115,115,32,119,105,116
00005317  7265 7373 
0000531B  2077 6974 
0000531F  6869 6E20 7435          dc.b      104,105,110,32,48,120,48,57,48,48,48,48,48,48
00005323  3078 3039 
00005327  3030 3030 
0000532B  3030      
0000532D  202D 2030 7436          dc.b      32,45,32,48,120,48,57,55,70,70,70,70,70,58,32
00005331  7830 3937 
00005335  4646 4646 
00005339  463A 20   
0000533C  2845 6E73 7437          dc.b      40,69,110,115,117,114,101,32,116,111,32,101
00005340  7572 6520 
00005344  746F 2065 
00005348  6E74 6572 7438          dc.b      110,116,101,114,32,97,110,32,101,118,101,110
0000534C  2061 6E20 
00005350  6576 656E 
00005354  206E 756D 7439          dc.b      32,110,117,109,98,101,114,41,13,10,0
00005358  6265 7229 
0000535C  0D0A 00   
                    7440   @lab3_161:
00005360  0D0A 4552 7441          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
00005364  524F 523A 
00005368  2054 6865 
0000536C  2061      
0000536E  6464 7265 7442          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
00005372  7373 2079 
00005376  6F75 2068 
0000537A  6176 6520 7443          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
0000537E  656E 7465 
00005382  7265 6420 
00005386  6973 206E 7444          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
0000538A  6F74 2065 
0000538E  7665 6E2E 
00005392  2054 7279 7445          dc.b      32,84,114,121,32,97,103,97,105,110,13,10,0
00005396  2061 6761 
0000539A  696E 0D0A 
0000539E  00        
                    7446   @lab3_162:
000053A0  0D0A 456E 7447          dc.b      13,10,69,110,116,101,114,32,101,110,100,32,97
000053A4  7465 7220 
000053A8  656E 6420 
000053AC  61        
000053AD  6464 7265 7448          dc.b      100,100,114,101,115,115,32,119,105,116,104,105
000053B1  7373 2077 
000053B5  6974 6869 
000053B9  6E20 3078 7449          dc.b      110,32,48,120,48,57,48,48,48,48,48,48,32,45
000053BD  3039 3030 
000053C1  3030 3030 
000053C5  202D      
000053C7  2030 7830 7450          dc.b      32,48,120,48,57,55,70,70,70,70,70,58,32,40,69
000053CB  3937 4646 
000053CF  4646 463A 
000053D3  2028 45   
000053D6  6E73 7572 7451          dc.b      110,115,117,114,101,32,116,111,32,101,110,116
000053DA  6520 746F 
000053DE  2065 6E74 
000053E2  6572 2061 7452          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
000053E6  6E20 6576 
000053EA  656E 206E 
000053EE  756D 6265 7453          dc.b      117,109,98,101,114,41,13,10,0
000053F2  7229 0D0A 
000053F6  00        
                    7454   @lab3_163:
000053F8  0D0A 5752 7455          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,52,88,32
000053FC  4954 453A 
00005400  205B 2530 
00005404  3458 20   
00005407  746F 2025 7456          dc.b      116,111,32,37,48,56,120,93,0
0000540B  3038 785D 
0000540F  00        
                    7457   @lab3_164:
00005410  0D0A 4552 7458          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005414  524F 523A 
00005418  2044 6174 
0000541C  6120 77   
0000541F  6974 6869 7459          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005423  6E20 6D65 
00005427  6D6F 7279 
0000542B  2064 6F65 7460          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
0000542F  7320 6E6F 
00005433  7420 6D61 
00005437  7463 6820 7461          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
0000543B  7365 6C65 
0000543F  6374 6564 
00005443  2074 6573 7462          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
00005447  7420 6461 
0000544B  7461 2120 
0000544F  5B        
00005450  4164 6472 7463          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00005454  6573 733A 
00005458  2025 3038 
0000545C  78        
0000545D  2045 7861 7464          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00005461  6374 2044 
00005465  6174 613A 
00005469  2025      
0000546B  3032 5820 7465          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
0000546F  4578 7065 
00005473  6374 6564 
00005477  20        
00005478  4461 7461 7466          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
0000547C  3A20 2530 
00005480  3258 5D20 
00005484  4578      
00005486  6974 696E 7467          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
0000548A  6720 6D65 
0000548E  6D6F 7279 
00005492  2074 6573 7468          dc.b      32,116,101,115,116,46,46,46,0
00005496  742E 2E2E 
0000549A  00        
                    7469   @lab3_165:
0000549C  0D0A 5041 7470          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
000054A0  5353 3A20 
000054A4  4D65 6D6F 
000054A8  7279      
000054AA  2056 616C 7471          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000054AE  6964 6174 
000054B2  696F 6E20 
000054B6  74        
000054B7  6573 7420 7472          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
000054BB  6861 7320 
000054BF  7061 7373 
000054C3  6564 2E0D 7473          dc.b      101,100,46,13,10,0
000054C7  0A00      
                    7474   @lab3_166:
000054CA  0D0A 5365 7475          dc.b      13,10,83,101,108,101,99,116,105,110,103,32,108
000054CE  6C65 6374 
000054D2  696E 6720 
000054D6  6C        
000054D7  6F6E 6720 7476          dc.b      111,110,103,32,119,111,114,100,32,115,105,122
000054DB  776F 7264 
000054DF  2073 697A 
000054E3  6500      7477          dc.b      101,0
                    7478   @lab3_167:
000054E6  0D0A 5365 7479          dc.b      13,10,83,101,108,101,99,116,32,100,97,116,97
000054EA  6C65 6374 
000054EE  2064 6174 
000054F2  61        
000054F3  2076 616C 7480          dc.b      32,118,97,108,117,101,58,0
000054F7  7565 3A00 
                    7481   @lab3_168:
000054FC  0D0A 3120 7482          dc.b      13,10,49,32,61,32,34,65,65,65,65,65,65,65,65
00005500  3D20 2241 
00005504  4141 4141 
00005508  4141 41   
0000550B  220A 3220 7483          dc.b      34,10,50,32,61,32,34,65,66,65,66,65,66,65,66
0000550F  3D20 2241 
00005513  4241 4241 
00005517  4241 42   
0000551A  220A 3320 7484          dc.b      34,10,51,32,61,32,34,67,67,67,67,68,68,68,68
0000551E  3D20 2243 
00005522  4343 4344 
00005526  4444 44   
00005529  220A 3420 7485          dc.b      34,10,52,32,61,32,34,65,65,66,66,67,67,68,68
0000552D  3D20 2241 
00005531  4142 4243 
00005535  4344 44   
00005538  220D 0A00 7486          dc.b      34,13,10,0
                    7487   @lab3_169:
0000553C  0D0A 5365 7488          dc.b      13,10,83,101,108,101,99,116,32,101,105,116,104
00005540  6C65 6374 
00005544  2065 6974 
00005548  68        
00005549  6572 2031 7489          dc.b      101,114,32,49,44,32,50,44,32,51,44,32,111,114
0000554D  2C20 322C 
00005551  2033 2C20 
00005555  6F72      
00005557  2034 2E0D 7490          dc.b      32,52,46,13,10,0
0000555B  0A00      
                    7491   @lab3_170:
0000555E  0D0A 4552 7492          dc.b      13,10,69,82,82,79,82,58,32,69,120,105,116,105
00005562  524F 523A 
00005566  2045 7869 
0000556A  7469      
0000556C  6E67 206D 7493          dc.b      110,103,32,109,101,109,111,114,121,32,116,101
00005570  656D 6F72 
00005574  7920 7465 
00005578  7374 2064 7494          dc.b      115,116,32,100,117,101,32,116,111,32,111,112
0000557C  7565 2074 
00005580  6F20 6F70 
00005584  7469 6F6E 7495          dc.b      116,105,111,110,32,109,101,109,111,114,121,32
00005588  206D 656D 
0000558C  6F72 7920 
00005590  636F 6D70 7496          dc.b      99,111,109,112,108,105,99,97,116,105,111,110
00005594  6C69 6361 
00005598  7469 6F6E 
0000559C  2E20 0D0A 7497          dc.b      46,32,13,10,0
000055A0  00        
                    7498   @lab3_171:
000055A2  0D0A 4552 7499          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
000055A6  524F 523A 
000055AA  2053 7461 
000055AE  7274      
000055B0  696E 6720 7500          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
000055B4  4164 6472 
000055B8  6573 7320 
000055BC  6973 206F 7501          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
000055C0  7574 7369 
000055C4  6465 206F 
000055C8  6620 3638 7502          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
000055CC  4B20 6D65 
000055D0  6D6F 7279 
000055D4  20        
000055D5  7261 6E67 7503          dc.b      114,97,110,103,101,46,32,80,108,101,97,115,101
000055D9  652E 2050 
000055DD  6C65 6173 
000055E1  65        
000055E2  2074 7279 7504          dc.b      32,116,114,121,32,97,103,97,105,110,32,97,110
000055E6  2061 6761 
000055EA  696E 2061 
000055EE  6E        
000055EF  6420 656E 7505          dc.b      100,32,101,110,115,117,114,101,32,116,104,101
000055F3  7375 7265 
000055F7  2074 6865 
000055FB  2061 6464 7506          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
000055FF  7265 7373 
00005603  2069 7320 
00005607  7769 7468 7507          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
0000560B  6E20 3078 
0000560F  3039 3030 
00005613  30        
00005614  3030 3020 7508          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
00005618  2D20 3078 
0000561C  3039 3746 
00005620  4646 46   
00005623  460D 0A00 7509          dc.b      70,13,10,0
                    7510   @lab3_172:
00005628  0D0A 4552 7511          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
0000562C  524F 523A 
00005630  2045 6E64 
00005634  2041      
00005636  6464 7265 7512          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
0000563A  7373 2069 
0000563E  7320 6F75 
00005642  7473 6964 7513          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
00005646  6520 6F66 
0000564A  2036 384B 
0000564E  20        
0000564F  6D65 6D6F 7514          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
00005653  7279 2072 
00005657  616E 6765 
0000565B  2E20 506C 7515          dc.b      46,32,80,108,101,97,115,101,32,116,114,121,32
0000565F  6561 7365 
00005663  2074 7279 
00005667  20        
00005668  6167 6169 7516          dc.b      97,103,97,105,110,32,97,110,100,32,101,110,115
0000566C  6E20 616E 
00005670  6420 656E 
00005674  73        
00005675  7572 6520 7517          dc.b      117,114,101,32,116,104,101,32,97,100,100,114
00005679  7468 6520 
0000567D  6164 6472 
00005681  6573 7320 7518          dc.b      101,115,115,32,105,115,32,119,105,116,104,110
00005685  6973 2077 
00005689  6974 686E 
0000568D  2030 7830 7519          dc.b      32,48,120,48,57,48,48,48,48,48,48,32,45,32,48
00005691  3930 3030 
00005695  3030 3020 
00005699  2D20 30   
0000569C  7830 3937 7520          dc.b      120,48,57,55,70,70,70,70,70,13,10,0
000056A0  4646 4646 
000056A4  460D 0A00 
                    7521   @lab3_173:
000056A8  0D0A 4552 7522          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
000056AC  524F 523A 
000056B0  2054 6865 
000056B4  2061      
000056B6  6464 7265 7523          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
000056BA  7373 2079 
000056BE  6F75 2068 
000056C2  6176 6520 7524          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
000056C6  656E 7465 
000056CA  7265 6420 
000056CE  6973 206E 7525          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
000056D2  6F74 2065 
000056D6  7665 6E2E 
000056DA  2050 6C65 7526          dc.b      32,80,108,101,97,115,101,32,116,114,121,32,97
000056DE  6173 6520 
000056E2  7472 7920 
000056E6  61        
000056E7  6761 696E 7527          dc.b      103,97,105,110,13,10,0
000056EB  0D0A 00   
                    7528   @lab3_174:
000056EE  0D0A 5741 7529          dc.b      13,10,87,65,82,78,73,78,71,58,32,77,101,109
000056F2  524E 494E 
000056F6  473A 204D 
000056FA  656D      
000056FC  6F72 7920 7530          dc.b      111,114,121,32,119,105,108,108,32,99,111,110
00005700  7769 6C6C 
00005704  2063 6F6E 
00005708  7461 696E 7531          dc.b      116,97,105,110,32,116,114,117,110,99,97,116
0000570C  2074 7275 
00005710  6E63 6174 
00005714  6564 2064 7532          dc.b      101,100,32,100,97,116,97,0
00005718  6174 6100 
                    7533   @lab3_175:
0000571C  0D0A 5752 7534          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,56,88,32
00005720  4954 453A 
00005724  205B 2530 
00005728  3858 20   
0000572B  746F 2025 7535          dc.b      116,111,32,37,48,56,120,93,0
0000572F  3038 785D 
00005733  00        
                    7536   @lab3_176:
00005734  0D0A 4552 7537          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005738  524F 523A 
0000573C  2044 6174 
00005740  6120 77   
00005743  6974 6869 7538          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005747  6E20 6D65 
0000574B  6D6F 7279 
0000574F  2064 6F65 7539          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00005753  7320 6E6F 
00005757  7420 6D61 
0000575B  7463 6820 7540          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
0000575F  7365 6C65 
00005763  6374 6564 
00005767  2074 6573 7541          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
0000576B  7420 6461 
0000576F  7461 2120 
00005773  5B        
00005774  4164 6472 7542          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00005778  6573 733A 
0000577C  2025 3038 
00005780  78        
00005781  2045 7861 7543          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00005785  6374 2044 
00005789  6174 613A 
0000578D  2025      
0000578F  3038 5820 7544          dc.b      48,56,88,32,69,120,112,101,99,116,101,100,32
00005793  4578 7065 
00005797  6374 6564 
0000579B  20        
0000579C  4461 7461 7545          dc.b      68,97,116,97,58,32,37,48,56,88,93,32,69,120
000057A0  3A20 2530 
000057A4  3858 5D20 
000057A8  4578      
000057AA  6974 696E 7546          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000057AE  6720 6D65 
000057B2  6D6F 7279 
000057B6  2074 6573 7547          dc.b      32,116,101,115,116,46,46,46,13,10,0
000057BA  742E 2E2E 
000057BE  0D0A 00   
                    7548   @lab3_177:
000057C2  0D0A 5041 7549          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
000057C6  5353 3A20 
000057CA  4D65 6D6F 
000057CE  7279      
000057D0  2056 616C 7550          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000057D4  6964 6174 
000057D8  696F 6E20 
000057DC  74        
000057DD  6573 7420 7551          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
000057E1  6861 7320 
000057E5  7061 7373 
000057E9  6564 210D 7552          dc.b      101,100,33,13,10,0
000057ED  0A00      
                    7553   @lab3_178:
000057F0  0D0A 596F 7554          dc.b      13,10,89,111,117,32,102,97,105,108,101,100,32
000057F4  7520 6661 
000057F8  696C 6564 
000057FC  20        
000057FD  746F 2073 7555          dc.b      116,111,32,115,101,108,101,99,116,32,97,32,100
00005801  656C 6563 
00005805  7420 6120 
00005809  64        
0000580A  6174 6120 7556          dc.b      97,116,97,32,116,121,112,101,32,116,111,32,117
0000580E  7479 7065 
00005812  2074 6F20 
00005816  75        
00005817  7365 2120 7557          dc.b      115,101,33,32,67,108,105,99,107,32,111,112,101
0000581B  436C 6963 
0000581F  6B20 6F70 
00005823  65        
00005824  6E20 6D65 7558          dc.b      110,32,109,101,109,111,114,121,32,116,101,115
00005828  6D6F 7279 
0000582C  2074 6573 
00005830  7420 6167 7559          dc.b      116,32,97,103,97,105,110,32,116,111,32,116,114
00005834  6169 6E20 
00005838  746F 2074 
0000583C  72        
0000583D  7920 6167 7560          dc.b      121,32,97,103,97,105,110,46,13,10,0
00005841  6169 6E2E 
00005845  0D0A 00   
                    7561   @lab3_179:
00005848  4445 312D 7562          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000584C  3638 6B20 
00005850  4275 6720 
00005854  5631      
00005856  2E37 3700 7563          dc.b      46,55,55,0
                    7564   @lab3_180:
0000585A  436F 7079 7565          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000585E  7269 6768 
00005862  7420 2843 
00005866  2920 504A 7566          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000586A  2044 6176 
0000586E  6965 7320 
00005872  3230      
00005874  3136 00   7567          dc.b      49,54,0
                    7568   @lab3_181:
00005878  0D0A 0D0A 7569          dc.b      13,10,13,10,75,101,110,110,121,32,87,97,107
0000587C  4B65 6E6E 
00005880  7920 5761 
00005884  6B        
00005885  6162 6120 7570          dc.b      97,98,97,32,45,32,57,49,51,55,56,51,49,53,13
00005889  2D20 3931 
0000588D  3337 3833 
00005891  3135 0D   
00005894  0A4A 6163 7571          dc.b      10,74,97,99,111,98,32,89,97,110,103,32,45,32
00005898  6F62 2059 
0000589C  616E 6720 
000058A0  2D20      
000058A2  3234 3934 7572          dc.b      50,52,57,52,48,56,51,53,0
000058A6  3038 3335 
000058AA  00        
                    7573   @lab3_182:
000058AC  0D0A 5275 7574          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000058B0  6E6E 696E 
000058B4  672E 2E2E 
000058B8  2E        
000058B9  2E00      7575          dc.b      46,0
                    7576   @lab3_183:
000058BC  5275 6E6E 7577          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000058C0  696E 672E 
000058C4  2E2E 2E2E 
000058C8  00        
                    7578   @lab3_184:
000058CA  4279 3A20 7579          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000058CE  504A 2044 
000058D2  6176 6965 
000058D6  73        
000058D7  00        7580          dc.b      0
                    7581   @lab3_185:
000058D8  0D0A 2573 7582          dc.b      13,10,37,115,0
000058DC  00        
                    7583   MemoryTest_test_data_long_word_list:
000058DE  AAAA AAAA 7584          dc.l      -1431655766,-1414812757,-858989091,-1430532899
000058E2  ABAB ABAB 
000058E6  CCCC DDDD 
000058EA  AABB CCDD 
                    7585          section   data
000058EE            7586                   align
          0000 58EE 7587   DataStart       equ       *
                    7588   
                    7589   *********************************************************************************************************
                    7590   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7591   * to ram as part of the CStart routine in this file
                    7592   *********************************************************************************************************
                    7593   
                    7594   MemoryTest_test_data_byte_list:
000058EE  AAAB CCCD 7595          dc.b      170,171,204,205
                    7596   MemoryTest_test_data_word_list:
000058F2  0000 AAAA 7597          dc.l      43690,47802,52445,56797
000058F6  0000 BABA 
000058FA  0000 CCDD 
000058FE  0000 DDDD 
                    7598   @itoa_1:
00005902  2D32 3134 7599          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005906  3734 3833 
0000590A  3634 3800 
                    7600          section   bss
0000590E            7601                   align
          0000 590E 7602   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7603   
                    7604   *********************************************************************************************************
                    7605   * Section for Uninitialised Data held in ROM as constants
                    7606   *********************************************************************************************************
                    7607   
0B000000            7608                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0020 7609   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7610   
                    7611   
0B000000            7612   bss             org       bss
                    7613   
                    7614   *********************************************************************************************************
                    7615   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7616   * install the exception handler using the C function InstallExceptionHandler()
                    7617   *********************************************************************************************************
                    7618   
                    7619   
                    7620   
0B000000            7621   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7622   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7623   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7624   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7625   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7626   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7627   VCheck           ds.l    1      ditto
0B00001C            7628   VTrapV           ds.l    1      ditto
0B000020            7629   VPrivilege       ds.l    1      ditto
0B000024            7630   VTrace           ds.l    1
0B000028            7631   VLine1010emul    ds.l    1
0B00002C            7632   VLine1111emul    ds.l    1
0B000030            7633   VUnassigned1     ds.l    1
0B000034            7634   VUnassigned2     ds.l    1
0B000038            7635   VUnassigned3     ds.l    1
0B00003C            7636   VUninit_IRQ      ds.l    1
0B000040            7637   VUnassigned4     ds.l    1
0B000044            7638   VUnassigned5     ds.l    1
0B000048            7639   VUnassigned6     ds.l    1
0B00004C            7640   VUnassigned7     ds.l    1
0B000050            7641   VUnassigned8     ds.l    1
0B000054            7642   VUnassigned9     ds.l    1
0B000058            7643   VUnassigned10    ds.l    1
0B00005C            7644   VUnassigned11    ds.l    1
0B000060            7645   VSpuriousIRQ     ds.l    1
                    7646   
                    7647   * Interrupt handlers Vector 25-31
0B000064            7648   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7649   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7650   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7651   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7652   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7653   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7654   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7655   
                    7656   * Trap Handler vectors 32-47
0B000080            7657   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7658   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7659   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7660   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7661   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7662   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7663   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7664   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7665   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7666   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7667   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7668   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7669   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7670   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7671   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7672   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7673   
                    7674   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7675   
                    7676   ***********************************************************************************************************
                    7677   * Other Variables
                    7678   ***********************************************************************************************************
                    7679   *__DebugA5       ds.l    1
                    7680   *__UserA5        ds.l    1
                    7681   
                    7682   ***********************************************************************************************************
0B0000C0            7683   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7684   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7685   __heap:         ds.l    0       ; pointers for malloc functions
                    7686   
                    7687   *__himem:       ds.l    himem            ; highest memory location + 1
                    7688   *__stklen:      ds.l    stklen           ; default stack size
                    7689   
                    7690   *********************************************************************************************************
                    7691   * Section for Heap
                    7692   *********************************************************************************************************
                    7693   
                    7694   _i:
0B0000C4            7695          ds.b      4
                    7696   _x:
0B0000C8            7697          ds.b      4
                    7698   _y:
0B0000CC            7699          ds.b      4
                    7700   _z:
0B0000D0            7701          ds.b      4
                    7702   _PortA_Count:
0B0000D4            7703          ds.b      4
                    7704   _Trace:
0B0000D8            7705          ds.b      4
                    7706   _GoFlag:
0B0000DC            7707          ds.b      4
                    7708   _Echo:
0B0000E0            7709          ds.b      4
                    7710   _d0:
0B0000E4            7711          ds.b      4
                    7712   _d1:
0B0000E8            7713          ds.b      4
                    7714   _d2:
0B0000EC            7715          ds.b      4
                    7716   _d3:
0B0000F0            7717          ds.b      4
                    7718   _d4:
0B0000F4            7719          ds.b      4
                    7720   _d5:
0B0000F8            7721          ds.b      4
                    7722   _d6:
0B0000FC            7723          ds.b      4
                    7724   _d7:
0B000100            7725          ds.b      4
                    7726   _a0:
0B000104            7727          ds.b      4
                    7728   _a1:
0B000108            7729          ds.b      4
                    7730   _a2:
0B00010C            7731          ds.b      4
                    7732   _a3:
0B000110            7733          ds.b      4
                    7734   _a4:
0B000114            7735          ds.b      4
                    7736   _a5:
0B000118            7737          ds.b      4
                    7738   _a6:
0B00011C            7739          ds.b      4
                    7740   _PC:
0B000120            7741          ds.b      4
                    7742   _SSP:
0B000124            7743          ds.b      4
                    7744   _USP:
0B000128            7745          ds.b      4
                    7746   _SR:
0B00012C            7747          ds.b      2
                    7748   _BreakPointAddress:
0B00012E            7749          ds.b      32
                    7750   _BreakPointInstruction:
0B00014E            7751          ds.b      16
                    7752   _BreakPointSetOrCleared:
0B00015E            7753          ds.b      32
                    7754   _InstructionSize:
0B00017E            7755          ds.b      4
                    7756   _WatchPointAddress:
0B000182            7757          ds.b      32
                    7758   _WatchPointSetOrCleared:
0B0001A2            7759          ds.b      32
                    7760   _WatchPointString:
0B0001C2            7761          ds.b      800
                    7762   _TempString:
0B0004E2            7763          ds.b      100
                    7764          section   heap
0B000546            7765                   align
          0B00 0546 7766   bssEnd          equ *                   end of storage space for unitialised variables
                    7767   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7768   heap   equ       *
0B000546            7769                    align
          0000 0000

Assembly errors: 0
