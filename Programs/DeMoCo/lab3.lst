680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 29 Feb 2024      Time: 00:12:48          Source: D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB3.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2D84      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2002      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; D:\CPEN412\M68K\PROGRAMS\DEMOCO\LAB3.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DM.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; // #define StartOfExceptionVectorTable 08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; // #define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /*************************************************************
                     478   ; ** SPI Controller registers
                     479   ; **************************************************************/
                     480   ; // SPI Registers
                     481   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                     482   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                     483   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                     484   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                     485   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                     486   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                     487   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                     488   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                     489   ; // and write FF to disable it
                     490   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     491   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     492   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     493   ; unsigned int i, x, y, z, PortA_Count;
                     494   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     495   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     496   ; unsigned int d0, d1, d2, d3, d4, d5, d6, d7;
                     497   ; unsigned int a0, a1, a2, a3, a4, a5, a6;
                     498   ; unsigned int PC, SSP, USP;
                     499   ; unsigned short int SR;
                     500   ; // Breakpoint variables
                     501   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     502   ; unsigned short int BreakPointInstruction[8];           // to hold the instruction opcode at the breakpoint
                     503   ; unsigned int BreakPointSetOrCleared[8];
                     504   ; unsigned int InstructionSize;
                     505   ; // watchpoint variables
                     506   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     507   ; unsigned int WatchPointSetOrCleared[8];
                     508   ; char WatchPointString[8][100];
                     509   ; char    TempString[100];
                     510   ; /************************************************************************************
                     511   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     512   ; ************************************************************************************/
                     513   ; void Wait1ms(void)
                     514   ; {
                     515   _Wait1ms:
00000932  2F02       516          move.l    D2,-(A7)
                     517   ; long int  i;
                     518   ; for (i = 0; i < 1000; i++)
00000934  4282       519          clr.l     D2
                     520   Wait1ms_1:
00000936  0C82 0000  521          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       522          bge.s     Wait1ms_3
0000093E  5282       523          addq.l    #1,D2
00000940  60F4       524          bra       Wait1ms_1
                     525   Wait1ms_3:
00000942  241F       526          move.l    (A7)+,D2
00000944  4E75       527          rts
                     528   ; ;
                     529   ; }
                     530   ; /************************************************************************************
                     531   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     532   ; **************************************************************************************/
                     533   ; void Wait3ms(void)
                     534   ; {
                     535   _Wait3ms:
00000946  2F02       536          move.l    D2,-(A7)
                     537   ; int i;
                     538   ; for (i = 0; i < 3; i++)
00000948  4282       539          clr.l     D2
                     540   Wait3ms_1:
0000094A  0C82 0000  541          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       542          bge.s     Wait3ms_3
                     543   ; Wait1ms();
00000952  4EB8 0932  544          jsr       _Wait1ms
00000956  5282       545          addq.l    #1,D2
00000958  60F0       546          bra       Wait3ms_1
                     547   Wait3ms_3:
0000095A  241F       548          move.l    (A7)+,D2
0000095C  4E75       549          rts
                     550   ; }
                     551   ; /*********************************************************************************************
                     552   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     553   ; *********************************************************************************************/
                     554   ; void Init_LCD(void)
                     555   ; {
                     556   _Init_LCD:
                     557   ; LCDcommand = (char)(0x0c);
0000095E  13FC 000C  558          move.b    #12,4194336
00000962  0040 0020 
                     559   ; Wait3ms();
00000966  4EB8 0946  560          jsr       _Wait3ms
                     561   ; LCDcommand = (char)(0x38);
0000096A  13FC 0038  562          move.b    #56,4194336
0000096E  0040 0020 
                     563   ; Wait3ms();
00000972  4EB8 0946  564          jsr       _Wait3ms
00000976  4E75       565          rts
                     566   ; }
                     567   ; /******************************************************************************
                     568   ; *subroutine to output a single character held in d1 to the LCD display
                     569   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     570   ; *current cursor position
                     571   ; *******************************************************************************/
                     572   ; void Outchar(int c)
                     573   ; {
                     574   _Outchar:
00000978  4E56 0000  575          link      A6,#0
                     576   ; LCDdata = (char)(c);
0000097C  202E 0008  577          move.l    8(A6),D0
00000980  13C0 0040  578          move.b    D0,4194338
00000984  0022      
                     579   ; Wait1ms();
00000986  4EB8 0932  580          jsr       _Wait1ms
0000098A  4E5E       581          unlk      A6
0000098C  4E75       582          rts
                     583   ; }
                     584   ; /**********************************************************************************
                     585   ; *subroutine to output a message at the current cursor position of the LCD display
                     586   ; ************************************************************************************/
                     587   ; void OutMess(char* theMessage)
                     588   ; {
                     589   _OutMess:
0000098E  4E56 FFFC  590          link      A6,#-4
                     591   ; char c;
                     592   ; while ((c = *theMessage++) != (char)(0))
                     593   OutMess_1:
00000992  206E 0008  594          move.l    8(A6),A0
00000996  52AE 0008  595          addq.l    #1,8(A6)
0000099A  1D50 FFFF  596          move.b    (A0),-1(A6)
0000099E  1010       597          move.b    (A0),D0
000009A0  6712       598          beq.s     OutMess_3
                     599   ; Outchar(c);
000009A2  122E FFFF  600          move.b    -1(A6),D1
000009A6  4881       601          ext.w     D1
000009A8  48C1       602          ext.l     D1
000009AA  2F01       603          move.l    D1,-(A7)
000009AC  4EB8 0978  604          jsr       _Outchar
000009B0  584F       605          addq.w    #4,A7
000009B2  60DE       606          bra       OutMess_1
                     607   OutMess_3:
000009B4  4E5E       608          unlk      A6
000009B6  4E75       609          rts
                     610   ; }
                     611   ; /******************************************************************************
                     612   ; *subroutine to clear the line by issuing 24 space characters
                     613   ; *******************************************************************************/
                     614   ; void Clearln(void)
                     615   ; {
                     616   _Clearln:
000009B8  2F02       617          move.l    D2,-(A7)
                     618   ; unsigned char i;
                     619   ; for (i = 0; i < 24; i++)
000009BA  4202       620          clr.b     D2
                     621   Clearln_1:
000009BC  0C02 0018  622          cmp.b     #24,D2
000009C0  640E       623          bhs.s     Clearln_3
                     624   ; Outchar(' ');  /* write a space char to the LCD display */
000009C2  4878 0020  625          pea       32
000009C6  4EB8 0978  626          jsr       _Outchar
000009CA  584F       627          addq.w    #4,A7
000009CC  5202       628          addq.b    #1,D2
000009CE  60EC       629          bra       Clearln_1
                     630   Clearln_3:
000009D0  241F       631          move.l    (A7)+,D2
000009D2  4E75       632          rts
                     633   ; }
                     634   ; /******************************************************************************
                     635   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     636   ; *******************************************************************************/
                     637   ; void Oline0(char* theMessage)
                     638   ; {
                     639   _Oline0:
000009D4  4E56 0000  640          link      A6,#0
                     641   ; LCDcommand = (char)(0x80);
000009D8  13FC 0080  642          move.b    #128,4194336
000009DC  0040 0020 
                     643   ; Wait3ms();
000009E0  4EB8 0946  644          jsr       _Wait3ms
                     645   ; Clearln();
000009E4  4EB8 09B8  646          jsr       _Clearln
                     647   ; LCDcommand = (char)(0x80);
000009E8  13FC 0080  648          move.b    #128,4194336
000009EC  0040 0020 
                     649   ; Wait3ms();
000009F0  4EB8 0946  650          jsr       _Wait3ms
                     651   ; OutMess(theMessage);
000009F4  2F2E 0008  652          move.l    8(A6),-(A7)
000009F8  4EB8 098E  653          jsr       _OutMess
000009FC  584F       654          addq.w    #4,A7
000009FE  4E5E       655          unlk      A6
00000A00  4E75       656          rts
                     657   ; }
                     658   ; /******************************************************************************
                     659   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     660   ; *******************************************************************************/
                     661   ; void Oline1(char* theMessage)
                     662   ; {
                     663   _Oline1:
00000A02  4E56 0000  664          link      A6,#0
                     665   ; LCDcommand = (char)(0xC0);
00000A06  13FC 00C0  666          move.b    #192,4194336
00000A0A  0040 0020 
                     667   ; Wait3ms();
00000A0E  4EB8 0946  668          jsr       _Wait3ms
                     669   ; Clearln();
00000A12  4EB8 09B8  670          jsr       _Clearln
                     671   ; LCDcommand = (char)(0xC0);
00000A16  13FC 00C0  672          move.b    #192,4194336
00000A1A  0040 0020 
                     673   ; Wait3ms();
00000A1E  4EB8 0946  674          jsr       _Wait3ms
                     675   ; OutMess(theMessage);
00000A22  2F2E 0008  676          move.l    8(A6),-(A7)
00000A26  4EB8 098E  677          jsr       _OutMess
00000A2A  584F       678          addq.w    #4,A7
00000A2C  4E5E       679          unlk      A6
00000A2E  4E75       680          rts
                     681   ; }
                     682   ; void InstallExceptionHandler(void (*function_ptr)(), int level)
                     683   ; {
                     684   _InstallExceptionHandler:
00000A30  4E56 FFFC  685          link      A6,#-4
                     686   ; volatile long int* RamVectorAddress = (volatile long int*)(StartOfExceptionVectorTable);   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  687          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     688   ; RamVectorAddress[level] = (long int*)(function_ptr);
00000A3C  206E FFFC  689          move.l    -4(A6),A0
00000A40  202E 000C  690          move.l    12(A6),D0
00000A44  E588       691          lsl.l     #2,D0
00000A46  21AE 0008  692          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       693          unlk      A6
00000A4E  4E75       694          rts
                     695   ; }
                     696   ; void TestLEDS(void)
                     697   ; {
                     698   _TestLEDS:
00000A50  48E7 3000  699          movem.l   D2/D3,-(A7)
                     700   ; int delay;
                     701   ; unsigned char count = 0;
00000A54  4202       702          clr.b     D2
                     703   ; while (1) {
                     704   TestLEDS_1:
                     705   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f));
00000A56  1002       706          move.b    D2,D0
00000A58  E908       707          lsl.b     #4,D0
00000A5A  1202       708          move.b    D2,D1
00000A5C  C23C 000F  709          and.b     #15,D1
00000A60  D001       710          add.b     D1,D0
00000A62  13C0 0040  711          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  712          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  713          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  714          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  715          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  716          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  717          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  718          move.b    D0,4194304
00000A90  0000      
                     719   ; for (delay = 0; delay < 200000; delay++)
00000A92  4283       720          clr.l     D3
                     721   TestLEDS_4:
00000A94  0C83 0003  722          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       723          bge.s     TestLEDS_6
00000A9C  5283       724          addq.l    #1,D3
00000A9E  60F4       725          bra       TestLEDS_4
                     726   TestLEDS_6:
                     727   ; ;
                     728   ; count++;
00000AA0  5202       729          addq.b    #1,D2
00000AA2  60B2       730          bra       TestLEDS_1
                     731   ; }
                     732   ; }
                     733   ; void SwitchTest(void)
                     734   ; {
                     735   _SwitchTest:
00000AA4  48E7 3020  736          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  737          lea       _printf.L,A2
00000AAC  324C      
                     738   ; int i, switches = 0;
00000AAE  4283       739          clr.l     D3
                     740   ; printf("\r\n");
00000AB0  4879 0000  741          pea       @lab3_1.L
00000AB4  3B9C      
00000AB6  4E92       742          jsr       (A2)
00000AB8  584F       743          addq.w    #4,A7
                     744   ; while (1) {
                     745   SwitchTest_1:
                     746   ; switches = (PortB << 8) | (PortA);
00000ABA  1039 0040  747          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  748          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       749          lsl.l     #8,D0
00000AC8  1239 0040  750          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  751          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       752          or.l      D1,D0
00000AD6  2600       753          move.l    D0,D3
                     754   ; printf("\rSwitches SW[7-0] = ");
00000AD8  4879 0000  755          pea       @lab3_2.L
00000ADC  3BA0      
00000ADE  4E92       756          jsr       (A2)
00000AE0  584F       757          addq.w    #4,A7
                     758   ; for (i = (int)(0x00000080); i > 0; i = i >> 1) {
00000AE2  243C 0000  759          move.l    #128,D2
00000AE6  0080      
                     760   SwitchTest_4:
00000AE8  0C82 0000  761          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       762          ble.s     SwitchTest_6
                     763   ; if ((switches & i) == 0)
00000AF0  2003       764          move.l    D3,D0
00000AF2  C082       765          and.l     D2,D0
00000AF4  660C       766          bne.s     SwitchTest_7
                     767   ; printf("0");
00000AF6  4879 0000  768          pea       @lab3_3.L
00000AFA  3BB6      
00000AFC  4E92       769          jsr       (A2)
00000AFE  584F       770          addq.w    #4,A7
00000B00  600A       771          bra.s     SwitchTest_8
                     772   SwitchTest_7:
                     773   ; else
                     774   ; printf("1");
00000B02  4879 0000  775          pea       @lab3_4.L
00000B06  3BB8      
00000B08  4E92       776          jsr       (A2)
00000B0A  584F       777          addq.w    #4,A7
                     778   SwitchTest_8:
00000B0C  E282       779          asr.l     #1,D2
00000B0E  60D8       780          bra       SwitchTest_4
                     781   SwitchTest_6:
00000B10  60A8       782          bra       SwitchTest_1
                     783   ; }
                     784   ; }
                     785   ; }
                     786   ; /*********************************************************************************************
                     787   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     788   ; *********************************************************************************************/
                     789   ; void Init_RS232(void)
                     790   ; {
                     791   _Init_RS232:
                     792   ; RS232_Control = (char)(0x15); //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  793          move.b    #21,4194368
00000B16  0040 0040 
                     794   ; RS232_Baud = (char)(0x1);      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  795          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       796          rts
                     797   ; }
                     798   ; int kbhit(void)
                     799   ; {
                     800   _kbhit:
                     801   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  802          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  803          and.b     #1,D0
00000B2E  0C00 0001  804          cmp.b     #1,D0
00000B32  6604       805          bne.s     kbhit_1
                     806   ; return 1;
00000B34  7001       807          moveq     #1,D0
00000B36  6002       808          bra.s     kbhit_3
                     809   kbhit_1:
                     810   ; else
                     811   ; return 0;
00000B38  4280       812          clr.l     D0
                     813   kbhit_3:
00000B3A  4E75       814          rts
                     815   ; }
                     816   ; /*********************************************************************************************************
                     817   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     818   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     819   ; **  to allow the board to communicate with HyperTerminal Program
                     820   ; **
                     821   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     822   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     823   ; **  call _putch() also
                     824   ; *********************************************************************************************************/
                     825   ; int _putch(int c)
                     826   ; {
                     827   __putch:
00000B3C  4E56 0000  828          link      A6,#0
                     829   ; while (((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     830   _putch_1:
00000B40  1039 0040  831          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  832          and.b     #2,D0
00000B4A  0C00 0002  833          cmp.b     #2,D0
00000B4E  6702       834          beq.s     _putch_3
00000B50  60EE       835          bra       _putch_1
                     836   _putch_3:
                     837   ; ;
                     838   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  839          move.l    8(A6),D0
00000B56  C03C 007F  840          and.b     #127,D0
00000B5A  13C0 0040  841          move.b    D0,4194370
00000B5E  0042      
                     842   ; return c;                                              // putchar() expects the character to be returned
00000B60  202E 0008  843          move.l    8(A6),D0
00000B64  4E5E       844          unlk      A6
00000B66  4E75       845          rts
                     846   ; }
                     847   ; /*********************************************************************************************************
                     848   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     849   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     850   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     851   ; **
                     852   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     853   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     854   ; **  call _getch() also
                     855   ; *********************************************************************************************************/
                     856   ; int _getch(void)
                     857   ; {
                     858   __getch:
00000B68  2F02       859          move.l    D2,-(A7)
                     860   ; int c;
                     861   ; while (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     862   _getch_1:
00000B6A  1039 0040  863          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  864          and.b     #1,D0
00000B74  0C00 0001  865          cmp.b     #1,D0
00000B78  6702       866          beq.s     _getch_3
00000B7A  60EE       867          bra       _getch_1
                     868   _getch_3:
                     869   ; ;
                     870   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  871          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  872          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  873          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       874          move.l    D0,D2
                     875   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     876   ; if (Echo)
00000B90  4AB9 0B00  877          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       878          beq.s     _getch_4
                     879   ; _putch(c);
00000B98  2F02       880          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  881          jsr       __putch
00000B9E  584F       882          addq.w    #4,A7
                     883   _getch_4:
                     884   ; return c;
00000BA0  2002       885          move.l    D2,D0
00000BA2  241F       886          move.l    (A7)+,D2
00000BA4  4E75       887          rts
                     888   ; }
                     889   ; // flush the input stream for any unread characters
                     890   ; void FlushKeyboard(void)
                     891   ; {
                     892   _FlushKeyboard:
00000BA6  4E56 FFFC  893          link      A6,#-4
                     894   ; char c;
                     895   ; while (1) {
                     896   FlushKeyboard_1:
                     897   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  898          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  899          and.b     #1,D0
00000BB4  0C00 0001  900          cmp.b     #1,D0
00000BB8  6610       901          bne.s     FlushKeyboard_4
                     902   ; c = ((char)(RS232_RxData) & (char)(0x7f));
00000BBA  1039 0040  903          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  904          and.b     #127,D0
00000BC4  1D40 FFFF  905          move.b    D0,-1(A6)
00000BC8  6002       906          bra.s     FlushKeyboard_5
                     907   FlushKeyboard_4:
                     908   ; else
                     909   ; return;
00000BCA  6002       910          bra.s     FlushKeyboard_6
                     911   FlushKeyboard_5:
00000BCC  60DC       912          bra       FlushKeyboard_1
                     913   FlushKeyboard_6:
00000BCE  4E5E       914          unlk      A6
00000BD0  4E75       915          rts
                     916   ; }
                     917   ; }
                     918   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     919   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     920   ; char xtod(int c)
                     921   ; {
                     922   _xtod:
00000BD2  4E56 0000  923          link      A6,#0
00000BD6  2F02       924          move.l    D2,-(A7)
00000BD8  242E 0008  925          move.l    8(A6),D2
                     926   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  927          cmp.b     #57,D2
00000BE0  6E08       928          bgt.s     xtod_1
                     929   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       930          move.b    D2,D0
00000BE4  0400 0030  931          sub.b     #48,D0
00000BE8  6014       932          bra.s     xtod_3
                     933   xtod_1:
                     934   ; else if ((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  935          cmp.b     #70,D2
00000BEE  6F08       936          ble.s     xtod_4
                     937   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       938          move.b    D2,D0
00000BF2  0400 0057  939          sub.b     #87,D0
00000BF6  6006       940          bra.s     xtod_3
                     941   xtod_4:
                     942   ; else
                     943   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       944          move.b    D2,D0
00000BFA  0400 0037  945          sub.b     #55,D0
                     946   xtod_3:
00000BFE  241F       947          move.l    (A7)+,D2
00000C00  4E5E       948          unlk      A6
00000C02  4E75       949          rts
                     950   ; }
                     951   ; int Get2HexDigits(char* CheckSumPtr)
                     952   ; {
                     953   _Get2HexDigits:
00000C04  4E56 0000  954          link      A6,#0
00000C08  2F02       955          move.l    D2,-(A7)
                     956   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       957          move.l    D0,-(A7)
00000C0C  4EB8 0B68  958          jsr       __getch
00000C10  2200       959          move.l    D0,D1
00000C12  201F       960          move.l    (A7)+,D0
00000C14  2F01       961          move.l    D1,-(A7)
00000C16  4EB8 0BD2  962          jsr       _xtod
00000C1A  584F       963          addq.w    #4,A7
00000C1C  C0BC 0000  964          and.l     #255,D0
00000C20  00FF      
00000C22  E980       965          asl.l     #4,D0
00000C24  2F00       966          move.l    D0,-(A7)
00000C26  2F01       967          move.l    D1,-(A7)
00000C28  4EB8 0B68  968          jsr       __getch
00000C2C  221F       969          move.l    (A7)+,D1
00000C2E  2F00       970          move.l    D0,-(A7)
00000C30  4EB8 0BD2  971          jsr       _xtod
00000C34  584F       972          addq.w    #4,A7
00000C36  2200       973          move.l    D0,D1
00000C38  201F       974          move.l    (A7)+,D0
00000C3A  C2BC 0000  975          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       976          or.l      D1,D0
00000C42  2400       977          move.l    D0,D2
                     978   ; if (CheckSumPtr)
00000C44  4AAE 0008  979          tst.l     8(A6)
00000C48  6706       980          beq.s     Get2HexDigits_1
                     981   ; *CheckSumPtr += i;
00000C4A  206E 0008  982          move.l    8(A6),A0
00000C4E  D510       983          add.b     D2,(A0)
                     984   Get2HexDigits_1:
                     985   ; return i;
00000C50  2002       986          move.l    D2,D0
00000C52  241F       987          move.l    (A7)+,D2
00000C54  4E5E       988          unlk      A6
00000C56  4E75       989          rts
                     990   ; }
                     991   ; int Get4HexDigits(char* CheckSumPtr)
                     992   ; {
                     993   _Get4HexDigits:
00000C58  4E56 0000  994          link      A6,#0
                     995   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  996          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  997          jsr       _Get2HexDigits
00000C64  584F       998          addq.w    #4,A7
00000C66  E180       999          asl.l     #8,D0
00000C68  2F00      1000          move.l    D0,-(A7)
00000C6A  2F2E 0008 1001          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04 1002          jsr       _Get2HexDigits
00000C72  584F      1003          addq.w    #4,A7
00000C74  2200      1004          move.l    D0,D1
00000C76  201F      1005          move.l    (A7)+,D0
00000C78  8081      1006          or.l      D1,D0
00000C7A  4E5E      1007          unlk      A6
00000C7C  4E75      1008          rts
                    1009   ; }
                    1010   ; int Get6HexDigits(char* CheckSumPtr)
                    1011   ; {
                    1012   _Get6HexDigits:
00000C7E  4E56 0000 1013          link      A6,#0
                    1014   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1015          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1016          jsr       _Get4HexDigits
00000C8A  584F      1017          addq.w    #4,A7
00000C8C  E180      1018          asl.l     #8,D0
00000C8E  2F00      1019          move.l    D0,-(A7)
00000C90  2F2E 0008 1020          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1021          jsr       _Get2HexDigits
00000C98  584F      1022          addq.w    #4,A7
00000C9A  2200      1023          move.l    D0,D1
00000C9C  201F      1024          move.l    (A7)+,D0
00000C9E  8081      1025          or.l      D1,D0
00000CA0  4E5E      1026          unlk      A6
00000CA2  4E75      1027          rts
                    1028   ; }
                    1029   ; int Get8HexDigits(char* CheckSumPtr)
                    1030   ; {
                    1031   _Get8HexDigits:
00000CA4  4E56 0000 1032          link      A6,#0
                    1033   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1034          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1035          jsr       _Get4HexDigits
00000CB0  584F      1036          addq.w    #4,A7
00000CB2  E180      1037          asl.l     #8,D0
00000CB4  E180      1038          asl.l     #8,D0
00000CB6  2F00      1039          move.l    D0,-(A7)
00000CB8  2F2E 0008 1040          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1041          jsr       _Get4HexDigits
00000CC0  584F      1042          addq.w    #4,A7
00000CC2  2200      1043          move.l    D0,D1
00000CC4  201F      1044          move.l    (A7)+,D0
00000CC6  8081      1045          or.l      D1,D0
00000CC8  4E5E      1046          unlk      A6
00000CCA  4E75      1047          rts
                    1048   ; }
                    1049   ; void DumpMemory(void)   // simple dump memory fn
                    1050   ; {
                    1051   _DumpMemory:
00000CCC  48E7 3C30 1052          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1053          lea       _printf.L,A2
00000CD4  324C      
00000CD6  47F9 0000 1054          lea       _putch.L,A3
00000CDA  313E      
                    1055   ; int i, j;
                    1056   ; unsigned char* RamPtr, c; // pointer to where the program is download (assumed)
                    1057   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue");
00000CDC  4879 0000 1058          pea       @lab3_5.L
00000CE0  3BBA      
00000CE2  4E92      1059          jsr       (A2)
00000CE4  584F      1060          addq.w    #4,A7
                    1061   ; printf("\r\nEnter Start Address: ");
00000CE6  4879 0000 1062          pea       @lab3_6.L
00000CEA  3BF4      
00000CEC  4E92      1063          jsr       (A2)
00000CEE  584F      1064          addq.w    #4,A7
                    1065   ; RamPtr = Get8HexDigits(0);
00000CF0  42A7      1066          clr.l     -(A7)
00000CF2  4EB8 0CA4 1067          jsr       _Get8HexDigits
00000CF6  584F      1068          addq.w    #4,A7
00000CF8  2600      1069          move.l    D0,D3
                    1070   ; while (1) {
                    1071   DumpMemory_1:
                    1072   ; for (i = 0; i < 16; i++) {
00000CFA  4285      1073          clr.l     D5
                    1074   DumpMemory_4:
00000CFC  0C85 0000 1075          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1076          bge       DumpMemory_6
                    1077   ; printf("\r\n%08x ", RamPtr);
00000D06  2F03      1078          move.l    D3,-(A7)
00000D08  4879 0000 1079          pea       @lab3_7.L
00000D0C  3C0C      
00000D0E  4E92      1080          jsr       (A2)
00000D10  504F      1081          addq.w    #8,A7
                    1082   ; for (j = 0; j < 16; j++) {
00000D12  4282      1083          clr.l     D2
                    1084   DumpMemory_7:
00000D14  0C82 0000 1085          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1086          bge.s     DumpMemory_9
                    1087   ; printf("%02X", RamPtr[j]);
00000D1C  2043      1088          move.l    D3,A0
00000D1E  1230 2800 1089          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1090          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1091          move.l    D1,-(A7)
00000D2A  4879 0000 1092          pea       @lab3_8.L
00000D2E  3C14      
00000D30  4E92      1093          jsr       (A2)
00000D32  504F      1094          addq.w    #8,A7
                    1095   ; putchar(' ');
00000D34  4878 0020 1096          pea       32
00000D38  4E93      1097          jsr       (A3)
00000D3A  584F      1098          addq.w    #4,A7
00000D3C  5282      1099          addq.l    #1,D2
00000D3E  60D4      1100          bra       DumpMemory_7
                    1101   DumpMemory_9:
                    1102   ; }
                    1103   ; // now display the data as ASCII at the end
                    1104   ; printf("  ");
00000D40  4879 0000 1105          pea       @lab3_9.L
00000D44  3C1A      
00000D46  4E92      1106          jsr       (A2)
00000D48  584F      1107          addq.w    #4,A7
                    1108   ; for (j = 0; j < 16; j++) {
00000D4A  4282      1109          clr.l     D2
                    1110   DumpMemory_10:
00000D4C  0C82 0000 1111          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1112          bge       DumpMemory_12
                    1113   ; c = ((char)(RamPtr[j]) & 0x7f);
00000D56  2043      1114          move.l    D3,A0
00000D58  1030 2800 1115          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1116          and.b     #127,D0
00000D60  1800      1117          move.b    D0,D4
                    1118   ; if ((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1119          cmp.b     #127,D4
00000D66  6206      1120          bhi.s     DumpMemory_15
00000D68  0C04 0020 1121          cmp.b     #32,D4
00000D6C  640A      1122          bhs.s     DumpMemory_13
                    1123   DumpMemory_15:
                    1124   ; putchar('.');
00000D6E  4878 002E 1125          pea       46
00000D72  4E93      1126          jsr       (A3)
00000D74  584F      1127          addq.w    #4,A7
00000D76  6012      1128          bra.s     DumpMemory_14
                    1129   DumpMemory_13:
                    1130   ; else
                    1131   ; putchar(RamPtr[j]);
00000D78  2043      1132          move.l    D3,A0
00000D7A  1230 2800 1133          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1134          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1135          move.l    D1,-(A7)
00000D86  4E93      1136          jsr       (A3)
00000D88  584F      1137          addq.w    #4,A7
                    1138   DumpMemory_14:
00000D8A  5282      1139          addq.l    #1,D2
00000D8C  60BE      1140          bra       DumpMemory_10
                    1141   DumpMemory_12:
                    1142   ; }
                    1143   ; RamPtr = RamPtr + 16;
00000D8E  0683 0000 1144          add.l     #16,D3
00000D92  0010      
00000D94  5285      1145          addq.l    #1,D5
00000D96  6000 FF64 1146          bra       DumpMemory_4
                    1147   DumpMemory_6:
                    1148   ; }
                    1149   ; printf("\r\n");
00000D9A  4879 0000 1150          pea       @lab3_1.L
00000D9E  3B9C      
00000DA0  4E92      1151          jsr       (A2)
00000DA2  584F      1152          addq.w    #4,A7
                    1153   ; c = _getch();
00000DA4  4EB8 0B68 1154          jsr       __getch
00000DA8  1800      1155          move.b    D0,D4
                    1156   ; if (c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1157          cmp.b     #27,D4
00000DAE  6602      1158          bne.s     DumpMemory_16
                    1159   ; break;
00000DB0  6004      1160          bra.s     DumpMemory_3
                    1161   DumpMemory_16:
00000DB2  6000 FF46 1162          bra       DumpMemory_1
                    1163   DumpMemory_3:
00000DB6  4CDF 0C3C 1164          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1165          rts
                    1166   ; }
                    1167   ; }
                    1168   ; void FillMemory()
                    1169   ; {
                    1170   _FillMemory:
00000DBC  48E7 3820 1171          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1172          lea       _printf.L,A2
00000DC4  324C      
                    1173   ; char* StartRamPtr, * EndRamPtr;
                    1174   ; unsigned char FillData;
                    1175   ; printf("\r\nFill Memory Block");
00000DC6  4879 0000 1176          pea       @lab3_10.L
00000DCA  3C1E      
00000DCC  4E92      1177          jsr       (A2)
00000DCE  584F      1178          addq.w    #4,A7
                    1179   ; printf("\r\nEnter Start Address: ");
00000DD0  4879 0000 1180          pea       @lab3_6.L
00000DD4  3BF4      
00000DD6  4E92      1181          jsr       (A2)
00000DD8  584F      1182          addq.w    #4,A7
                    1183   ; StartRamPtr = Get8HexDigits(0);
00000DDA  42A7      1184          clr.l     -(A7)
00000DDC  4EB8 0CA4 1185          jsr       _Get8HexDigits
00000DE0  584F      1186          addq.w    #4,A7
00000DE2  2400      1187          move.l    D0,D2
                    1188   ; printf("\r\nEnter End Address: ");
00000DE4  4879 0000 1189          pea       @lab3_11.L
00000DE8  3C32      
00000DEA  4E92      1190          jsr       (A2)
00000DEC  584F      1191          addq.w    #4,A7
                    1192   ; EndRamPtr = Get8HexDigits(0);
00000DEE  42A7      1193          clr.l     -(A7)
00000DF0  4EB8 0CA4 1194          jsr       _Get8HexDigits
00000DF4  584F      1195          addq.w    #4,A7
00000DF6  2800      1196          move.l    D0,D4
                    1197   ; printf("\r\nEnter Fill Data: ");
00000DF8  4879 0000 1198          pea       @lab3_12.L
00000DFC  3C48      
00000DFE  4E92      1199          jsr       (A2)
00000E00  584F      1200          addq.w    #4,A7
                    1201   ; FillData = Get2HexDigits(0);
00000E02  42A7      1202          clr.l     -(A7)
00000E04  4EB8 0C04 1203          jsr       _Get2HexDigits
00000E08  584F      1204          addq.w    #4,A7
00000E0A  1600      1205          move.b    D0,D3
                    1206   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00000E0C  C6BC 0000 1207          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1208          move.l    D3,-(A7)
00000E14  2F04      1209          move.l    D4,-(A7)
00000E16  2F02      1210          move.l    D2,-(A7)
00000E18  4879 0000 1211          pea       @lab3_13.L
00000E1C  3C5C      
00000E1E  4E92      1212          jsr       (A2)
00000E20  DEFC 0010 1213          add.w     #16,A7
                    1214   ; while (StartRamPtr < EndRamPtr)
                    1215   FillMemory_1:
00000E24  B484      1216          cmp.l     D4,D2
00000E26  6408      1217          bhs.s     FillMemory_3
                    1218   ; *StartRamPtr++ = FillData;
00000E28  2042      1219          move.l    D2,A0
00000E2A  5282      1220          addq.l    #1,D2
00000E2C  1083      1221          move.b    D3,(A0)
00000E2E  60F4      1222          bra       FillMemory_1
                    1223   FillMemory_3:
00000E30  4CDF 041C 1224          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1225          rts
                    1226   ; }
                    1227   ; void Load_SRecordFile()
                    1228   ; {
                    1229   _Load_SRecordFile:
00000E36  4E56 FFDC 1230          link      A6,#-36
00000E3A  48E7 3F3C 1231          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1232          lea       -6(A6),A2
00000E42  47F8 0C04 1233          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1234          lea       _printf.L,A4
00000E4A  324C      
                    1235   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0;
00000E4C  42AE FFEE 1236          clr.l     -18(A6)
00000E50  3A7C 0000 1237          move.w    #0,A5
                    1238   ; int result, ByteCount;
                    1239   ; char c, CheckSum, ReadCheckSum, HeaderType;
                    1240   ; char* RamPtr;                          // pointer to Memory where downloaded program will be stored
                    1241   ; LoadFailed = 0;                        //assume LOAD operation will pass
00000E54  7E00      1242          moveq     #0,D7
                    1243   ; AddressFail = 0;
00000E56  42AE FFEA 1244          clr.l     -22(A6)
                    1245   ; Echo = 0;                              // don't echo S records during download
00000E5A  42B9 0B00 1246          clr.l     _Echo.L
00000E5E  00E0      
                    1247   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n");
00000E60  4879 0000 1248          pea       @lab3_14.L
00000E64  3C8C      
00000E66  4E94      1249          jsr       (A4)
00000E68  584F      1250          addq.w    #4,A7
                    1251   ; while (1) {
                    1252   Load_SRecordFile_1:
                    1253   ; CheckSum = 0;
00000E6A  4212      1254          clr.b     (A2)
                    1255   ; do {
                    1256   Load_SRecordFile_4:
                    1257   ; c = toupper(_getch());
00000E6C  2F00      1258          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1259          jsr       __getch
00000E72  2200      1260          move.l    D0,D1
00000E74  201F      1261          move.l    (A7)+,D0
00000E76  2F01      1262          move.l    D1,-(A7)
00000E78  4EB9 0000 1263          jsr       _toupper
00000E7C  3220      
00000E7E  584F      1264          addq.w    #4,A7
00000E80  1C00      1265          move.b    D0,D6
                    1266   ; if (c == 0x1b)      // if break
00000E82  0C06 001B 1267          cmp.b     #27,D6
00000E86  6604      1268          bne.s     Load_SRecordFile_6
                    1269   ; return;
00000E88  6000 0132 1270          bra       Load_SRecordFile_8
                    1271   Load_SRecordFile_6:
00000E8C  0C06 0053 1272          cmp.b     #83,D6
00000E90  66DA      1273          bne       Load_SRecordFile_4
                    1274   ; } while (c != (char)('S'));   // wait for S start of header
                    1275   ; HeaderType = _getch();
00000E92  4EB8 0B68 1276          jsr       __getch
00000E96  1600      1277          move.b    D0,D3
                    1278   ; if (HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1279          cmp.b     #48,D3
00000E9C  6706      1280          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1281          cmp.b     #53,D3
00000EA2  6604      1282          bne.s     Load_SRecordFile_9
                    1283   Load_SRecordFile_11:
                    1284   ; continue;
00000EA4  6000 00D2 1285          bra       Load_SRecordFile_23
                    1286   Load_SRecordFile_9:
                    1287   ; if (HeaderType >= (char)('7'))
00000EA8  0C03 0037 1288          cmp.b     #55,D3
00000EAC  6D04      1289          blt.s     Load_SRecordFile_12
                    1290   ; break;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1291          bra       Load_SRecordFile_3
                    1292   Load_SRecordFile_12:
                    1293   ; // get the bytecount
                    1294   ; ByteCount = Get2HexDigits(&CheckSum);
00000EB2  2F0A      1295          move.l    A2,-(A7)
00000EB4  4E93      1296          jsr       (A3)
00000EB6  584F      1297          addq.w    #4,A7
00000EB8  2D40 FFF6 1298          move.l    D0,-10(A6)
                    1299   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1300   ; if (HeaderType == (char)('1')) {
00000EBC  0C03 0031 1301          cmp.b     #49,D3
00000EC0  660E      1302          bne.s     Load_SRecordFile_14
                    1303   ; AddressSize = 2;       // 2 byte address
00000EC2  7A02      1304          moveq     #2,D5
                    1305   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1306          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1307          jsr       _Get4HexDigits
00000ECA  584F      1308          addq.w    #4,A7
00000ECC  2800      1309          move.l    D0,D4
00000ECE  6020      1310          bra.s     Load_SRecordFile_17
                    1311   Load_SRecordFile_14:
                    1312   ; }
                    1313   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1314          cmp.b     #50,D3
00000ED4  660E      1315          bne.s     Load_SRecordFile_16
                    1316   ; AddressSize = 3;       // 3 byte address
00000ED6  7A03      1317          moveq     #3,D5
                    1318   ; Address = Get6HexDigits(&CheckSum);
00000ED8  2F0A      1319          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1320          jsr       _Get6HexDigits
00000EDE  584F      1321          addq.w    #4,A7
00000EE0  2800      1322          move.l    D0,D4
00000EE2  600C      1323          bra.s     Load_SRecordFile_17
                    1324   Load_SRecordFile_16:
                    1325   ; }
                    1326   ; else {
                    1327   ; AddressSize = 4;       // 4 byte address
00000EE4  7A04      1328          moveq     #4,D5
                    1329   ; Address = Get8HexDigits(&CheckSum);
00000EE6  2F0A      1330          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1331          jsr       _Get8HexDigits
00000EEC  584F      1332          addq.w    #4,A7
00000EEE  2800      1333          move.l    D0,D4
                    1334   Load_SRecordFile_17:
                    1335   ; }
                    1336   ; RamPtr = (char*)(Address);                            // point to download area
00000EF0  2D44 FFFC 1337          move.l    D4,-4(A6)
                    1338   ; NumDataBytesToRead = ByteCount - AddressSize - 1;
00000EF4  202E FFF6 1339          move.l    -10(A6),D0
00000EF8  9085      1340          sub.l     D5,D0
00000EFA  5380      1341          subq.l    #1,D0
00000EFC  2D40 FFE2 1342          move.l    D0,-30(A6)
                    1343   ; for (i = 0; i < NumDataBytesToRead; i++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1344          clr.l     D2
                    1345   Load_SRecordFile_18:
00000F02  B4AE FFE2 1346          cmp.l     -30(A6),D2
00000F06  6C1E      1347          bge.s     Load_SRecordFile_20
                    1348   ; DataByte = Get2HexDigits(&CheckSum);
00000F08  2F0A      1349          move.l    A2,-(A7)
00000F0A  4E93      1350          jsr       (A3)
00000F0C  584F      1351          addq.w    #4,A7
00000F0E  2D40 FFDE 1352          move.l    D0,-34(A6)
                    1353   ; *RamPtr++ = DataByte;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1354          move.l    -34(A6),D0
00000F16  206E FFFC 1355          move.l    -4(A6),A0
00000F1A  52AE FFFC 1356          addq.l    #1,-4(A6)
00000F1E  1080      1357          move.b    D0,(A0)
                    1358   ; ByteTotal++;
00000F20  524D      1359          addq.w    #1,A5
00000F22  5282      1360          addq.l    #1,D2
00000F24  60DC      1361          bra       Load_SRecordFile_18
                    1362   Load_SRecordFile_20:
                    1363   ; }
                    1364   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1365   ; ReadCheckSum = Get2HexDigits(0);
00000F26  42A7      1366          clr.l     -(A7)
00000F28  4E93      1367          jsr       (A3)
00000F2A  584F      1368          addq.w    #4,A7
00000F2C  1D40 FFFB 1369          move.b    D0,-5(A6)
                    1370   ; if ((~CheckSum & 0Xff) != (ReadCheckSum & 0Xff)) {
00000F30  1012      1371          move.b    (A2),D0
00000F32  4600      1372          not.b     D0
00000F34  4880      1373          ext.w     D0
00000F36  C07C 00FF 1374          and.w     #255,D0
00000F3A  122E FFFB 1375          move.b    -5(A6),D1
00000F3E  4881      1376          ext.w     D1
00000F40  C27C 00FF 1377          and.w     #255,D1
00000F44  B041      1378          cmp.w     D1,D0
00000F46  6708      1379          beq.s     Load_SRecordFile_21
                    1380   ; LoadFailed = 1;
00000F48  7E01      1381          moveq     #1,D7
                    1382   ; FailedAddress = Address;
00000F4A  2D44 FFE6 1383          move.l    D4,-26(A6)
                    1384   ; break;
00000F4E  602C      1385          bra.s     Load_SRecordFile_3
                    1386   Load_SRecordFile_21:
                    1387   ; }
                    1388   ; SRecordCount++;
00000F50  52AE FFEE 1389          addq.l    #1,-18(A6)
                    1390   ; // display feedback on progress
                    1391   ; if (SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1392          move.l    -18(A6),-(A7)
00000F58  4878 0019 1393          pea       25
00000F5C  4EB9 0000 1394          jsr       LDIV
00000F60  3072      
00000F62  202F 0004 1395          move.l    4(A7),D0
00000F66  504F      1396          addq.w    #8,A7
00000F68  4A80      1397          tst.l     D0
00000F6A  660C      1398          bne.s     Load_SRecordFile_23
                    1399   ; putchar('.');
00000F6C  4878 002E 1400          pea       46
00000F70  4EB9 0000 1401          jsr       _putch
00000F74  313E      
00000F76  584F      1402          addq.w    #4,A7
                    1403   Load_SRecordFile_23:
00000F78  6000 FEF0 1404          bra       Load_SRecordFile_1
                    1405   Load_SRecordFile_3:
                    1406   ; }
                    1407   ; if (LoadFailed == 1) {
00000F7C  0C87 0000 1408          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1409          bne.s     Load_SRecordFile_25
                    1410   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress);
00000F84  2F2E FFE6 1411          move.l    -26(A6),-(A7)
00000F88  4879 0000 1412          pea       @lab3_15.L
00000F8C  3CBC      
00000F8E  4E94      1413          jsr       (A4)
00000F90  504F      1414          addq.w    #8,A7
00000F92  600C      1415          bra.s     Load_SRecordFile_26
                    1416   Load_SRecordFile_25:
                    1417   ; }
                    1418   ; else
                    1419   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal);
00000F94  2F0D      1420          move.l    A5,-(A7)
00000F96  4879 0000 1421          pea       @lab3_16.L
00000F9A  3CE2      
00000F9C  4E94      1422          jsr       (A4)
00000F9E  504F      1423          addq.w    #8,A7
                    1424   Load_SRecordFile_26:
                    1425   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1426   ; for (i = 0; i < 400000; i++)
00000FA0  4282      1427          clr.l     D2
                    1428   Load_SRecordFile_27:
00000FA2  0C82 0006 1429          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1430          bge.s     Load_SRecordFile_29
00000FAA  5282      1431          addq.l    #1,D2
00000FAC  60F4      1432          bra       Load_SRecordFile_27
                    1433   Load_SRecordFile_29:
                    1434   ; ;
                    1435   ; FlushKeyboard();
00000FAE  4EB8 0BA6 1436          jsr       _FlushKeyboard
                    1437   ; Echo = 1;
00000FB2  23FC 0000 1438          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1439   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1440          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1441          unlk      A6
00000FC2  4E75      1442          rts
                    1443   ; }
                    1444   ; void MemoryChange(void)
                    1445   ; {
                    1446   _MemoryChange:
00000FC4  48E7 3820 1447          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1448          lea       _printf.L,A2
00000FCC  324C      
                    1449   ; unsigned char* RamPtr, c; // pointer to memory
                    1450   ; int Data;
                    1451   ; printf("\r\nExamine and Change Memory");
00000FCE  4879 0000 1452          pea       @lab3_17.L
00000FD2  3D04      
00000FD4  4E92      1453          jsr       (A2)
00000FD6  584F      1454          addq.w    #4,A7
                    1455   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change");
00000FD8  4879 0000 1456          pea       @lab3_18.L
00000FDC  3D20      
00000FDE  4E92      1457          jsr       (A2)
00000FE0  584F      1458          addq.w    #4,A7
                    1459   ; printf("\r\nEnter Address: ");
00000FE2  4879 0000 1460          pea       @lab3_19.L
00000FE6  3D66      
00000FE8  4E92      1461          jsr       (A2)
00000FEA  584F      1462          addq.w    #4,A7
                    1463   ; RamPtr = Get8HexDigits(0);
00000FEC  42A7      1464          clr.l     -(A7)
00000FEE  4EB8 0CA4 1465          jsr       _Get8HexDigits
00000FF2  584F      1466          addq.w    #4,A7
00000FF4  2600      1467          move.l    D0,D3
                    1468   ; while (1) {
                    1469   MemoryChange_1:
                    1470   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr);
00000FF6  2043      1471          move.l    D3,A0
00000FF8  1210      1472          move.b    (A0),D1
00000FFA  C2BC 0000 1473          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1474          move.l    D1,-(A7)
00001002  2F03      1475          move.l    D3,-(A7)
00001004  4879 0000 1476          pea       @lab3_20.L
00001008  3D78      
0000100A  4E92      1477          jsr       (A2)
0000100C  DEFC 000C 1478          add.w     #12,A7
                    1479   ; c = tolower(_getch());
00001010  2F00      1480          move.l    D0,-(A7)
00001012  4EB8 0B68 1481          jsr       __getch
00001016  2200      1482          move.l    D0,D1
00001018  201F      1483          move.l    (A7)+,D0
0000101A  2F01      1484          move.l    D1,-(A7)
0000101C  4EB9 0000 1485          jsr       _tolower
00001020  31AA      
00001022  584F      1486          addq.w    #4,A7
00001024  1400      1487          move.b    D0,D2
                    1488   ; if (c == (char)(0x1b))
00001026  0C02 001B 1489          cmp.b     #27,D2
0000102A  6604      1490          bne.s     MemoryChange_4
                    1491   ; return;                                // abort on escape
0000102C  6000 0090 1492          bra       MemoryChange_6
                    1493   MemoryChange_4:
                    1494   ; else if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1495          cmp.b     #48,D2
00001034  6506      1496          blo.s     MemoryChange_10
00001036  0C02 0039 1497          cmp.b     #57,D2
0000103A  6310      1498          bls.s     MemoryChange_9
                    1499   MemoryChange_10:
0000103C  0C02 0061 1500          cmp.b     #97,D2
00001040  6500 006E 1501          blo       MemoryChange_7
00001044  0C02 0066 1502          cmp.b     #102,D2
00001048  6200 0066 1503          bhi       MemoryChange_7
                    1504   MemoryChange_9:
                    1505   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1506          and.l     #255,D2
00001050  00FF      
00001052  2F02      1507          move.l    D2,-(A7)
00001054  4EB8 0BD2 1508          jsr       _xtod
00001058  584F      1509          addq.w    #4,A7
0000105A  C0BC 0000 1510          and.l     #255,D0
0000105E  00FF      
00001060  E980      1511          asl.l     #4,D0
00001062  2F00      1512          move.l    D0,-(A7)
00001064  2F01      1513          move.l    D1,-(A7)
00001066  4EB8 0B68 1514          jsr       __getch
0000106A  221F      1515          move.l    (A7)+,D1
0000106C  2F00      1516          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1517          jsr       _xtod
00001072  584F      1518          addq.w    #4,A7
00001074  2200      1519          move.l    D0,D1
00001076  201F      1520          move.l    (A7)+,D0
00001078  C2BC 0000 1521          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1522          or.l      D1,D0
00001080  2800      1523          move.l    D0,D4
                    1524   ; *RamPtr = (char)(Data);
00001082  2043      1525          move.l    D3,A0
00001084  1084      1526          move.b    D4,(A0)
                    1527   ; if (*RamPtr != Data) {
00001086  2043      1528          move.l    D3,A0
00001088  1010      1529          move.b    (A0),D0
0000108A  C0BC 0000 1530          and.l     #255,D0
0000108E  00FF      
00001090  B084      1531          cmp.l     D4,D0
00001092  671A      1532          beq.s     MemoryChange_11
                    1533   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr);
00001094  2043      1534          move.l    D3,A0
00001096  1210      1535          move.b    (A0),D1
00001098  C2BC 0000 1536          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1537          move.l    D1,-(A7)
000010A0  2F04      1538          move.l    D4,-(A7)
000010A2  4879 0000 1539          pea       @lab3_21.L
000010A6  3D8A      
000010A8  4E92      1540          jsr       (A2)
000010AA  DEFC 000C 1541          add.w     #12,A7
                    1542   MemoryChange_11:
000010AE  6008      1543          bra.s     MemoryChange_13
                    1544   MemoryChange_7:
                    1545   ; }
                    1546   ; }
                    1547   ; else if (c == (char)('-'))
000010B0  0C02 002D 1548          cmp.b     #45,D2
000010B4  6602      1549          bne.s     MemoryChange_13
                    1550   ; RamPtr -= 2; ;
000010B6  5583      1551          subq.l    #2,D3
                    1552   MemoryChange_13:
                    1553   ; RamPtr++;
000010B8  5283      1554          addq.l    #1,D3
000010BA  6000 FF3A 1555          bra       MemoryChange_1
                    1556   MemoryChange_6:
000010BE  4CDF 041C 1557          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1558          rts
                    1559   ; }
                    1560   ; }
                    1561   ; /******************************************************************************************
                    1562   ; ** The following code is for the SPI controller
                    1563   ; *******************************************************************************************/
                    1564   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1565   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1566   ; int TestForSPITransmitDataComplete(void)    {
                    1567   _TestForSPITransmitDataComplete:
000010C4  4E56 FFFC 1568          link      A6,#-4
                    1569   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1570   ; int SPIF = SPI_Status >> 7;
000010C8  1039 0040 1571          move.b    4227106,D0
000010CC  8022      
000010CE  C0BC 0000 1572          and.l     #255,D0
000010D2  00FF      
000010D4  EE88      1573          lsr.l     #7,D0
000010D6  2D40 FFFC 1574          move.l    D0,-4(A6)
                    1575   ; return SPIF;
000010DA  202E FFFC 1576          move.l    -4(A6),D0
000010DE  4E5E      1577          unlk      A6
000010E0  4E75      1578          rts
                    1579   ; }
                    1580   ; /************************************************************************************
                    1581   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1582   ; ************************************************************************************/
                    1583   ; void SPI_Init(void)
                    1584   ; {
                    1585   _SPI_Init:
                    1586   ; //TODO
                    1587   ; //
                    1588   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1589   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1590   ; //
                    1591   ; // Here are some settings we want to create
                    1592   ; //
                    1593   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    1594   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1595   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    1596   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1597   ; SPI_Control = (unsigned char) 0x53; // 0101_0011
000010E2  13FC 0053 1598          move.b    #83,4227104
000010E6  0040 8020 
                    1599   ; SPI_Ext = (unsigned char) 0x00; // 00_0000_00
000010EA  4239 0040 1600          clr.b     4227110
000010EE  8026      
                    1601   ; Disable_SPI_CS();
000010F0  13FC 00FF 1602          move.b    #255,4227112
000010F4  0040 8028 
                    1603   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
000010F8  13FC 00C0 1604          move.b    #192,4227106
000010FC  0040 8022 
00001100  4E75      1605          rts
                    1606   ; }
                    1607   ; /************************************************************************************
                    1608   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1609   ; ************************************************************************************/
                    1610   ; void WaitForSPITransmitComplete(void)
                    1611   ; {
                    1612   _WaitForSPITransmitComplete:
                    1613   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1614   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1615   ; // just in case they were set
                    1616   ; while(!TestForSPITransmitDataComplete()) {}
                    1617   WaitForSPITransmitComplete_1:
00001102  4EB8 10C4 1618          jsr       _TestForSPITransmitDataComplete
00001106  4A80      1619          tst.l     D0
00001108  6602      1620          bne.s     WaitForSPITransmitComplete_3
0000110A  60F6      1621          bra       WaitForSPITransmitComplete_1
                    1622   WaitForSPITransmitComplete_3:
                    1623   ; SPI_Status = (unsigned char) 0xC0; // 1100_0000
0000110C  13FC 00C0 1624          move.b    #192,4227106
00001110  0040 8022 
00001114  4E75      1625          rts
                    1626   ; }
                    1627   ; /************************************************************************************
                    1628   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1629   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1630   ; ************************************************************************************/
                    1631   ; int WriteSPIChar(int c)
                    1632   ; {
                    1633   _WriteSPIChar:
00001116  4E56 FFFC 1634          link      A6,#-4
                    1635   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1636   ; // wait for completion of transmission
                    1637   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1638   ; // by reading fom the SPI controller Data Register.
                    1639   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1640   ; //
                    1641   ; // modify '0' below to return back read byte from data register
                    1642   ; //
                    1643   ; int read_data;
                    1644   ; SPI_Data = c;
0000111A  202E 0008 1645          move.l    8(A6),D0
0000111E  13C0 0040 1646          move.b    D0,4227108
00001122  8024      
                    1647   ; WaitForSPITransmitComplete();
00001124  4EB8 1102 1648          jsr       _WaitForSPITransmitComplete
                    1649   ; read_data = SPI_Data;
00001128  1039 0040 1650          move.b    4227108,D0
0000112C  8024      
0000112E  C0BC 0000 1651          and.l     #255,D0
00001132  00FF      
00001134  2D40 FFFC 1652          move.l    D0,-4(A6)
                    1653   ; return read_data;            
00001138  202E FFFC 1654          move.l    -4(A6),D0
0000113C  4E5E      1655          unlk      A6
0000113E  4E75      1656          rts
                    1657   ; }
                    1658   ; /*******************************************************************
                    1659   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1660   ; ********************************************************************/
                    1661   ; void ProgramFlashChip(void)
                    1662   ; {
                    1663   _ProgramFlashChip:
00001140  4E75      1664          rts
                    1665   ; //
                    1666   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1667   ; // TODO : then verify by reading it back and comparing to memory
                    1668   ; //
                    1669   ; }
                    1670   ; /*************************************************************************
                    1671   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1672   ; **************************************************************************/
                    1673   ; void LoadFromFlashChip(void)
                    1674   ; {
                    1675   _LoadFromFlashChip:
                    1676   ; printf("\r\nLoading Program From SPI Flash....");
00001142  4879 0000 1677          pea       @lab3_22.L
00001146  3DBE      
00001148  4EB9 0000 1678          jsr       _printf
0000114C  324C      
0000114E  584F      1679          addq.w    #4,A7
00001150  4E75      1680          rts
                    1681   ; //
                    1682   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1683   ; //
                    1684   ; }
                    1685   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1686   ; // IMPORTANT
                    1687   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1688   ; // has to be done with an interrupt (IRQ Level 6)
                    1689   ; //
                    1690   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1691   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1692   ; //
                    1693   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1694   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1695   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1696   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1697   ; // program area
                    1698   ; //
                    1699   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1700   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1701   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1702   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1703   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1704   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1705   ; void DumpRegisters()
                    1706   ; {
                    1707   _DumpRegisters:
00001152  48E7 3F3C 1708          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001156  45F9 0000 1709          lea       _putch.L,A2
0000115A  313E      
0000115C  47F9 0000 1710          lea       _printf.L,A3
00001160  324C      
00001162  49F9 0B00 1711          lea       _SR.L,A4
00001166  012C      
00001168  4BF9 0B00 1712          lea       _WatchPointString.L,A5
0000116C  01C2      
                    1713   ; short i, x, j, k;
                    1714   ; unsigned char c, * BytePointer;
                    1715   ; // buld up strings for displaying watchpoints
                    1716   ; for (x = 0; x < (short)(8); x++)
0000116E  4242      1717          clr.w     D2
                    1718   DumpRegisters_1:
00001170  0C42 0008 1719          cmp.w     #8,D2
00001174  6C00 01C6 1720          bge       DumpRegisters_3
                    1721   ; {
                    1722   ; if (WatchPointSetOrCleared[x] == 1)
00001178  48C2      1723          ext.l     D2
0000117A  2002      1724          move.l    D2,D0
0000117C  E588      1725          lsl.l     #2,D0
0000117E  41F9 0B00 1726          lea       _WatchPointSetOrCleared.L,A0
00001182  01A2      
00001184  2030 0800 1727          move.l    0(A0,D0.L),D0
00001188  0C80 0000 1728          cmp.l     #1,D0
0000118C  0001      
0000118E  6600 0186 1729          bne       DumpRegisters_4
                    1730   ; {
                    1731   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]);
00001192  48C2      1732          ext.l     D2
00001194  2202      1733          move.l    D2,D1
00001196  E589      1734          lsl.l     #2,D1
00001198  41F9 0B00 1735          lea       _WatchPointAddress.L,A0
0000119C  0182      
0000119E  2F30 1800 1736          move.l    0(A0,D1.L),-(A7)
000011A2  4879 0000 1737          pea       @lab3_23.L
000011A6  3DE4      
000011A8  220D      1738          move.l    A5,D1
000011AA  48C2      1739          ext.l     D2
000011AC  2F00      1740          move.l    D0,-(A7)
000011AE  2002      1741          move.l    D2,D0
000011B0  C1FC 0064 1742          muls      #100,D0
000011B4  D280      1743          add.l     D0,D1
000011B6  201F      1744          move.l    (A7)+,D0
000011B8  2F01      1745          move.l    D1,-(A7)
000011BA  4EB9 0000 1746          jsr       _sprintf
000011BE  31D6      
000011C0  DEFC 000C 1747          add.w     #12,A7
                    1748   ; BytePointer = (char*)(WatchPointAddress[x]);
000011C4  48C2      1749          ext.l     D2
000011C6  2002      1750          move.l    D2,D0
000011C8  E588      1751          lsl.l     #2,D0
000011CA  41F9 0B00 1752          lea       _WatchPointAddress.L,A0
000011CE  0182      
000011D0  2A30 0800 1753          move.l    0(A0,D0.L),D5
                    1754   ; for (j = 0; j < (short)(16); j += 2)
000011D4  4243      1755          clr.w     D3
                    1756   DumpRegisters_6:
000011D6  0C43 0010 1757          cmp.w     #16,D3
000011DA  6C00 0082 1758          bge       DumpRegisters_8
                    1759   ; {
                    1760   ; for (k = 0; k < (short)(2); k++)
000011DE  4246      1761          clr.w     D6
                    1762   DumpRegisters_9:
000011E0  0C46 0002 1763          cmp.w     #2,D6
000011E4  6C00 0052 1764          bge       DumpRegisters_11
                    1765   ; {
                    1766   ; sprintf(TempString, "%02X", BytePointer[j + k]);
000011E8  2045      1767          move.l    D5,A0
000011EA  48C3      1768          ext.l     D3
000011EC  2203      1769          move.l    D3,D1
000011EE  48C6      1770          ext.l     D6
000011F0  D286      1771          add.l     D6,D1
000011F2  1230 1800 1772          move.b    0(A0,D1.L),D1
000011F6  C2BC 0000 1773          and.l     #255,D1
000011FA  00FF      
000011FC  2F01      1774          move.l    D1,-(A7)
000011FE  4879 0000 1775          pea       @lab3_8.L
00001202  3C14      
00001204  4879 0B00 1776          pea       _TempString.L
00001208  04E2      
0000120A  4EB9 0000 1777          jsr       _sprintf
0000120E  31D6      
00001210  DEFC 000C 1778          add.w     #12,A7
                    1779   ; strcat(WatchPointString[x], TempString);
00001214  4879 0B00 1780          pea       _TempString.L
00001218  04E2      
0000121A  220D      1781          move.l    A5,D1
0000121C  48C2      1782          ext.l     D2
0000121E  2F00      1783          move.l    D0,-(A7)
00001220  2002      1784          move.l    D2,D0
00001222  C1FC 0064 1785          muls      #100,D0
00001226  D280      1786          add.l     D0,D1
00001228  201F      1787          move.l    (A7)+,D0
0000122A  2F01      1788          move.l    D1,-(A7)
0000122C  4EB9 0000 1789          jsr       _strcat
00001230  320A      
00001232  504F      1790          addq.w    #8,A7
00001234  5246      1791          addq.w    #1,D6
00001236  60A8      1792          bra       DumpRegisters_9
                    1793   DumpRegisters_11:
                    1794   ; }
                    1795   ; strcat(WatchPointString[x], " ");
00001238  4879 0000 1796          pea       @lab3_24.L
0000123C  3DEC      
0000123E  220D      1797          move.l    A5,D1
00001240  48C2      1798          ext.l     D2
00001242  2F00      1799          move.l    D0,-(A7)
00001244  2002      1800          move.l    D2,D0
00001246  C1FC 0064 1801          muls      #100,D0
0000124A  D280      1802          add.l     D0,D1
0000124C  201F      1803          move.l    (A7)+,D0
0000124E  2F01      1804          move.l    D1,-(A7)
00001250  4EB9 0000 1805          jsr       _strcat
00001254  320A      
00001256  504F      1806          addq.w    #8,A7
00001258  5443      1807          addq.w    #2,D3
0000125A  6000 FF7A 1808          bra       DumpRegisters_6
                    1809   DumpRegisters_8:
                    1810   ; }
                    1811   ; strcat(WatchPointString[x], "  ");
0000125E  4879 0000 1812          pea       @lab3_9.L
00001262  3C1A      
00001264  220D      1813          move.l    A5,D1
00001266  48C2      1814          ext.l     D2
00001268  2F00      1815          move.l    D0,-(A7)
0000126A  2002      1816          move.l    D2,D0
0000126C  C1FC 0064 1817          muls      #100,D0
00001270  D280      1818          add.l     D0,D1
00001272  201F      1819          move.l    (A7)+,D0
00001274  2F01      1820          move.l    D1,-(A7)
00001276  4EB9 0000 1821          jsr       _strcat
0000127A  320A      
0000127C  504F      1822          addq.w    #8,A7
                    1823   ; BytePointer = (char*)(WatchPointAddress[x]);
0000127E  48C2      1824          ext.l     D2
00001280  2002      1825          move.l    D2,D0
00001282  E588      1826          lsl.l     #2,D0
00001284  41F9 0B00 1827          lea       _WatchPointAddress.L,A0
00001288  0182      
0000128A  2A30 0800 1828          move.l    0(A0,D0.L),D5
                    1829   ; for (j = 0; j < (short)(16); j++)
0000128E  4243      1830          clr.w     D3
                    1831   DumpRegisters_12:
00001290  0C43 0010 1832          cmp.w     #16,D3
00001294  6C00 007E 1833          bge       DumpRegisters_14
                    1834   ; {
                    1835   ; c = ((char)(BytePointer[j]) & 0x7f);
00001298  2045      1836          move.l    D5,A0
0000129A  48C3      1837          ext.l     D3
0000129C  1030 3800 1838          move.b    0(A0,D3.L),D0
000012A0  C03C 007F 1839          and.b     #127,D0
000012A4  1E00      1840          move.b    D0,D7
                    1841   ; if ((c > (char)(0x7f)) || (c < (char)(' ')))
000012A6  0C07 007F 1842          cmp.b     #127,D7
000012AA  6206      1843          bhi.s     DumpRegisters_17
000012AC  0C07 0020 1844          cmp.b     #32,D7
000012B0  6416      1845          bhs.s     DumpRegisters_15
                    1846   DumpRegisters_17:
                    1847   ; sprintf(TempString, ".");
000012B2  4879 0000 1848          pea       @lab3_25.L
000012B6  3DEE      
000012B8  4879 0B00 1849          pea       _TempString.L
000012BC  04E2      
000012BE  4EB9 0000 1850          jsr       _sprintf
000012C2  31D6      
000012C4  504F      1851          addq.w    #8,A7
000012C6  6026      1852          bra.s     DumpRegisters_16
                    1853   DumpRegisters_15:
                    1854   ; else
                    1855   ; sprintf(TempString, "%c", BytePointer[j]);
000012C8  2045      1856          move.l    D5,A0
000012CA  48C3      1857          ext.l     D3
000012CC  1230 3800 1858          move.b    0(A0,D3.L),D1
000012D0  C2BC 0000 1859          and.l     #255,D1
000012D4  00FF      
000012D6  2F01      1860          move.l    D1,-(A7)
000012D8  4879 0000 1861          pea       @lab3_26.L
000012DC  3DF0      
000012DE  4879 0B00 1862          pea       _TempString.L
000012E2  04E2      
000012E4  4EB9 0000 1863          jsr       _sprintf
000012E8  31D6      
000012EA  DEFC 000C 1864          add.w     #12,A7
                    1865   DumpRegisters_16:
                    1866   ; strcat(WatchPointString[x], TempString);
000012EE  4879 0B00 1867          pea       _TempString.L
000012F2  04E2      
000012F4  220D      1868          move.l    A5,D1
000012F6  48C2      1869          ext.l     D2
000012F8  2F00      1870          move.l    D0,-(A7)
000012FA  2002      1871          move.l    D2,D0
000012FC  C1FC 0064 1872          muls      #100,D0
00001300  D280      1873          add.l     D0,D1
00001302  201F      1874          move.l    (A7)+,D0
00001304  2F01      1875          move.l    D1,-(A7)
00001306  4EB9 0000 1876          jsr       _strcat
0000130A  320A      
0000130C  504F      1877          addq.w    #8,A7
0000130E  5243      1878          addq.w    #1,D3
00001310  6000 FF7E 1879          bra       DumpRegisters_12
                    1880   DumpRegisters_14:
00001314  6020      1881          bra.s     DumpRegisters_5
                    1882   DumpRegisters_4:
                    1883   ; }
                    1884   ; }
                    1885   ; else
                    1886   ; strcpy(WatchPointString[x], "");
00001316  4879 0000 1887          pea       @lab3_27.L
0000131A  3DF4      
0000131C  220D      1888          move.l    A5,D1
0000131E  48C2      1889          ext.l     D2
00001320  2F00      1890          move.l    D0,-(A7)
00001322  2002      1891          move.l    D2,D0
00001324  C1FC 0064 1892          muls      #100,D0
00001328  D280      1893          add.l     D0,D1
0000132A  201F      1894          move.l    (A7)+,D0
0000132C  2F01      1895          move.l    D1,-(A7)
0000132E  4EB9 0000 1896          jsr       _strcpy
00001332  3050      
00001334  504F      1897          addq.w    #8,A7
                    1898   DumpRegisters_5:
00001336  5242      1899          addq.w    #1,D2
00001338  6000 FE36 1900          bra       DumpRegisters_1
                    1901   DumpRegisters_3:
                    1902   ; }
                    1903   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X", d0, a0);
0000133C  2F39 0B00 1904          move.l    _a0.L,-(A7)
00001340  0104      
00001342  2F39 0B00 1905          move.l    _d0.L,-(A7)
00001346  00E4      
00001348  4879 0000 1906          pea       @lab3_28.L
0000134C  3DF6      
0000134E  4E93      1907          jsr       (A3)
00001350  DEFC 000C 1908          add.w     #12,A7
                    1909   ; printf("\r\n D1 = $%08X  A1 = $%08X", d1, a1);
00001354  2F39 0B00 1910          move.l    _a1.L,-(A7)
00001358  0108      
0000135A  2F39 0B00 1911          move.l    _d1.L,-(A7)
0000135E  00E8      
00001360  4879 0000 1912          pea       @lab3_29.L
00001364  3E12      
00001366  4E93      1913          jsr       (A3)
00001368  DEFC 000C 1914          add.w     #12,A7
                    1915   ; printf("\r\n D2 = $%08X  A2 = $%08X", d2, a2);
0000136C  2F39 0B00 1916          move.l    _a2.L,-(A7)
00001370  010C      
00001372  2F39 0B00 1917          move.l    _d2.L,-(A7)
00001376  00EC      
00001378  4879 0000 1918          pea       @lab3_30.L
0000137C  3E2C      
0000137E  4E93      1919          jsr       (A3)
00001380  DEFC 000C 1920          add.w     #12,A7
                    1921   ; printf("\r\n D3 = $%08X  A3 = $%08X", d3, a3);
00001384  2F39 0B00 1922          move.l    _a3.L,-(A7)
00001388  0110      
0000138A  2F39 0B00 1923          move.l    _d3.L,-(A7)
0000138E  00F0      
00001390  4879 0000 1924          pea       @lab3_31.L
00001394  3E46      
00001396  4E93      1925          jsr       (A3)
00001398  DEFC 000C 1926          add.w     #12,A7
                    1927   ; printf("\r\n D4 = $%08X  A4 = $%08X", d4, a4);
0000139C  2F39 0B00 1928          move.l    _a4.L,-(A7)
000013A0  0114      
000013A2  2F39 0B00 1929          move.l    _d4.L,-(A7)
000013A6  00F4      
000013A8  4879 0000 1930          pea       @lab3_32.L
000013AC  3E60      
000013AE  4E93      1931          jsr       (A3)
000013B0  DEFC 000C 1932          add.w     #12,A7
                    1933   ; printf("\r\n D5 = $%08X  A5 = $%08X", d5, a5);
000013B4  2F39 0B00 1934          move.l    _a5.L,-(A7)
000013B8  0118      
000013BA  2F39 0B00 1935          move.l    _d5.L,-(A7)
000013BE  00F8      
000013C0  4879 0000 1936          pea       @lab3_33.L
000013C4  3E7A      
000013C6  4E93      1937          jsr       (A3)
000013C8  DEFC 000C 1938          add.w     #12,A7
                    1939   ; printf("\r\n D6 = $%08X  A6 = $%08X", d6, a6);
000013CC  2F39 0B00 1940          move.l    _a6.L,-(A7)
000013D0  011C      
000013D2  2F39 0B00 1941          move.l    _d6.L,-(A7)
000013D6  00FC      
000013D8  4879 0000 1942          pea       @lab3_34.L
000013DC  3E94      
000013DE  4E93      1943          jsr       (A3)
000013E0  DEFC 000C 1944          add.w     #12,A7
                    1945   ; printf("\r\n D7 = $%08X  A7 = $%08X", d7, ((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP);
000013E4  3214      1946          move.w    (A4),D1
000013E6  C27C 2000 1947          and.w     #8192,D1
000013EA  0C41 2000 1948          cmp.w     #8192,D1
000013EE  6608      1949          bne.s     DumpRegisters_18
000013F0  2239 0B00 1950          move.l    _SSP.L,D1
000013F4  0124      
000013F6  6006      1951          bra.s     DumpRegisters_19
                    1952   DumpRegisters_18:
000013F8  2239 0B00 1953          move.l    _USP.L,D1
000013FC  0128      
                    1954   DumpRegisters_19:
000013FE  2F01      1955          move.l    D1,-(A7)
00001400  2F39 0B00 1956          move.l    _d7.L,-(A7)
00001404  0100      
00001406  4879 0000 1957          pea       @lab3_35.L
0000140A  3EAE      
0000140C  4E93      1958          jsr       (A3)
0000140E  DEFC 000C 1959          add.w     #12,A7
                    1960   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP);
00001412  2F39 0B00 1961          move.l    _USP.L,-(A7)
00001416  0128      
00001418  4879 0000 1962          pea       @lab3_36.L
0000141C  3EC8      
0000141E  4E93      1963          jsr       (A3)
00001420  504F      1964          addq.w    #8,A7
                    1965   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP);
00001422  2F39 0B00 1966          move.l    _SSP.L,-(A7)
00001426  0124      
00001428  4879 0000 1967          pea       @lab3_37.L
0000142C  3EE6      
0000142E  4E93      1968          jsr       (A3)
00001430  504F      1969          addq.w    #8,A7
                    1970   ; printf("\r\n SR = $%04X   ", SR);
00001432  3214      1971          move.w    (A4),D1
00001434  C2BC 0000 1972          and.l     #65535,D1
00001438  FFFF      
0000143A  2F01      1973          move.l    D1,-(A7)
0000143C  4879 0000 1974          pea       @lab3_38.L
00001440  3F08      
00001442  4E93      1975          jsr       (A3)
00001444  504F      1976          addq.w    #8,A7
                    1977   ; // display the status word in characters etc.
                    1978   ; printf("   [");
00001446  4879 0000 1979          pea       @lab3_39.L
0000144A  3F1A      
0000144C  4E93      1980          jsr       (A3)
0000144E  584F      1981          addq.w    #4,A7
                    1982   ; if ((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T'); else putchar('-');      // Trace bit(bit 15)
00001450  3014      1983          move.w    (A4),D0
00001452  C07C 8000 1984          and.w     #32768,D0
00001456  0C40 8000 1985          cmp.w     #32768,D0
0000145A  660A      1986          bne.s     DumpRegisters_20
0000145C  4878 0054 1987          pea       84
00001460  4E92      1988          jsr       (A2)
00001462  584F      1989          addq.w    #4,A7
00001464  6008      1990          bra.s     DumpRegisters_21
                    1991   DumpRegisters_20:
00001466  4878 002D 1992          pea       45
0000146A  4E92      1993          jsr       (A2)
0000146C  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_21:
                    1996   ; if ((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S'); else putchar('U');      // supervisor bit  (bit 13)
0000146E  3014      1997          move.w    (A4),D0
00001470  C07C 2000 1998          and.w     #8192,D0
00001474  0C40 2000 1999          cmp.w     #8192,D0
00001478  660A      2000          bne.s     DumpRegisters_22
0000147A  4878 0053 2001          pea       83
0000147E  4E92      2002          jsr       (A2)
00001480  584F      2003          addq.w    #4,A7
00001482  6008      2004          bra.s     DumpRegisters_23
                    2005   DumpRegisters_22:
00001484  4878 0055 2006          pea       85
00001488  4E92      2007          jsr       (A2)
0000148A  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_23:
                    2010   ; if ((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1'); else putchar('0');      // IRQ2 Bit (bit 10)
0000148C  3014      2011          move.w    (A4),D0
0000148E  C07C 0400 2012          and.w     #1024,D0
00001492  0C40 0400 2013          cmp.w     #1024,D0
00001496  660A      2014          bne.s     DumpRegisters_24
00001498  4878 0031 2015          pea       49
0000149C  4E92      2016          jsr       (A2)
0000149E  584F      2017          addq.w    #4,A7
000014A0  6008      2018          bra.s     DumpRegisters_25
                    2019   DumpRegisters_24:
000014A2  4878 0030 2020          pea       48
000014A6  4E92      2021          jsr       (A2)
000014A8  584F      2022          addq.w    #4,A7
                    2023   DumpRegisters_25:
                    2024   ; if ((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1'); else putchar('0');      // IRQ1 Bit (bit 9)
000014AA  3014      2025          move.w    (A4),D0
000014AC  C07C 0200 2026          and.w     #512,D0
000014B0  0C40 0200 2027          cmp.w     #512,D0
000014B4  660A      2028          bne.s     DumpRegisters_26
000014B6  4878 0031 2029          pea       49
000014BA  4E92      2030          jsr       (A2)
000014BC  584F      2031          addq.w    #4,A7
000014BE  6008      2032          bra.s     DumpRegisters_27
                    2033   DumpRegisters_26:
000014C0  4878 0030 2034          pea       48
000014C4  4E92      2035          jsr       (A2)
000014C6  584F      2036          addq.w    #4,A7
                    2037   DumpRegisters_27:
                    2038   ; if ((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1'); else putchar('0');      // IRQ0 Bit (bit 8)
000014C8  3014      2039          move.w    (A4),D0
000014CA  C07C 0100 2040          and.w     #256,D0
000014CE  0C40 0100 2041          cmp.w     #256,D0
000014D2  660A      2042          bne.s     DumpRegisters_28
000014D4  4878 0031 2043          pea       49
000014D8  4E92      2044          jsr       (A2)
000014DA  584F      2045          addq.w    #4,A7
000014DC  6008      2046          bra.s     DumpRegisters_29
                    2047   DumpRegisters_28:
000014DE  4878 0030 2048          pea       48
000014E2  4E92      2049          jsr       (A2)
000014E4  584F      2050          addq.w    #4,A7
                    2051   DumpRegisters_29:
                    2052   ; if ((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X'); else putchar('-');      // X Bit (bit 4)
000014E6  3014      2053          move.w    (A4),D0
000014E8  C07C 0010 2054          and.w     #16,D0
000014EC  0C40 0010 2055          cmp.w     #16,D0
000014F0  660A      2056          bne.s     DumpRegisters_30
000014F2  4878 0058 2057          pea       88
000014F6  4E92      2058          jsr       (A2)
000014F8  584F      2059          addq.w    #4,A7
000014FA  6008      2060          bra.s     DumpRegisters_31
                    2061   DumpRegisters_30:
000014FC  4878 002D 2062          pea       45
00001500  4E92      2063          jsr       (A2)
00001502  584F      2064          addq.w    #4,A7
                    2065   DumpRegisters_31:
                    2066   ; if ((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N'); else putchar('-');      // N Bit (bit 3)
00001504  3014      2067          move.w    (A4),D0
00001506  C07C 0008 2068          and.w     #8,D0
0000150A  0C40 0008 2069          cmp.w     #8,D0
0000150E  660A      2070          bne.s     DumpRegisters_32
00001510  4878 004E 2071          pea       78
00001514  4E92      2072          jsr       (A2)
00001516  584F      2073          addq.w    #4,A7
00001518  6008      2074          bra.s     DumpRegisters_33
                    2075   DumpRegisters_32:
0000151A  4878 002D 2076          pea       45
0000151E  4E92      2077          jsr       (A2)
00001520  584F      2078          addq.w    #4,A7
                    2079   DumpRegisters_33:
                    2080   ; if ((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z'); else putchar('-');      // Z Bit (bit 2)
00001522  3014      2081          move.w    (A4),D0
00001524  C07C 0004 2082          and.w     #4,D0
00001528  0C40 0004 2083          cmp.w     #4,D0
0000152C  660A      2084          bne.s     DumpRegisters_34
0000152E  4878 005A 2085          pea       90
00001532  4E92      2086          jsr       (A2)
00001534  584F      2087          addq.w    #4,A7
00001536  6008      2088          bra.s     DumpRegisters_35
                    2089   DumpRegisters_34:
00001538  4878 002D 2090          pea       45
0000153C  4E92      2091          jsr       (A2)
0000153E  584F      2092          addq.w    #4,A7
                    2093   DumpRegisters_35:
                    2094   ; if ((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V'); else putchar('-');      // V Bit (bit 1)
00001540  3014      2095          move.w    (A4),D0
00001542  C07C 0002 2096          and.w     #2,D0
00001546  0C40 0002 2097          cmp.w     #2,D0
0000154A  660A      2098          bne.s     DumpRegisters_36
0000154C  4878 0056 2099          pea       86
00001550  4E92      2100          jsr       (A2)
00001552  584F      2101          addq.w    #4,A7
00001554  6008      2102          bra.s     DumpRegisters_37
                    2103   DumpRegisters_36:
00001556  4878 002D 2104          pea       45
0000155A  4E92      2105          jsr       (A2)
0000155C  584F      2106          addq.w    #4,A7
                    2107   DumpRegisters_37:
                    2108   ; if ((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C'); else putchar('-');      // C Bit (bit 0)
0000155E  3014      2109          move.w    (A4),D0
00001560  C07C 0001 2110          and.w     #1,D0
00001564  0C40 0001 2111          cmp.w     #1,D0
00001568  660A      2112          bne.s     DumpRegisters_38
0000156A  4878 0043 2113          pea       67
0000156E  4E92      2114          jsr       (A2)
00001570  584F      2115          addq.w    #4,A7
00001572  6008      2116          bra.s     DumpRegisters_39
                    2117   DumpRegisters_38:
00001574  4878 002D 2118          pea       45
00001578  4E92      2119          jsr       (A2)
0000157A  584F      2120          addq.w    #4,A7
                    2121   DumpRegisters_39:
                    2122   ; putchar(']');
0000157C  4878 005D 2123          pea       93
00001580  4E92      2124          jsr       (A2)
00001582  584F      2125          addq.w    #4,A7
                    2126   ; printf("\r\n PC = $%08X  ", PC);
00001584  2F39 0B00 2127          move.l    _PC.L,-(A7)
00001588  0120      
0000158A  4879 0000 2128          pea       @lab3_40.L
0000158E  3F20      
00001590  4E93      2129          jsr       (A3)
00001592  504F      2130          addq.w    #8,A7
                    2131   ; if (*(unsigned short int*)(PC) == 0x4e4e)
00001594  2039 0B00 2132          move.l    _PC.L,D0
00001598  0120      
0000159A  2040      2133          move.l    D0,A0
0000159C  3010      2134          move.w    (A0),D0
0000159E  0C40 4E4E 2135          cmp.w     #20046,D0
000015A2  660A      2136          bne.s     DumpRegisters_40
                    2137   ; printf("[@ BREAKPOINT]");
000015A4  4879 0000 2138          pea       @lab3_41.L
000015A8  3F30      
000015AA  4E93      2139          jsr       (A3)
000015AC  584F      2140          addq.w    #4,A7
                    2141   DumpRegisters_40:
                    2142   ; printf("\r\n");
000015AE  4879 0000 2143          pea       @lab3_1.L
000015B2  3B9C      
000015B4  4E93      2144          jsr       (A3)
000015B6  584F      2145          addq.w    #4,A7
                    2146   ; for (i = 0; i < 8; i++) {
000015B8  4244      2147          clr.w     D4
                    2148   DumpRegisters_42:
000015BA  0C44 0008 2149          cmp.w     #8,D4
000015BE  6C00 0040 2150          bge       DumpRegisters_44
                    2151   ; if (WatchPointSetOrCleared[i] == 1)
000015C2  48C4      2152          ext.l     D4
000015C4  2004      2153          move.l    D4,D0
000015C6  E588      2154          lsl.l     #2,D0
000015C8  41F9 0B00 2155          lea       _WatchPointSetOrCleared.L,A0
000015CC  01A2      
000015CE  2030 0800 2156          move.l    0(A0,D0.L),D0
000015D2  0C80 0000 2157          cmp.l     #1,D0
000015D6  0001      
000015D8  6622      2158          bne.s     DumpRegisters_45
                    2159   ; printf("\r\nWP%d = %s", i, WatchPointString[i]);
000015DA  220D      2160          move.l    A5,D1
000015DC  48C4      2161          ext.l     D4
000015DE  2F00      2162          move.l    D0,-(A7)
000015E0  2004      2163          move.l    D4,D0
000015E2  C1FC 0064 2164          muls      #100,D0
000015E6  D280      2165          add.l     D0,D1
000015E8  201F      2166          move.l    (A7)+,D0
000015EA  2F01      2167          move.l    D1,-(A7)
000015EC  48C4      2168          ext.l     D4
000015EE  2F04      2169          move.l    D4,-(A7)
000015F0  4879 0000 2170          pea       @lab3_42.L
000015F4  3F40      
000015F6  4E93      2171          jsr       (A3)
000015F8  DEFC 000C 2172          add.w     #12,A7
                    2173   DumpRegisters_45:
000015FC  5244      2174          addq.w    #1,D4
000015FE  60BA      2175          bra       DumpRegisters_42
                    2176   DumpRegisters_44:
00001600  4CDF 3CFC 2177          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001604  4E75      2178          rts
                    2179   ; }
                    2180   ; }
                    2181   ; // Trace Exception Handler
                    2182   ; void DumpRegistersandPause(void)
                    2183   ; {
                    2184   _DumpRegistersandPause:
00001606  2F0A      2185          move.l    A2,-(A7)
00001608  45F9 0000 2186          lea       _printf.L,A2
0000160C  324C      
                    2187   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]");
0000160E  4879 0000 2188          pea       @lab3_43.L
00001612  3F4C      
00001614  4E92      2189          jsr       (A2)
00001616  584F      2190          addq.w    #4,A7
                    2191   ; printf("\r\nBreak Points :[Disabled]");
00001618  4879 0000 2192          pea       @lab3_44.L
0000161C  3F6C      
0000161E  4E92      2193          jsr       (A2)
00001620  584F      2194          addq.w    #4,A7
                    2195   ; DumpRegisters();
00001622  4EB8 1152 2196          jsr       _DumpRegisters
                    2197   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001626  4879 0000 2198          pea       @lab3_45.L
0000162A  3F88      
0000162C  4E92      2199          jsr       (A2)
0000162E  584F      2200          addq.w    #4,A7
                    2201   ; printf("\r\nPress <ESC> to Resume Program");
00001630  4879 0000 2202          pea       @lab3_46.L
00001634  3FB4      
00001636  4E92      2203          jsr       (A2)
00001638  584F      2204          addq.w    #4,A7
                    2205   ; menu();
0000163A  4EB9 0000 2206          jsr       _menu
0000163E  21EA      
00001640  245F      2207          move.l    (A7)+,A2
00001642  4E75      2208          rts
                    2209   ; }
                    2210   ; void ChangeRegisters(void)
                    2211   ; {
                    2212   _ChangeRegisters:
00001644  4E56 FFFC 2213          link      A6,#-4
00001648  48E7 303C 2214          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000164C  45F9 0000 2215          lea       _printf.L,A2
00001650  324C      
00001652  47EE FFFC 2216          lea       -4(A6),A3
00001656  49F8 0CA4 2217          lea       _Get8HexDigits.L,A4
0000165A  4BF8 0B68 2218          lea       __getch.L,A5
                    2219   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2220   ; int reg_val;
                    2221   ; char c, reg[3];
                    2222   ; reg[0] = tolower(_getch());
0000165E  2F00      2223          move.l    D0,-(A7)
00001660  4E95      2224          jsr       (A5)
00001662  2200      2225          move.l    D0,D1
00001664  201F      2226          move.l    (A7)+,D0
00001666  2F01      2227          move.l    D1,-(A7)
00001668  4EB9 0000 2228          jsr       _tolower
0000166C  31AA      
0000166E  584F      2229          addq.w    #4,A7
00001670  1680      2230          move.b    D0,(A3)
                    2231   ; reg[1] = c = tolower(_getch());
00001672  2F00      2232          move.l    D0,-(A7)
00001674  4E95      2233          jsr       (A5)
00001676  2200      2234          move.l    D0,D1
00001678  201F      2235          move.l    (A7)+,D0
0000167A  2F01      2236          move.l    D1,-(A7)
0000167C  4EB9 0000 2237          jsr       _tolower
00001680  31AA      
00001682  584F      2238          addq.w    #4,A7
00001684  1400      2239          move.b    D0,D2
00001686  1740 0001 2240          move.b    D0,1(A3)
                    2241   ; if (reg[0] == (char)('d')) {    // change data register
0000168A  1013      2242          move.b    (A3),D0
0000168C  0C00 0064 2243          cmp.b     #100,D0
00001690  6600 00AE 2244          bne       ChangeRegisters_1
                    2245   ; if ((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001694  102B 0001 2246          move.b    1(A3),D0
00001698  0C00 0037 2247          cmp.b     #55,D0
0000169C  6E0A      2248          bgt.s     ChangeRegisters_5
0000169E  102B 0001 2249          move.b    1(A3),D0
000016A2  0C00 0030 2250          cmp.b     #48,D0
000016A6  6C0E      2251          bge.s     ChangeRegisters_3
                    2252   ChangeRegisters_5:
                    2253   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n");
000016A8  4879 0000 2254          pea       @lab3_47.L
000016AC  3FD4      
000016AE  4E92      2255          jsr       (A2)
000016B0  584F      2256          addq.w    #4,A7
                    2257   ; return;
000016B2  6000 0244 2258          bra       ChangeRegisters_6
                    2259   ChangeRegisters_3:
                    2260   ; }
                    2261   ; else {
                    2262   ; printf("\r\nD%c = ", c);
000016B6  4882      2263          ext.w     D2
000016B8  48C2      2264          ext.l     D2
000016BA  2F02      2265          move.l    D2,-(A7)
000016BC  4879 0000 2266          pea       @lab3_48.L
000016C0  4000      
000016C2  4E92      2267          jsr       (A2)
000016C4  504F      2268          addq.w    #8,A7
                    2269   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
000016C6  42A7      2270          clr.l     -(A7)
000016C8  4E94      2271          jsr       (A4)
000016CA  584F      2272          addq.w    #4,A7
000016CC  2600      2273          move.l    D0,D3
                    2274   ; }
                    2275   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2276   ; if (c == (char)('0'))
000016CE  0C02 0030 2277          cmp.b     #48,D2
000016D2  660A      2278          bne.s     ChangeRegisters_7
                    2279   ; d0 = reg_val;
000016D4  23C3 0B00 2280          move.l    D3,_d0.L
000016D8  00E4      
000016DA  6000 0060 2281          bra       ChangeRegisters_20
                    2282   ChangeRegisters_7:
                    2283   ; else if (c == (char)('1'))
000016DE  0C02 0031 2284          cmp.b     #49,D2
000016E2  660A      2285          bne.s     ChangeRegisters_9
                    2286   ; d1 = reg_val;
000016E4  23C3 0B00 2287          move.l    D3,_d1.L
000016E8  00E8      
000016EA  6000 0050 2288          bra       ChangeRegisters_20
                    2289   ChangeRegisters_9:
                    2290   ; else if (c == (char)('2'))
000016EE  0C02 0032 2291          cmp.b     #50,D2
000016F2  660A      2292          bne.s     ChangeRegisters_11
                    2293   ; d2 = reg_val;
000016F4  23C3 0B00 2294          move.l    D3,_d2.L
000016F8  00EC      
000016FA  6000 0040 2295          bra       ChangeRegisters_20
                    2296   ChangeRegisters_11:
                    2297   ; else if (c == (char)('3'))
000016FE  0C02 0033 2298          cmp.b     #51,D2
00001702  6608      2299          bne.s     ChangeRegisters_13
                    2300   ; d3 = reg_val;
00001704  23C3 0B00 2301          move.l    D3,_d3.L
00001708  00F0      
0000170A  6030      2302          bra.s     ChangeRegisters_20
                    2303   ChangeRegisters_13:
                    2304   ; else if (c == (char)('4'))
0000170C  0C02 0034 2305          cmp.b     #52,D2
00001710  6608      2306          bne.s     ChangeRegisters_15
                    2307   ; d4 = reg_val;
00001712  23C3 0B00 2308          move.l    D3,_d4.L
00001716  00F4      
00001718  6022      2309          bra.s     ChangeRegisters_20
                    2310   ChangeRegisters_15:
                    2311   ; else if (c == (char)('5'))
0000171A  0C02 0035 2312          cmp.b     #53,D2
0000171E  6608      2313          bne.s     ChangeRegisters_17
                    2314   ; d5 = reg_val;
00001720  23C3 0B00 2315          move.l    D3,_d5.L
00001724  00F8      
00001726  6014      2316          bra.s     ChangeRegisters_20
                    2317   ChangeRegisters_17:
                    2318   ; else if (c == (char)('6'))
00001728  0C02 0036 2319          cmp.b     #54,D2
0000172C  6608      2320          bne.s     ChangeRegisters_19
                    2321   ; d6 = reg_val;
0000172E  23C3 0B00 2322          move.l    D3,_d6.L
00001732  00FC      
00001734  6006      2323          bra.s     ChangeRegisters_20
                    2324   ChangeRegisters_19:
                    2325   ; else
                    2326   ; d7 = reg_val;
00001736  23C3 0B00 2327          move.l    D3,_d7.L
0000173A  0100      
                    2328   ChangeRegisters_20:
0000173C  6000 01B6 2329          bra       ChangeRegisters_51
                    2330   ChangeRegisters_1:
                    2331   ; }
                    2332   ; else if (reg[0] == (char)('a')) {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001740  1013      2333          move.b    (A3),D0
00001742  0C00 0061 2334          cmp.b     #97,D0
00001746  6600 00A6 2335          bne       ChangeRegisters_21
                    2336   ; if ((c > (char)('7')) || (c < (char)('0'))) {
0000174A  0C02 0037 2337          cmp.b     #55,D2
0000174E  6E06      2338          bgt.s     ChangeRegisters_25
00001750  0C02 0030 2339          cmp.b     #48,D2
00001754  6C0E      2340          bge.s     ChangeRegisters_23
                    2341   ChangeRegisters_25:
                    2342   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n");
00001756  4879 0000 2343          pea       @lab3_49.L
0000175A  400A      
0000175C  4E92      2344          jsr       (A2)
0000175E  584F      2345          addq.w    #4,A7
                    2346   ; return;
00001760  6000 0196 2347          bra       ChangeRegisters_6
                    2348   ChangeRegisters_23:
                    2349   ; }
                    2350   ; else {
                    2351   ; printf("\r\nA%c = ", c);
00001764  4882      2352          ext.w     D2
00001766  48C2      2353          ext.l     D2
00001768  2F02      2354          move.l    D2,-(A7)
0000176A  4879 0000 2355          pea       @lab3_50.L
0000176E  4038      
00001770  4E92      2356          jsr       (A2)
00001772  504F      2357          addq.w    #8,A7
                    2358   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001774  42A7      2359          clr.l     -(A7)
00001776  4E94      2360          jsr       (A4)
00001778  584F      2361          addq.w    #4,A7
0000177A  2600      2362          move.l    D0,D3
                    2363   ; }
                    2364   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2365   ; if (c == (char)('0'))
0000177C  0C02 0030 2366          cmp.b     #48,D2
00001780  660A      2367          bne.s     ChangeRegisters_26
                    2368   ; a0 = reg_val;
00001782  23C3 0B00 2369          move.l    D3,_a0.L
00001786  0104      
00001788  6000 0060 2370          bra       ChangeRegisters_39
                    2371   ChangeRegisters_26:
                    2372   ; else if (c == (char)('1'))
0000178C  0C02 0031 2373          cmp.b     #49,D2
00001790  660A      2374          bne.s     ChangeRegisters_28
                    2375   ; a1 = reg_val;
00001792  23C3 0B00 2376          move.l    D3,_a1.L
00001796  0108      
00001798  6000 0050 2377          bra       ChangeRegisters_39
                    2378   ChangeRegisters_28:
                    2379   ; else if (c == (char)('2'))
0000179C  0C02 0032 2380          cmp.b     #50,D2
000017A0  660A      2381          bne.s     ChangeRegisters_30
                    2382   ; a2 = reg_val;
000017A2  23C3 0B00 2383          move.l    D3,_a2.L
000017A6  010C      
000017A8  6000 0040 2384          bra       ChangeRegisters_39
                    2385   ChangeRegisters_30:
                    2386   ; else if (c == (char)('3'))
000017AC  0C02 0033 2387          cmp.b     #51,D2
000017B0  6608      2388          bne.s     ChangeRegisters_32
                    2389   ; a3 = reg_val;
000017B2  23C3 0B00 2390          move.l    D3,_a3.L
000017B6  0110      
000017B8  6030      2391          bra.s     ChangeRegisters_39
                    2392   ChangeRegisters_32:
                    2393   ; else if (c == (char)('4'))
000017BA  0C02 0034 2394          cmp.b     #52,D2
000017BE  6608      2395          bne.s     ChangeRegisters_34
                    2396   ; a4 = reg_val;
000017C0  23C3 0B00 2397          move.l    D3,_a4.L
000017C4  0114      
000017C6  6022      2398          bra.s     ChangeRegisters_39
                    2399   ChangeRegisters_34:
                    2400   ; else if (c == (char)('5'))
000017C8  0C02 0035 2401          cmp.b     #53,D2
000017CC  6608      2402          bne.s     ChangeRegisters_36
                    2403   ; a5 = reg_val;
000017CE  23C3 0B00 2404          move.l    D3,_a5.L
000017D2  0118      
000017D4  6014      2405          bra.s     ChangeRegisters_39
                    2406   ChangeRegisters_36:
                    2407   ; else if (c == (char)('6'))
000017D6  0C02 0036 2408          cmp.b     #54,D2
000017DA  6608      2409          bne.s     ChangeRegisters_38
                    2410   ; a6 = reg_val;
000017DC  23C3 0B00 2411          move.l    D3,_a6.L
000017E0  011C      
000017E2  6006      2412          bra.s     ChangeRegisters_39
                    2413   ChangeRegisters_38:
                    2414   ; else
                    2415   ; USP = reg_val;
000017E4  23C3 0B00 2416          move.l    D3,_USP.L
000017E8  0128      
                    2417   ChangeRegisters_39:
000017EA  6000 0108 2418          bra       ChangeRegisters_51
                    2419   ChangeRegisters_21:
                    2420   ; }
                    2421   ; else if ((reg[0] == (char)('u')) && (c == (char)('s'))) {
000017EE  1013      2422          move.b    (A3),D0
000017F0  0C00 0075 2423          cmp.b     #117,D0
000017F4  6600 004E 2424          bne       ChangeRegisters_40
000017F8  0C02 0073 2425          cmp.b     #115,D2
000017FC  6600 0046 2426          bne       ChangeRegisters_40
                    2427   ; if (tolower(_getch()) == 'p') {    // change user stack pointer
00001800  2F00      2428          move.l    D0,-(A7)
00001802  4E95      2429          jsr       (A5)
00001804  2200      2430          move.l    D0,D1
00001806  201F      2431          move.l    (A7)+,D0
00001808  2F01      2432          move.l    D1,-(A7)
0000180A  4EB9 0000 2433          jsr       _tolower
0000180E  31AA      
00001810  584F      2434          addq.w    #4,A7
00001812  0C80 0000 2435          cmp.l     #112,D0
00001816  0070      
00001818  6618      2436          bne.s     ChangeRegisters_42
                    2437   ; printf("\r\nUser SP = ");
0000181A  4879 0000 2438          pea       @lab3_51.L
0000181E  4042      
00001820  4E92      2439          jsr       (A2)
00001822  584F      2440          addq.w    #4,A7
                    2441   ; USP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001824  42A7      2442          clr.l     -(A7)
00001826  4E94      2443          jsr       (A4)
00001828  584F      2444          addq.w    #4,A7
0000182A  23C0 0B00 2445          move.l    D0,_USP.L
0000182E  0128      
00001830  600E      2446          bra.s     ChangeRegisters_43
                    2447   ChangeRegisters_42:
                    2448   ; }
                    2449   ; else {
                    2450   ; printf("\r\nIllegal Register....");
00001832  4879 0000 2451          pea       @lab3_52.L
00001836  4050      
00001838  4E92      2452          jsr       (A2)
0000183A  584F      2453          addq.w    #4,A7
                    2454   ; return;
0000183C  6000 00BA 2455          bra       ChangeRegisters_6
                    2456   ChangeRegisters_43:
00001840  6000 00B2 2457          bra       ChangeRegisters_51
                    2458   ChangeRegisters_40:
                    2459   ; }
                    2460   ; }
                    2461   ; else if ((reg[0] == (char)('s')) && (c == (char)('s'))) {
00001844  1013      2462          move.b    (A3),D0
00001846  0C00 0073 2463          cmp.b     #115,D0
0000184A  6600 004E 2464          bne       ChangeRegisters_44
0000184E  0C02 0073 2465          cmp.b     #115,D2
00001852  6600 0046 2466          bne       ChangeRegisters_44
                    2467   ; if (tolower(_getch()) == 'p') {    // change system stack pointer
00001856  2F00      2468          move.l    D0,-(A7)
00001858  4E95      2469          jsr       (A5)
0000185A  2200      2470          move.l    D0,D1
0000185C  201F      2471          move.l    (A7)+,D0
0000185E  2F01      2472          move.l    D1,-(A7)
00001860  4EB9 0000 2473          jsr       _tolower
00001864  31AA      
00001866  584F      2474          addq.w    #4,A7
00001868  0C80 0000 2475          cmp.l     #112,D0
0000186C  0070      
0000186E  6618      2476          bne.s     ChangeRegisters_46
                    2477   ; printf("\r\nSystem SP = ");
00001870  4879 0000 2478          pea       @lab3_53.L
00001874  4068      
00001876  4E92      2479          jsr       (A2)
00001878  584F      2480          addq.w    #4,A7
                    2481   ; SSP = Get8HexDigits(0);    // read 32 bit value from user keyboard
0000187A  42A7      2482          clr.l     -(A7)
0000187C  4E94      2483          jsr       (A4)
0000187E  584F      2484          addq.w    #4,A7
00001880  23C0 0B00 2485          move.l    D0,_SSP.L
00001884  0124      
00001886  600E      2486          bra.s     ChangeRegisters_47
                    2487   ChangeRegisters_46:
                    2488   ; }
                    2489   ; else {
                    2490   ; printf("\r\nIllegal Register....");
00001888  4879 0000 2491          pea       @lab3_52.L
0000188C  4050      
0000188E  4E92      2492          jsr       (A2)
00001890  584F      2493          addq.w    #4,A7
                    2494   ; return;
00001892  6000 0064 2495          bra       ChangeRegisters_6
                    2496   ChangeRegisters_47:
00001896  6000 005C 2497          bra       ChangeRegisters_51
                    2498   ChangeRegisters_44:
                    2499   ; }
                    2500   ; }
                    2501   ; else if ((reg[0] == (char)('p')) && (c == (char)('c'))) {    // change program counter
0000189A  1013      2502          move.b    (A3),D0
0000189C  0C00 0070 2503          cmp.b     #112,D0
000018A0  6620      2504          bne.s     ChangeRegisters_48
000018A2  0C02 0063 2505          cmp.b     #99,D2
000018A6  661A      2506          bne.s     ChangeRegisters_48
                    2507   ; printf("\r\nPC = ");
000018A8  4879 0000 2508          pea       @lab3_54.L
000018AC  4078      
000018AE  4E92      2509          jsr       (A2)
000018B0  584F      2510          addq.w    #4,A7
                    2511   ; PC = Get8HexDigits(0);    // read 32 bit value from user keyboard
000018B2  42A7      2512          clr.l     -(A7)
000018B4  4E94      2513          jsr       (A4)
000018B6  584F      2514          addq.w    #4,A7
000018B8  23C0 0B00 2515          move.l    D0,_PC.L
000018BC  0120      
000018BE  6000 0034 2516          bra       ChangeRegisters_51
                    2517   ChangeRegisters_48:
                    2518   ; }
                    2519   ; else if ((reg[0] == (char)('s')) && (c == (char)('r'))) {    // change status register
000018C2  1013      2520          move.b    (A3),D0
000018C4  0C00 0073 2521          cmp.b     #115,D0
000018C8  6620      2522          bne.s     ChangeRegisters_50
000018CA  0C02 0072 2523          cmp.b     #114,D2
000018CE  661A      2524          bne.s     ChangeRegisters_50
                    2525   ; printf("\r\nSR = ");
000018D0  4879 0000 2526          pea       @lab3_55.L
000018D4  4080      
000018D6  4E92      2527          jsr       (A2)
000018D8  584F      2528          addq.w    #4,A7
                    2529   ; SR = Get4HexDigits(0);    // read 16 bit value from user keyboard
000018DA  42A7      2530          clr.l     -(A7)
000018DC  4EB8 0C58 2531          jsr       _Get4HexDigits
000018E0  584F      2532          addq.w    #4,A7
000018E2  33C0 0B00 2533          move.w    D0,_SR.L
000018E6  012C      
000018E8  600A      2534          bra.s     ChangeRegisters_51
                    2535   ChangeRegisters_50:
                    2536   ; }
                    2537   ; else
                    2538   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n");
000018EA  4879 0000 2539          pea       @lab3_56.L
000018EE  4088      
000018F0  4E92      2540          jsr       (A2)
000018F2  584F      2541          addq.w    #4,A7
                    2542   ChangeRegisters_51:
                    2543   ; DumpRegisters();
000018F4  4EB8 1152 2544          jsr       _DumpRegisters
                    2545   ChangeRegisters_6:
000018F8  4CDF 3C0C 2546          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000018FC  4E5E      2547          unlk      A6
000018FE  4E75      2548          rts
                    2549   ; }
                    2550   ; void BreakPointDisplay(void)
                    2551   ; {
                    2552   _BreakPointDisplay:
00001900  48E7 3030 2553          movem.l   D2/D3/A2/A3,-(A7)
00001904  45F9 0000 2554          lea       _printf.L,A2
00001908  324C      
0000190A  47F9 0B00 2555          lea       _BreakPointAddress.L,A3
0000190E  012E      
                    2556   ; int i, BreakPointsSet = 0;
00001910  4283      2557          clr.l     D3
                    2558   ; // any break points  set
                    2559   ; for (i = 0; i < 8; i++) {
00001912  4282      2560          clr.l     D2
                    2561   BreakPointDisplay_1:
00001914  0C82 0000 2562          cmp.l     #8,D2
00001918  0008      
0000191A  6C1C      2563          bge.s     BreakPointDisplay_3
                    2564   ; if (BreakPointSetOrCleared[i] == 1)
0000191C  2002      2565          move.l    D2,D0
0000191E  E588      2566          lsl.l     #2,D0
00001920  41F9 0B00 2567          lea       _BreakPointSetOrCleared.L,A0
00001924  015E      
00001926  2030 0800 2568          move.l    0(A0,D0.L),D0
0000192A  0C80 0000 2569          cmp.l     #1,D0
0000192E  0001      
00001930  6602      2570          bne.s     BreakPointDisplay_4
                    2571   ; BreakPointsSet = 1;
00001932  7601      2572          moveq     #1,D3
                    2573   BreakPointDisplay_4:
00001934  5282      2574          addq.l    #1,D2
00001936  60DC      2575          bra       BreakPointDisplay_1
                    2576   BreakPointDisplay_3:
                    2577   ; }
                    2578   ; if (BreakPointsSet == 1) {
00001938  0C83 0000 2579          cmp.l     #1,D3
0000193C  0001      
0000193E  6616      2580          bne.s     BreakPointDisplay_6
                    2581   ; printf("\r\n\r\nNum     Address      Instruction");
00001940  4879 0000 2582          pea       @lab3_57.L
00001944  40C4      
00001946  4E92      2583          jsr       (A2)
00001948  584F      2584          addq.w    #4,A7
                    2585   ; printf("\r\n---     ---------    -----------");
0000194A  4879 0000 2586          pea       @lab3_58.L
0000194E  40EA      
00001950  4E92      2587          jsr       (A2)
00001952  584F      2588          addq.w    #4,A7
00001954  600A      2589          bra.s     BreakPointDisplay_7
                    2590   BreakPointDisplay_6:
                    2591   ; }
                    2592   ; else
                    2593   ; printf("\r\nNo BreakPoints Set");
00001956  4879 0000 2594          pea       @lab3_59.L
0000195A  410E      
0000195C  4E92      2595          jsr       (A2)
0000195E  584F      2596          addq.w    #4,A7
                    2597   BreakPointDisplay_7:
                    2598   ; for (i = 0; i < 8; i++) {
00001960  4282      2599          clr.l     D2
                    2600   BreakPointDisplay_8:
00001962  0C82 0000 2601          cmp.l     #8,D2
00001966  0008      
00001968  6C00 005A 2602          bge       BreakPointDisplay_10
                    2603   ; // put opcode back, then put break point back
                    2604   ; if (BreakPointSetOrCleared[i] == 1) {
0000196C  2002      2605          move.l    D2,D0
0000196E  E588      2606          lsl.l     #2,D0
00001970  41F9 0B00 2607          lea       _BreakPointSetOrCleared.L,A0
00001974  015E      
00001976  2030 0800 2608          move.l    0(A0,D0.L),D0
0000197A  0C80 0000 2609          cmp.l     #1,D0
0000197E  0001      
00001980  6600 003E 2610          bne       BreakPointDisplay_11
                    2611   ; *(unsigned short int*)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001984  2002      2612          move.l    D2,D0
00001986  E388      2613          lsl.l     #1,D0
00001988  41F9 0B00 2614          lea       _BreakPointInstruction.L,A0
0000198C  014E      
0000198E  2202      2615          move.l    D2,D1
00001990  E589      2616          lsl.l     #2,D1
00001992  2233 1800 2617          move.l    0(A3,D1.L),D1
00001996  2241      2618          move.l    D1,A1
00001998  32B0 0800 2619          move.w    0(A0,D0.L),(A1)
                    2620   ; *(unsigned short int*)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e);
0000199C  2002      2621          move.l    D2,D0
0000199E  E588      2622          lsl.l     #2,D0
000019A0  2033 0800 2623          move.l    0(A3,D0.L),D0
000019A4  2040      2624          move.l    D0,A0
000019A6  30BC 4E4E 2625          move.w    #20046,(A0)
                    2626   ; printf("\r\n%3d     $%08x", i, BreakPointAddress[i]);
000019AA  2202      2627          move.l    D2,D1
000019AC  E589      2628          lsl.l     #2,D1
000019AE  2F33 1800 2629          move.l    0(A3,D1.L),-(A7)
000019B2  2F02      2630          move.l    D2,-(A7)
000019B4  4879 0000 2631          pea       @lab3_60.L
000019B8  4124      
000019BA  4E92      2632          jsr       (A2)
000019BC  DEFC 000C 2633          add.w     #12,A7
                    2634   BreakPointDisplay_11:
000019C0  5282      2635          addq.l    #1,D2
000019C2  609E      2636          bra       BreakPointDisplay_8
                    2637   BreakPointDisplay_10:
                    2638   ; }
                    2639   ; }
                    2640   ; printf("\r\n");
000019C4  4879 0000 2641          pea       @lab3_1.L
000019C8  3B9C      
000019CA  4E92      2642          jsr       (A2)
000019CC  584F      2643          addq.w    #4,A7
000019CE  4CDF 0C0C 2644          movem.l   (A7)+,D2/D3/A2/A3
000019D2  4E75      2645          rts
                    2646   ; }
                    2647   ; void WatchPointDisplay(void)
                    2648   ; {
                    2649   _WatchPointDisplay:
000019D4  48E7 3020 2650          movem.l   D2/D3/A2,-(A7)
000019D8  45F9 0000 2651          lea       _printf.L,A2
000019DC  324C      
                    2652   ; int i;
                    2653   ; int WatchPointsSet = 0;
000019DE  4283      2654          clr.l     D3
                    2655   ; // any watchpoints set
                    2656   ; for (i = 0; i < 8; i++) {
000019E0  4282      2657          clr.l     D2
                    2658   WatchPointDisplay_1:
000019E2  0C82 0000 2659          cmp.l     #8,D2
000019E6  0008      
000019E8  6C1C      2660          bge.s     WatchPointDisplay_3
                    2661   ; if (WatchPointSetOrCleared[i] == 1)
000019EA  2002      2662          move.l    D2,D0
000019EC  E588      2663          lsl.l     #2,D0
000019EE  41F9 0B00 2664          lea       _WatchPointSetOrCleared.L,A0
000019F2  01A2      
000019F4  2030 0800 2665          move.l    0(A0,D0.L),D0
000019F8  0C80 0000 2666          cmp.l     #1,D0
000019FC  0001      
000019FE  6602      2667          bne.s     WatchPointDisplay_4
                    2668   ; WatchPointsSet = 1;
00001A00  7601      2669          moveq     #1,D3
                    2670   WatchPointDisplay_4:
00001A02  5282      2671          addq.l    #1,D2
00001A04  60DC      2672          bra       WatchPointDisplay_1
                    2673   WatchPointDisplay_3:
                    2674   ; }
                    2675   ; if (WatchPointsSet == 1) {
00001A06  0C83 0000 2676          cmp.l     #1,D3
00001A0A  0001      
00001A0C  6616      2677          bne.s     WatchPointDisplay_6
                    2678   ; printf("\r\nNum     Address");
00001A0E  4879 0000 2679          pea       @lab3_61.L
00001A12  4134      
00001A14  4E92      2680          jsr       (A2)
00001A16  584F      2681          addq.w    #4,A7
                    2682   ; printf("\r\n---     ---------");
00001A18  4879 0000 2683          pea       @lab3_62.L
00001A1C  4146      
00001A1E  4E92      2684          jsr       (A2)
00001A20  584F      2685          addq.w    #4,A7
00001A22  600A      2686          bra.s     WatchPointDisplay_7
                    2687   WatchPointDisplay_6:
                    2688   ; }
                    2689   ; else
                    2690   ; printf("\r\nNo WatchPoints Set");
00001A24  4879 0000 2691          pea       @lab3_63.L
00001A28  415A      
00001A2A  4E92      2692          jsr       (A2)
00001A2C  584F      2693          addq.w    #4,A7
                    2694   WatchPointDisplay_7:
                    2695   ; for (i = 0; i < 8; i++) {
00001A2E  4282      2696          clr.l     D2
                    2697   WatchPointDisplay_8:
00001A30  0C82 0000 2698          cmp.l     #8,D2
00001A34  0008      
00001A36  6C00 0038 2699          bge       WatchPointDisplay_10
                    2700   ; if (WatchPointSetOrCleared[i] == 1)
00001A3A  2002      2701          move.l    D2,D0
00001A3C  E588      2702          lsl.l     #2,D0
00001A3E  41F9 0B00 2703          lea       _WatchPointSetOrCleared.L,A0
00001A42  01A2      
00001A44  2030 0800 2704          move.l    0(A0,D0.L),D0
00001A48  0C80 0000 2705          cmp.l     #1,D0
00001A4C  0001      
00001A4E  661C      2706          bne.s     WatchPointDisplay_11
                    2707   ; printf("\r\n%3d     $%08x", i, WatchPointAddress[i]);
00001A50  2202      2708          move.l    D2,D1
00001A52  E589      2709          lsl.l     #2,D1
00001A54  41F9 0B00 2710          lea       _WatchPointAddress.L,A0
00001A58  0182      
00001A5A  2F30 1800 2711          move.l    0(A0,D1.L),-(A7)
00001A5E  2F02      2712          move.l    D2,-(A7)
00001A60  4879 0000 2713          pea       @lab3_60.L
00001A64  4124      
00001A66  4E92      2714          jsr       (A2)
00001A68  DEFC 000C 2715          add.w     #12,A7
                    2716   WatchPointDisplay_11:
00001A6C  5282      2717          addq.l    #1,D2
00001A6E  60C0      2718          bra       WatchPointDisplay_8
                    2719   WatchPointDisplay_10:
                    2720   ; }
                    2721   ; printf("\r\n");
00001A70  4879 0000 2722          pea       @lab3_1.L
00001A74  3B9C      
00001A76  4E92      2723          jsr       (A2)
00001A78  584F      2724          addq.w    #4,A7
00001A7A  4CDF 040C 2725          movem.l   (A7)+,D2/D3/A2
00001A7E  4E75      2726          rts
                    2727   ; }
                    2728   ; void BreakPointClear(void)
                    2729   ; {
                    2730   _BreakPointClear:
00001A80  4E56 FFFC 2731          link      A6,#-4
00001A84  48E7 2020 2732          movem.l   D2/A2,-(A7)
00001A88  45F9 0000 2733          lea       _printf.L,A2
00001A8C  324C      
                    2734   ; unsigned int i;
                    2735   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2736   ; BreakPointDisplay();
00001A8E  4EB8 1900 2737          jsr       _BreakPointDisplay
                    2738   ; printf("\r\nEnter Break Point Number: ");
00001A92  4879 0000 2739          pea       @lab3_64.L
00001A96  4170      
00001A98  4E92      2740          jsr       (A2)
00001A9A  584F      2741          addq.w    #4,A7
                    2742   ; i = xtod(_getch());           // get break pointer number
00001A9C  2F00      2743          move.l    D0,-(A7)
00001A9E  4EB8 0B68 2744          jsr       __getch
00001AA2  2200      2745          move.l    D0,D1
00001AA4  201F      2746          move.l    (A7)+,D0
00001AA6  2F01      2747          move.l    D1,-(A7)
00001AA8  4EB8 0BD2 2748          jsr       _xtod
00001AAC  584F      2749          addq.w    #4,A7
00001AAE  C0BC 0000 2750          and.l     #255,D0
00001AB2  00FF      
00001AB4  2400      2751          move.l    D0,D2
                    2752   ; if ((i < 0) || (i > 7)) {
00001AB6  0C82 0000 2753          cmp.l     #0,D2
00001ABA  0000      
00001ABC  6508      2754          blo.s     BreakPointClear_3
00001ABE  0C82 0000 2755          cmp.l     #7,D2
00001AC2  0007      
00001AC4  630E      2756          bls.s     BreakPointClear_1
                    2757   BreakPointClear_3:
                    2758   ; printf("\r\nIllegal Range : Use 0 - 7");
00001AC6  4879 0000 2759          pea       @lab3_65.L
00001ACA  418E      
00001ACC  4E92      2760          jsr       (A2)
00001ACE  584F      2761          addq.w    #4,A7
                    2762   ; return;
00001AD0  6000 0080 2763          bra       BreakPointClear_4
                    2764   BreakPointClear_1:
                    2765   ; }
                    2766   ; if (BreakPointSetOrCleared[i] == 1) {       // if break point set
00001AD4  2002      2767          move.l    D2,D0
00001AD6  E588      2768          lsl.l     #2,D0
00001AD8  41F9 0B00 2769          lea       _BreakPointSetOrCleared.L,A0
00001ADC  015E      
00001ADE  2030 0800 2770          move.l    0(A0,D0.L),D0
00001AE2  0C80 0000 2771          cmp.l     #1,D0
00001AE6  0001      
00001AE8  6600 005A 2772          bne       BreakPointClear_5
                    2773   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program we are about to change
00001AEC  2002      2774          move.l    D2,D0
00001AEE  E588      2775          lsl.l     #2,D0
00001AF0  41F9 0B00 2776          lea       _BreakPointAddress.L,A0
00001AF4  012E      
00001AF6  2D70 0800 2777          move.l    0(A0,D0.L),-4(A6)
00001AFA  FFFC      
                    2778   ; BreakPointAddress[i] = 0;
00001AFC  2002      2779          move.l    D2,D0
00001AFE  E588      2780          lsl.l     #2,D0
00001B00  41F9 0B00 2781          lea       _BreakPointAddress.L,A0
00001B04  012E      
00001B06  42B0 0800 2782          clr.l     0(A0,D0.L)
                    2783   ; BreakPointSetOrCleared[i] = 0;
00001B0A  2002      2784          move.l    D2,D0
00001B0C  E588      2785          lsl.l     #2,D0
00001B0E  41F9 0B00 2786          lea       _BreakPointSetOrCleared.L,A0
00001B12  015E      
00001B14  42B0 0800 2787          clr.l     0(A0,D0.L)
                    2788   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00001B18  2002      2789          move.l    D2,D0
00001B1A  E388      2790          lsl.l     #1,D0
00001B1C  41F9 0B00 2791          lea       _BreakPointInstruction.L,A0
00001B20  014E      
00001B22  226E FFFC 2792          move.l    -4(A6),A1
00001B26  32B0 0800 2793          move.w    0(A0,D0.L),(A1)
                    2794   ; BreakPointInstruction[i] = 0;
00001B2A  2002      2795          move.l    D2,D0
00001B2C  E388      2796          lsl.l     #1,D0
00001B2E  41F9 0B00 2797          lea       _BreakPointInstruction.L,A0
00001B32  014E      
00001B34  4270 0800 2798          clr.w     0(A0,D0.L)
                    2799   ; printf("\r\nBreak Point Cleared.....\r\n");
00001B38  4879 0000 2800          pea       @lab3_66.L
00001B3C  41AA      
00001B3E  4E92      2801          jsr       (A2)
00001B40  584F      2802          addq.w    #4,A7
00001B42  600A      2803          bra.s     BreakPointClear_6
                    2804   BreakPointClear_5:
                    2805   ; }
                    2806   ; else
                    2807   ; printf("\r\nBreak Point wasn't Set.....");
00001B44  4879 0000 2808          pea       @lab3_67.L
00001B48  41C8      
00001B4A  4E92      2809          jsr       (A2)
00001B4C  584F      2810          addq.w    #4,A7
                    2811   BreakPointClear_6:
                    2812   ; BreakPointDisplay();
00001B4E  4EB8 1900 2813          jsr       _BreakPointDisplay
                    2814   ; return;
                    2815   BreakPointClear_4:
00001B52  4CDF 0404 2816          movem.l   (A7)+,D2/A2
00001B56  4E5E      2817          unlk      A6
00001B58  4E75      2818          rts
                    2819   ; }
                    2820   ; void WatchPointClear(void)
                    2821   ; {
                    2822   _WatchPointClear:
00001B5A  48E7 2020 2823          movem.l   D2/A2,-(A7)
00001B5E  45F9 0000 2824          lea       _printf.L,A2
00001B62  324C      
                    2825   ; unsigned int i;
                    2826   ; WatchPointDisplay();
00001B64  4EB8 19D4 2827          jsr       _WatchPointDisplay
                    2828   ; printf("\r\nEnter Watch Point Number: ");
00001B68  4879 0000 2829          pea       @lab3_68.L
00001B6C  41E6      
00001B6E  4E92      2830          jsr       (A2)
00001B70  584F      2831          addq.w    #4,A7
                    2832   ; i = xtod(_getch());           // get watch pointer number
00001B72  2F00      2833          move.l    D0,-(A7)
00001B74  4EB8 0B68 2834          jsr       __getch
00001B78  2200      2835          move.l    D0,D1
00001B7A  201F      2836          move.l    (A7)+,D0
00001B7C  2F01      2837          move.l    D1,-(A7)
00001B7E  4EB8 0BD2 2838          jsr       _xtod
00001B82  584F      2839          addq.w    #4,A7
00001B84  C0BC 0000 2840          and.l     #255,D0
00001B88  00FF      
00001B8A  2400      2841          move.l    D0,D2
                    2842   ; if ((i < 0) || (i > 7)) {
00001B8C  0C82 0000 2843          cmp.l     #0,D2
00001B90  0000      
00001B92  6508      2844          blo.s     WatchPointClear_3
00001B94  0C82 0000 2845          cmp.l     #7,D2
00001B98  0007      
00001B9A  630E      2846          bls.s     WatchPointClear_1
                    2847   WatchPointClear_3:
                    2848   ; printf("\r\nIllegal Range : Use 0 - 7");
00001B9C  4879 0000 2849          pea       @lab3_65.L
00001BA0  418E      
00001BA2  4E92      2850          jsr       (A2)
00001BA4  584F      2851          addq.w    #4,A7
                    2852   ; return;
00001BA6  6000 004E 2853          bra       WatchPointClear_4
                    2854   WatchPointClear_1:
                    2855   ; }
                    2856   ; if (WatchPointSetOrCleared[i] == 1) {       // if watch point set
00001BAA  2002      2857          move.l    D2,D0
00001BAC  E588      2858          lsl.l     #2,D0
00001BAE  41F9 0B00 2859          lea       _WatchPointSetOrCleared.L,A0
00001BB2  01A2      
00001BB4  2030 0800 2860          move.l    0(A0,D0.L),D0
00001BB8  0C80 0000 2861          cmp.l     #1,D0
00001BBC  0001      
00001BBE  6628      2862          bne.s     WatchPointClear_5
                    2863   ; WatchPointAddress[i] = 0;
00001BC0  2002      2864          move.l    D2,D0
00001BC2  E588      2865          lsl.l     #2,D0
00001BC4  41F9 0B00 2866          lea       _WatchPointAddress.L,A0
00001BC8  0182      
00001BCA  42B0 0800 2867          clr.l     0(A0,D0.L)
                    2868   ; WatchPointSetOrCleared[i] = 0;
00001BCE  2002      2869          move.l    D2,D0
00001BD0  E588      2870          lsl.l     #2,D0
00001BD2  41F9 0B00 2871          lea       _WatchPointSetOrCleared.L,A0
00001BD6  01A2      
00001BD8  42B0 0800 2872          clr.l     0(A0,D0.L)
                    2873   ; printf("\r\nWatch Point Cleared.....\r\n");
00001BDC  4879 0000 2874          pea       @lab3_69.L
00001BE0  4204      
00001BE2  4E92      2875          jsr       (A2)
00001BE4  584F      2876          addq.w    #4,A7
00001BE6  600A      2877          bra.s     WatchPointClear_6
                    2878   WatchPointClear_5:
                    2879   ; }
                    2880   ; else
                    2881   ; printf("\r\nWatch Point Was not Set.....");
00001BE8  4879 0000 2882          pea       @lab3_70.L
00001BEC  4222      
00001BEE  4E92      2883          jsr       (A2)
00001BF0  584F      2884          addq.w    #4,A7
                    2885   WatchPointClear_6:
                    2886   ; WatchPointDisplay();
00001BF2  4EB8 19D4 2887          jsr       _WatchPointDisplay
                    2888   ; return;
                    2889   WatchPointClear_4:
00001BF6  4CDF 0404 2890          movem.l   (A7)+,D2/A2
00001BFA  4E75      2891          rts
                    2892   ; }
                    2893   ; void DisableBreakPoints(void)
                    2894   ; {
                    2895   _DisableBreakPoints:
00001BFC  4E56 FFFC 2896          link      A6,#-4
00001C00  2F02      2897          move.l    D2,-(A7)
                    2898   ; int i;
                    2899   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2900   ; for (i = 0; i < 8; i++) {
00001C02  4282      2901          clr.l     D2
                    2902   DisableBreakPoints_1:
00001C04  0C82 0000 2903          cmp.l     #8,D2
00001C08  0008      
00001C0A  6C00 003E 2904          bge       DisableBreakPoints_3
                    2905   ; if (BreakPointSetOrCleared[i] == 1) {                                                    // if break point set
00001C0E  2002      2906          move.l    D2,D0
00001C10  E588      2907          lsl.l     #2,D0
00001C12  41F9 0B00 2908          lea       _BreakPointSetOrCleared.L,A0
00001C16  015E      
00001C18  2030 0800 2909          move.l    0(A0,D0.L),D0
00001C1C  0C80 0000 2910          cmp.l     #1,D0
00001C20  0001      
00001C22  6622      2911          bne.s     DisableBreakPoints_4
                    2912   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001C24  2002      2913          move.l    D2,D0
00001C26  E588      2914          lsl.l     #2,D0
00001C28  41F9 0B00 2915          lea       _BreakPointAddress.L,A0
00001C2C  012E      
00001C2E  2D70 0800 2916          move.l    0(A0,D0.L),-4(A6)
00001C32  FFFC      
                    2917   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001C34  2002      2918          move.l    D2,D0
00001C36  E388      2919          lsl.l     #1,D0
00001C38  41F9 0B00 2920          lea       _BreakPointInstruction.L,A0
00001C3C  014E      
00001C3E  226E FFFC 2921          move.l    -4(A6),A1
00001C42  32B0 0800 2922          move.w    0(A0,D0.L),(A1)
                    2923   DisableBreakPoints_4:
00001C46  5282      2924          addq.l    #1,D2
00001C48  60BA      2925          bra       DisableBreakPoints_1
                    2926   DisableBreakPoints_3:
00001C4A  241F      2927          move.l    (A7)+,D2
00001C4C  4E5E      2928          unlk      A6
00001C4E  4E75      2929          rts
                    2930   ; }
                    2931   ; }
                    2932   ; }
                    2933   ; void EnableBreakPoints(void)
                    2934   ; {
                    2935   _EnableBreakPoints:
00001C50  4E56 FFFC 2936          link      A6,#-4
00001C54  2F02      2937          move.l    D2,-(A7)
                    2938   ; int i;
                    2939   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2940   ; for (i = 0; i < 8; i++) {
00001C56  4282      2941          clr.l     D2
                    2942   EnableBreakPoints_1:
00001C58  0C82 0000 2943          cmp.l     #8,D2
00001C5C  0008      
00001C5E  6C32      2944          bge.s     EnableBreakPoints_3
                    2945   ; if (BreakPointSetOrCleared[i] == 1) {                                                     // if break point set
00001C60  2002      2946          move.l    D2,D0
00001C62  E588      2947          lsl.l     #2,D0
00001C64  41F9 0B00 2948          lea       _BreakPointSetOrCleared.L,A0
00001C68  015E      
00001C6A  2030 0800 2949          move.l    0(A0,D0.L),D0
00001C6E  0C80 0000 2950          cmp.l     #1,D0
00001C72  0001      
00001C74  6618      2951          bne.s     EnableBreakPoints_4
                    2952   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001C76  2002      2953          move.l    D2,D0
00001C78  E588      2954          lsl.l     #2,D0
00001C7A  41F9 0B00 2955          lea       _BreakPointAddress.L,A0
00001C7E  012E      
00001C80  2D70 0800 2956          move.l    0(A0,D0.L),-4(A6)
00001C84  FFFC      
                    2957   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C86  206E FFFC 2958          move.l    -4(A6),A0
00001C8A  30BC 4E4E 2959          move.w    #20046,(A0)
                    2960   EnableBreakPoints_4:
00001C8E  5282      2961          addq.l    #1,D2
00001C90  60C6      2962          bra       EnableBreakPoints_1
                    2963   EnableBreakPoints_3:
00001C92  241F      2964          move.l    (A7)+,D2
00001C94  4E5E      2965          unlk      A6
00001C96  4E75      2966          rts
                    2967   ; }
                    2968   ; }
                    2969   ; }
                    2970   ; void KillAllBreakPoints(void)
                    2971   ; {
                    2972   _KillAllBreakPoints:
00001C98  4E56 FFFC 2973          link      A6,#-4
00001C9C  2F02      2974          move.l    D2,-(A7)
                    2975   ; int i;
                    2976   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2977   ; for (i = 0; i < 8; i++) {
00001C9E  4282      2978          clr.l     D2
                    2979   KillAllBreakPoints_1:
00001CA0  0C82 0000 2980          cmp.l     #8,D2
00001CA4  0008      
00001CA6  6C00 0052 2981          bge       KillAllBreakPoints_3
                    2982   ; // clear BP
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001CAA  2002      2984          move.l    D2,D0
00001CAC  E588      2985          lsl.l     #2,D0
00001CAE  41F9 0B00 2986          lea       _BreakPointAddress.L,A0
00001CB2  012E      
00001CB4  2D70 0800 2987          move.l    0(A0,D0.L),-4(A6)
00001CB8  FFFC      
                    2988   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001CBA  2002      2989          move.l    D2,D0
00001CBC  E388      2990          lsl.l     #1,D0
00001CBE  41F9 0B00 2991          lea       _BreakPointInstruction.L,A0
00001CC2  014E      
00001CC4  226E FFFC 2992          move.l    -4(A6),A1
00001CC8  32B0 0800 2993          move.w    0(A0,D0.L),(A1)
                    2994   ; BreakPointAddress[i] = 0;                                                             // set BP address to NULL
00001CCC  2002      2995          move.l    D2,D0
00001CCE  E588      2996          lsl.l     #2,D0
00001CD0  41F9 0B00 2997          lea       _BreakPointAddress.L,A0
00001CD4  012E      
00001CD6  42B0 0800 2998          clr.l     0(A0,D0.L)
                    2999   ; BreakPointInstruction[i] = 0;
00001CDA  2002      3000          move.l    D2,D0
00001CDC  E388      3001          lsl.l     #1,D0
00001CDE  41F9 0B00 3002          lea       _BreakPointInstruction.L,A0
00001CE2  014E      
00001CE4  4270 0800 3003          clr.w     0(A0,D0.L)
                    3004   ; BreakPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00001CE8  2002      3005          move.l    D2,D0
00001CEA  E588      3006          lsl.l     #2,D0
00001CEC  41F9 0B00 3007          lea       _BreakPointSetOrCleared.L,A0
00001CF0  015E      
00001CF2  42B0 0800 3008          clr.l     0(A0,D0.L)
00001CF6  5282      3009          addq.l    #1,D2
00001CF8  60A6      3010          bra       KillAllBreakPoints_1
                    3011   KillAllBreakPoints_3:
00001CFA  241F      3012          move.l    (A7)+,D2
00001CFC  4E5E      3013          unlk      A6
00001CFE  4E75      3014          rts
                    3015   ; }
                    3016   ; //BreakPointDisplay() ;       // display the break points
                    3017   ; }
                    3018   ; void KillAllWatchPoints(void)
                    3019   ; {
                    3020   _KillAllWatchPoints:
00001D00  2F02      3021          move.l    D2,-(A7)
                    3022   ; int i;
                    3023   ; for (i = 0; i < 8; i++) {
00001D02  4282      3024          clr.l     D2
                    3025   KillAllWatchPoints_1:
00001D04  0C82 0000 3026          cmp.l     #8,D2
00001D08  0008      
00001D0A  6C20      3027          bge.s     KillAllWatchPoints_3
                    3028   ; WatchPointAddress[i] = 0;                                                             // set BP address to NULL
00001D0C  2002      3029          move.l    D2,D0
00001D0E  E588      3030          lsl.l     #2,D0
00001D10  41F9 0B00 3031          lea       _WatchPointAddress.L,A0
00001D14  0182      
00001D16  42B0 0800 3032          clr.l     0(A0,D0.L)
                    3033   ; WatchPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00001D1A  2002      3034          move.l    D2,D0
00001D1C  E588      3035          lsl.l     #2,D0
00001D1E  41F9 0B00 3036          lea       _WatchPointSetOrCleared.L,A0
00001D22  01A2      
00001D24  42B0 0800 3037          clr.l     0(A0,D0.L)
00001D28  5282      3038          addq.l    #1,D2
00001D2A  60D8      3039          bra       KillAllWatchPoints_1
                    3040   KillAllWatchPoints_3:
00001D2C  241F      3041          move.l    (A7)+,D2
00001D2E  4E75      3042          rts
                    3043   ; }
                    3044   ; //WatchPointDisplay() ;       // display the break points
                    3045   ; }
                    3046   ; void SetBreakPoint(void)
                    3047   ; {
                    3048   _SetBreakPoint:
00001D30  4E56 FFFC 3049          link      A6,#-4
00001D34  48E7 3830 3050          movem.l   D2/D3/D4/A2/A3,-(A7)
00001D38  45F9 0000 3051          lea       _printf.L,A2
00001D3C  324C      
00001D3E  47F9 0B00 3052          lea       _BreakPointSetOrCleared.L,A3
00001D42  015E      
                    3053   ; int i;
                    3054   ; int BPNumber;
                    3055   ; int BPAddress;
                    3056   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3057   ; // see if any free break points
                    3058   ; for (i = 0; i < 8; i++) {
00001D44  4282      3059          clr.l     D2
                    3060   SetBreakPoint_1:
00001D46  0C82 0000 3061          cmp.l     #8,D2
00001D4A  0008      
00001D4C  6C10      3062          bge.s     SetBreakPoint_3
                    3063   ; if (BreakPointSetOrCleared[i] == 0)
00001D4E  2002      3064          move.l    D2,D0
00001D50  E588      3065          lsl.l     #2,D0
00001D52  2033 0800 3066          move.l    0(A3,D0.L),D0
00001D56  6602      3067          bne.s     SetBreakPoint_4
                    3068   ; break;         // if spare BP found allow user to set it
00001D58  6004      3069          bra.s     SetBreakPoint_3
                    3070   SetBreakPoint_4:
00001D5A  5282      3071          addq.l    #1,D2
00001D5C  60E8      3072          bra       SetBreakPoint_1
                    3073   SetBreakPoint_3:
                    3074   ; }
                    3075   ; if (i == 8) {
00001D5E  0C82 0000 3076          cmp.l     #8,D2
00001D62  0008      
00001D64  660E      3077          bne.s     SetBreakPoint_6
                    3078   ; printf("\r\nNo FREE Break Points.....");
00001D66  4879 0000 3079          pea       @lab3_71.L
00001D6A  4242      
00001D6C  4E92      3080          jsr       (A2)
00001D6E  584F      3081          addq.w    #4,A7
                    3082   ; return;
00001D70  6000 00D6 3083          bra       SetBreakPoint_15
                    3084   SetBreakPoint_6:
                    3085   ; }
                    3086   ; printf("\r\nBreak Point Address: ");
00001D74  4879 0000 3087          pea       @lab3_72.L
00001D78  425E      
00001D7A  4E92      3088          jsr       (A2)
00001D7C  584F      3089          addq.w    #4,A7
                    3090   ; BPAddress = Get8HexDigits(0);
00001D7E  42A7      3091          clr.l     -(A7)
00001D80  4EB8 0CA4 3092          jsr       _Get8HexDigits
00001D84  584F      3093          addq.w    #4,A7
00001D86  2600      3094          move.l    D0,D3
                    3095   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BPAddress);     // point to the instruction in the user program we are about to change
00001D88  2803      3096          move.l    D3,D4
                    3097   ; if ((BPAddress & 0x00000001) == 0x00000001) {   // cannot set BP at an odd address
00001D8A  2003      3098          move.l    D3,D0
00001D8C  C0BC 0000 3099          and.l     #1,D0
00001D90  0001      
00001D92  0C80 0000 3100          cmp.l     #1,D0
00001D96  0001      
00001D98  660E      3101          bne.s     SetBreakPoint_9
                    3102   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses");
00001D9A  4879 0000 3103          pea       @lab3_73.L
00001D9E  4276      
00001DA0  4E92      3104          jsr       (A2)
00001DA2  584F      3105          addq.w    #4,A7
                    3106   ; return;
00001DA4  6000 00A2 3107          bra       SetBreakPoint_15
                    3108   SetBreakPoint_9:
                    3109   ; }
                    3110   ; if (BPAddress < 0x00008000) {   // cannot set BP in ROM
00001DA8  0C83 0000 3111          cmp.l     #32768,D3
00001DAC  8000      
00001DAE  640E      3112          bhs.s     SetBreakPoint_11
                    3113   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]");
00001DB0  4879 0000 3114          pea       @lab3_74.L
00001DB4  42AC      
00001DB6  4E92      3115          jsr       (A2)
00001DB8  584F      3116          addq.w    #4,A7
                    3117   ; return;
00001DBA  6000 008C 3118          bra       SetBreakPoint_15
                    3119   SetBreakPoint_11:
                    3120   ; }
                    3121   ; // search for first free bp or existing same BP
                    3122   ; for (i = 0; i < 8; i++) {
00001DBE  4282      3123          clr.l     D2
                    3124   SetBreakPoint_13:
00001DC0  0C82 0000 3125          cmp.l     #8,D2
00001DC4  0008      
00001DC6  6C00 0080 3126          bge       SetBreakPoint_15
                    3127   ; if (BreakPointAddress[i] == BPAddress) {
00001DCA  2002      3128          move.l    D2,D0
00001DCC  E588      3129          lsl.l     #2,D0
00001DCE  41F9 0B00 3130          lea       _BreakPointAddress.L,A0
00001DD2  012E      
00001DD4  B6B0 0800 3131          cmp.l     0(A0,D0.L),D3
00001DD8  6610      3132          bne.s     SetBreakPoint_16
                    3133   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress);
00001DDA  2F03      3134          move.l    D3,-(A7)
00001DDC  4879 0000 3135          pea       @lab3_75.L
00001DE0  42F4      
00001DE2  4E92      3136          jsr       (A2)
00001DE4  504F      3137          addq.w    #8,A7
                    3138   ; return;
00001DE6  6000 0060 3139          bra       SetBreakPoint_15
                    3140   SetBreakPoint_16:
                    3141   ; }
                    3142   ; if (BreakPointSetOrCleared[i] == 0) {
00001DEA  2002      3143          move.l    D2,D0
00001DEC  E588      3144          lsl.l     #2,D0
00001DEE  2033 0800 3145          move.l    0(A3,D0.L),D0
00001DF2  6600 004E 3146          bne       SetBreakPoint_18
                    3147   ; // set BP here
                    3148   ; BreakPointSetOrCleared[i] = 1;                                 // mark this breakpoint as set
00001DF6  2002      3149          move.l    D2,D0
00001DF8  E588      3150          lsl.l     #2,D0
00001DFA  27BC 0000 3151          move.l    #1,0(A3,D0.L)
00001DFE  0001 0800 
                    3152   ; BreakPointInstruction[i] = *ProgramBreakPointAddress;          // copy the user program instruction here so we can put it back afterwards
00001E02  2044      3153          move.l    D4,A0
00001E04  2002      3154          move.l    D2,D0
00001E06  E388      3155          lsl.l     #1,D0
00001E08  43F9 0B00 3156          lea       _BreakPointInstruction.L,A1
00001E0C  014E      
00001E0E  3390 0800 3157          move.w    (A0),0(A1,D0.L)
                    3158   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress);
00001E12  2F04      3159          move.l    D4,-(A7)
00001E14  4879 0000 3160          pea       @lab3_76.L
00001E18  432C      
00001E1A  4E92      3161          jsr       (A2)
00001E1C  504F      3162          addq.w    #8,A7
                    3163   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);   // put a Trap14 instruction at the user specified address
00001E1E  2044      3164          move.l    D4,A0
00001E20  30BC 4E4E 3165          move.w    #20046,(A0)
                    3166   ; BreakPointAddress[i] = BPAddress;                              // record the address of this break point in the debugger
00001E24  2002      3167          move.l    D2,D0
00001E26  E588      3168          lsl.l     #2,D0
00001E28  41F9 0B00 3169          lea       _BreakPointAddress.L,A0
00001E2C  012E      
00001E2E  2183 0800 3170          move.l    D3,0(A0,D0.L)
                    3171   ; printf("\r\n");
00001E32  4879 0000 3172          pea       @lab3_1.L
00001E36  3B9C      
00001E38  4E92      3173          jsr       (A2)
00001E3A  584F      3174          addq.w    #4,A7
                    3175   ; BreakPointDisplay();       // display the break points
00001E3C  4EB8 1900 3176          jsr       _BreakPointDisplay
                    3177   ; return;
00001E40  6006      3178          bra.s     SetBreakPoint_15
                    3179   SetBreakPoint_18:
00001E42  5282      3180          addq.l    #1,D2
00001E44  6000 FF7A 3181          bra       SetBreakPoint_13
                    3182   SetBreakPoint_15:
00001E48  4CDF 0C1C 3183          movem.l   (A7)+,D2/D3/D4/A2/A3
00001E4C  4E5E      3184          unlk      A6
00001E4E  4E75      3185          rts
                    3186   ; }
                    3187   ; }
                    3188   ; }
                    3189   ; void SetWatchPoint(void)
                    3190   ; {
                    3191   _SetWatchPoint:
00001E50  4E56 FFF8 3192          link      A6,#-8
00001E54  48E7 3030 3193          movem.l   D2/D3/A2/A3,-(A7)
00001E58  45F9 0000 3194          lea       _printf.L,A2
00001E5C  324C      
00001E5E  47F9 0B00 3195          lea       _WatchPointSetOrCleared.L,A3
00001E62  01A2      
                    3196   ; int i;
                    3197   ; int WPNumber;
                    3198   ; int WPAddress;
                    3199   ; volatile unsigned short int* ProgramWatchPointAddress;
                    3200   ; // see if any free break points
                    3201   ; for (i = 0; i < 8; i++) {
00001E64  4282      3202          clr.l     D2
                    3203   SetWatchPoint_1:
00001E66  0C82 0000 3204          cmp.l     #8,D2
00001E6A  0008      
00001E6C  6C10      3205          bge.s     SetWatchPoint_3
                    3206   ; if (WatchPointSetOrCleared[i] == 0)
00001E6E  2002      3207          move.l    D2,D0
00001E70  E588      3208          lsl.l     #2,D0
00001E72  2033 0800 3209          move.l    0(A3,D0.L),D0
00001E76  6602      3210          bne.s     SetWatchPoint_4
                    3211   ; break;         // if spare WP found allow user to set it
00001E78  6004      3212          bra.s     SetWatchPoint_3
                    3213   SetWatchPoint_4:
00001E7A  5282      3214          addq.l    #1,D2
00001E7C  60E8      3215          bra       SetWatchPoint_1
                    3216   SetWatchPoint_3:
                    3217   ; }
                    3218   ; if (i == 8) {
00001E7E  0C82 0000 3219          cmp.l     #8,D2
00001E82  0008      
00001E84  660E      3220          bne.s     SetWatchPoint_6
                    3221   ; printf("\r\nNo FREE Watch Points.....");
00001E86  4879 0000 3222          pea       @lab3_77.L
00001E8A  4352      
00001E8C  4E92      3223          jsr       (A2)
00001E8E  584F      3224          addq.w    #4,A7
                    3225   ; return;
00001E90  6000 008C 3226          bra       SetWatchPoint_11
                    3227   SetWatchPoint_6:
                    3228   ; }
                    3229   ; printf("\r\nWatch Point Address: ");
00001E94  4879 0000 3230          pea       @lab3_78.L
00001E98  436E      
00001E9A  4E92      3231          jsr       (A2)
00001E9C  584F      3232          addq.w    #4,A7
                    3233   ; WPAddress = Get8HexDigits(0);
00001E9E  42A7      3234          clr.l     -(A7)
00001EA0  4EB8 0CA4 3235          jsr       _Get8HexDigits
00001EA4  584F      3236          addq.w    #4,A7
00001EA6  2600      3237          move.l    D0,D3
                    3238   ; // search for first free wp or existing same wp
                    3239   ; for (i = 0; i < 8; i++) {
00001EA8  4282      3240          clr.l     D2
                    3241   SetWatchPoint_9:
00001EAA  0C82 0000 3242          cmp.l     #8,D2
00001EAE  0008      
00001EB0  6C00 006C 3243          bge       SetWatchPoint_11
                    3244   ; if (WatchPointAddress[i] == WPAddress && WPAddress != 0) {     //so we can set a wp at 0
00001EB4  2002      3245          move.l    D2,D0
00001EB6  E588      3246          lsl.l     #2,D0
00001EB8  41F9 0B00 3247          lea       _WatchPointAddress.L,A0
00001EBC  0182      
00001EBE  B6B0 0800 3248          cmp.l     0(A0,D0.L),D3
00001EC2  6614      3249          bne.s     SetWatchPoint_12
00001EC4  4A83      3250          tst.l     D3
00001EC6  6710      3251          beq.s     SetWatchPoint_12
                    3252   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress);
00001EC8  2F03      3253          move.l    D3,-(A7)
00001ECA  4879 0000 3254          pea       @lab3_79.L
00001ECE  4386      
00001ED0  4E92      3255          jsr       (A2)
00001ED2  504F      3256          addq.w    #8,A7
                    3257   ; return;
00001ED4  6000 0048 3258          bra       SetWatchPoint_11
                    3259   SetWatchPoint_12:
                    3260   ; }
                    3261   ; if (WatchPointSetOrCleared[i] == 0) {
00001ED8  2002      3262          move.l    D2,D0
00001EDA  E588      3263          lsl.l     #2,D0
00001EDC  2033 0800 3264          move.l    0(A3,D0.L),D0
00001EE0  6600 0038 3265          bne       SetWatchPoint_14
                    3266   ; WatchPointSetOrCleared[i] = 1;                                 // mark this watchpoint as set
00001EE4  2002      3267          move.l    D2,D0
00001EE6  E588      3268          lsl.l     #2,D0
00001EE8  27BC 0000 3269          move.l    #1,0(A3,D0.L)
00001EEC  0001 0800 
                    3270   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress);
00001EF0  2F03      3271          move.l    D3,-(A7)
00001EF2  4879 0000 3272          pea       @lab3_80.L
00001EF6  43BC      
00001EF8  4E92      3273          jsr       (A2)
00001EFA  504F      3274          addq.w    #8,A7
                    3275   ; WatchPointAddress[i] = WPAddress;                              // record the address of this watch point in the debugger
00001EFC  2002      3276          move.l    D2,D0
00001EFE  E588      3277          lsl.l     #2,D0
00001F00  41F9 0B00 3278          lea       _WatchPointAddress.L,A0
00001F04  0182      
00001F06  2183 0800 3279          move.l    D3,0(A0,D0.L)
                    3280   ; printf("\r\n");
00001F0A  4879 0000 3281          pea       @lab3_1.L
00001F0E  3B9C      
00001F10  4E92      3282          jsr       (A2)
00001F12  584F      3283          addq.w    #4,A7
                    3284   ; WatchPointDisplay();       // display the break points
00001F14  4EB8 19D4 3285          jsr       _WatchPointDisplay
                    3286   ; return;
00001F18  6004      3287          bra.s     SetWatchPoint_11
                    3288   SetWatchPoint_14:
00001F1A  5282      3289          addq.l    #1,D2
00001F1C  608C      3290          bra       SetWatchPoint_9
                    3291   SetWatchPoint_11:
00001F1E  4CDF 0C0C 3292          movem.l   (A7)+,D2/D3/A2/A3
00001F22  4E5E      3293          unlk      A6
00001F24  4E75      3294          rts
                    3295   ; }
                    3296   ; }
                    3297   ; }
                    3298   ; void HandleBreakPoint(void)
                    3299   ; {
                    3300   _HandleBreakPoint:
00001F26  4E56 FFFC 3301          link      A6,#-4
00001F2A  48E7 0038 3302          movem.l   A2/A3/A4,-(A7)
00001F2E  45F9 0B00 3303          lea       _i.L,A2
00001F32  00C4      
00001F34  47F9 0000 3304          lea       _printf.L,A3
00001F38  324C      
00001F3A  49F9 0B00 3305          lea       _PC.L,A4
00001F3E  0120      
                    3306   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3307   ; // now we have to put the break point back to run the instruction
                    3308   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3309   ; PC = PC - 2;  // ready for user to resume after reaching breakpoint
00001F40  5594      3310          subq.l    #2,(A4)
                    3311   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT");
00001F42  4879 0000 3312          pea       @lab3_81.L
00001F46  43E2      
00001F48  4E93      3313          jsr       (A3)
00001F4A  584F      3314          addq.w    #4,A7
                    3315   ; printf("\r\nSingle Step : [ON]");
00001F4C  4879 0000 3316          pea       @lab3_82.L
00001F50  43F6      
00001F52  4E93      3317          jsr       (A3)
00001F54  584F      3318          addq.w    #4,A7
                    3319   ; printf("\r\nBreakPoints : [Enabled]");
00001F56  4879 0000 3320          pea       @lab3_83.L
00001F5A  440C      
00001F5C  4E93      3321          jsr       (A3)
00001F5E  584F      3322          addq.w    #4,A7
                    3323   ; // now clear the break point (put original instruction back)
                    3324   ; ProgramBreakPointAddress = PC;
00001F60  2D54 FFFC 3325          move.l    (A4),-4(A6)
                    3326   ; for (i = 0; i < 8; i++) {
00001F64  4292      3327          clr.l     (A2)
                    3328   HandleBreakPoint_1:
00001F66  2012      3329          move.l    (A2),D0
00001F68  0C80 0000 3330          cmp.l     #8,D0
00001F6C  0008      
00001F6E  6400 0056 3331          bhs       HandleBreakPoint_3
                    3332   ; if (BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001F72  2012      3333          move.l    (A2),D0
00001F74  E588      3334          lsl.l     #2,D0
00001F76  41F9 0B00 3335          lea       _BreakPointAddress.L,A0
00001F7A  012E      
00001F7C  2230 0800 3336          move.l    0(A0,D0.L),D1
00001F80  B294      3337          cmp.l     (A4),D1
00001F82  6600 003E 3338          bne       HandleBreakPoint_4
                    3339   ; BreakPointAddress[i] = 0;
00001F86  2012      3340          move.l    (A2),D0
00001F88  E588      3341          lsl.l     #2,D0
00001F8A  41F9 0B00 3342          lea       _BreakPointAddress.L,A0
00001F8E  012E      
00001F90  42B0 0800 3343          clr.l     0(A0,D0.L)
                    3344   ; BreakPointSetOrCleared[i] = 0;
00001F94  2012      3345          move.l    (A2),D0
00001F96  E588      3346          lsl.l     #2,D0
00001F98  41F9 0B00 3347          lea       _BreakPointSetOrCleared.L,A0
00001F9C  015E      
00001F9E  42B0 0800 3348          clr.l     0(A0,D0.L)
                    3349   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00001FA2  2012      3350          move.l    (A2),D0
00001FA4  E388      3351          lsl.l     #1,D0
00001FA6  41F9 0B00 3352          lea       _BreakPointInstruction.L,A0
00001FAA  014E      
00001FAC  226E FFFC 3353          move.l    -4(A6),A1
00001FB0  32B0 0800 3354          move.w    0(A0,D0.L),(A1)
                    3355   ; BreakPointInstruction[i] = 0;
00001FB4  2012      3356          move.l    (A2),D0
00001FB6  E388      3357          lsl.l     #1,D0
00001FB8  41F9 0B00 3358          lea       _BreakPointInstruction.L,A0
00001FBC  014E      
00001FBE  4270 0800 3359          clr.w     0(A0,D0.L)
                    3360   HandleBreakPoint_4:
00001FC2  5292      3361          addq.l    #1,(A2)
00001FC4  60A0      3362          bra       HandleBreakPoint_1
                    3363   HandleBreakPoint_3:
                    3364   ; }
                    3365   ; }
                    3366   ; DumpRegisters();
00001FC6  4EB8 1152 3367          jsr       _DumpRegisters
                    3368   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001FCA  4879 0000 3369          pea       @lab3_45.L
00001FCE  3F88      
00001FD0  4E93      3370          jsr       (A3)
00001FD2  584F      3371          addq.w    #4,A7
                    3372   ; printf("\r\nPress <ESC> to Resume User Program\r\n");
00001FD4  4879 0000 3373          pea       @lab3_84.L
00001FD8  4426      
00001FDA  4E93      3374          jsr       (A3)
00001FDC  584F      3375          addq.w    #4,A7
                    3376   ; menu();
00001FDE  4EB9 0000 3377          jsr       _menu
00001FE2  21EA      
00001FE4  4CDF 1C00 3378          movem.l   (A7)+,A2/A3/A4
00001FE8  4E5E      3379          unlk      A6
00001FEA  4E75      3380          rts
                    3381   ; }
                    3382   ; void UnknownCommand()
                    3383   ; {
                    3384   _UnknownCommand:
                    3385   ; printf("\r\nUnknown Command.....\r\n");
00001FEC  4879 0000 3386          pea       @lab3_85.L
00001FF0  444E      
00001FF2  4EB9 0000 3387          jsr       _printf
00001FF6  324C      
00001FF8  584F      3388          addq.w    #4,A7
                    3389   ; Help();
00001FFA  4EB9 0000 3390          jsr       _Help
00001FFE  2110      
00002000  4E75      3391          rts
                    3392   ; }
                    3393   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3394   ; void CallDebugMonitor(void)
                    3395   ; {
                    3396   _CallDebugMonitor:
                    3397   ; printf("\r\nProgram Ended (TRAP #15)....");
00002002  4879 0000 3398          pea       @lab3_86.L
00002006  4468      
00002008  4EB9 0000 3399          jsr       _printf
0000200C  324C      
0000200E  584F      3400          addq.w    #4,A7
                    3401   ; menu();
00002010  4EB9 0000 3402          jsr       _menu
00002014  21EA      
00002016  4E75      3403          rts
                    3404   ; }
                    3405   ; void Breakpoint(void)
                    3406   ; {
                    3407   _Breakpoint:
00002018  2F02      3408          move.l    D2,-(A7)
                    3409   ; char c;
                    3410   ; c = toupper(_getch());
0000201A  2F00      3411          move.l    D0,-(A7)
0000201C  4EB8 0B68 3412          jsr       __getch
00002020  2200      3413          move.l    D0,D1
00002022  201F      3414          move.l    (A7)+,D0
00002024  2F01      3415          move.l    D1,-(A7)
00002026  4EB9 0000 3416          jsr       _toupper
0000202A  3220      
0000202C  584F      3417          addq.w    #4,A7
0000202E  1400      3418          move.b    D0,D2
                    3419   ; if (c == (char)('D'))                                      // BreakPoint Display
00002030  0C02 0044 3420          cmp.b     #68,D2
00002034  6608      3421          bne.s     Breakpoint_1
                    3422   ; BreakPointDisplay();
00002036  4EB8 1900 3423          jsr       _BreakPointDisplay
0000203A  6000 0054 3424          bra       Breakpoint_10
                    3425   Breakpoint_1:
                    3426   ; else if (c == (char)('K')) {                                 // breakpoint Kill
0000203E  0C02 004B 3427          cmp.b     #75,D2
00002042  6630      3428          bne.s     Breakpoint_3
                    3429   ; printf("\r\nKill All Break Points...(y/n)?");
00002044  4879 0000 3430          pea       @lab3_87.L
00002048  4488      
0000204A  4EB9 0000 3431          jsr       _printf
0000204E  324C      
00002050  584F      3432          addq.w    #4,A7
                    3433   ; c = toupper(_getch());
00002052  2F00      3434          move.l    D0,-(A7)
00002054  4EB8 0B68 3435          jsr       __getch
00002058  2200      3436          move.l    D0,D1
0000205A  201F      3437          move.l    (A7)+,D0
0000205C  2F01      3438          move.l    D1,-(A7)
0000205E  4EB9 0000 3439          jsr       _toupper
00002062  3220      
00002064  584F      3440          addq.w    #4,A7
00002066  1400      3441          move.b    D0,D2
                    3442   ; if (c == (char)('Y'))
00002068  0C02 0059 3443          cmp.b     #89,D2
0000206C  6604      3444          bne.s     Breakpoint_5
                    3445   ; KillAllBreakPoints();
0000206E  4EB8 1C98 3446          jsr       _KillAllBreakPoints
                    3447   Breakpoint_5:
00002072  601C      3448          bra.s     Breakpoint_10
                    3449   Breakpoint_3:
                    3450   ; }
                    3451   ; else if (c == (char)('S')) {
00002074  0C02 0053 3452          cmp.b     #83,D2
00002078  6606      3453          bne.s     Breakpoint_7
                    3454   ; SetBreakPoint();
0000207A  4EB8 1D30 3455          jsr       _SetBreakPoint
0000207E  6010      3456          bra.s     Breakpoint_10
                    3457   Breakpoint_7:
                    3458   ; }
                    3459   ; else if (c == (char)('C')) {
00002080  0C02 0043 3460          cmp.b     #67,D2
00002084  6606      3461          bne.s     Breakpoint_9
                    3462   ; BreakPointClear();
00002086  4EB8 1A80 3463          jsr       _BreakPointClear
0000208A  6004      3464          bra.s     Breakpoint_10
                    3465   Breakpoint_9:
                    3466   ; }
                    3467   ; else
                    3468   ; UnknownCommand();
0000208C  4EB8 1FEC 3469          jsr       _UnknownCommand
                    3470   Breakpoint_10:
00002090  241F      3471          move.l    (A7)+,D2
00002092  4E75      3472          rts
                    3473   ; }
                    3474   ; void Watchpoint(void)
                    3475   ; {
                    3476   _Watchpoint:
00002094  2F02      3477          move.l    D2,-(A7)
                    3478   ; char c;
                    3479   ; c = toupper(_getch());
00002096  2F00      3480          move.l    D0,-(A7)
00002098  4EB8 0B68 3481          jsr       __getch
0000209C  2200      3482          move.l    D0,D1
0000209E  201F      3483          move.l    (A7)+,D0
000020A0  2F01      3484          move.l    D1,-(A7)
000020A2  4EB9 0000 3485          jsr       _toupper
000020A6  3220      
000020A8  584F      3486          addq.w    #4,A7
000020AA  1400      3487          move.b    D0,D2
                    3488   ; if (c == (char)('D'))                                      // WatchPoint Display
000020AC  0C02 0044 3489          cmp.b     #68,D2
000020B0  6608      3490          bne.s     Watchpoint_1
                    3491   ; WatchPointDisplay();
000020B2  4EB8 19D4 3492          jsr       _WatchPointDisplay
000020B6  6000 0054 3493          bra       Watchpoint_10
                    3494   Watchpoint_1:
                    3495   ; else if (c == (char)('K')) {                                 // wtahcpoint Kill
000020BA  0C02 004B 3496          cmp.b     #75,D2
000020BE  6630      3497          bne.s     Watchpoint_3
                    3498   ; printf("\r\nKill All Watch Points...(y/n)?");
000020C0  4879 0000 3499          pea       @lab3_88.L
000020C4  44AA      
000020C6  4EB9 0000 3500          jsr       _printf
000020CA  324C      
000020CC  584F      3501          addq.w    #4,A7
                    3502   ; c = toupper(_getch());
000020CE  2F00      3503          move.l    D0,-(A7)
000020D0  4EB8 0B68 3504          jsr       __getch
000020D4  2200      3505          move.l    D0,D1
000020D6  201F      3506          move.l    (A7)+,D0
000020D8  2F01      3507          move.l    D1,-(A7)
000020DA  4EB9 0000 3508          jsr       _toupper
000020DE  3220      
000020E0  584F      3509          addq.w    #4,A7
000020E2  1400      3510          move.b    D0,D2
                    3511   ; if (c == (char)('Y'))
000020E4  0C02 0059 3512          cmp.b     #89,D2
000020E8  6604      3513          bne.s     Watchpoint_5
                    3514   ; KillAllWatchPoints();
000020EA  4EB8 1D00 3515          jsr       _KillAllWatchPoints
                    3516   Watchpoint_5:
000020EE  601C      3517          bra.s     Watchpoint_10
                    3518   Watchpoint_3:
                    3519   ; }
                    3520   ; else if (c == (char)('S')) {
000020F0  0C02 0053 3521          cmp.b     #83,D2
000020F4  6606      3522          bne.s     Watchpoint_7
                    3523   ; SetWatchPoint();
000020F6  4EB8 1E50 3524          jsr       _SetWatchPoint
000020FA  6010      3525          bra.s     Watchpoint_10
                    3526   Watchpoint_7:
                    3527   ; }
                    3528   ; else if (c == (char)('C')) {
000020FC  0C02 0043 3529          cmp.b     #67,D2
00002100  6606      3530          bne.s     Watchpoint_9
                    3531   ; WatchPointClear();
00002102  4EB8 1B5A 3532          jsr       _WatchPointClear
00002106  6004      3533          bra.s     Watchpoint_10
                    3534   Watchpoint_9:
                    3535   ; }
                    3536   ; else
                    3537   ; UnknownCommand();
00002108  4EB8 1FEC 3538          jsr       _UnknownCommand
                    3539   Watchpoint_10:
0000210C  241F      3540          move.l    (A7)+,D2
0000210E  4E75      3541          rts
                    3542   ; }
                    3543   ; void Help(void)
                    3544   ; {
                    3545   _Help:
00002110  48E7 2020 3546          movem.l   D2/A2,-(A7)
00002114  45F9 0000 3547          lea       _printf.L,A2
00002118  324C      
                    3548   ; char* banner = "\r\n----------------------------------------------------------------";
0000211A  41F9 0000 3549          lea       @lab3_89.L,A0
0000211E  44CC      
00002120  2408      3550          move.l    A0,D2
                    3551   ; printf(banner);
00002122  2F02      3552          move.l    D2,-(A7)
00002124  4E92      3553          jsr       (A2)
00002126  584F      3554          addq.w    #4,A7
                    3555   ; printf("\r\n  Debugger Command Summary");
00002128  4879 0000 3556          pea       @lab3_90.L
0000212C  4510      
0000212E  4E92      3557          jsr       (A2)
00002130  584F      3558          addq.w    #4,A7
                    3559   ; printf(banner);
00002132  2F02      3560          move.l    D2,-(A7)
00002134  4E92      3561          jsr       (A2)
00002136  584F      3562          addq.w    #4,A7
                    3563   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
00002138  4879 0000 3564          pea       @lab3_91.L
0000213C  452E      
0000213E  4E92      3565          jsr       (A2)
00002140  584F      3566          addq.w    #4,A7
                    3567   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill");
00002142  4879 0000 3568          pea       @lab3_92.L
00002146  4572      
00002148  4E92      3569          jsr       (A2)
0000214A  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\n  C            - Copy Program from Flash to Main Memory");
0000214C  4879 0000 3572          pea       @lab3_93.L
00002150  45AA      
00002152  4E92      3573          jsr       (A2)
00002154  584F      3574          addq.w    #4,A7
                    3575   ; printf("\r\n  D            - Dump Memory Contents to Screen");
00002156  4879 0000 3576          pea       @lab3_94.L
0000215A  45E4      
0000215C  4E92      3577          jsr       (A2)
0000215E  584F      3578          addq.w    #4,A7
                    3579   ; printf("\r\n  E            - Enter String into Memory");
00002160  4879 0000 3580          pea       @lab3_95.L
00002164  4616      
00002166  4E92      3581          jsr       (A2)
00002168  584F      3582          addq.w    #4,A7
                    3583   ; printf("\r\n  F            - Fill Memory with Data");
0000216A  4879 0000 3584          pea       @lab3_96.L
0000216E  4642      
00002170  4E92      3585          jsr       (A2)
00002172  584F      3586          addq.w    #4,A7
                    3587   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC);
00002174  2F39 0B00 3588          move.l    _PC.L,-(A7)
00002178  0120      
0000217A  4879 0000 3589          pea       @lab3_97.L
0000217E  466C      
00002180  4E92      3590          jsr       (A2)
00002182  504F      3591          addq.w    #8,A7
                    3592   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop");
00002184  4879 0000 3593          pea       @lab3_98.L
00002188  46A6      
0000218A  4E92      3594          jsr       (A2)
0000218C  584F      3595          addq.w    #4,A7
                    3596   ; printf("\r\n  M            - Memory Examine and Change");
0000218E  4879 0000 3597          pea       @lab3_99.L
00002192  46DE      
00002194  4E92      3598          jsr       (A2)
00002196  584F      3599          addq.w    #4,A7
                    3600   ; printf("\r\n  P            - Program Flash Memory with User Program");
00002198  4879 0000 3601          pea       @lab3_100.L
0000219C  470C      
0000219E  4E92      3602          jsr       (A2)
000021A0  584F      3603          addq.w    #4,A7
                    3604   ; printf("\r\n  R            - Display 68000 Registers");
000021A2  4879 0000 3605          pea       @lab3_101.L
000021A6  4746      
000021A8  4E92      3606          jsr       (A2)
000021AA  584F      3607          addq.w    #4,A7
                    3608   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode");
000021AC  4879 0000 3609          pea       @lab3_102.L
000021B0  4772      
000021B2  4E92      3610          jsr       (A2)
000021B4  584F      3611          addq.w    #4,A7
                    3612   ; printf("\r\n  TM           - Test Memory");
000021B6  4879 0000 3613          pea       @lab3_103.L
000021BA  47A4      
000021BC  4E92      3614          jsr       (A2)
000021BE  584F      3615          addq.w    #4,A7
                    3616   ; printf("\r\n  TS           - Test Switches: SW7-0");
000021C0  4879 0000 3617          pea       @lab3_104.L
000021C4  47C4      
000021C6  4E92      3618          jsr       (A2)
000021C8  584F      3619          addq.w    #4,A7
                    3620   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment");
000021CA  4879 0000 3621          pea       @lab3_105.L
000021CE  47EC      
000021D0  4E92      3622          jsr       (A2)
000021D2  584F      3623          addq.w    #4,A7
                    3624   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill");
000021D4  4879 0000 3625          pea       @lab3_106.L
000021D8  4822      
000021DA  4E92      3626          jsr       (A2)
000021DC  584F      3627          addq.w    #4,A7
                    3628   ; printf(banner);
000021DE  2F02      3629          move.l    D2,-(A7)
000021E0  4E92      3630          jsr       (A2)
000021E2  584F      3631          addq.w    #4,A7
000021E4  4CDF 0404 3632          movem.l   (A7)+,D2/A2
000021E8  4E75      3633          rts
                    3634   ; }
                    3635   ; void menu(void)
                    3636   ; {
                    3637   _menu:
000021EA  48E7 303C 3638          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000021EE  45F9 0000 3639          lea       _printf.L,A2
000021F2  324C      
000021F4  47F9 0B00 3640          lea       _Trace.L,A3
000021F8  00D8      
000021FA  49F9 0B00 3641          lea       _x.L,A4
000021FE  00C8      
00002200  4BF9 0B00 3642          lea       _SR.L,A5
00002204  012C      
                    3643   ; char c, c1;
                    3644   ; while (1) {
                    3645   menu_1:
                    3646   ; FlushKeyboard();               // dump unread characters from keyboard
00002206  4EB8 0BA6 3647          jsr       _FlushKeyboard
                    3648   ; printf("\r\n#");
0000220A  4879 0000 3649          pea       @lab3_107.L
0000220E  485A      
00002210  4E92      3650          jsr       (A2)
00002212  584F      3651          addq.w    #4,A7
                    3652   ; c = toupper(_getch());
00002214  2F00      3653          move.l    D0,-(A7)
00002216  4EB8 0B68 3654          jsr       __getch
0000221A  2200      3655          move.l    D0,D1
0000221C  201F      3656          move.l    (A7)+,D0
0000221E  2F01      3657          move.l    D1,-(A7)
00002220  4EB9 0000 3658          jsr       _toupper
00002224  3220      
00002226  584F      3659          addq.w    #4,A7
00002228  1400      3660          move.b    D0,D2
                    3661   ; if (c == (char)('L'))                  // load s record file
0000222A  0C02 004C 3662          cmp.b     #76,D2
0000222E  6608      3663          bne.s     menu_4
                    3664   ; Load_SRecordFile();
00002230  4EB8 0E36 3665          jsr       _Load_SRecordFile
00002234  6000 021E 3666          bra       menu_46
                    3667   menu_4:
                    3668   ; else if (c == (char)('D'))             // dump memory
00002238  0C02 0044 3669          cmp.b     #68,D2
0000223C  6608      3670          bne.s     menu_6
                    3671   ; DumpMemory();
0000223E  4EB8 0CCC 3672          jsr       _DumpMemory
00002242  6000 0210 3673          bra       menu_46
                    3674   menu_6:
                    3675   ; else if (c == (char)('E'))             // Enter String into memory
00002246  0C02 0045 3676          cmp.b     #69,D2
0000224A  660A      3677          bne.s     menu_8
                    3678   ; EnterString();
0000224C  4EB9 0000 3679          jsr       _EnterString
00002250  259C      
00002252  6000 0200 3680          bra       menu_46
                    3681   menu_8:
                    3682   ; else if (c == (char)('F'))             // fill memory
00002256  0C02 0046 3683          cmp.b     #70,D2
0000225A  6608      3684          bne.s     menu_10
                    3685   ; FillMemory();
0000225C  4EB8 0DBC 3686          jsr       _FillMemory
00002260  6000 01F2 3687          bra       menu_46
                    3688   menu_10:
                    3689   ; else if (c == (char)('G')) {           // go user program
00002264  0C02 0047 3690          cmp.b     #71,D2
00002268  6626      3691          bne.s     menu_12
                    3692   ; printf("\r\nProgram Running.....");
0000226A  4879 0000 3693          pea       @lab3_108.L
0000226E  485E      
00002270  4E92      3694          jsr       (A2)
00002272  584F      3695          addq.w    #4,A7
                    3696   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
00002274  4879 0000 3697          pea       @lab3_109.L
00002278  4876      
0000227A  4E92      3698          jsr       (A2)
0000227C  584F      3699          addq.w    #4,A7
                    3700   ; GoFlag = 1;
0000227E  23FC 0000 3701          move.l    #1,_GoFlag.L
00002282  0001 0B00 
00002286  00DC      
                    3702   ; go();
00002288  4EB8 08B8 3703          jsr       _go
0000228C  6000 01C6 3704          bra       menu_46
                    3705   menu_12:
                    3706   ; }
                    3707   ; else if (c == (char)('M'))           // memory examine and modify
00002290  0C02 004D 3708          cmp.b     #77,D2
00002294  6608      3709          bne.s     menu_14
                    3710   ; MemoryChange();
00002296  4EB8 0FC4 3711          jsr       _MemoryChange
0000229A  6000 01B8 3712          bra       menu_46
                    3713   menu_14:
                    3714   ; else if (c == (char)('P'))            // Program Flash Chip
0000229E  0C02 0050 3715          cmp.b     #80,D2
000022A2  6608      3716          bne.s     menu_16
                    3717   ; ProgramFlashChip();
000022A4  4EB8 1140 3718          jsr       _ProgramFlashChip
000022A8  6000 01AA 3719          bra       menu_46
                    3720   menu_16:
                    3721   ; else if (c == (char)('C'))             // copy flash chip to ram and go
000022AC  0C02 0043 3722          cmp.b     #67,D2
000022B0  6608      3723          bne.s     menu_18
                    3724   ; LoadFromFlashChip();
000022B2  4EB8 1142 3725          jsr       _LoadFromFlashChip
000022B6  6000 019C 3726          bra       menu_46
                    3727   menu_18:
                    3728   ; else if (c == (char)('R'))             // dump registers
000022BA  0C02 0052 3729          cmp.b     #82,D2
000022BE  6608      3730          bne.s     menu_20
                    3731   ; DumpRegisters();
000022C0  4EB8 1152 3732          jsr       _DumpRegisters
000022C4  6000 018E 3733          bra       menu_46
                    3734   menu_20:
                    3735   ; else if (c == (char)('.'))           // change registers
000022C8  0C02 002E 3736          cmp.b     #46,D2
000022CC  6608      3737          bne.s     menu_22
                    3738   ; ChangeRegisters();
000022CE  4EB8 1644 3739          jsr       _ChangeRegisters
000022D2  6000 0180 3740          bra       menu_46
                    3741   menu_22:
                    3742   ; else if (c == (char)('B'))              // breakpoint command
000022D6  0C02 0042 3743          cmp.b     #66,D2
000022DA  6608      3744          bne.s     menu_24
                    3745   ; Breakpoint();
000022DC  4EB8 2018 3746          jsr       _Breakpoint
000022E0  6000 0172 3747          bra       menu_46
                    3748   menu_24:
                    3749   ; else if (c == (char)('T')) {          // Test command
000022E4  0C02 0054 3750          cmp.b     #84,D2
000022E8  6600 0046 3751          bne       menu_26
                    3752   ; c1 = toupper(_getch());
000022EC  2F00      3753          move.l    D0,-(A7)
000022EE  4EB8 0B68 3754          jsr       __getch
000022F2  2200      3755          move.l    D0,D1
000022F4  201F      3756          move.l    (A7)+,D0
000022F6  2F01      3757          move.l    D1,-(A7)
000022F8  4EB9 0000 3758          jsr       _toupper
000022FC  3220      
000022FE  584F      3759          addq.w    #4,A7
00002300  1600      3760          move.b    D0,D3
                    3761   ; if (c1 == (char)('M'))                    // memory test
00002302  0C03 004D 3762          cmp.b     #77,D3
00002306  6608      3763          bne.s     menu_28
                    3764   ; MemoryTest();
00002308  4EB9 0000 3765          jsr       _MemoryTest
0000230C  25EC      
0000230E  601C      3766          bra.s     menu_33
                    3767   menu_28:
                    3768   ; else if (c1 == (char)('S'))              // Switch Test command
00002310  0C03 0053 3769          cmp.b     #83,D3
00002314  6606      3770          bne.s     menu_30
                    3771   ; SwitchTest();
00002316  4EB8 0AA4 3772          jsr       _SwitchTest
0000231A  6010      3773          bra.s     menu_33
                    3774   menu_30:
                    3775   ; else if (c1 == (char)('D'))              // display Test command
0000231C  0C03 0044 3776          cmp.b     #68,D3
00002320  6606      3777          bne.s     menu_32
                    3778   ; TestLEDS();
00002322  4EB8 0A50 3779          jsr       _TestLEDS
00002326  6004      3780          bra.s     menu_33
                    3781   menu_32:
                    3782   ; else
                    3783   ; UnknownCommand();
00002328  4EB8 1FEC 3784          jsr       _UnknownCommand
                    3785   menu_33:
0000232C  6000 0126 3786          bra       menu_46
                    3787   menu_26:
                    3788   ; }
                    3789   ; else if (c == (char)(' ')) {             // Next instruction command
00002330  0C02 0020 3790          cmp.b     #32,D2
00002334  6636      3791          bne.s     menu_34
                    3792   ; DisableBreakPoints();
00002336  4EB8 1BFC 3793          jsr       _DisableBreakPoints
                    3794   ; if (Trace == 1 && GoFlag == 1) {    // if the program is running and trace mode on then 'N' is valid
0000233A  2013      3795          move.l    (A3),D0
0000233C  0C80 0000 3796          cmp.l     #1,D0
00002340  0001      
00002342  661A      3797          bne.s     menu_36
00002344  2039 0B00 3798          move.l    _GoFlag.L,D0
00002348  00DC      
0000234A  0C80 0000 3799          cmp.l     #1,D0
0000234E  0001      
00002350  660C      3800          bne.s     menu_36
                    3801   ; TraceException = 1;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002352  13FC 0001 3802          move.b    #1,4194314
00002356  0040 000A 
                    3803   ; return;
0000235A  6000 00FC 3804          bra       menu_38
                    3805   menu_36:
                    3806   ; }
                    3807   ; else
                    3808   ; printf("\r\nError: Press 'G' first to start program");
0000235E  4879 0000 3809          pea       @lab3_110.L
00002362  48A4      
00002364  4E92      3810          jsr       (A2)
00002366  584F      3811          addq.w    #4,A7
00002368  6000 00EA 3812          bra       menu_46
                    3813   menu_34:
                    3814   ; }
                    3815   ; else if (c == (char)('S')) {             // single step
0000236C  0C02 0053 3816          cmp.b     #83,D2
00002370  6600 008C 3817          bne       menu_39
                    3818   ; if (Trace == 0) {
00002374  2013      3819          move.l    (A3),D0
00002376  6600 0050 3820          bne       menu_41
                    3821   ; DisableBreakPoints();
0000237A  4EB8 1BFC 3822          jsr       _DisableBreakPoints
                    3823   ; printf("\r\nSingle Step  :[ON]");
0000237E  4879 0000 3824          pea       @lab3_111.L
00002382  48CE      
00002384  4E92      3825          jsr       (A2)
00002386  584F      3826          addq.w    #4,A7
                    3827   ; printf("\r\nBreak Points :[Disabled]");
00002388  4879 0000 3828          pea       @lab3_44.L
0000238C  3F6C      
0000238E  4E92      3829          jsr       (A2)
00002390  584F      3830          addq.w    #4,A7
                    3831   ; SR = SR | (unsigned short int)(0x8000);    // set T bit in status register
00002392  0055 8000 3832          or.w      #32768,(A5)
                    3833   ; printf("\r\nPress 'G' to Trace Program from address $%X.....", PC);
00002396  2F39 0B00 3834          move.l    _PC.L,-(A7)
0000239A  0120      
0000239C  4879 0000 3835          pea       @lab3_112.L
000023A0  48E4      
000023A2  4E92      3836          jsr       (A2)
000023A4  504F      3837          addq.w    #8,A7
                    3838   ; printf("\r\nPush <RESET Button> to Stop.....");
000023A6  4879 0000 3839          pea       @lab3_113.L
000023AA  4918      
000023AC  4E92      3840          jsr       (A2)
000023AE  584F      3841          addq.w    #4,A7
                    3842   ; DumpRegisters();
000023B0  4EB8 1152 3843          jsr       _DumpRegisters
                    3844   ; Trace = 1;
000023B4  26BC 0000 3845          move.l    #1,(A3)
000023B8  0001      
                    3846   ; TraceException = 1;
000023BA  13FC 0001 3847          move.b    #1,4194314
000023BE  0040 000A 
                    3848   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000023C2  28B8 0074 3849          move.l    116,(A4)
000023C6  6032      3850          bra.s     menu_42
                    3851   menu_41:
                    3852   ; }
                    3853   ; else {
                    3854   ; Trace = 0;
000023C8  4293      3855          clr.l     (A3)
                    3856   ; TraceException = 0;
000023CA  4239 0040 3857          clr.b     4194314
000023CE  000A      
                    3858   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000023D0  28B8 0074 3859          move.l    116,(A4)
                    3860   ; EnableBreakPoints();
000023D4  4EB8 1C50 3861          jsr       _EnableBreakPoints
                    3862   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
000023D8  0255 7FFF 3863          and.w     #32767,(A5)
                    3864   ; printf("\r\nSingle Step : [OFF]");
000023DC  4879 0000 3865          pea       @lab3_114.L
000023E0  493C      
000023E2  4E92      3866          jsr       (A2)
000023E4  584F      3867          addq.w    #4,A7
                    3868   ; printf("\r\nBreak Points :[Enabled]");
000023E6  4879 0000 3869          pea       @lab3_115.L
000023EA  4952      
000023EC  4E92      3870          jsr       (A2)
000023EE  584F      3871          addq.w    #4,A7
                    3872   ; printf("\r\nPress <ESC> to Resume User Program.....");
000023F0  4879 0000 3873          pea       @lab3_116.L
000023F4  496C      
000023F6  4E92      3874          jsr       (A2)
000023F8  584F      3875          addq.w    #4,A7
                    3876   menu_42:
000023FA  6000 0058 3877          bra       menu_46
                    3878   menu_39:
                    3879   ; }
                    3880   ; }
                    3881   ; else if (c == (char)(0x1b)) {   // if user choses to end trace and run program
000023FE  0C02 001B 3882          cmp.b     #27,D2
00002402  6600 0040 3883          bne       menu_43
                    3884   ; Trace = 0;
00002406  4293      3885          clr.l     (A3)
                    3886   ; TraceException = 0;
00002408  4239 0040 3887          clr.b     4194314
0000240C  000A      
                    3888   ; x = *(unsigned int*)(0x00000074);   // read IRQ 5 vector to reset trace vector generator
0000240E  28B8 0074 3889          move.l    116,(A4)
                    3890   ; EnableBreakPoints();
00002412  4EB8 1C50 3891          jsr       _EnableBreakPoints
                    3892   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
00002416  0255 7FFF 3893          and.w     #32767,(A5)
                    3894   ; printf("\r\nSingle Step  :[OFF]");
0000241A  4879 0000 3895          pea       @lab3_117.L
0000241E  4996      
00002420  4E92      3896          jsr       (A2)
00002422  584F      3897          addq.w    #4,A7
                    3898   ; printf("\r\nBreak Points :[Enabled]");
00002424  4879 0000 3899          pea       @lab3_115.L
00002428  4952      
0000242A  4E92      3900          jsr       (A2)
0000242C  584F      3901          addq.w    #4,A7
                    3902   ; printf("\r\nProgram Running.....");
0000242E  4879 0000 3903          pea       @lab3_108.L
00002432  485E      
00002434  4E92      3904          jsr       (A2)
00002436  584F      3905          addq.w    #4,A7
                    3906   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
00002438  4879 0000 3907          pea       @lab3_109.L
0000243C  4876      
0000243E  4E92      3908          jsr       (A2)
00002440  584F      3909          addq.w    #4,A7
                    3910   ; return;
00002442  6014      3911          bra.s     menu_38
                    3912   menu_43:
                    3913   ; }
                    3914   ; else if (c == (char)('W'))              // Watchpoint command
00002444  0C02 0057 3915          cmp.b     #87,D2
00002448  6606      3916          bne.s     menu_45
                    3917   ; Watchpoint();
0000244A  4EB8 2094 3918          jsr       _Watchpoint
0000244E  6004      3919          bra.s     menu_46
                    3920   menu_45:
                    3921   ; else
                    3922   ; UnknownCommand();
00002450  4EB8 1FEC 3923          jsr       _UnknownCommand
                    3924   menu_46:
00002454  6000 FDB0 3925          bra       menu_1
                    3926   menu_38:
00002458  4CDF 3C0C 3927          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000245C  4E75      3928          rts
                    3929   ; }
                    3930   ; }
                    3931   ; void PrintErrorMessageandAbort(char* string) {
                    3932   _PrintErrorMessageandAbort:
0000245E  4E56 0000 3933          link      A6,#0
                    3934   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n");
00002462  4879 0000 3935          pea       @lab3_118.L
00002466  49AC      
00002468  4EB9 0000 3936          jsr       _printf
0000246C  324C      
0000246E  584F      3937          addq.w    #4,A7
                    3938   ; printf("%s\r\n", string);
00002470  2F2E 0008 3939          move.l    8(A6),-(A7)
00002474  4879 0000 3940          pea       @lab3_119.L
00002478  49C8      
0000247A  4EB9 0000 3941          jsr       _printf
0000247E  324C      
00002480  504F      3942          addq.w    #8,A7
                    3943   ; menu();
00002482  4EB8 21EA 3944          jsr       _menu
00002486  4E5E      3945          unlk      A6
00002488  4E75      3946          rts
                    3947   ; }
                    3948   ; void IRQMessage(int level) {
                    3949   _IRQMessage:
0000248A  4E56 0000 3950          link      A6,#0
                    3951   ; printf("\r\n\r\nProgram ABORT !!!!!");
0000248E  4879 0000 3952          pea       @lab3_120.L
00002492  49CE      
00002494  4EB9 0000 3953          jsr       _printf
00002498  324C      
0000249A  584F      3954          addq.w    #4,A7
                    3955   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level);
0000249C  2F2E 0008 3956          move.l    8(A6),-(A7)
000024A0  4879 0000 3957          pea       @lab3_121.L
000024A4  49E6      
000024A6  4EB9 0000 3958          jsr       _printf
000024AA  324C      
000024AC  504F      3959          addq.w    #8,A7
                    3960   ; menu();
000024AE  4EB8 21EA 3961          jsr       _menu
000024B2  4E5E      3962          unlk      A6
000024B4  4E75      3963          rts
                    3964   ; }
                    3965   ; void UnhandledIRQ1(void) {
                    3966   _UnhandledIRQ1:
                    3967   ; IRQMessage(1);
000024B6  4878 0001 3968          pea       1
000024BA  4EB8 248A 3969          jsr       _IRQMessage
000024BE  584F      3970          addq.w    #4,A7
000024C0  4E75      3971          rts
                    3972   ; }
                    3973   ; void UnhandledIRQ2(void) {
                    3974   _UnhandledIRQ2:
                    3975   ; IRQMessage(2);
000024C2  4878 0002 3976          pea       2
000024C6  4EB8 248A 3977          jsr       _IRQMessage
000024CA  584F      3978          addq.w    #4,A7
000024CC  4E75      3979          rts
                    3980   ; }
                    3981   ; void UnhandledIRQ3(void) {
                    3982   _UnhandledIRQ3:
                    3983   ; IRQMessage(3);
000024CE  4878 0003 3984          pea       3
000024D2  4EB8 248A 3985          jsr       _IRQMessage
000024D6  584F      3986          addq.w    #4,A7
000024D8  4E75      3987          rts
                    3988   ; }
                    3989   ; void UnhandledIRQ4(void) {
                    3990   _UnhandledIRQ4:
                    3991   ; IRQMessage(4);
000024DA  4878 0004 3992          pea       4
000024DE  4EB8 248A 3993          jsr       _IRQMessage
000024E2  584F      3994          addq.w    #4,A7
000024E4  4E75      3995          rts
                    3996   ; }
                    3997   ; void UnhandledIRQ5(void) {
                    3998   _UnhandledIRQ5:
                    3999   ; IRQMessage(5);
000024E6  4878 0005 4000          pea       5
000024EA  4EB8 248A 4001          jsr       _IRQMessage
000024EE  584F      4002          addq.w    #4,A7
000024F0  4E75      4003          rts
                    4004   ; }
                    4005   ; void UnhandledIRQ6(void) {
                    4006   _UnhandledIRQ6:
                    4007   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....");
000024F2  4879 0000 4008          pea       @lab3_122.L
000024F6  4A0A      
000024F8  4EB8 245E 4009          jsr       _PrintErrorMessageandAbort
000024FC  584F      4010          addq.w    #4,A7
                    4011   ; menu();
000024FE  4EB8 21EA 4012          jsr       _menu
00002502  4E75      4013          rts
                    4014   ; }
                    4015   ; void UnhandledIRQ7(void) {
                    4016   _UnhandledIRQ7:
                    4017   ; IRQMessage(7);
00002504  4878 0007 4018          pea       7
00002508  4EB8 248A 4019          jsr       _IRQMessage
0000250C  584F      4020          addq.w    #4,A7
0000250E  4E75      4021          rts
                    4022   ; }
                    4023   ; void UnhandledTrap(void) {
                    4024   _UnhandledTrap:
                    4025   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!");
00002510  4879 0000 4026          pea       @lab3_123.L
00002514  4A4A      
00002516  4EB8 245E 4027          jsr       _PrintErrorMessageandAbort
0000251A  584F      4028          addq.w    #4,A7
0000251C  4E75      4029          rts
                    4030   ; }
                    4031   ; void BusError() {
                    4032   _BusError:
                    4033   ; PrintErrorMessageandAbort("BUS Error!");
0000251E  4879 0000 4034          pea       @lab3_124.L
00002522  4A60      
00002524  4EB8 245E 4035          jsr       _PrintErrorMessageandAbort
00002528  584F      4036          addq.w    #4,A7
0000252A  4E75      4037          rts
                    4038   ; }
                    4039   ; void AddressError() {
                    4040   _AddressError:
                    4041   ; PrintErrorMessageandAbort("ADDRESS Error!");
0000252C  4879 0000 4042          pea       @lab3_125.L
00002530  4A6C      
00002532  4EB8 245E 4043          jsr       _PrintErrorMessageandAbort
00002536  584F      4044          addq.w    #4,A7
00002538  4E75      4045          rts
                    4046   ; }
                    4047   ; void IllegalInstruction() {
                    4048   _IllegalInstruction:
                    4049   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION");
0000253A  4879 0000 4050          pea       @lab3_126.L
0000253E  4A7C      
00002540  4EB8 245E 4051          jsr       _PrintErrorMessageandAbort
00002544  584F      4052          addq.w    #4,A7
00002546  4E75      4053          rts
                    4054   ; }
                    4055   ; void Dividebyzero() {
                    4056   _Dividebyzero:
                    4057   ; PrintErrorMessageandAbort("DIVIDE BY ZERO");
00002548  4879 0000 4058          pea       @lab3_127.L
0000254C  4A90      
0000254E  4EB8 245E 4059          jsr       _PrintErrorMessageandAbort
00002552  584F      4060          addq.w    #4,A7
00002554  4E75      4061          rts
                    4062   ; }
                    4063   ; void Check() {
                    4064   _Check:
                    4065   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION");
00002556  4879 0000 4066          pea       @lab3_128.L
0000255A  4AA0      
0000255C  4EB8 245E 4067          jsr       _PrintErrorMessageandAbort
00002560  584F      4068          addq.w    #4,A7
00002562  4E75      4069          rts
                    4070   ; }
                    4071   ; void Trapv() {
                    4072   _Trapv:
                    4073   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION");
00002564  4879 0000 4074          pea       @lab3_129.L
00002568  4AB2      
0000256A  4EB8 245E 4075          jsr       _PrintErrorMessageandAbort
0000256E  584F      4076          addq.w    #4,A7
00002570  4E75      4077          rts
                    4078   ; }
                    4079   ; void PrivError() {
                    4080   _PrivError:
                    4081   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION");
00002572  4879 0000 4082          pea       @lab3_130.L
00002576  4AC4      
00002578  4EB8 245E 4083          jsr       _PrintErrorMessageandAbort
0000257C  584F      4084          addq.w    #4,A7
0000257E  4E75      4085          rts
                    4086   ; }
                    4087   ; void UnitIRQ() {
                    4088   _UnitIRQ:
                    4089   ; PrintErrorMessageandAbort("UNINITIALISED IRQ");
00002580  4879 0000 4090          pea       @lab3_131.L
00002584  4AD8      
00002586  4EB8 245E 4091          jsr       _PrintErrorMessageandAbort
0000258A  584F      4092          addq.w    #4,A7
0000258C  4E75      4093          rts
                    4094   ; }
                    4095   ; void Spurious() {
                    4096   _Spurious:
                    4097   ; PrintErrorMessageandAbort("SPURIOUS IRQ");
0000258E  4879 0000 4098          pea       @lab3_132.L
00002592  4AEA      
00002594  4EB8 245E 4099          jsr       _PrintErrorMessageandAbort
00002598  584F      4100          addq.w    #4,A7
0000259A  4E75      4101          rts
                    4102   ; }
                    4103   ; void EnterString(void)
                    4104   ; {
                    4105   _EnterString:
0000259C  4E56 FFFC 4106          link      A6,#-4
000025A0  2F02      4107          move.l    D2,-(A7)
                    4108   ; unsigned char* Start;
                    4109   ; unsigned char c;
                    4110   ; printf("\r\nStart Address in Memory: ");
000025A2  4879 0000 4111          pea       @lab3_133.L
000025A6  4AF8      
000025A8  4EB9 0000 4112          jsr       _printf
000025AC  324C      
000025AE  584F      4113          addq.w    #4,A7
                    4114   ; Start = Get8HexDigits(0);
000025B0  42A7      4115          clr.l     -(A7)
000025B2  4EB8 0CA4 4116          jsr       _Get8HexDigits
000025B6  584F      4117          addq.w    #4,A7
000025B8  2400      4118          move.l    D0,D2
                    4119   ; printf("\r\nEnter String (ESC to end) :");
000025BA  4879 0000 4120          pea       @lab3_134.L
000025BE  4B14      
000025C0  4EB9 0000 4121          jsr       _printf
000025C4  324C      
000025C6  584F      4122          addq.w    #4,A7
                    4123   ; while ((c = getchar()) != 0x1b)
                    4124   EnterString_1:
000025C8  4EB9 0000 4125          jsr       _getch
000025CC  316E      
000025CE  1D40 FFFF 4126          move.b    D0,-1(A6)
000025D2  0C00 001B 4127          cmp.b     #27,D0
000025D6  670A      4128          beq.s     EnterString_3
                    4129   ; *Start++ = c;
000025D8  2042      4130          move.l    D2,A0
000025DA  5282      4131          addq.l    #1,D2
000025DC  10AE FFFF 4132          move.b    -1(A6),(A0)
000025E0  60E6      4133          bra       EnterString_1
                    4134   EnterString_3:
                    4135   ; *Start = 0x00;  // terminate with a null
000025E2  2042      4136          move.l    D2,A0
000025E4  4210      4137          clr.b     (A0)
000025E6  241F      4138          move.l    (A7)+,D2
000025E8  4E5E      4139          unlk      A6
000025EA  4E75      4140          rts
                    4141   ; }
                    4142   ; void MemoryTest(void)
                    4143   ; {
                    4144   _MemoryTest:
000025EC  4E56 FFB8 4145          link      A6,#-72
000025F0  48E7 3F3C 4146          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000025F4  45F9 0000 4147          lea       _printf.L,A2
000025F8  324C      
000025FA  49F8 0CA4 4148          lea       _Get8HexDigits.L,A4
                    4149   ; char data_type_num;
                    4150   ; unsigned int test_data_num;
                    4151   ; unsigned char* StartPtrByte, * EndPtrByte, * TempPtrByte;
                    4152   ; unsigned short int* StartPtrWord, * EndPtrWord, * TempPtrWord;
                    4153   ; unsigned int* StartPtrLongWord, * EndPtrLongWord, * TempPtrLongWord;
                    4154   ; int StartPtrLongWordTruc, EndPtrLongWordTruc;
                    4155   ; unsigned char test_data_byte_list[] = { 0xAA, 0xAB, 0xCC, 0xCD };
000025FE  41EE FFD4 4156          lea       -44(A6),A0
00002602  43F9 0000 4157          lea       MemoryTest_test_data_byte_list.L,A1
00002606  54FE      
00002608  20D9      4158          move.l    (A1)+,(A0)+
                    4159   ; unsigned char test_data_byte;
                    4160   ; unsigned char read_data_byte;
                    4161   ; unsigned  int test_data_word_list[] = { 0xAAAA, 0xBABA, 0xCCDD, 0xDDDD };
0000260A  41EE FFDA 4162          lea       -38(A6),A0
0000260E  43F9 0000 4163          lea       MemoryTest_test_data_word_list.L,A1
00002612  5502      
00002614  7003      4164          moveq     #3,D0
00002616  20D9      4165          move.l    (A1)+,(A0)+
00002618  51C8 FFFC 4166          dbra      D0,*-2
                    4167   ; unsigned  int test_data_word;
                    4168   ; unsigned int test_data_long_word_list[] = { 0xAAAAAAAA, 0xABABABAB, 0xCCCCDDDD, 0xAABBCCDD };
0000261C  41EE FFEE 4169          lea       -18(A6),A0
00002620  43F9 0000 4170          lea       MemoryTest_test_data_long_word_list.L,A1
00002624  5512      
00002626  7003      4171          moveq     #3,D0
00002628  20D9      4172          move.l    (A1)+,(A0)+
0000262A  51C8 FFFC 4173          dbra      D0,*-2
                    4174   ; unsigned int test_data_long_word;
                    4175   ; unsigned short truncated_data;
                    4176   ; unsigned int counter = 9999;
0000262E  2C3C 0000 4177          move.l    #9999,D6
00002632  270F      
                    4178   ; printf("\r\nSelect data type:\n1 = bytes (8 bits)\n2 = words (16 bits)\n3 = long words (32 bits)\n");
00002634  4879 0000 4179          pea       @lab3_135.L
00002638  4B32      
0000263A  4E92      4180          jsr       (A2)
0000263C  584F      4181          addq.w    #4,A7
                    4182   ; data_type_num = _getch();
0000263E  4EB8 0B68 4183          jsr       __getch
00002642  1D40 FFBB 4184          move.b    D0,-69(A6)
                    4185   ; switch (data_type_num) {
00002646  102E FFBB 4186          move.b    -69(A6),D0
0000264A  4880      4187          ext.w     D0
0000264C  48C0      4188          ext.l     D0
0000264E  0C80 0000 4189          cmp.l     #50,D0
00002652  0032      
00002654  6700 022A 4190          beq       MemoryTest_4
00002658  6E0C      4191          bgt.s     MemoryTest_7
0000265A  0C80 0000 4192          cmp.l     #49,D0
0000265E  0031      
00002660  6712      4193          beq.s     MemoryTest_3
00002662  6000 070E 4194          bra       MemoryTest_1
                    4195   MemoryTest_7:
00002666  0C80 0000 4196          cmp.l     #51,D0
0000266A  0033      
0000266C  6700 045A 4197          beq       MemoryTest_5
00002670  6000 0700 4198          bra       MemoryTest_1
                    4199   MemoryTest_3:
                    4200   ; case (char)('1') :
                    4201   ; printf("\nSelecting byte size\n");
00002674  4879 0000 4202          pea       @lab3_136.L
00002678  4B88      
0000267A  4E92      4203          jsr       (A2)
0000267C  584F      4204          addq.w    #4,A7
                    4205   ; printf("Select data value:\n");
0000267E  4879 0000 4206          pea       @lab3_137.L
00002682  4B9E      
00002684  4E92      4207          jsr       (A2)
00002686  584F      4208          addq.w    #4,A7
                    4209   ; printf("1 = \"AA\"\n2 = \"AB\"\n3 = \"CC\"\n4 = \"CD\"\n");
00002688  4879 0000 4210          pea       @lab3_138.L
0000268C  4BB2      
0000268E  4E92      4211          jsr       (A2)
00002690  584F      4212          addq.w    #4,A7
                    4213   ; do {
                    4214   MemoryTest_8:
                    4215   ; test_data_num = (int)(_getch());
00002692  4EB8 0B68 4216          jsr       __getch
00002696  2400      4217          move.l    D0,D2
                    4218   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00002698  0C82 0000 4219          cmp.l     #49,D2
0000269C  0031      
0000269E  6722      4220          beq.s     MemoryTest_10
000026A0  0C82 0000 4221          cmp.l     #50,D2
000026A4  0032      
000026A6  671A      4222          beq.s     MemoryTest_10
000026A8  0C82 0000 4223          cmp.l     #51,D2
000026AC  0033      
000026AE  6712      4224          beq.s     MemoryTest_10
000026B0  0C82 0000 4225          cmp.l     #52,D2
000026B4  0034      
000026B6  670A      4226          beq.s     MemoryTest_10
                    4227   ; printf("\r\nERROR: Select either 1, 2, 3, or 4\r\n");
000026B8  4879 0000 4228          pea       @lab3_139.L
000026BC  4BD8      
000026BE  4E92      4229          jsr       (A2)
000026C0  584F      4230          addq.w    #4,A7
                    4231   MemoryTest_10:
000026C2  0C82 0000 4232          cmp.l     #49,D2
000026C6  0031      
000026C8  6718      4233          beq.s     MemoryTest_12
000026CA  0C82 0000 4234          cmp.l     #50,D2
000026CE  0032      
000026D0  6710      4235          beq.s     MemoryTest_12
000026D2  0C82 0000 4236          cmp.l     #51,D2
000026D6  0033      
000026D8  6708      4237          beq.s     MemoryTest_12
000026DA  0C82 0000 4238          cmp.l     #52,D2
000026DE  0034      
000026E0  66B0      4239          bne       MemoryTest_8
                    4240   MemoryTest_12:
                    4241   ; }
                    4242   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4243   ; if (test_data_num == (int)('1')) {
000026E2  0C82 0000 4244          cmp.l     #49,D2
000026E6  0031      
000026E8  660A      4245          bne.s     MemoryTest_13
                    4246   ; test_data_byte = test_data_byte_list[0];
000026EA  1D6E FFD4 4247          move.b    -44+0(A6),-40(A6)
000026EE  FFD8      
000026F0  6000 0040 4248          bra       MemoryTest_20
                    4249   MemoryTest_13:
                    4250   ; }
                    4251   ; else if (test_data_num == (int)('2')) {
000026F4  0C82 0000 4252          cmp.l     #50,D2
000026F8  0032      
000026FA  6608      4253          bne.s     MemoryTest_15
                    4254   ; test_data_byte = test_data_byte_list[1];
000026FC  1D6E FFD5 4255          move.b    -44+1(A6),-40(A6)
00002700  FFD8      
00002702  602E      4256          bra.s     MemoryTest_20
                    4257   MemoryTest_15:
                    4258   ; }
                    4259   ; else if (test_data_num == (int)('3')) {
00002704  0C82 0000 4260          cmp.l     #51,D2
00002708  0033      
0000270A  6608      4261          bne.s     MemoryTest_17
                    4262   ; test_data_byte = test_data_byte_list[2];
0000270C  1D6E FFD6 4263          move.b    -44+2(A6),-40(A6)
00002710  FFD8      
00002712  601E      4264          bra.s     MemoryTest_20
                    4265   MemoryTest_17:
                    4266   ; }
                    4267   ; else if (test_data_num == (int)('4')) {
00002714  0C82 0000 4268          cmp.l     #52,D2
00002718  0034      
0000271A  6608      4269          bne.s     MemoryTest_19
                    4270   ; test_data_byte = test_data_byte_list[3];
0000271C  1D6E FFD7 4271          move.b    -44+3(A6),-40(A6)
00002720  FFD8      
00002722  600E      4272          bra.s     MemoryTest_20
                    4273   MemoryTest_19:
                    4274   ; }
                    4275   ; else {
                    4276   ; printf("\r\nERROR: Exiting memory test due to option memory complication.\r\n");
00002724  4879 0000 4277          pea       @lab3_140.L
00002728  4C00      
0000272A  4E92      4278          jsr       (A2)
0000272C  584F      4279          addq.w    #4,A7
                    4280   ; return;
0000272E  6000 064C 4281          bra       MemoryTest_2
                    4282   MemoryTest_20:
                    4283   ; }
                    4284   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF:\r\n");
00002732  4879 0000 4285          pea       @lab3_141.L
00002736  4C42      
00002738  4E92      4286          jsr       (A2)
0000273A  584F      4287          addq.w    #4,A7
                    4288   ; do{
                    4289   MemoryTest_22:
                    4290   ; StartPtrByte = (int)Get8HexDigits(0);
0000273C  42A7      4291          clr.l     -(A7)
0000273E  4E94      4292          jsr       (A4)
00002740  584F      4293          addq.w    #4,A7
00002742  2A00      4294          move.l    D0,D5
                    4295   ; if(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x097FFFFF)){
00002744  0C85 0900 4296          cmp.l     #150994944,D5
00002748  0000      
0000274A  6508      4297          blo.s     MemoryTest_26
0000274C  0C85 097F 4298          cmp.l     #159383551,D5
00002750  FFFF      
00002752  630A      4299          bls.s     MemoryTest_24
                    4300   MemoryTest_26:
                    4301   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002754  4879 0000 4302          pea       @lab3_142.L
00002758  4C7A      
0000275A  4E92      4303          jsr       (A2)
0000275C  584F      4304          addq.w    #4,A7
                    4305   MemoryTest_24:
0000275E  0C85 0900 4306          cmp.l     #150994944,D5
00002762  0000      
00002764  65D6      4307          blo       MemoryTest_22
00002766  0C85 097F 4308          cmp.l     #159383551,D5
0000276A  FFFF      
0000276C  62CE      4309          bhi       MemoryTest_22
                    4310   ; }
                    4311   ; } while(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x097FFFFF));
                    4312   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF:\r\n");
0000276E  4879 0000 4313          pea       @lab3_143.L
00002772  4CEA      
00002774  4E92      4314          jsr       (A2)
00002776  584F      4315          addq.w    #4,A7
                    4316   ; do{
                    4317   MemoryTest_27:
                    4318   ; EndPtrByte = (int)Get8HexDigits(0);
00002778  42A7      4319          clr.l     -(A7)
0000277A  4E94      4320          jsr       (A4)
0000277C  584F      4321          addq.w    #4,A7
0000277E  2D40 FFBC 4322          move.l    D0,-68(A6)
                    4323   ; if(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x097FFFFF)){
00002782  202E FFBC 4324          move.l    -68(A6),D0
00002786  0C80 0900 4325          cmp.l     #150994944,D0
0000278A  0000      
0000278C  650C      4326          blo.s     MemoryTest_31
0000278E  202E FFBC 4327          move.l    -68(A6),D0
00002792  0C80 097F 4328          cmp.l     #159383551,D0
00002796  FFFF      
00002798  630A      4329          bls.s     MemoryTest_29
                    4330   MemoryTest_31:
                    4331   ; printf("\r\nERROR: End Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
0000279A  4879 0000 4332          pea       @lab3_144.L
0000279E  4D20      
000027A0  4E92      4333          jsr       (A2)
000027A2  584F      4334          addq.w    #4,A7
                    4335   MemoryTest_29:
000027A4  202E FFBC 4336          move.l    -68(A6),D0
000027A8  0C80 0900 4337          cmp.l     #150994944,D0
000027AC  0000      
000027AE  65C8      4338          blo       MemoryTest_27
000027B0  202E FFBC 4339          move.l    -68(A6),D0
000027B4  0C80 097F 4340          cmp.l     #159383551,D0
000027B8  FFFF      
000027BA  62BC      4341          bhi       MemoryTest_27
                    4342   ; }
                    4343   ; } while(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x097FFFFF));
                    4344   ; printf("\r\n\r\nWriting to memory");
000027BC  4879 0000 4345          pea       @lab3_145.L
000027C0  4D8C      
000027C2  4E92      4346          jsr       (A2)
000027C4  584F      4347          addq.w    #4,A7
                    4348   ; TempPtrByte = StartPtrByte;
000027C6  2D45 FFC0 4349          move.l    D5,-64(A6)
                    4350   ; while (StartPtrByte < EndPtrByte) {
                    4351   MemoryTest_32:
000027CA  BAAE FFBC 4352          cmp.l     -68(A6),D5
000027CE  6430      4353          bhs.s     MemoryTest_34
                    4354   ; *StartPtrByte = test_data_byte;
000027D0  2045      4355          move.l    D5,A0
000027D2  10AE FFD8 4356          move.b    -40(A6),(A0)
                    4357   ; counter++;
000027D6  5286      4358          addq.l    #1,D6
                    4359   ; if (counter == 10000) {
000027D8  0C86 0000 4360          cmp.l     #10000,D6
000027DC  2710      
000027DE  661C      4361          bne.s     MemoryTest_35
                    4362   ; printf("\r\nWrite: [%02X to %08x]", test_data_byte, StartPtrByte);
000027E0  2F05      4363          move.l    D5,-(A7)
000027E2  122E FFD8 4364          move.b    -40(A6),D1
000027E6  C2BC 0000 4365          and.l     #255,D1
000027EA  00FF      
000027EC  2F01      4366          move.l    D1,-(A7)
000027EE  4879 0000 4367          pea       @lab3_146.L
000027F2  4DA2      
000027F4  4E92      4368          jsr       (A2)
000027F6  DEFC 000C 4369          add.w     #12,A7
                    4370   ; counter = 0;
000027FA  4286      4371          clr.l     D6
                    4372   MemoryTest_35:
                    4373   ; }
                    4374   ; StartPtrByte++;
000027FC  5285      4375          addq.l    #1,D5
000027FE  60CA      4376          bra       MemoryTest_32
                    4377   MemoryTest_34:
                    4378   ; }
                    4379   ; counter = 9999;
00002800  2C3C 0000 4380          move.l    #9999,D6
00002804  270F      
                    4381   ; printf("\r\n\r\nStarting memory validation test");
00002806  4879 0000 4382          pea       @lab3_147.L
0000280A  4DBA      
0000280C  4E92      4383          jsr       (A2)
0000280E  584F      4384          addq.w    #4,A7
                    4385   ; StartPtrByte = TempPtrByte;
00002810  2A2E FFC0 4386          move.l    -64(A6),D5
                    4387   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrByte, EndPtrByte, test_data_byte);
00002814  122E FFD8 4388          move.b    -40(A6),D1
00002818  C2BC 0000 4389          and.l     #255,D1
0000281C  00FF      
0000281E  2F01      4390          move.l    D1,-(A7)
00002820  2F2E FFBC 4391          move.l    -68(A6),-(A7)
00002824  2F05      4392          move.l    D5,-(A7)
00002826  4879 0000 4393          pea       @lab3_148.L
0000282A  4DDE      
0000282C  4E92      4394          jsr       (A2)
0000282E  DEFC 0010 4395          add.w     #16,A7
                    4396   ; while (StartPtrByte < EndPtrByte) {
                    4397   MemoryTest_37:
00002832  BAAE FFBC 4398          cmp.l     -68(A6),D5
00002836  6400 003A 4399          bhs       MemoryTest_39
                    4400   ; if (*StartPtrByte != test_data_byte) {
0000283A  2045      4401          move.l    D5,A0
0000283C  1010      4402          move.b    (A0),D0
0000283E  B02E FFD8 4403          cmp.b     -40(A6),D0
00002842  672A      4404          beq.s     MemoryTest_40
                    4405   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...\r\n", StartPtrByte, *StartPtrByte, test_data_byte);
00002844  122E FFD8 4406          move.b    -40(A6),D1
00002848  C2BC 0000 4407          and.l     #255,D1
0000284C  00FF      
0000284E  2F01      4408          move.l    D1,-(A7)
00002850  2045      4409          move.l    D5,A0
00002852  1210      4410          move.b    (A0),D1
00002854  C2BC 0000 4411          and.l     #255,D1
00002858  00FF      
0000285A  2F01      4412          move.l    D1,-(A7)
0000285C  2F05      4413          move.l    D5,-(A7)
0000285E  4879 0000 4414          pea       @lab3_149.L
00002862  4E26      
00002864  4E92      4415          jsr       (A2)
00002866  DEFC 0010 4416          add.w     #16,A7
                    4417   ; return;
0000286A  6000 0510 4418          bra       MemoryTest_2
                    4419   MemoryTest_40:
                    4420   ; }
                    4421   ; StartPtrByte++;
0000286E  5285      4422          addq.l    #1,D5
00002870  60C0      4423          bra       MemoryTest_37
                    4424   MemoryTest_39:
                    4425   ; }
                    4426   ; printf("\r\nPASS: Memory Validation test has passed\r\n");
00002872  4879 0000 4427          pea       @lab3_150.L
00002876  4EB4      
00002878  4E92      4428          jsr       (A2)
0000287A  584F      4429          addq.w    #4,A7
                    4430   ; break;
0000287C  6000 04FE 4431          bra       MemoryTest_2
                    4432   MemoryTest_4:
                    4433   ; case (char)('2') :
                    4434   ; printf("\r\nSelecting word size");
00002880  4879 0000 4435          pea       @lab3_151.L
00002884  4EE0      
00002886  4E92      4436          jsr       (A2)
00002888  584F      4437          addq.w    #4,A7
                    4438   ; printf("Select data value:\n");
0000288A  4879 0000 4439          pea       @lab3_137.L
0000288E  4B9E      
00002890  4E92      4440          jsr       (A2)
00002892  584F      4441          addq.w    #4,A7
                    4442   ; printf("\r\n1 = \"AAAA\"\n2 = \"BABA\"\n3 = \"CCDD\"\n4 = \"DDDD\"\r\n");
00002894  4879 0000 4443          pea       @lab3_152.L
00002898  4EF6      
0000289A  4E92      4444          jsr       (A2)
0000289C  584F      4445          addq.w    #4,A7
                    4446   ; do {
                    4447   MemoryTest_42:
                    4448   ; test_data_num = (int)(_getch());
0000289E  4EB8 0B68 4449          jsr       __getch
000028A2  2400      4450          move.l    D0,D2
                    4451   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
000028A4  0C82 0000 4452          cmp.l     #49,D2
000028A8  0031      
000028AA  6722      4453          beq.s     MemoryTest_44
000028AC  0C82 0000 4454          cmp.l     #50,D2
000028B0  0032      
000028B2  671A      4455          beq.s     MemoryTest_44
000028B4  0C82 0000 4456          cmp.l     #51,D2
000028B8  0033      
000028BA  6712      4457          beq.s     MemoryTest_44
000028BC  0C82 0000 4458          cmp.l     #52,D2
000028C0  0034      
000028C2  670A      4459          beq.s     MemoryTest_44
                    4460   ; printf("\r\nERROR: Select either 1, 2, 3, or 4\r\n");
000028C4  4879 0000 4461          pea       @lab3_139.L
000028C8  4BD8      
000028CA  4E92      4462          jsr       (A2)
000028CC  584F      4463          addq.w    #4,A7
                    4464   MemoryTest_44:
000028CE  0C82 0000 4465          cmp.l     #49,D2
000028D2  0031      
000028D4  6718      4466          beq.s     MemoryTest_46
000028D6  0C82 0000 4467          cmp.l     #50,D2
000028DA  0032      
000028DC  6710      4468          beq.s     MemoryTest_46
000028DE  0C82 0000 4469          cmp.l     #51,D2
000028E2  0033      
000028E4  6708      4470          beq.s     MemoryTest_46
000028E6  0C82 0000 4471          cmp.l     #52,D2
000028EA  0034      
000028EC  66B0      4472          bne       MemoryTest_42
                    4473   MemoryTest_46:
                    4474   ; }
                    4475   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4476   ; if (test_data_num == (int)('1')) {
000028EE  0C82 0000 4477          cmp.l     #49,D2
000028F2  0031      
000028F4  660A      4478          bne.s     MemoryTest_47
                    4479   ; test_data_word = test_data_word_list[0];
000028F6  2D6E FFDA 4480          move.l    -38+0(A6),-22(A6)
000028FA  FFEA      
000028FC  6000 0040 4481          bra       MemoryTest_54
                    4482   MemoryTest_47:
                    4483   ; }
                    4484   ; else if (test_data_num == (int)('2')) {
00002900  0C82 0000 4485          cmp.l     #50,D2
00002904  0032      
00002906  6608      4486          bne.s     MemoryTest_49
                    4487   ; test_data_word = test_data_word_list[1];
00002908  2D6E FFDE 4488          move.l    -38+4(A6),-22(A6)
0000290C  FFEA      
0000290E  602E      4489          bra.s     MemoryTest_54
                    4490   MemoryTest_49:
                    4491   ; }
                    4492   ; else if (test_data_num == (int)('3')) {
00002910  0C82 0000 4493          cmp.l     #51,D2
00002914  0033      
00002916  6608      4494          bne.s     MemoryTest_51
                    4495   ; test_data_word = test_data_word_list[2];
00002918  2D6E FFE2 4496          move.l    -38+8(A6),-22(A6)
0000291C  FFEA      
0000291E  601E      4497          bra.s     MemoryTest_54
                    4498   MemoryTest_51:
                    4499   ; }
                    4500   ; else if (test_data_num == (int)('4')) {
00002920  0C82 0000 4501          cmp.l     #52,D2
00002924  0034      
00002926  6608      4502          bne.s     MemoryTest_53
                    4503   ; test_data_word = test_data_word_list[3];
00002928  2D6E FFE6 4504          move.l    -38+12(A6),-22(A6)
0000292C  FFEA      
0000292E  600E      4505          bra.s     MemoryTest_54
                    4506   MemoryTest_53:
                    4507   ; }
                    4508   ; else {
                    4509   ; printf("\r\nERROR: Exiting memory test due to option memory complication.\r\n");
00002930  4879 0000 4510          pea       @lab3_140.L
00002934  4C00      
00002936  4E92      4511          jsr       (A2)
00002938  584F      4512          addq.w    #4,A7
                    4513   ; return;
0000293A  6000 0440 4514          bra       MemoryTest_2
                    4515   MemoryTest_54:
                    4516   ; }
                    4517   ; do {
                    4518   MemoryTest_55:
                    4519   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
0000293E  4879 0000 4520          pea       @lab3_153.L
00002942  4F26      
00002944  4E92      4521          jsr       (A2)
00002946  584F      4522          addq.w    #4,A7
                    4523   ; StartPtrWord = Get8HexDigits(0);
00002948  42A7      4524          clr.l     -(A7)
0000294A  4E94      4525          jsr       (A4)
0000294C  584F      4526          addq.w    #4,A7
0000294E  2800      4527          move.l    D0,D4
                    4528   ; while(StartPtrWord < (int)(0x09000000) || StartPtrWord > (int)(0x097FFFFF)){
                    4529   MemoryTest_57:
00002950  0C84 0900 4530          cmp.l     #150994944,D4
00002954  0000      
00002956  6508      4531          blo.s     MemoryTest_60
00002958  0C84 097F 4532          cmp.l     #159383551,D4
0000295C  FFFF      
0000295E  6314      4533          bls.s     MemoryTest_59
                    4534   MemoryTest_60:
                    4535   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002960  4879 0000 4536          pea       @lab3_142.L
00002964  4C7A      
00002966  4E92      4537          jsr       (A2)
00002968  584F      4538          addq.w    #4,A7
                    4539   ; StartPtrWord = Get8HexDigits(0);
0000296A  42A7      4540          clr.l     -(A7)
0000296C  4E94      4541          jsr       (A4)
0000296E  584F      4542          addq.w    #4,A7
00002970  2800      4543          move.l    D0,D4
00002972  60DC      4544          bra       MemoryTest_57
                    4545   MemoryTest_59:
                    4546   ; }
                    4547   ; if (StartPtrWord % 2 != 0) {
00002974  2F04      4548          move.l    D4,-(A7)
00002976  4878 0002 4549          pea       2
0000297A  4EB9 0000 4550          jsr       ULDIV
0000297E  3060      
00002980  202F 0004 4551          move.l    4(A7),D0
00002984  504F      4552          addq.w    #8,A7
00002986  4A80      4553          tst.l     D0
00002988  670A      4554          beq.s     MemoryTest_61
                    4555   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
0000298A  4879 0000 4556          pea       @lab3_154.L
0000298E  4F80      
00002990  4E92      4557          jsr       (A2)
00002992  584F      4558          addq.w    #4,A7
                    4559   MemoryTest_61:
00002994  2F04      4560          move.l    D4,-(A7)
00002996  4878 0002 4561          pea       2
0000299A  4EB9 0000 4562          jsr       ULDIV
0000299E  3060      
000029A0  202F 0004 4563          move.l    4(A7),D0
000029A4  504F      4564          addq.w    #8,A7
000029A6  4A80      4565          tst.l     D0
000029A8  6694      4566          bne       MemoryTest_55
                    4567   ; }
                    4568   ; } while (StartPtrWord % 2 != 0);
                    4569   ; do {
                    4570   MemoryTest_63:
                    4571   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
000029AA  4879 0000 4572          pea       @lab3_155.L
000029AE  4FC0      
000029B0  4E92      4573          jsr       (A2)
000029B2  584F      4574          addq.w    #4,A7
                    4575   ; EndPtrWord = Get8HexDigits(0);
000029B4  42A7      4576          clr.l     -(A7)
000029B6  4E94      4577          jsr       (A4)
000029B8  584F      4578          addq.w    #4,A7
000029BA  2A40      4579          move.l    D0,A5
                    4580   ; while(EndPtrWord < (int)(0x09000000) || EndPtrWord > (int)(0x097FFFFF)){
                    4581   MemoryTest_65:
000029BC  200D      4582          move.l    A5,D0
000029BE  0C80 0900 4583          cmp.l     #150994944,D0
000029C2  0000      
000029C4  650A      4584          blo.s     MemoryTest_68
000029C6  200D      4585          move.l    A5,D0
000029C8  0C80 097F 4586          cmp.l     #159383551,D0
000029CC  FFFF      
000029CE  6314      4587          bls.s     MemoryTest_67
                    4588   MemoryTest_68:
                    4589   ; printf("\r\nERROR: End Address is outside of 68K memory range. Ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
000029D0  4879 0000 4590          pea       @lab3_144.L
000029D4  4D20      
000029D6  4E92      4591          jsr       (A2)
000029D8  584F      4592          addq.w    #4,A7
                    4593   ; EndPtrWord = Get8HexDigits(0);
000029DA  42A7      4594          clr.l     -(A7)
000029DC  4E94      4595          jsr       (A4)
000029DE  584F      4596          addq.w    #4,A7
000029E0  2A40      4597          move.l    D0,A5
000029E2  60D8      4598          bra       MemoryTest_65
                    4599   MemoryTest_67:
                    4600   ; }
                    4601   ; if (EndPtrWord % 2 != 0) {
000029E4  2F0D      4602          move.l    A5,-(A7)
000029E6  4878 0002 4603          pea       2
000029EA  4EB9 0000 4604          jsr       ULDIV
000029EE  3060      
000029F0  202F 0004 4605          move.l    4(A7),D0
000029F4  504F      4606          addq.w    #8,A7
000029F6  4A80      4607          tst.l     D0
000029F8  670A      4608          beq.s     MemoryTest_69
                    4609   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
000029FA  4879 0000 4610          pea       @lab3_154.L
000029FE  4F80      
00002A00  4E92      4611          jsr       (A2)
00002A02  584F      4612          addq.w    #4,A7
                    4613   MemoryTest_69:
00002A04  2F0D      4614          move.l    A5,-(A7)
00002A06  4878 0002 4615          pea       2
00002A0A  4EB9 0000 4616          jsr       ULDIV
00002A0E  3060      
00002A10  202F 0004 4617          move.l    4(A7),D0
00002A14  504F      4618          addq.w    #8,A7
00002A16  4A80      4619          tst.l     D0
00002A18  6690      4620          bne       MemoryTest_63
                    4621   ; }
                    4622   ; } while (EndPtrWord % 2 != 0);
                    4623   ; printf("\r\n\r\nWriting to memory");
00002A1A  4879 0000 4624          pea       @lab3_145.L
00002A1E  4D8C      
00002A20  4E92      4625          jsr       (A2)
00002A22  584F      4626          addq.w    #4,A7
                    4627   ; TempPtrWord = StartPtrWord;
00002A24  2D44 FFC4 4628          move.l    D4,-60(A6)
                    4629   ; while (StartPtrWord < EndPtrWord) {
                    4630   MemoryTest_71:
00002A28  B88D      4631          cmp.l     A5,D4
00002A2A  642A      4632          bhs.s     MemoryTest_73
                    4633   ; *StartPtrWord = test_data_word;
00002A2C  202E FFEA 4634          move.l    -22(A6),D0
00002A30  2044      4635          move.l    D4,A0
00002A32  3080      4636          move.w    D0,(A0)
                    4637   ; counter++;
00002A34  5286      4638          addq.l    #1,D6
                    4639   ; if (counter == 10000) {
00002A36  0C86 0000 4640          cmp.l     #10000,D6
00002A3A  2710      
00002A3C  6614      4641          bne.s     MemoryTest_74
                    4642   ; printf("\r\nWRITE: [%04X to %08x]", test_data_word, StartPtrWord);
00002A3E  2F04      4643          move.l    D4,-(A7)
00002A40  2F2E FFEA 4644          move.l    -22(A6),-(A7)
00002A44  4879 0000 4645          pea       @lab3_156.L
00002A48  5018      
00002A4A  4E92      4646          jsr       (A2)
00002A4C  DEFC 000C 4647          add.w     #12,A7
                    4648   ; counter = 0;
00002A50  4286      4649          clr.l     D6
                    4650   MemoryTest_74:
                    4651   ; }
                    4652   ; StartPtrWord++;
00002A52  5484      4653          addq.l    #2,D4
00002A54  60D2      4654          bra       MemoryTest_71
                    4655   MemoryTest_73:
                    4656   ; }
                    4657   ; counter = 9999;
00002A56  2C3C 0000 4658          move.l    #9999,D6
00002A5A  270F      
                    4659   ; printf("\r\n\r\nStarting memory validation test");
00002A5C  4879 0000 4660          pea       @lab3_147.L
00002A60  4DBA      
00002A62  4E92      4661          jsr       (A2)
00002A64  584F      4662          addq.w    #4,A7
                    4663   ; StartPtrWord = TempPtrWord;
00002A66  282E FFC4 4664          move.l    -60(A6),D4
                    4665   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrWord, EndPtrWord, test_data_word);
00002A6A  2F2E FFEA 4666          move.l    -22(A6),-(A7)
00002A6E  2F0D      4667          move.l    A5,-(A7)
00002A70  2F04      4668          move.l    D4,-(A7)
00002A72  4879 0000 4669          pea       @lab3_148.L
00002A76  4DDE      
00002A78  4E92      4670          jsr       (A2)
00002A7A  DEFC 0010 4671          add.w     #16,A7
                    4672   ; while (StartPtrWord < EndPtrWord) {
                    4673   MemoryTest_76:
00002A7E  B88D      4674          cmp.l     A5,D4
00002A80  6400 0038 4675          bhs       MemoryTest_78
                    4676   ; if (*StartPtrWord != test_data_word) {
00002A84  2044      4677          move.l    D4,A0
00002A86  3010      4678          move.w    (A0),D0
00002A88  C0BC 0000 4679          and.l     #65535,D0
00002A8C  FFFF      
00002A8E  B0AE FFEA 4680          cmp.l     -22(A6),D0
00002A92  6722      4681          beq.s     MemoryTest_79
                    4682   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...", StartPtrWord, *StartPtrWord, test_data_word);
00002A94  2F2E FFEA 4683          move.l    -22(A6),-(A7)
00002A98  2044      4684          move.l    D4,A0
00002A9A  3210      4685          move.w    (A0),D1
00002A9C  C2BC 0000 4686          and.l     #65535,D1
00002AA0  FFFF      
00002AA2  2F01      4687          move.l    D1,-(A7)
00002AA4  2F04      4688          move.l    D4,-(A7)
00002AA6  4879 0000 4689          pea       @lab3_157.L
00002AAA  5030      
00002AAC  4E92      4690          jsr       (A2)
00002AAE  DEFC 0010 4691          add.w     #16,A7
                    4692   ; return;
00002AB2  6000 02C8 4693          bra       MemoryTest_2
                    4694   MemoryTest_79:
                    4695   ; }
                    4696   ; StartPtrWord++;
00002AB6  5484      4697          addq.l    #2,D4
00002AB8  60C4      4698          bra       MemoryTest_76
                    4699   MemoryTest_78:
                    4700   ; }
                    4701   ; printf("\r\nPASS: Memory Validation test has passed.\r\n");
00002ABA  4879 0000 4702          pea       @lab3_158.L
00002ABE  50BC      
00002AC0  4E92      4703          jsr       (A2)
00002AC2  584F      4704          addq.w    #4,A7
                    4705   ; break;
00002AC4  6000 02B6 4706          bra       MemoryTest_2
                    4707   MemoryTest_5:
                    4708   ; case (char)('3') :
                    4709   ; printf("\r\nSelecting long word size");
00002AC8  4879 0000 4710          pea       @lab3_159.L
00002ACC  50EA      
00002ACE  4E92      4711          jsr       (A2)
00002AD0  584F      4712          addq.w    #4,A7
                    4713   ; printf("\r\nSelect data value:");
00002AD2  4879 0000 4714          pea       @lab3_160.L
00002AD6  5106      
00002AD8  4E92      4715          jsr       (A2)
00002ADA  584F      4716          addq.w    #4,A7
                    4717   ; printf("\r\n1 = \"AAAAAAAA\"\n2 = \"ABABABAB\"\n3 = \"CCCCDDDD\"\n4 = \"AABBCCDD\"\r\n");
00002ADC  4879 0000 4718          pea       @lab3_161.L
00002AE0  511C      
00002AE2  4E92      4719          jsr       (A2)
00002AE4  584F      4720          addq.w    #4,A7
                    4721   ; do {
                    4722   MemoryTest_81:
                    4723   ; test_data_num = (int)(_getch());
00002AE6  4EB8 0B68 4724          jsr       __getch
00002AEA  2400      4725          move.l    D0,D2
                    4726   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00002AEC  0C82 0000 4727          cmp.l     #49,D2
00002AF0  0031      
00002AF2  6722      4728          beq.s     MemoryTest_83
00002AF4  0C82 0000 4729          cmp.l     #50,D2
00002AF8  0032      
00002AFA  671A      4730          beq.s     MemoryTest_83
00002AFC  0C82 0000 4731          cmp.l     #51,D2
00002B00  0033      
00002B02  6712      4732          beq.s     MemoryTest_83
00002B04  0C82 0000 4733          cmp.l     #52,D2
00002B08  0034      
00002B0A  670A      4734          beq.s     MemoryTest_83
                    4735   ; printf("\r\nSelect either 1, 2, 3, or 4.\r\n");
00002B0C  4879 0000 4736          pea       @lab3_162.L
00002B10  515C      
00002B12  4E92      4737          jsr       (A2)
00002B14  584F      4738          addq.w    #4,A7
                    4739   MemoryTest_83:
00002B16  0C82 0000 4740          cmp.l     #49,D2
00002B1A  0031      
00002B1C  6718      4741          beq.s     MemoryTest_85
00002B1E  0C82 0000 4742          cmp.l     #50,D2
00002B22  0032      
00002B24  6710      4743          beq.s     MemoryTest_85
00002B26  0C82 0000 4744          cmp.l     #51,D2
00002B2A  0033      
00002B2C  6708      4745          beq.s     MemoryTest_85
00002B2E  0C82 0000 4746          cmp.l     #52,D2
00002B32  0034      
00002B34  66B0      4747          bne       MemoryTest_81
                    4748   MemoryTest_85:
                    4749   ; }
                    4750   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4751   ; if (test_data_num == (int)('1')) {
00002B36  0C82 0000 4752          cmp.l     #49,D2
00002B3A  0031      
00002B3C  6608      4753          bne.s     MemoryTest_86
                    4754   ; test_data_long_word = test_data_long_word_list[0];
00002B3E  2E2E FFEE 4755          move.l    -18+0(A6),D7
00002B42  6000 003A 4756          bra       MemoryTest_93
                    4757   MemoryTest_86:
                    4758   ; }
                    4759   ; else if (test_data_num == (int)('2')) {
00002B46  0C82 0000 4760          cmp.l     #50,D2
00002B4A  0032      
00002B4C  6606      4761          bne.s     MemoryTest_88
                    4762   ; test_data_long_word = test_data_long_word_list[1];
00002B4E  2E2E FFF2 4763          move.l    -18+4(A6),D7
00002B52  602A      4764          bra.s     MemoryTest_93
                    4765   MemoryTest_88:
                    4766   ; }
                    4767   ; else if (test_data_num == (int)('3')) {
00002B54  0C82 0000 4768          cmp.l     #51,D2
00002B58  0033      
00002B5A  6606      4769          bne.s     MemoryTest_90
                    4770   ; test_data_long_word = test_data_long_word_list[2];
00002B5C  2E2E FFF6 4771          move.l    -18+8(A6),D7
00002B60  601C      4772          bra.s     MemoryTest_93
                    4773   MemoryTest_90:
                    4774   ; }
                    4775   ; else if (test_data_num == (int)('4')) {
00002B62  0C82 0000 4776          cmp.l     #52,D2
00002B66  0034      
00002B68  6606      4777          bne.s     MemoryTest_92
                    4778   ; test_data_long_word = test_data_long_word_list[3];
00002B6A  2E2E FFFA 4779          move.l    -18+12(A6),D7
00002B6E  600E      4780          bra.s     MemoryTest_93
                    4781   MemoryTest_92:
                    4782   ; }
                    4783   ; else {
                    4784   ; printf("\r\nERROR: Exiting memory test due to option memory complication. \r\n");
00002B70  4879 0000 4785          pea       @lab3_163.L
00002B74  517E      
00002B76  4E92      4786          jsr       (A2)
00002B78  584F      4787          addq.w    #4,A7
                    4788   ; return;
00002B7A  6000 0200 4789          bra       MemoryTest_2
                    4790   MemoryTest_93:
                    4791   ; }
                    4792   ; do {
                    4793   MemoryTest_94:
                    4794   ; printf("\r\nEnter start address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002B7E  4879 0000 4795          pea       @lab3_153.L
00002B82  4F26      
00002B84  4E92      4796          jsr       (A2)
00002B86  584F      4797          addq.w    #4,A7
                    4798   ; StartPtrLongWord = Get8HexDigits(0);
00002B88  42A7      4799          clr.l     -(A7)
00002B8A  4E94      4800          jsr       (A4)
00002B8C  584F      4801          addq.w    #4,A7
00002B8E  2600      4802          move.l    D0,D3
                    4803   ; while(StartPtrLongWord < (int)(0x09000000) || StartPtrLongWord > (int)(0x097FFFFF)){
                    4804   MemoryTest_96:
00002B90  0C83 0900 4805          cmp.l     #150994944,D3
00002B94  0000      
00002B96  6508      4806          blo.s     MemoryTest_99
00002B98  0C83 097F 4807          cmp.l     #159383551,D3
00002B9C  FFFF      
00002B9E  6314      4808          bls.s     MemoryTest_98
                    4809   MemoryTest_99:
                    4810   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002BA0  4879 0000 4811          pea       @lab3_164.L
00002BA4  51C2      
00002BA6  4E92      4812          jsr       (A2)
00002BA8  584F      4813          addq.w    #4,A7
                    4814   ; StartPtrLongWord = Get8HexDigits(0);
00002BAA  42A7      4815          clr.l     -(A7)
00002BAC  4E94      4816          jsr       (A4)
00002BAE  584F      4817          addq.w    #4,A7
00002BB0  2600      4818          move.l    D0,D3
00002BB2  60DC      4819          bra       MemoryTest_96
                    4820   MemoryTest_98:
                    4821   ; }
                    4822   ; if (StartPtrLongWord % 2 != 0) {
00002BB4  2F03      4823          move.l    D3,-(A7)
00002BB6  4878 0002 4824          pea       2
00002BBA  4EB9 0000 4825          jsr       ULDIV
00002BBE  3060      
00002BC0  202F 0004 4826          move.l    4(A7),D0
00002BC4  504F      4827          addq.w    #8,A7
00002BC6  4A80      4828          tst.l     D0
00002BC8  670A      4829          beq.s     MemoryTest_100
                    4830   ; printf("\r\nERROR: The address you have entered is not even. Try again\r\n");
00002BCA  4879 0000 4831          pea       @lab3_154.L
00002BCE  4F80      
00002BD0  4E92      4832          jsr       (A2)
00002BD2  584F      4833          addq.w    #4,A7
                    4834   MemoryTest_100:
00002BD4  2F03      4835          move.l    D3,-(A7)
00002BD6  4878 0002 4836          pea       2
00002BDA  4EB9 0000 4837          jsr       ULDIV
00002BDE  3060      
00002BE0  202F 0004 4838          move.l    4(A7),D0
00002BE4  504F      4839          addq.w    #8,A7
00002BE6  4A80      4840          tst.l     D0
00002BE8  6694      4841          bne       MemoryTest_94
                    4842   ; }
                    4843   ; } while (StartPtrLongWord % 2 != 0);
                    4844   ; do {
                    4845   MemoryTest_102:
                    4846   ; printf("\r\nEnter end address within 0x09000000 - 0x097FFFFF: (Ensure to enter an even number)\r\n");
00002BEA  4879 0000 4847          pea       @lab3_155.L
00002BEE  4FC0      
00002BF0  4E92      4848          jsr       (A2)
00002BF2  584F      4849          addq.w    #4,A7
                    4850   ; EndPtrLongWord = Get8HexDigits(0);
00002BF4  42A7      4851          clr.l     -(A7)
00002BF6  4E94      4852          jsr       (A4)
00002BF8  584F      4853          addq.w    #4,A7
00002BFA  2640      4854          move.l    D0,A3
                    4855   ; while(EndPtrLongWord < (int)(0x09000000) || EndPtrLongWord > (int)(0x097FFFFF)){
                    4856   MemoryTest_104:
00002BFC  200B      4857          move.l    A3,D0
00002BFE  0C80 0900 4858          cmp.l     #150994944,D0
00002C02  0000      
00002C04  650A      4859          blo.s     MemoryTest_107
00002C06  200B      4860          move.l    A3,D0
00002C08  0C80 097F 4861          cmp.l     #159383551,D0
00002C0C  FFFF      
00002C0E  6314      4862          bls.s     MemoryTest_106
                    4863   MemoryTest_107:
                    4864   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002C10  4879 0000 4865          pea       @lab3_165.L
00002C14  5248      
00002C16  4E92      4866          jsr       (A2)
00002C18  584F      4867          addq.w    #4,A7
                    4868   ; EndPtrLongWord = Get8HexDigits(0);
00002C1A  42A7      4869          clr.l     -(A7)
00002C1C  4E94      4870          jsr       (A4)
00002C1E  584F      4871          addq.w    #4,A7
00002C20  2640      4872          move.l    D0,A3
00002C22  60D8      4873          bra       MemoryTest_104
                    4874   MemoryTest_106:
                    4875   ; }
                    4876   ; if (EndPtrLongWord % 2 != 0) {
00002C24  2F0B      4877          move.l    A3,-(A7)
00002C26  4878 0002 4878          pea       2
00002C2A  4EB9 0000 4879          jsr       ULDIV
00002C2E  3060      
00002C30  202F 0004 4880          move.l    4(A7),D0
00002C34  504F      4881          addq.w    #8,A7
00002C36  4A80      4882          tst.l     D0
00002C38  670A      4883          beq.s     MemoryTest_108
                    4884   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00002C3A  4879 0000 4885          pea       @lab3_166.L
00002C3E  52C8      
00002C40  4E92      4886          jsr       (A2)
00002C42  584F      4887          addq.w    #4,A7
                    4888   MemoryTest_108:
00002C44  2F0B      4889          move.l    A3,-(A7)
00002C46  4878 0002 4890          pea       2
00002C4A  4EB9 0000 4891          jsr       ULDIV
00002C4E  3060      
00002C50  202F 0004 4892          move.l    4(A7),D0
00002C54  504F      4893          addq.w    #8,A7
00002C56  4A80      4894          tst.l     D0
00002C58  6690      4895          bne       MemoryTest_102
                    4896   ; }
                    4897   ; } while (EndPtrLongWord % 2 != 0);
                    4898   ; printf("\r\n\r\nWriting to memory");
00002C5A  4879 0000 4899          pea       @lab3_145.L
00002C5E  4D8C      
00002C60  4E92      4900          jsr       (A2)
00002C62  584F      4901          addq.w    #4,A7
                    4902   ; StartPtrLongWordTruc = StartPtrLongWord;
00002C64  2D43 FFCC 4903          move.l    D3,-52(A6)
                    4904   ; EndPtrLongWordTruc = EndPtrLongWord;
00002C68  2D4B FFD0 4905          move.l    A3,-48(A6)
                    4906   ; TempPtrLongWord = StartPtrLongWord;
00002C6C  2D43 FFC8 4907          move.l    D3,-56(A6)
                    4908   ; if((EndPtrLongWordTruc-StartPtrLongWordTruc) % 0x4 != 0){
00002C70  202E FFD0 4909          move.l    -48(A6),D0
00002C74  90AE FFCC 4910          sub.l     -52(A6),D0
00002C78  2F00      4911          move.l    D0,-(A7)
00002C7A  4878 0004 4912          pea       4
00002C7E  4EB9 0000 4913          jsr       LDIV
00002C82  3072      
00002C84  202F 0004 4914          move.l    4(A7),D0
00002C88  504F      4915          addq.w    #8,A7
00002C8A  4A80      4916          tst.l     D0
00002C8C  670E      4917          beq.s     MemoryTest_110
                    4918   ; printf("\r\nWARNING: Memory will contain truncated data"); 
00002C8E  4879 0000 4919          pea       @lab3_167.L
00002C92  530E      
00002C94  4E92      4920          jsr       (A2)
00002C96  584F      4921          addq.w    #4,A7
                    4922   ; truncated_data = test_data_long_word;   
00002C98  3D47 FFFE 4923          move.w    D7,-2(A6)
                    4924   MemoryTest_110:
                    4925   ; }
                    4926   ; while (StartPtrLongWord < EndPtrLongWord) {
                    4927   MemoryTest_112:
00002C9C  B68B      4928          cmp.l     A3,D3
00002C9E  6400 005E 4929          bhs       MemoryTest_114
                    4930   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00002CA2  202E FFD0 4931          move.l    -48(A6),D0
00002CA6  90AE FFCC 4932          sub.l     -52(A6),D0
00002CAA  0C80 0000 4933          cmp.l     #4,D0
00002CAE  0004      
00002CB0  6C00 0030 4934          bge       MemoryTest_115
                    4935   ; StartPtrWord = StartPtrLongWord;
00002CB4  2803      4936          move.l    D3,D4
                    4937   ; *StartPtrWord = test_data_long_word;
00002CB6  2044      4938          move.l    D4,A0
00002CB8  3087      4939          move.w    D7,(A0)
                    4940   ; counter++;
00002CBA  5286      4941          addq.l    #1,D6
                    4942   ; if (counter == 10000) {
00002CBC  0C86 0000 4943          cmp.l     #10000,D6
00002CC0  2710      
00002CC2  661C      4944          bne.s     MemoryTest_117
                    4945   ; printf("\r\nWRITE: [%08X to %08x]", *StartPtrWord, StartPtrWord);
00002CC4  2F04      4946          move.l    D4,-(A7)
00002CC6  2044      4947          move.l    D4,A0
00002CC8  3210      4948          move.w    (A0),D1
00002CCA  C2BC 0000 4949          and.l     #65535,D1
00002CCE  FFFF      
00002CD0  2F01      4950          move.l    D1,-(A7)
00002CD2  4879 0000 4951          pea       @lab3_168.L
00002CD6  533C      
00002CD8  4E92      4952          jsr       (A2)
00002CDA  DEFC 000C 4953          add.w     #12,A7
                    4954   ; counter = 0;
00002CDE  4286      4955          clr.l     D6
                    4956   MemoryTest_117:
00002CE0  6014      4957          bra.s     MemoryTest_116
                    4958   MemoryTest_115:
                    4959   ; }
                    4960   ; }else{
                    4961   ; *StartPtrLongWord = test_data_long_word;
00002CE2  2043      4962          move.l    D3,A0
00002CE4  2087      4963          move.l    D7,(A0)
                    4964   ; printf("\r\nWRITE: [%08X to %08x]", test_data_long_word, StartPtrLongWord);
00002CE6  2F03      4965          move.l    D3,-(A7)
00002CE8  2F07      4966          move.l    D7,-(A7)
00002CEA  4879 0000 4967          pea       @lab3_168.L
00002CEE  533C      
00002CF0  4E92      4968          jsr       (A2)
00002CF2  DEFC 000C 4969          add.w     #12,A7
                    4970   MemoryTest_116:
                    4971   ; }
                    4972   ; StartPtrLongWord++;
00002CF6  5883      4973          addq.l    #4,D3
                    4974   ; StartPtrLongWordTruc = StartPtrLongWord;
00002CF8  2D43 FFCC 4975          move.l    D3,-52(A6)
00002CFC  609E      4976          bra       MemoryTest_112
                    4977   MemoryTest_114:
                    4978   ; }
                    4979   ; counter = 9999;
00002CFE  2C3C 0000 4980          move.l    #9999,D6
00002D02  270F      
                    4981   ; printf("\r\n\r\nStarting memory validation test");
00002D04  4879 0000 4982          pea       @lab3_147.L
00002D08  4DBA      
00002D0A  4E92      4983          jsr       (A2)
00002D0C  584F      4984          addq.w    #4,A7
                    4985   ; StartPtrLongWord = TempPtrLongWord;
00002D0E  262E FFC8 4986          move.l    -56(A6),D3
                    4987   ; truncated_data = test_data_long_word;
00002D12  3D47 FFFE 4988          move.w    D7,-2(A6)
                    4989   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrLongWord, EndPtrLongWord, test_data_long_word);
00002D16  2F07      4990          move.l    D7,-(A7)
00002D18  2F0B      4991          move.l    A3,-(A7)
00002D1A  2F03      4992          move.l    D3,-(A7)
00002D1C  4879 0000 4993          pea       @lab3_148.L
00002D20  4DDE      
00002D22  4E92      4994          jsr       (A2)
00002D24  DEFC 0010 4995          add.w     #16,A7
                    4996   ; while (StartPtrLongWord < EndPtrLongWord) {
                    4997   MemoryTest_119:
00002D28  B68B      4998          cmp.l     A3,D3
00002D2A  6400 003A 4999          bhs       MemoryTest_121
                    5000   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00002D2E  202E FFD0 5001          move.l    -48(A6),D0
00002D32  90AE FFCC 5002          sub.l     -52(A6),D0
00002D36  0C80 0000 5003          cmp.l     #4,D0
00002D3A  0004      
00002D3C  6C04      5004          bge.s     MemoryTest_122
                    5005   ; StartPtrWord = StartPtrLongWord;
00002D3E  2803      5006          move.l    D3,D4
00002D40  601C      5007          bra.s     MemoryTest_124
                    5008   MemoryTest_122:
                    5009   ; }else{
                    5010   ; if (*StartPtrLongWord != test_data_long_word) {
00002D42  2043      5011          move.l    D3,A0
00002D44  BE90      5012          cmp.l     (A0),D7
00002D46  6716      5013          beq.s     MemoryTest_124
                    5014   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %08X Expected Data: %08X] Exiting memory test...\r\n", StartPtrLongWord, *StartPtrLongWord, test_data_long_word);
00002D48  2F07      5015          move.l    D7,-(A7)
00002D4A  2043      5016          move.l    D3,A0
00002D4C  2F10      5017          move.l    (A0),-(A7)
00002D4E  2F03      5018          move.l    D3,-(A7)
00002D50  4879 0000 5019          pea       @lab3_169.L
00002D54  5354      
00002D56  4E92      5020          jsr       (A2)
00002D58  DEFC 0010 5021          add.w     #16,A7
                    5022   ; return;
00002D5C  601E      5023          bra.s     MemoryTest_2
                    5024   MemoryTest_124:
                    5025   ; }
                    5026   ; }
                    5027   ; StartPtrLongWord++;
00002D5E  5883      5028          addq.l    #4,D3
                    5029   ; StartPtrLongWordTruc = StartPtrLongWord;
00002D60  2D43 FFCC 5030          move.l    D3,-52(A6)
00002D64  60C2      5031          bra       MemoryTest_119
                    5032   MemoryTest_121:
                    5033   ; }
                    5034   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
00002D66  4879 0000 5035          pea       @lab3_170.L
00002D6A  53E2      
00002D6C  4E92      5036          jsr       (A2)
00002D6E  584F      5037          addq.w    #4,A7
                    5038   ; break;
00002D70  600A      5039          bra.s     MemoryTest_2
                    5040   MemoryTest_1:
                    5041   ; default:
                    5042   ; printf("\r\nYou failed to select a data type to use! Click open memory test again to try again.\r\n");
00002D72  4879 0000 5043          pea       @lab3_171.L
00002D76  5410      
00002D78  4E92      5044          jsr       (A2)
00002D7A  584F      5045          addq.w    #4,A7
                    5046   MemoryTest_2:
00002D7C  4CDF 3CFC 5047          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002D80  4E5E      5048          unlk      A6
00002D82  4E75      5049          rts
                    5050   ; }
                    5051   ; }
                    5052   ; void main(void)
                    5053   ; {
                    5054   _main:
00002D84  4E56 FFF0 5055          link      A6,#-16
00002D88  48E7 3030 5056          movem.l   D2/D3/A2/A3,-(A7)
00002D8C  45F8 0A30 5057          lea       _InstallExceptionHandler.L,A2
00002D90  47F9 0000 5058          lea       _printf.L,A3
00002D94  324C      
                    5059   ; char c;
                    5060   ; int i, j;
                    5061   ; char* BugMessage = "DE1-68k Bug V1.77";
00002D96  41F9 0000 5062          lea       @lab3_172.L,A0
00002D9A  5468      
00002D9C  2608      5063          move.l    A0,D3
                    5064   ; char* CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002D9E  41F9 0000 5065          lea       @lab3_173.L,A0
00002DA2  547A      
00002DA4  2D48 FFF8 5066          move.l    A0,-8(A6)
                    5067   ; char* NamesAndStudentNumbers = "\r\n\r\nKenny Wakaba - 91378315\r\nJacob Yang - 24940835";
00002DA8  41F9 0000 5068          lea       @lab3_174.L,A0
00002DAC  5498      
00002DAE  2D48 FFFC 5069          move.l    A0,-4(A6)
                    5070   ; KillAllBreakPoints();
00002DB2  4EB8 1C98 5071          jsr       _KillAllBreakPoints
                    5072   ; i = x = y = z = PortA_Count = 0;
00002DB6  42B9 0B00 5073          clr.l     _PortA_Count.L
00002DBA  00D4      
00002DBC  42B9 0B00 5074          clr.l     _z.L
00002DC0  00D0      
00002DC2  42B9 0B00 5075          clr.l     _y.L
00002DC6  00CC      
00002DC8  42B9 0B00 5076          clr.l     _x.L
00002DCC  00C8      
00002DCE  4282      5077          clr.l     D2
                    5078   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002DD0  42B9 0B00 5079          clr.l     _GoFlag.L
00002DD4  00DC      
00002DD6  42B9 0B00 5080          clr.l     _Trace.L
00002DDA  00D8      
                    5081   ; Echo = 1;
00002DDC  23FC 0000 5082          move.l    #1,_Echo.L
00002DE0  0001 0B00 
00002DE4  00E0      
                    5083   ; d0 = d1 = d2 = d3 = d4 = d5 = d6 = d7 = 0;
00002DE6  42B9 0B00 5084          clr.l     _d7.L
00002DEA  0100      
00002DEC  42B9 0B00 5085          clr.l     _d6.L
00002DF0  00FC      
00002DF2  42B9 0B00 5086          clr.l     _d5.L
00002DF6  00F8      
00002DF8  42B9 0B00 5087          clr.l     _d4.L
00002DFC  00F4      
00002DFE  42B9 0B00 5088          clr.l     _d3.L
00002E02  00F0      
00002E04  42B9 0B00 5089          clr.l     _d2.L
00002E08  00EC      
00002E0A  42B9 0B00 5090          clr.l     _d1.L
00002E0E  00E8      
00002E10  42B9 0B00 5091          clr.l     _d0.L
00002E14  00E4      
                    5092   ; a0 = a1 = a2 = a3 = a4 = a5 = a6 = 0;
00002E16  42B9 0B00 5093          clr.l     _a6.L
00002E1A  011C      
00002E1C  42B9 0B00 5094          clr.l     _a5.L
00002E20  0118      
00002E22  42B9 0B00 5095          clr.l     _a4.L
00002E26  0114      
00002E28  42B9 0B00 5096          clr.l     _a3.L
00002E2C  0110      
00002E2E  42B9 0B00 5097          clr.l     _a2.L
00002E32  010C      
00002E34  42B9 0B00 5098          clr.l     _a1.L
00002E38  0108      
00002E3A  42B9 0B00 5099          clr.l     _a0.L
00002E3E  0104      
                    5100   ; PC = ProgramStart, SSP = TopOfStack, USP = TopOfStack;
00002E40  23FC 0800 5101          move.l    #134217728,_PC.L
00002E44  0000 0B00 
00002E48  0120      
00002E4A  23FC 0C00 5102          move.l    #201326592,_SSP.L
00002E4E  0000 0B00 
00002E52  0124      
00002E54  23FC 0C00 5103          move.l    #201326592,_USP.L
00002E58  0000 0B00 
00002E5C  0128      
                    5104   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002E5E  33FC 2000 5105          move.w    #8192,_SR.L
00002E62  0B00 012C 
                    5106   ; // Initialise Breakpoint variables
                    5107   ; for (i = 0; i < 8; i++) {
00002E66  4282      5108          clr.l     D2
                    5109   main_1:
00002E68  0C82 0000 5110          cmp.l     #8,D2
00002E6C  0008      
00002E6E  6C00 004C 5111          bge       main_3
                    5112   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002E72  2002      5113          move.l    D2,D0
00002E74  E588      5114          lsl.l     #2,D0
00002E76  41F9 0B00 5115          lea       _BreakPointAddress.L,A0
00002E7A  012E      
00002E7C  42B0 0800 5116          clr.l     0(A0,D0.L)
                    5117   ; WatchPointAddress[i] = 0;
00002E80  2002      5118          move.l    D2,D0
00002E82  E588      5119          lsl.l     #2,D0
00002E84  41F9 0B00 5120          lea       _WatchPointAddress.L,A0
00002E88  0182      
00002E8A  42B0 0800 5121          clr.l     0(A0,D0.L)
                    5122   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002E8E  2002      5123          move.l    D2,D0
00002E90  E388      5124          lsl.l     #1,D0
00002E92  41F9 0B00 5125          lea       _BreakPointInstruction.L,A0
00002E96  014E      
00002E98  4270 0800 5126          clr.w     0(A0,D0.L)
                    5127   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002E9C  2002      5128          move.l    D2,D0
00002E9E  E588      5129          lsl.l     #2,D0
00002EA0  41F9 0B00 5130          lea       _BreakPointSetOrCleared.L,A0
00002EA4  015E      
00002EA6  42B0 0800 5131          clr.l     0(A0,D0.L)
                    5132   ; WatchPointSetOrCleared[i] = 0;
00002EAA  2002      5133          move.l    D2,D0
00002EAC  E588      5134          lsl.l     #2,D0
00002EAE  41F9 0B00 5135          lea       _WatchPointSetOrCleared.L,A0
00002EB2  01A2      
00002EB4  42B0 0800 5136          clr.l     0(A0,D0.L)
00002EB8  5282      5137          addq.l    #1,D2
00002EBA  60AC      5138          bra       main_1
                    5139   main_3:
                    5140   ; }
                    5141   ; Init_RS232();     // initialise the RS232 port
00002EBC  4EB8 0B12 5142          jsr       _Init_RS232
                    5143   ; Init_LCD();
00002EC0  4EB8 095E 5144          jsr       _Init_LCD
                    5145   ; SPI_Init();
00002EC4  4EB8 10E2 5146          jsr       _SPI_Init
                    5147   ; for (i = 32; i < 48; i++)
00002EC8  7420      5148          moveq     #32,D2
                    5149   main_4:
00002ECA  0C82 0000 5150          cmp.l     #48,D2
00002ECE  0030      
00002ED0  6C0E      5151          bge.s     main_6
                    5152   ; InstallExceptionHandler(UnhandledTrap, i);		        // install Trap exception handler on vector 32-47
00002ED2  2F02      5153          move.l    D2,-(A7)
00002ED4  4878 2510 5154          pea       _UnhandledTrap.L
00002ED8  4E92      5155          jsr       (A2)
00002EDA  504F      5156          addq.w    #8,A7
00002EDC  5282      5157          addq.l    #1,D2
00002EDE  60EA      5158          bra       main_4
                    5159   main_6:
                    5160   ; InstallExceptionHandler(menu, 47);		                   // TRAP #15 call debug and end program
00002EE0  4878 002F 5161          pea       47
00002EE4  4878 21EA 5162          pea       _menu.L
00002EE8  4E92      5163          jsr       (A2)
00002EEA  504F      5164          addq.w    #8,A7
                    5165   ; InstallExceptionHandler(UnhandledIRQ1, 25);		      // install handler for interrupts
00002EEC  4878 0019 5166          pea       25
00002EF0  4878 24B6 5167          pea       _UnhandledIRQ1.L
00002EF4  4E92      5168          jsr       (A2)
00002EF6  504F      5169          addq.w    #8,A7
                    5170   ; InstallExceptionHandler(UnhandledIRQ2, 26);		      // install handler for interrupts
00002EF8  4878 001A 5171          pea       26
00002EFC  4878 24C2 5172          pea       _UnhandledIRQ2.L
00002F00  4E92      5173          jsr       (A2)
00002F02  504F      5174          addq.w    #8,A7
                    5175   ; InstallExceptionHandler(UnhandledIRQ3, 27);		      // install handler for interrupts
00002F04  4878 001B 5176          pea       27
00002F08  4878 24CE 5177          pea       _UnhandledIRQ3.L
00002F0C  4E92      5178          jsr       (A2)
00002F0E  504F      5179          addq.w    #8,A7
                    5180   ; InstallExceptionHandler(UnhandledIRQ4, 28);		      // install handler for interrupts
00002F10  4878 001C 5181          pea       28
00002F14  4878 24DA 5182          pea       _UnhandledIRQ4.L
00002F18  4E92      5183          jsr       (A2)
00002F1A  504F      5184          addq.w    #8,A7
                    5185   ; InstallExceptionHandler(UnhandledIRQ5, 29);		      // install handler for interrupts
00002F1C  4878 001D 5186          pea       29
00002F20  4878 24E6 5187          pea       _UnhandledIRQ5.L
00002F24  4E92      5188          jsr       (A2)
00002F26  504F      5189          addq.w    #8,A7
                    5190   ; InstallExceptionHandler(UnhandledIRQ6, 30);		      // install handler for interrupts
00002F28  4878 001E 5191          pea       30
00002F2C  4878 24F2 5192          pea       _UnhandledIRQ6.L
00002F30  4E92      5193          jsr       (A2)
00002F32  504F      5194          addq.w    #8,A7
                    5195   ; InstallExceptionHandler(UnhandledIRQ7, 31);		      // install handler for interrupts
00002F34  4878 001F 5196          pea       31
00002F38  4878 2504 5197          pea       _UnhandledIRQ7.L
00002F3C  4E92      5198          jsr       (A2)
00002F3E  504F      5199          addq.w    #8,A7
                    5200   ; InstallExceptionHandler(HandleBreakPoint, 46);		           // install Trap 14 Break Point exception handler on vector 46
00002F40  4878 002E 5201          pea       46
00002F44  4878 1F26 5202          pea       _HandleBreakPoint.L
00002F48  4E92      5203          jsr       (A2)
00002F4A  504F      5204          addq.w    #8,A7
                    5205   ; InstallExceptionHandler(DumpRegistersandPause, 29);		   // install TRACE handler for IRQ5 on vector 29
00002F4C  4878 001D 5206          pea       29
00002F50  4878 1606 5207          pea       _DumpRegistersandPause.L
00002F54  4E92      5208          jsr       (A2)
00002F56  504F      5209          addq.w    #8,A7
                    5210   ; InstallExceptionHandler(BusError, 2);                          // install Bus error handler
00002F58  4878 0002 5211          pea       2
00002F5C  4878 251E 5212          pea       _BusError.L
00002F60  4E92      5213          jsr       (A2)
00002F62  504F      5214          addq.w    #8,A7
                    5215   ; InstallExceptionHandler(AddressError, 3);                      // install address error handler (doesn't work on soft core 68k implementation)
00002F64  4878 0003 5216          pea       3
00002F68  4878 252C 5217          pea       _AddressError.L
00002F6C  4E92      5218          jsr       (A2)
00002F6E  504F      5219          addq.w    #8,A7
                    5220   ; InstallExceptionHandler(IllegalInstruction, 4);                // install illegal instruction exception handler
00002F70  4878 0004 5221          pea       4
00002F74  4878 253A 5222          pea       _IllegalInstruction.L
00002F78  4E92      5223          jsr       (A2)
00002F7A  504F      5224          addq.w    #8,A7
                    5225   ; InstallExceptionHandler(Dividebyzero, 5);                      // install /0 exception handler
00002F7C  4878 0005 5226          pea       5
00002F80  4878 2548 5227          pea       _Dividebyzero.L
00002F84  4E92      5228          jsr       (A2)
00002F86  504F      5229          addq.w    #8,A7
                    5230   ; InstallExceptionHandler(Check, 6);                             // install check instruction exception handler
00002F88  4878 0006 5231          pea       6
00002F8C  4878 2556 5232          pea       _Check.L
00002F90  4E92      5233          jsr       (A2)
00002F92  504F      5234          addq.w    #8,A7
                    5235   ; InstallExceptionHandler(Trapv, 7);                             // install trapv instruction exception handler
00002F94  4878 0007 5236          pea       7
00002F98  4878 2564 5237          pea       _Trapv.L
00002F9C  4E92      5238          jsr       (A2)
00002F9E  504F      5239          addq.w    #8,A7
                    5240   ; InstallExceptionHandler(PrivError, 8);                         // install Priv Violation exception handler
00002FA0  4878 0008 5241          pea       8
00002FA4  4878 2572 5242          pea       _PrivError.L
00002FA8  4E92      5243          jsr       (A2)
00002FAA  504F      5244          addq.w    #8,A7
                    5245   ; InstallExceptionHandler(UnitIRQ, 15);                          // install uninitialised IRQ exception handler
00002FAC  4878 000F 5246          pea       15
00002FB0  4878 2580 5247          pea       _UnitIRQ.L
00002FB4  4E92      5248          jsr       (A2)
00002FB6  504F      5249          addq.w    #8,A7
                    5250   ; InstallExceptionHandler(Check, 24);                            // install spurious IRQ exception handler
00002FB8  4878 0018 5251          pea       24
00002FBC  4878 2556 5252          pea       _Check.L
00002FC0  4E92      5253          jsr       (A2)
00002FC2  504F      5254          addq.w    #8,A7
                    5255   ; FlushKeyboard();                        // dump unread characters from keyboard
00002FC4  4EB8 0BA6 5256          jsr       _FlushKeyboard
                    5257   ; TraceException = 0;                     // clear trace exception port to remove any software generated single step/trace
00002FC8  4239 0040 5258          clr.b     4194314
00002FCC  000A      
                    5259   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5260   ; while (((char)(PortB & 0x02)) == (char)(0x02)) {
                    5261   main_7:
00002FCE  1039 0040 5262          move.b    4194306,D0
00002FD2  0002      
00002FD4  C03C 0002 5263          and.b     #2,D0
00002FD8  0C00 0002 5264          cmp.b     #2,D0
00002FDC  662A      5265          bne.s     main_9
                    5266   ; LoadFromFlashChip();
00002FDE  4EB8 1142 5267          jsr       _LoadFromFlashChip
                    5268   ; printf("\r\nRunning.....");
00002FE2  4879 0000 5269          pea       @lab3_175.L
00002FE6  54CC      
00002FE8  4E93      5270          jsr       (A3)
00002FEA  584F      5271          addq.w    #4,A7
                    5272   ; Oline1("Running.....");
00002FEC  4879 0000 5273          pea       @lab3_176.L
00002FF0  54DC      
00002FF2  4EB8 0A02 5274          jsr       _Oline1
00002FF6  584F      5275          addq.w    #4,A7
                    5276   ; GoFlag = 1;
00002FF8  23FC 0000 5277          move.l    #1,_GoFlag.L
00002FFC  0001 0B00 
00003000  00DC      
                    5278   ; go();
00003002  4EB8 08B8 5279          jsr       _go
00003006  60C6      5280          bra       main_7
                    5281   main_9:
                    5282   ; }
                    5283   ; // otherwise start the debug monitor
                    5284   ; Oline0(BugMessage);
00003008  2F03      5285          move.l    D3,-(A7)
0000300A  4EB8 09D4 5286          jsr       _Oline0
0000300E  584F      5287          addq.w    #4,A7
                    5288   ; Oline1("By: PJ Davies");
00003010  4879 0000 5289          pea       @lab3_177.L
00003014  54EA      
00003016  4EB8 0A02 5290          jsr       _Oline1
0000301A  584F      5291          addq.w    #4,A7
                    5292   ; printf("\r\n%s", BugMessage);
0000301C  2F03      5293          move.l    D3,-(A7)
0000301E  4879 0000 5294          pea       @lab3_178.L
00003022  54F8      
00003024  4E93      5295          jsr       (A3)
00003026  504F      5296          addq.w    #8,A7
                    5297   ; printf("\r\n%s", CopyrightMessage);
00003028  2F2E FFF8 5298          move.l    -8(A6),-(A7)
0000302C  4879 0000 5299          pea       @lab3_178.L
00003030  54F8      
00003032  4E93      5300          jsr       (A3)
00003034  504F      5301          addq.w    #8,A7
                    5302   ; printf("\r\n%s", NamesAndStudentNumbers);
00003036  2F2E FFFC 5303          move.l    -4(A6),-(A7)
0000303A  4879 0000 5304          pea       @lab3_178.L
0000303E  54F8      
00003040  4E93      5305          jsr       (A3)
00003042  504F      5306          addq.w    #8,A7
                    5307   ; menu();
00003044  4EB8 21EA 5308          jsr       _menu
00003048  4CDF 0C0C 5309          movem.l   (A7)+,D2/D3/A2/A3
0000304C  4E5E      5310          unlk      A6
0000304E  4E75      5311          rts
                    5312   ; }
                    5313   _strcpy:
00003050  206F 0004 5314          move.l    (4,A7),A0
00003054  226F 0008 5315          move.l    (8,A7),A1
00003058  2008      5316          move.l    A0,D0
                    5317   strcpy_1:
0000305A  10D9      5318          move.b    (A1)+,(A0)+
0000305C  66FC      5319          bne       strcpy_1
0000305E  4E75      5320          rts
                    5321   ULDIV:
00003060  4E56 0000 5322          link    A6,#0
00003064  48E7 C000 5323          movem.l D0/D1,-(A7)
00003068  222E 0008 5324          move.l  8(A6),D1
0000306C  202E 000C 5325          move.l  12(A6),D0
00003070  6036      5326          bra.s   ldiv_3
                    5327   LDIV:
00003072  4E56 0000 5328          link    A6,#0
00003076  48E7 C000 5329          movem.l D0/D1,-(A7)
0000307A  222E 0008 5330          move.l  8(A6),D1
0000307E  202E 000C 5331          move.l  12(A6),D0
00003082  4A80      5332          tst.l   D0
00003084  6A0E      5333          bpl.s   ldiv_1
00003086  4480      5334          neg.l   D0
00003088  4A81      5335          tst.l   D1
0000308A  6A14      5336          bpl.s   ldiv_2
0000308C  4481      5337          neg.l   D1
0000308E  612A      5338          bsr.s   dodiv
00003090  4481      5339          neg.l   D1
00003092  6016      5340          bra.s   ldiv_4
                    5341   ldiv_1:
00003094  4A81      5342          tst.l   D1
00003096  6A10      5343          bpl.s   ldiv_3
00003098  4481      5344          neg.l   D1
0000309A  611E      5345          bsr.s   dodiv
0000309C  4480      5346          neg.l   D0
0000309E  600A      5347          bra.s   ldiv_4
                    5348   ldiv_2:
000030A0  6118      5349          bsr.s   dodiv
000030A2  4480      5350          neg.l   D0
000030A4  4481      5351          neg.l   D1
000030A6  6002      5352          bra.s   ldiv_4
                    5353   ldiv_3:
000030A8  6110      5354          bsr.s   dodiv
                    5355   ldiv_4:
000030AA  2D40 0008 5356          move.l  D0,8(A6)
000030AE  2D41 000C 5357          move.l  D1,12(A6)
000030B2  4CDF 0003 5358          movem.l (A7)+,D0/D1
000030B6  4E5E      5359          unlk    A6
000030B8  4E75      5360          rts
                    5361   dodiv:
000030BA  0C81 0000 5362          cmpi.l  #$FFFF,D1
000030BE  FFFF      
000030C0  6236      5363          bhi.s   dodiv_2
000030C2  0C80 0000 5364          cmpi.l  #$FFFF,D0
000030C6  FFFF      
000030C8  6210      5365          bhi.s   dodiv_1
000030CA  80C1      5366          divu    D1,D0
000030CC  2200      5367          move.l  D0,D1
000030CE  4241      5368          clr.w   D1
000030D0  4841      5369          swap    D1
000030D2  0280 0000 5370          andi.l  #$FFFF,D0
000030D6  FFFF      
000030D8  4E75      5371          rts
                    5372   dodiv_1:
000030DA  48A7 A000 5373          movem.w D0/D2,-(A7)
000030DE  4240      5374          clr.w   D0
000030E0  4840      5375          swap    D0
000030E2  80C1      5376          divu    D1,D0
000030E4  3400      5377          move.w  D0,D2
000030E6  301F      5378          move.w  (A7)+,D0
000030E8  80C1      5379          divu    D1,D0
000030EA  4840      5380          swap    D0
000030EC  4281      5381          clr.l   D1
000030EE  3200      5382          move.w  D0,D1
000030F0  3002      5383          move.w  D2,D0
000030F2  4840      5384          swap    D0
000030F4  341F      5385          move.w  (A7)+,D2
000030F6  4E75      5386          rts
                    5387   dodiv_2:
000030F8  48E7 3800 5388          movem.l D2/D3/D4,-(A7)
000030FC  2401      5389          move.l  D1,D2
000030FE  4242      5390          clr.w   D2
00003100  4842      5391          swap    D2
00003102  5282      5392          addq.l  #1,D2
00003104  2600      5393          move.l  D0,D3
00003106  2801      5394          move.l  D1,D4
00003108  2202      5395          move.l  D2,D1
0000310A  61CE      5396          bsr.s   dodiv_1
0000310C  2204      5397          move.l  D4,D1
0000310E  82C2      5398          divu    D2,D1
00003110  80C1      5399          divu    D1,D0
00003112  0280 0000 5400          andi.l  #$FFFF,D0
00003116  FFFF      
                    5401   dodiv_3:
00003118  2204      5402          move.l  D4,D1
0000311A  2404      5403          move.l  D4,D2
0000311C  4842      5404          swap    D2
0000311E  C2C0      5405          mulu    D0,D1
00003120  C4C0      5406          mulu    D0,D2
00003122  4842      5407          swap    D2
00003124  D282      5408          add.l   D2,D1
00003126  9283      5409          sub.l   D3,D1
00003128  620A      5410          bhi.s   dodiv_4
0000312A  4481      5411          neg.l   D1
0000312C  B881      5412          cmp.l   D1,D4
0000312E  6208      5413          bhi.s   dodiv_5
00003130  5280      5414          addq.l  #1,D0
00003132  60E4      5415          bra.s   dodiv_3
                    5416   dodiv_4:
00003134  5380      5417          subq.l  #1,D0
00003136  60E0      5418          bra.s   dodiv_3
                    5419   dodiv_5:
00003138  4CDF 001C 5420          movem.l (A7)+,D2/D3/D4
0000313C  4E75      5421          rts
                    5422   _putch:
0000313E  4E56 0000 5423          link      A6,#0
00003142  48E7 2000 5424          movem.l   D2,-(A7)
00003146  242E 0008 5425          move.l    8(A6),D2
0000314A  0C82 0000 5426          cmp.l     #10,D2
0000314E  000A      
00003150  660A      5427          bne.s     putch_1
00003152  4878 000D 5428          pea       13
00003156  6100 D9E4 5429          bsr       __putch
0000315A  584F      5430          addq.w    #4,A7
                    5431   putch_1:
0000315C  2F02      5432          move.l    D2,-(A7)
0000315E  6100 D9DC 5433          bsr       __putch
00003162  584F      5434          addq.w    #4,A7
00003164  2002      5435          move.l    D2,D0
00003166  4CDF 0004 5436          movem.l   (A7)+,D2
0000316A  4E5E      5437          unlk      A6
0000316C  4E75      5438          rts
                    5439   _getch:
0000316E  48E7 2000 5440          movem.l   D2,-(A7)
00003172  2439 0B00 5441          move.l    __ungetbuf,D2
00003176  00C0      
00003178  2039 0B00 5442          move.l    __ungetbuf,D0
0000317C  00C0      
0000317E  0C80 FFFF 5443          cmp.l     #-1,D0
00003182  FFFF      
00003184  670C      5444          beq.s     getch_1
00003186  23FC FFFF 5445          move.l    #-1,__ungetbuf
0000318A  FFFF 0B00 
0000318E  00C0      
00003190  6010      5446          bra.s     getch_3
                    5447   getch_1:
00003192  6100 D9D4 5448          bsr       __getch
00003196  2400      5449          move.l    D0,D2
00003198  0C80 0000 5450          cmp.l     #13,D0
0000319C  000D      
0000319E  6602      5451          bne.s     getch_3
000031A0  740A      5452          moveq     #10,D2
                    5453   getch_3:
000031A2  2002      5454          move.l    D2,D0
000031A4  4CDF 0004 5455          movem.l   (A7)+,D2
000031A8  4E75      5456          rts
                    5457   _tolower:
000031AA  4E56 0000 5458          link      A6,#0
000031AE  48E7 2000 5459          movem.l   D2,-(A7)
000031B2  242E 0008 5460          move.l    8(A6),D2
000031B6  0C82 0000 5461          cmp.l     #65,D2
000031BA  0041      
000031BC  6D0E      5462          blt.s     tolower_1
000031BE  0C82 0000 5463          cmp.l     #90,D2
000031C2  005A      
000031C4  6E06      5464          bgt.s     tolower_1
000031C6  84BC 0000 5465          or.l      #32,D2
000031CA  0020      
                    5466   tolower_1:
000031CC  2002      5467          move.l    D2,D0
000031CE  4CDF 0004 5468          movem.l   (A7)+,D2
000031D2  4E5E      5469          unlk      A6
000031D4  4E75      5470          rts
                    5471   _sprintf:
000031D6  4E56 FFFC 5472          link      A6,#-4
000031DA  48E7 2000 5473          movem.l   D2,-(A7)
000031DE  41EE 000C 5474          lea       12(A6),A0
000031E2  5848      5475          addq.w    #4,A0
000031E4  2408      5476          move.l    A0,D2
000031E6  2F02      5477          move.l    D2,-(A7)
000031E8  2F2E 000C 5478          move.l    12(A6),-(A7)
000031EC  2F2E 0008 5479          move.l    8(A6),-(A7)
000031F0  6100 013E 5480          bsr       _vsprintf
000031F4  DEFC 000C 5481          add.w     #12,A7
000031F8  2D40 FFFC 5482          move.l    D0,-4(A6)
000031FC  4282      5483          clr.l     D2
000031FE  202E FFFC 5484          move.l    -4(A6),D0
00003202  4CDF 0004 5485          movem.l   (A7)+,D2
00003206  4E5E      5486          unlk      A6
00003208  4E75      5487          rts
                    5488   _strcat:
0000320A  206F 0004 5489          move.l    (4,A7),A0	
0000320E  226F 0008 5490          move.l    (8,A7),A1	
00003212  2008      5491          move.l    A0,D0		
                    5492   strcat_0:
00003214  4A18      5493          tst.b     (A0)+
00003216  66FC      5494          bne       strcat_0
00003218  5348      5495          subq      #1,A0
                    5496   strcat_1:
0000321A  10D9      5497          move.b    (A1)+,(A0)+
0000321C  66FC      5498          bne       strcat_1
0000321E  4E75      5499          rts
                    5500   _toupper:
00003220  4E56 0000 5501          link      A6,#0
00003224  48E7 2000 5502          movem.l   D2,-(A7)
00003228  242E 0008 5503          move.l    8(A6),D2
0000322C  0C82 0000 5504          cmp.l     #97,D2
00003230  0061      
00003232  6D0E      5505          blt.s     toupper_1
00003234  0C82 0000 5506          cmp.l     #122,D2
00003238  007A      
0000323A  6E06      5507          bgt.s     toupper_1
0000323C  C4BC 0000 5508          and.l     #95,D2
00003240  005F      
                    5509   toupper_1:
00003242  2002      5510          move.l    D2,D0
00003244  4CDF 0004 5511          movem.l   (A7)+,D2
00003248  4E5E      5512          unlk      A6
0000324A  4E75      5513          rts
                    5514   _printf:
0000324C  4E56 FFFC 5515          link      A6,#-4
00003250  48E7 2000 5516          movem.l   D2,-(A7)
00003254  41EE 0008 5517          lea       8(A6),A0
00003258  5848      5518          addq.w    #4,A0
0000325A  2408      5519          move.l    A0,D2
0000325C  2F02      5520          move.l    D2,-(A7)
0000325E  2F2E 0008 5521          move.l    8(A6),-(A7)
00003262  42A7      5522          clr.l     -(A7)
00003264  6100 00CA 5523          bsr       _vsprintf
00003268  DEFC 000C 5524          add.w     #12,A7
0000326C  2D40 FFFC 5525          move.l    D0,-4(A6)
00003270  4282      5526          clr.l     D2
00003272  202E FFFC 5527          move.l    -4(A6),D0
00003276  4CDF 0004 5528          movem.l   (A7)+,D2
0000327A  4E5E      5529          unlk      A6
0000327C  4E75      5530          rts
                    5531   @vsprintf_copy:
0000327E  4E56 0000 5532          link      A6,#0
00003282  206E 0008 5533          move.l    8(A6),A0
00003286  4A90      5534          tst.l     (A0)
00003288  6710      5535          beq.s     @vsprintf_copy_1
0000328A  202E 000C 5536          move.l    12(A6),D0
0000328E  206E 0008 5537          move.l    8(A6),A0
00003292  2250      5538          move.l    (A0),A1
00003294  5290      5539          addq.l    #1,(A0)
00003296  1280      5540          move.b    D0,(A1)
00003298  600A      5541          bra.s     @vsprintf_copy_2
                    5542   @vsprintf_copy_1:
0000329A  2F2E 000C 5543          move.l    12(A6),-(A7)
0000329E  6100 FE9E 5544          bsr       _putch
000032A2  584F      5545          addq.w    #4,A7
                    5546   @vsprintf_copy_2:
000032A4  4E5E      5547          unlk      A6
000032A6  4E75      5548          rts
                    5549   @vsprintf_getval:
000032A8  4E56 0000 5550          link      A6,#0
000032AC  48E7 3000 5551          movem.l   D2/D3,-(A7)
000032B0  242E 0008 5552          move.l    8(A6),D2
000032B4  4283      5553          clr.l     D3
000032B6  2042      5554          move.l    D2,A0
000032B8  2050      5555          move.l    (A0),A0
000032BA  1010      5556          move.b    (A0),D0
000032BC  4880      5557          ext.w     D0
000032BE  48C0      5558          ext.l     D0
000032C0  0C80 0000 5559          cmp.l     #42,D0
000032C4  002A      
000032C6  6612      5560          bne.s     @vsprintf_getval_1
000032C8  206E 000C 5561          move.l    12(A6),A0
000032CC  2250      5562          move.l    (A0),A1
000032CE  5890      5563          addq.l    #4,(A0)
000032D0  2611      5564          move.l    (A1),D3
000032D2  2042      5565          move.l    D2,A0
000032D4  5290      5566          addq.l    #1,(A0)
000032D6  6000 004E 5567          bra       @vsprintf_getval_5
                    5568   @vsprintf_getval_1:
000032DA  2042      5569          move.l    D2,A0
000032DC  2050      5570          move.l    (A0),A0
000032DE  1010      5571          move.b    (A0),D0
000032E0  4880      5572          ext.w     D0
000032E2  48C0      5573          ext.l     D0
000032E4  0C80 0000 5574          cmp.l     #48,D0
000032E8  0030      
000032EA  6D00 003A 5575          blt       @vsprintf_getval_5
000032EE  2042      5576          move.l    D2,A0
000032F0  2050      5577          move.l    (A0),A0
000032F2  1010      5578          move.b    (A0),D0
000032F4  4880      5579          ext.w     D0
000032F6  48C0      5580          ext.l     D0
000032F8  0C80 0000 5581          cmp.l     #57,D0
000032FC  0039      
000032FE  6E26      5582          bgt.s     @vsprintf_getval_5
00003300  2F03      5583          move.l    D3,-(A7)
00003302  4878 000A 5584          pea       10
00003306  6100 07F4 5585          bsr       LMUL
0000330A  2017      5586          move.l    (A7),D0
0000330C  504F      5587          addq.w    #8,A7
0000330E  2042      5588          move.l    D2,A0
00003310  2250      5589          move.l    (A0),A1
00003312  5290      5590          addq.l    #1,(A0)
00003314  1211      5591          move.b    (A1),D1
00003316  4881      5592          ext.w     D1
00003318  48C1      5593          ext.l     D1
0000331A  D081      5594          add.l     D1,D0
0000331C  0480 0000 5595          sub.l     #48,D0
00003320  0030      
00003322  2600      5596          move.l    D0,D3
00003324  60B4      5597          bra       @vsprintf_getval_1
                    5598   @vsprintf_getval_5:
00003326  2003      5599          move.l    D3,D0
00003328  4CDF 000C 5600          movem.l   (A7)+,D2/D3
0000332C  4E5E      5601          unlk      A6
0000332E  4E75      5602          rts
                    5603   _vsprintf:
00003330  4E56 FFCC 5604          link      A6,#-52
00003334  48E7 3F3C 5605          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003338  45EE 0008 5606          lea       8(A6),A2
0000333C  47F8 327E 5607          lea       @vsprintf_copy,A3
00003340  49F9 0000 5608          lea       _ultoa,A4
00003344  3A88      
00003346  4286      5609          clr.l     D6
                    5610   vsprintf_1:
00003348  206E 000C 5611          move.l    12(A6),A0
0000334C  4A10      5612          tst.b     (A0)
0000334E  6700 0624 5613          beq       vsprintf_3
00003352  206E 000C 5614          move.l    12(A6),A0
00003356  1010      5615          move.b    (A0),D0
00003358  4880      5616          ext.w     D0
0000335A  48C0      5617          ext.l     D0
0000335C  0C80 0000 5618          cmp.l     #37,D0
00003360  0025      
00003362  671C      5619          beq.s     vsprintf_4
00003364  206E 000C 5620          move.l    12(A6),A0
00003368  52AE 000C 5621          addq.l    #1,12(A6)
0000336C  1210      5622          move.b    (A0),D1
0000336E  4881      5623          ext.w     D1
00003370  48C1      5624          ext.l     D1
00003372  2F01      5625          move.l    D1,-(A7)
00003374  2F0A      5626          move.l    A2,-(A7)
00003376  4E93      5627          jsr       (A3)
00003378  504F      5628          addq.w    #8,A7
0000337A  5286      5629          addq.l    #1,D6
0000337C  6000 05F2 5630          bra       vsprintf_2
                    5631   vsprintf_4:
00003380  52AE 000C 5632          addq.l    #1,12(A6)
00003384  422E FFD3 5633          clr.b     -45(A6)
00003388  422E FFD2 5634          clr.b     -46(A6)
0000338C  422E FFD0 5635          clr.b     -48(A6)
00003390  422E FFCF 5636          clr.b     -49(A6)
00003394  422E FFCE 5637          clr.b     -50(A6)
00003398  422E FFCD 5638          clr.b     -51(A6)
0000339C  42AE FFFC 5639          clr.l     -4(A6)
000033A0  7AFF      5640          moveq     #-1,D5
000033A2  41EE FFDC 5641          lea       -36(A6),A0
000033A6  2608      5642          move.l    A0,D3
000033A8  2408      5643          move.l    A0,D2
                    5644   vsprintf_6:
000033AA  206E 000C 5645          move.l    12(A6),A0
000033AE  1010      5646          move.b    (A0),D0
000033B0  4880      5647          ext.w     D0
000033B2  48C0      5648          ext.l     D0
000033B4  0C80 0000 5649          cmp.l     #43,D0
000033B8  002B      
000033BA  6730      5650          beq.s     vsprintf_12
000033BC  6E18      5651          bgt.s     vsprintf_15
000033BE  0C80 0000 5652          cmp.l     #35,D0
000033C2  0023      
000033C4  6700 003E 5653          beq       vsprintf_14
000033C8  6E00 0046 5654          bgt       vsprintf_9
000033CC  0C80 0000 5655          cmp.l     #32,D0
000033D0  0020      
000033D2  6724      5656          beq.s     vsprintf_13
000033D4  603A      5657          bra.s     vsprintf_9
                    5658   vsprintf_15:
000033D6  0C80 0000 5659          cmp.l     #45,D0
000033DA  002D      
000033DC  6702      5660          beq.s     vsprintf_11
000033DE  6030      5661          bra.s     vsprintf_9
                    5662   vsprintf_11:
000033E0  1D7C 0001 5663          move.b    #1,-51(A6)
000033E4  FFCD      
000033E6  52AE 000C 5664          addq.l    #1,12(A6)
000033EA  6026      5665          bra.s     vsprintf_7
                    5666   vsprintf_12:
000033EC  1D7C 0001 5667          move.b    #1,-50(A6)
000033F0  FFCE      
000033F2  52AE 000C 5668          addq.l    #1,12(A6)
000033F6  601A      5669          bra.s     vsprintf_7
                    5670   vsprintf_13:
000033F8  1D7C 0001 5671          move.b    #1,-49(A6)
000033FC  FFCF      
000033FE  52AE 000C 5672          addq.l    #1,12(A6)
00003402  600E      5673          bra.s     vsprintf_7
                    5674   vsprintf_14:
00003404  1D7C 0001 5675          move.b    #1,-48(A6)
00003408  FFD0      
0000340A  52AE 000C 5676          addq.l    #1,12(A6)
0000340E  6002      5677          bra.s     vsprintf_7
                    5678   vsprintf_9:
00003410  6002      5679          bra.s     vsprintf_8
                    5680   vsprintf_7:
00003412  6096      5681          bra       vsprintf_6
                    5682   vsprintf_8:
00003414  206E 000C 5683          move.l    12(A6),A0
00003418  1010      5684          move.b    (A0),D0
0000341A  4880      5685          ext.w     D0
0000341C  48C0      5686          ext.l     D0
0000341E  0C80 0000 5687          cmp.l     #48,D0
00003422  0030      
00003424  660A      5688          bne.s     vsprintf_16
00003426  52AE 000C 5689          addq.l    #1,12(A6)
0000342A  1D7C 0001 5690          move.b    #1,-46(A6)
0000342E  FFD2      
                    5691   vsprintf_16:
00003430  486E 0010 5692          pea       16(A6)
00003434  486E 000C 5693          pea       12(A6)
00003438  6100 FE6E 5694          bsr       @vsprintf_getval
0000343C  504F      5695          addq.w    #8,A7
0000343E  2A40      5696          move.l    D0,A5
00003440  206E 000C 5697          move.l    12(A6),A0
00003444  1010      5698          move.b    (A0),D0
00003446  4880      5699          ext.w     D0
00003448  48C0      5700          ext.l     D0
0000344A  0C80 0000 5701          cmp.l     #46,D0
0000344E  002E      
00003450  6614      5702          bne.s     vsprintf_18
00003452  52AE 000C 5703          addq.l    #1,12(A6)
00003456  486E 0010 5704          pea       16(A6)
0000345A  486E 000C 5705          pea       12(A6)
0000345E  6100 FE48 5706          bsr       @vsprintf_getval
00003462  504F      5707          addq.w    #8,A7
00003464  2A00      5708          move.l    D0,D5
                    5709   vsprintf_18:
00003466  206E 000C 5710          move.l    12(A6),A0
0000346A  1010      5711          move.b    (A0),D0
0000346C  4880      5712          ext.w     D0
0000346E  48C0      5713          ext.l     D0
00003470  0C80 0000 5714          cmp.l     #108,D0
00003474  006C      
00003476  660A      5715          bne.s     vsprintf_20
00003478  52AE 000C 5716          addq.l    #1,12(A6)
0000347C  1D7C 0001 5717          move.b    #1,-45(A6)
00003480  FFD3      
                    5718   vsprintf_20:
00003482  206E 000C 5719          move.l    12(A6),A0
00003486  1010      5720          move.b    (A0),D0
00003488  4880      5721          ext.w     D0
0000348A  48C0      5722          ext.l     D0
0000348C  0C80 0000 5723          cmp.l     #111,D0
00003490  006F      
00003492  6700 00D4 5724          beq       vsprintf_27
00003496  6E34      5725          bgt.s     vsprintf_33
00003498  0C80 0000 5726          cmp.l     #100,D0
0000349C  0064      
0000349E  6700 0054 5727          beq       vsprintf_24
000034A2  6E1C      5728          bgt.s     vsprintf_34
000034A4  0C80 0000 5729          cmp.l     #99,D0
000034A8  0063      
000034AA  6700 012C 5730          beq       vsprintf_30
000034AE  6E00 016A 5731          bgt       vsprintf_22
000034B2  0C80 0000 5732          cmp.l     #88,D0
000034B6  0058      
000034B8  6700 00E6 5733          beq       vsprintf_28
000034BC  6000 015C 5734          bra       vsprintf_22
                    5735   vsprintf_34:
000034C0  0C80 0000 5736          cmp.l     #105,D0
000034C4  0069      
000034C6  672C      5737          beq.s     vsprintf_24
000034C8  6000 0150 5738          bra       vsprintf_22
                    5739   vsprintf_33:
000034CC  0C80 0000 5740          cmp.l     #117,D0
000034D0  0075      
000034D2  6700 005C 5741          beq       vsprintf_26
000034D6  6E0E      5742          bgt.s     vsprintf_35
000034D8  0C80 0000 5743          cmp.l     #115,D0
000034DC  0073      
000034DE  6700 011C 5744          beq       vsprintf_31
000034E2  6000 0136 5745          bra       vsprintf_22
                    5746   vsprintf_35:
000034E6  0C80 0000 5747          cmp.l     #120,D0
000034EA  0078      
000034EC  6700 00B2 5748          beq       vsprintf_28
000034F0  6000 0128 5749          bra       vsprintf_22
                    5750   vsprintf_24:
000034F4  4A2E FFD3 5751          tst.b     -45(A6)
000034F8  671A      5752          beq.s     vsprintf_36
000034FA  4878 000A 5753          pea       10
000034FE  2F03      5754          move.l    D3,-(A7)
00003500  206E 0010 5755          move.l    16(A6),A0
00003504  58AE 0010 5756          addq.l    #4,16(A6)
00003508  2F10      5757          move.l    (A0),-(A7)
0000350A  6100 04F8 5758          bsr       _ltoa
0000350E  DEFC 000C 5759          add.w     #12,A7
00003512  6018      5760          bra.s     vsprintf_37
                    5761   vsprintf_36:
00003514  4878 000A 5762          pea       10
00003518  2F03      5763          move.l    D3,-(A7)
0000351A  206E 0010 5764          move.l    16(A6),A0
0000351E  58AE 0010 5765          addq.l    #4,16(A6)
00003522  2F10      5766          move.l    (A0),-(A7)
00003524  6100 04DE 5767          bsr       _ltoa
00003528  DEFC 000C 5768          add.w     #12,A7
                    5769   vsprintf_37:
0000352C  6000 00FA 5770          bra       vsprintf_23
                    5771   vsprintf_26:
00003530  4A2E FFD3 5772          tst.b     -45(A6)
00003534  6718      5773          beq.s     vsprintf_38
00003536  4878 000A 5774          pea       10
0000353A  2F03      5775          move.l    D3,-(A7)
0000353C  206E 0010 5776          move.l    16(A6),A0
00003540  58AE 0010 5777          addq.l    #4,16(A6)
00003544  2F10      5778          move.l    (A0),-(A7)
00003546  4E94      5779          jsr       (A4)
00003548  DEFC 000C 5780          add.w     #12,A7
0000354C  6016      5781          bra.s     vsprintf_39
                    5782   vsprintf_38:
0000354E  4878 000A 5783          pea       10
00003552  2F03      5784          move.l    D3,-(A7)
00003554  206E 0010 5785          move.l    16(A6),A0
00003558  58AE 0010 5786          addq.l    #4,16(A6)
0000355C  2F10      5787          move.l    (A0),-(A7)
0000355E  4E94      5788          jsr       (A4)
00003560  DEFC 000C 5789          add.w     #12,A7
                    5790   vsprintf_39:
00003564  6000 00C2 5791          bra       vsprintf_23
                    5792   vsprintf_27:
00003568  4A2E FFD3 5793          tst.b     -45(A6)
0000356C  6718      5794          beq.s     vsprintf_40
0000356E  4878 0008 5795          pea       8
00003572  2F03      5796          move.l    D3,-(A7)
00003574  206E 0010 5797          move.l    16(A6),A0
00003578  58AE 0010 5798          addq.l    #4,16(A6)
0000357C  2F10      5799          move.l    (A0),-(A7)
0000357E  4E94      5800          jsr       (A4)
00003580  DEFC 000C 5801          add.w     #12,A7
00003584  6016      5802          bra.s     vsprintf_41
                    5803   vsprintf_40:
00003586  4878 0008 5804          pea       8
0000358A  2F03      5805          move.l    D3,-(A7)
0000358C  206E 0010 5806          move.l    16(A6),A0
00003590  58AE 0010 5807          addq.l    #4,16(A6)
00003594  2F10      5808          move.l    (A0),-(A7)
00003596  4E94      5809          jsr       (A4)
00003598  DEFC 000C 5810          add.w     #12,A7
                    5811   vsprintf_41:
0000359C  6000 008A 5812          bra       vsprintf_23
                    5813   vsprintf_28:
000035A0  4A2E FFD3 5814          tst.b     -45(A6)
000035A4  6718      5815          beq.s     vsprintf_42
000035A6  4878 0010 5816          pea       16
000035AA  2F03      5817          move.l    D3,-(A7)
000035AC  206E 0010 5818          move.l    16(A6),A0
000035B0  58AE 0010 5819          addq.l    #4,16(A6)
000035B4  2F10      5820          move.l    (A0),-(A7)
000035B6  4E94      5821          jsr       (A4)
000035B8  DEFC 000C 5822          add.w     #12,A7
000035BC  6016      5823          bra.s     vsprintf_43
                    5824   vsprintf_42:
000035BE  4878 0010 5825          pea       16
000035C2  2F03      5826          move.l    D3,-(A7)
000035C4  206E 0010 5827          move.l    16(A6),A0
000035C8  58AE 0010 5828          addq.l    #4,16(A6)
000035CC  2F10      5829          move.l    (A0),-(A7)
000035CE  4E94      5830          jsr       (A4)
000035D0  DEFC 000C 5831          add.w     #12,A7
                    5832   vsprintf_43:
000035D4  6000 0052 5833          bra       vsprintf_23
                    5834   vsprintf_30:
000035D8  206E 0010 5835          move.l    16(A6),A0
000035DC  58AE 0010 5836          addq.l    #4,16(A6)
000035E0  2010      5837          move.l    (A0),D0
000035E2  2042      5838          move.l    D2,A0
000035E4  5282      5839          addq.l    #1,D2
000035E6  1080      5840          move.b    D0,(A0)
000035E8  2042      5841          move.l    D2,A0
000035EA  4210      5842          clr.b     (A0)
000035EC  200D      5843          move.l    A5,D0
000035EE  6704      5844          beq.s     vsprintf_44
000035F0  200D      5845          move.l    A5,D0
000035F2  6002      5846          bra.s     vsprintf_45
                    5847   vsprintf_44:
000035F4  7001      5848          moveq     #1,D0
                    5849   vsprintf_45:
000035F6  2A00      5850          move.l    D0,D5
000035F8  6000 002E 5851          bra       vsprintf_23
                    5852   vsprintf_31:
000035FC  206E 0010 5853          move.l    16(A6),A0
00003600  58AE 0010 5854          addq.l    #4,16(A6)
00003604  2610      5855          move.l    (A0),D3
00003606  0C85 FFFF 5856          cmp.l     #-1,D5
0000360A  FFFF      
0000360C  660A      5857          bne.s     vsprintf_46
0000360E  2F03      5858          move.l    D3,-(A7)
00003610  6100 0578 5859          bsr       _strlen
00003614  584F      5860          addq.w    #4,A7
00003616  2A00      5861          move.l    D0,D5
                    5862   vsprintf_46:
00003618  600E      5863          bra.s     vsprintf_23
                    5864   vsprintf_22:
0000361A  206E 000C 5865          move.l    12(A6),A0
0000361E  2242      5866          move.l    D2,A1
00003620  5282      5867          addq.l    #1,D2
00003622  1290      5868          move.b    (A0),(A1)
00003624  2042      5869          move.l    D2,A0
00003626  4210      5870          clr.b     (A0)
                    5871   vsprintf_23:
00003628  2F03      5872          move.l    D3,-(A7)
0000362A  6100 055E 5873          bsr       _strlen
0000362E  584F      5874          addq.w    #4,A7
00003630  1800      5875          move.b    D0,D4
00003632  206E 000C 5876          move.l    12(A6),A0
00003636  1010      5877          move.b    (A0),D0
00003638  4880      5878          ext.w     D0
0000363A  48C0      5879          ext.l     D0
0000363C  0C80 0000 5880          cmp.l     #115,D0
00003640  0073      
00003642  6618      5881          bne.s     vsprintf_48
00003644  0C85 0000 5882          cmp.l     #0,D5
00003648  0000      
0000364A  6D10      5883          blt.s     vsprintf_48
0000364C  4884      5884          ext.w     D4
0000364E  48C4      5885          ext.l     D4
00003650  B885      5886          cmp.l     D5,D4
00003652  6F04      5887          ble.s     vsprintf_50
00003654  1005      5888          move.b    D5,D0
00003656  6002      5889          bra.s     vsprintf_51
                    5890   vsprintf_50:
00003658  1004      5891          move.b    D4,D0
                    5892   vsprintf_51:
0000365A  1800      5893          move.b    D0,D4
                    5894   vsprintf_48:
0000365C  206E 000C 5895          move.l    12(A6),A0
00003660  1010      5896          move.b    (A0),D0
00003662  4880      5897          ext.w     D0
00003664  48C0      5898          ext.l     D0
00003666  0C80 0000 5899          cmp.l     #88,D0
0000366A  0058      
0000366C  6600 0026 5900          bne       vsprintf_56
00003670  41EE FFDC 5901          lea       -36(A6),A0
00003674  2408      5902          move.l    A0,D2
                    5903   vsprintf_54:
00003676  2042      5904          move.l    D2,A0
00003678  4A10      5905          tst.b     (A0)
0000367A  6718      5906          beq.s     vsprintf_56
0000367C  2042      5907          move.l    D2,A0
0000367E  1210      5908          move.b    (A0),D1
00003680  4881      5909          ext.w     D1
00003682  48C1      5910          ext.l     D1
00003684  2F01      5911          move.l    D1,-(A7)
00003686  6100 FB98 5912          bsr       _toupper
0000368A  584F      5913          addq.w    #4,A7
0000368C  2042      5914          move.l    D2,A0
0000368E  1080      5915          move.b    D0,(A0)
00003690  5282      5916          addq.l    #1,D2
00003692  60E2      5917          bra       vsprintf_54
                    5918   vsprintf_56:
00003694  7E00      5919          moveq     #0,D7
00003696  41EE FFD4 5920          lea       -44(A6),A0
0000369A  2408      5921          move.l    A0,D2
0000369C  206E 000C 5922          move.l    12(A6),A0
000036A0  1010      5923          move.b    (A0),D0
000036A2  4880      5924          ext.w     D0
000036A4  48C0      5925          ext.l     D0
000036A6  0C80 0000 5926          cmp.l     #100,D0
000036AA  0064      
000036AC  6714      5927          beq.s     vsprintf_59
000036AE  206E 000C 5928          move.l    12(A6),A0
000036B2  1010      5929          move.b    (A0),D0
000036B4  4880      5930          ext.w     D0
000036B6  48C0      5931          ext.l     D0
000036B8  0C80 0000 5932          cmp.l     #105,D0
000036BC  0069      
000036BE  6600 0076 5933          bne       vsprintf_65
                    5934   vsprintf_59:
000036C2  4A2E FFCE 5935          tst.b     -50(A6)
000036C6  6612      5936          bne.s     vsprintf_62
000036C8  2043      5937          move.l    D3,A0
000036CA  1010      5938          move.b    (A0),D0
000036CC  4880      5939          ext.w     D0
000036CE  48C0      5940          ext.l     D0
000036D0  0C80 0000 5941          cmp.l     #45,D0
000036D4  002D      
000036D6  6600 002E 5942          bne       vsprintf_60
                    5943   vsprintf_62:
000036DA  2043      5944          move.l    D3,A0
000036DC  1010      5945          move.b    (A0),D0
000036DE  4880      5946          ext.w     D0
000036E0  48C0      5947          ext.l     D0
000036E2  0C80 0000 5948          cmp.l     #45,D0
000036E6  002D      
000036E8  660E      5949          bne.s     vsprintf_63
000036EA  2043      5950          move.l    D3,A0
000036EC  5283      5951          addq.l    #1,D3
000036EE  2242      5952          move.l    D2,A1
000036F0  5282      5953          addq.l    #1,D2
000036F2  1290      5954          move.b    (A0),(A1)
000036F4  5304      5955          subq.b    #1,D4
000036F6  6008      5956          bra.s     vsprintf_64
                    5957   vsprintf_63:
000036F8  2042      5958          move.l    D2,A0
000036FA  5282      5959          addq.l    #1,D2
000036FC  10BC 002B 5960          move.b    #43,(A0)
                    5961   vsprintf_64:
00003700  5287      5962          addq.l    #1,D7
00003702  6000 0032 5963          bra       vsprintf_65
                    5964   vsprintf_60:
00003706  4A2E FFCF 5965          tst.b     -49(A6)
0000370A  6700 002A 5966          beq       vsprintf_65
0000370E  2043      5967          move.l    D3,A0
00003710  1010      5968          move.b    (A0),D0
00003712  4880      5969          ext.w     D0
00003714  48C0      5970          ext.l     D0
00003716  0C80 0000 5971          cmp.l     #45,D0
0000371A  002D      
0000371C  660E      5972          bne.s     vsprintf_67
0000371E  2043      5973          move.l    D3,A0
00003720  5283      5974          addq.l    #1,D3
00003722  2242      5975          move.l    D2,A1
00003724  5282      5976          addq.l    #1,D2
00003726  1290      5977          move.b    (A0),(A1)
00003728  5304      5978          subq.b    #1,D4
0000372A  6008      5979          bra.s     vsprintf_68
                    5980   vsprintf_67:
0000372C  2042      5981          move.l    D2,A0
0000372E  5282      5982          addq.l    #1,D2
00003730  10BC 0020 5983          move.b    #32,(A0)
                    5984   vsprintf_68:
00003734  5287      5985          addq.l    #1,D7
                    5986   vsprintf_65:
00003736  4A2E FFD0 5987          tst.b     -48(A6)
0000373A  6700 0066 5988          beq       vsprintf_77
0000373E  206E 000C 5989          move.l    12(A6),A0
00003742  1010      5990          move.b    (A0),D0
00003744  4880      5991          ext.w     D0
00003746  48C0      5992          ext.l     D0
00003748  0C80 0000 5993          cmp.l     #111,D0
0000374C  006F      
0000374E  671A      5994          beq.s     vsprintf_73
00003750  6E0C      5995          bgt.s     vsprintf_76
00003752  0C80 0000 5996          cmp.l     #88,D0
00003756  0058      
00003758  6710      5997          beq.s     vsprintf_73
0000375A  6000 0046 5998          bra       vsprintf_77
                    5999   vsprintf_76:
0000375E  0C80 0000 6000          cmp.l     #120,D0
00003762  0078      
00003764  6704      6001          beq.s     vsprintf_73
00003766  6000 003A 6002          bra       vsprintf_77
                    6003   vsprintf_73:
0000376A  2042      6004          move.l    D2,A0
0000376C  5282      6005          addq.l    #1,D2
0000376E  10BC 0030 6006          move.b    #48,(A0)
00003772  5287      6007          addq.l    #1,D7
00003774  206E 000C 6008          move.l    12(A6),A0
00003778  1010      6009          move.b    (A0),D0
0000377A  4880      6010          ext.w     D0
0000377C  48C0      6011          ext.l     D0
0000377E  0C80 0000 6012          cmp.l     #120,D0
00003782  0078      
00003784  6712      6013          beq.s     vsprintf_79
00003786  206E 000C 6014          move.l    12(A6),A0
0000378A  1010      6015          move.b    (A0),D0
0000378C  4880      6016          ext.w     D0
0000378E  48C0      6017          ext.l     D0
00003790  0C80 0000 6018          cmp.l     #88,D0
00003794  0058      
00003796  660A      6019          bne.s     vsprintf_77
                    6020   vsprintf_79:
00003798  2042      6021          move.l    D2,A0
0000379A  5282      6022          addq.l    #1,D2
0000379C  10BC 0078 6023          move.b    #120,(A0)
000037A0  5287      6024          addq.l    #1,D7
                    6025   vsprintf_77:
000037A2  2042      6026          move.l    D2,A0
000037A4  4210      6027          clr.b     (A0)
000037A6  206E 000C 6028          move.l    12(A6),A0
000037AA  1010      6029          move.b    (A0),D0
000037AC  4880      6030          ext.w     D0
000037AE  48C0      6031          ext.l     D0
000037B0  0C80 0000 6032          cmp.l     #105,D0
000037B4  0069      
000037B6  6700 0076 6033          beq       vsprintf_82
000037BA  6E42      6034          bgt.s     vsprintf_93
000037BC  0C80 0000 6035          cmp.l     #99,D0
000037C0  0063      
000037C2  6700 0084 6036          beq       vsprintf_96
000037C6  6E1C      6037          bgt.s     vsprintf_94
000037C8  0C80 0000 6038          cmp.l     #88,D0
000037CC  0058      
000037CE  6700 005E 6039          beq       vsprintf_82
000037D2  6E00 0184 6040          bgt       vsprintf_80
000037D6  0C80 0000 6041          cmp.l     #69,D0
000037DA  0045      
000037DC  6700 0050 6042          beq       vsprintf_82
000037E0  6000 0176 6043          bra       vsprintf_80
                    6044   vsprintf_94:
000037E4  0C80 0000 6045          cmp.l     #101,D0
000037E8  0065      
000037EA  6700 0042 6046          beq       vsprintf_82
000037EE  6E00 0168 6047          bgt       vsprintf_80
000037F2  0C80 0000 6048          cmp.l     #100,D0
000037F6  0064      
000037F8  6734      6049          beq.s     vsprintf_82
000037FA  6000 015C 6050          bra       vsprintf_80
                    6051   vsprintf_93:
000037FE  0C80 0000 6052          cmp.l     #117,D0
00003802  0075      
00003804  6728      6053          beq.s     vsprintf_82
00003806  6E1A      6054          bgt.s     vsprintf_95
00003808  0C80 0000 6055          cmp.l     #115,D0
0000380C  0073      
0000380E  6700 0038 6056          beq       vsprintf_96
00003812  6E00 0144 6057          bgt       vsprintf_80
00003816  0C80 0000 6058          cmp.l     #111,D0
0000381A  006F      
0000381C  6710      6059          beq.s     vsprintf_82
0000381E  6000 0138 6060          bra       vsprintf_80
                    6061   vsprintf_95:
00003822  0C80 0000 6062          cmp.l     #120,D0
00003826  0078      
00003828  6704      6063          beq.s     vsprintf_82
0000382A  6000 012C 6064          bra       vsprintf_80
                    6065   vsprintf_82:
0000382E  4A2E FFD2 6066          tst.b     -46(A6)
00003832  6714      6067          beq.s     vsprintf_96
00003834  4A2E FFCD 6068          tst.b     -51(A6)
00003838  660E      6069          bne.s     vsprintf_96
0000383A  200D      6070          move.l    A5,D0
0000383C  9087      6071          sub.l     D7,D0
0000383E  4884      6072          ext.w     D4
00003840  48C4      6073          ext.l     D4
00003842  9084      6074          sub.l     D4,D0
00003844  2D40 FFFC 6075          move.l    D0,-4(A6)
                    6076   vsprintf_96:
00003848  202E FFFC 6077          move.l    -4(A6),D0
0000384C  0C80 0000 6078          cmp.l     #0,D0
00003850  0000      
00003852  6C04      6079          bge.s     vsprintf_98
00003854  42AE FFFC 6080          clr.l     -4(A6)
                    6081   vsprintf_98:
00003858  4A2E FFCD 6082          tst.b     -51(A6)
0000385C  6600 0030 6083          bne       vsprintf_104
00003860  4884      6084          ext.w     D4
00003862  48C4      6085          ext.l     D4
00003864  2004      6086          move.l    D4,D0
00003866  D0AE FFFC 6087          add.l     -4(A6),D0
0000386A  D087      6088          add.l     D7,D0
0000386C  1D40 FFD1 6089          move.b    D0,-47(A6)
                    6090   vsprintf_102:
00003870  102E FFD1 6091          move.b    -47(A6),D0
00003874  4880      6092          ext.w     D0
00003876  48C0      6093          ext.l     D0
00003878  220D      6094          move.l    A5,D1
0000387A  534D      6095          subq.w    #1,A5
0000387C  B081      6096          cmp.l     D1,D0
0000387E  6C0E      6097          bge.s     vsprintf_104
00003880  4878 0020 6098          pea       32
00003884  2F0A      6099          move.l    A2,-(A7)
00003886  4E93      6100          jsr       (A3)
00003888  504F      6101          addq.w    #8,A7
0000388A  5286      6102          addq.l    #1,D6
0000388C  60E2      6103          bra       vsprintf_102
                    6104   vsprintf_104:
0000388E  41EE FFD4 6105          lea       -44(A6),A0
00003892  2408      6106          move.l    A0,D2
                    6107   vsprintf_105:
00003894  2042      6108          move.l    D2,A0
00003896  4A10      6109          tst.b     (A0)
00003898  6716      6110          beq.s     vsprintf_107
0000389A  2042      6111          move.l    D2,A0
0000389C  5282      6112          addq.l    #1,D2
0000389E  1210      6113          move.b    (A0),D1
000038A0  4881      6114          ext.w     D1
000038A2  48C1      6115          ext.l     D1
000038A4  2F01      6116          move.l    D1,-(A7)
000038A6  2F0A      6117          move.l    A2,-(A7)
000038A8  4E93      6118          jsr       (A3)
000038AA  504F      6119          addq.w    #8,A7
000038AC  5286      6120          addq.l    #1,D6
000038AE  60E4      6121          bra       vsprintf_105
                    6122   vsprintf_107:
000038B0  202E FFFC 6123          move.l    -4(A6),D0
000038B4  1D40 FFD1 6124          move.b    D0,-47(A6)
                    6125   vsprintf_108:
000038B8  102E FFD1 6126          move.b    -47(A6),D0
000038BC  532E FFD1 6127          subq.b    #1,-47(A6)
000038C0  4A00      6128          tst.b     D0
000038C2  670E      6129          beq.s     vsprintf_110
000038C4  4878 0030 6130          pea       48
000038C8  2F0A      6131          move.l    A2,-(A7)
000038CA  4E93      6132          jsr       (A3)
000038CC  504F      6133          addq.w    #8,A7
000038CE  5286      6134          addq.l    #1,D6
000038D0  60E6      6135          bra       vsprintf_108
                    6136   vsprintf_110:
000038D2  2043      6137          move.l    D3,A0
000038D4  4A10      6138          tst.b     (A0)
000038D6  6700 0048 6139          beq       vsprintf_113
000038DA  206E 000C 6140          move.l    12(A6),A0
000038DE  1010      6141          move.b    (A0),D0
000038E0  4880      6142          ext.w     D0
000038E2  48C0      6143          ext.l     D0
000038E4  0C80 0000 6144          cmp.l     #115,D0
000038E8  0073      
000038EA  670C      6145          beq.s     vsprintf_116
000038EC  6E18      6146          bgt.s     vsprintf_119
000038EE  0C80 0000 6147          cmp.l     #99,D0
000038F2  0063      
000038F4  6702      6148          beq.s     vsprintf_116
000038F6  600E      6149          bra.s     vsprintf_119
                    6150   vsprintf_116:
000038F8  2005      6151          move.l    D5,D0
000038FA  5385      6152          subq.l    #1,D5
000038FC  0C80 0000 6153          cmp.l     #0,D0
00003900  0000      
00003902  6E02      6154          bgt.s     vsprintf_119
00003904  6016      6155          bra.s     vsprintf_115
                    6156   vsprintf_119:
00003906  2043      6157          move.l    D3,A0
00003908  5283      6158          addq.l    #1,D3
0000390A  1210      6159          move.b    (A0),D1
0000390C  4881      6160          ext.w     D1
0000390E  48C1      6161          ext.l     D1
00003910  2F01      6162          move.l    D1,-(A7)
00003912  2F0A      6163          move.l    A2,-(A7)
00003914  4E93      6164          jsr       (A3)
00003916  504F      6165          addq.w    #8,A7
00003918  5286      6166          addq.l    #1,D6
0000391A  6002      6167          bra.s     vsprintf_112
                    6168   vsprintf_115:
0000391C  6002      6169          bra.s     vsprintf_113
                    6170   vsprintf_112:
0000391E  60B2      6171          bra       vsprintf_110
                    6172   vsprintf_113:
00003920  4A2E FFCD 6173          tst.b     -51(A6)
00003924  6700 0030 6174          beq       vsprintf_125
00003928  4884      6175          ext.w     D4
0000392A  48C4      6176          ext.l     D4
0000392C  2004      6177          move.l    D4,D0
0000392E  D0AE FFFC 6178          add.l     -4(A6),D0
00003932  D087      6179          add.l     D7,D0
00003934  1D40 FFD1 6180          move.b    D0,-47(A6)
                    6181   vsprintf_123:
00003938  102E FFD1 6182          move.b    -47(A6),D0
0000393C  4880      6183          ext.w     D0
0000393E  48C0      6184          ext.l     D0
00003940  220D      6185          move.l    A5,D1
00003942  534D      6186          subq.w    #1,A5
00003944  B081      6187          cmp.l     D1,D0
00003946  6C0E      6188          bge.s     vsprintf_125
00003948  4878 0020 6189          pea       32
0000394C  2F0A      6190          move.l    A2,-(A7)
0000394E  4E93      6191          jsr       (A3)
00003950  504F      6192          addq.w    #8,A7
00003952  5386      6193          subq.l    #1,D6
00003954  60E2      6194          bra       vsprintf_123
                    6195   vsprintf_125:
00003956  6014      6196          bra.s     vsprintf_81
                    6197   vsprintf_80:
00003958  206E 000C 6198          move.l    12(A6),A0
0000395C  1210      6199          move.b    (A0),D1
0000395E  4881      6200          ext.w     D1
00003960  48C1      6201          ext.l     D1
00003962  2F01      6202          move.l    D1,-(A7)
00003964  2F0A      6203          move.l    A2,-(A7)
00003966  4E93      6204          jsr       (A3)
00003968  504F      6205          addq.w    #8,A7
0000396A  5286      6206          addq.l    #1,D6
                    6207   vsprintf_81:
0000396C  52AE 000C 6208          addq.l    #1,12(A6)
                    6209   vsprintf_2:
00003970  6000 F9D6 6210          bra       vsprintf_1
                    6211   vsprintf_3:
00003974  4A92      6212          tst.l     (A2)
00003976  6710      6213          beq.s     vsprintf_126
00003978  4201      6214          clr.b     D1
0000397A  C2BC 0000 6215          and.l     #255,D1
0000397E  00FF      
00003980  2F01      6216          move.l    D1,-(A7)
00003982  2F0A      6217          move.l    A2,-(A7)
00003984  4E93      6218          jsr       (A3)
00003986  504F      6219          addq.w    #8,A7
                    6220   vsprintf_126:
00003988  2006      6221          move.l    D6,D0
0000398A  4CDF 3CFC 6222          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000398E  4E5E      6223          unlk      A6
00003990  4E75      6224          rts
                    6225   @itoa_convert:
00003992  4E56 0000 6226          link      A6,#0
00003996  48E7 3C00 6227          movem.l   D2/D3/D4/D5,-(A7)
0000399A  242E 0008 6228          move.l    8(A6),D2
0000399E  262E 0010 6229          move.l    16(A6),D3
000039A2  2A2E 000C 6230          move.l    12(A6),D5
000039A6  2F05      6231          move.l    D5,-(A7)
000039A8  2F03      6232          move.l    D3,-(A7)
000039AA  6100 F6B4 6233          bsr       ULDIV
000039AE  202F 0004 6234          move.l    4(A7),D0
000039B2  504F      6235          addq.w    #8,A7
000039B4  2800      6236          move.l    D0,D4
000039B6  BA83      6237          cmp.l     D3,D5
000039B8  651A      6238          blo.s     @itoa_convert_1
000039BA  2F03      6239          move.l    D3,-(A7)
000039BC  2F05      6240          move.l    D5,-(A7)
000039BE  2F03      6241          move.l    D3,-(A7)
000039C0  6100 F69E 6242          bsr       ULDIV
000039C4  2217      6243          move.l    (A7),D1
000039C6  504F      6244          addq.w    #8,A7
000039C8  2F01      6245          move.l    D1,-(A7)
000039CA  2F02      6246          move.l    D2,-(A7)
000039CC  61C4      6247          bsr       @itoa_convert
000039CE  DEFC 000C 6248          add.w     #12,A7
000039D2  2400      6249          move.l    D0,D2
                    6250   @itoa_convert_1:
000039D4  0C84 0000 6251          cmp.l     #9,D4
000039D8  0009      
000039DA  6E0A      6252          bgt.s     @itoa_convert_3
000039DC  2004      6253          move.l    D4,D0
000039DE  0680 0000 6254          add.l     #48,D0
000039E2  0030      
000039E4  600E      6255          bra.s     @itoa_convert_4
                    6256   @itoa_convert_3:
000039E6  2004      6257          move.l    D4,D0
000039E8  0680 0000 6258          add.l     #97,D0
000039EC  0061      
000039EE  0480 0000 6259          sub.l     #10,D0
000039F2  000A      
                    6260   @itoa_convert_4:
000039F4  2042      6261          move.l    D2,A0
000039F6  1080      6262          move.b    D0,(A0)
000039F8  2002      6263          move.l    D2,D0
000039FA  5280      6264          addq.l    #1,D0
000039FC  4CDF 003C 6265          movem.l   (A7)+,D2/D3/D4/D5
00003A00  4E5E      6266          unlk      A6
00003A02  4E75      6267          rts
                    6268   _ltoa:
00003A04  4E56 0000 6269          link      A6,#0
00003A08  48E7 3C00 6270          movem.l   D2/D3/D4/D5,-(A7)
00003A0C  242E 0008 6271          move.l    8(A6),D2
00003A10  262E 000C 6272          move.l    12(A6),D3
00003A14  2A2E 0010 6273          move.l    16(A6),D5
00003A18  2803      6274          move.l    D3,D4
00003A1A  0C85 0000 6275          cmp.l     #2,D5
00003A1E  0002      
00003A20  6D08      6276          blt.s     ltoa_3
00003A22  0C85 0000 6277          cmp.l     #36,D5
00003A26  0024      
00003A28  6F06      6278          ble.s     ltoa_1
                    6279   ltoa_3:
00003A2A  2003      6280          move.l    D3,D0
00003A2C  6000 0052 6281          bra       ltoa_4
                    6282   ltoa_1:
00003A30  0C85 0000 6283          cmp.l     #10,D5
00003A34  000A      
00003A36  6600 0032 6284          bne       ltoa_5
00003A3A  0C82 0000 6285          cmp.l     #0,D2
00003A3E  0000      
00003A40  6C28      6286          bge.s     ltoa_5
00003A42  2002      6287          move.l    D2,D0
00003A44  4480      6288          neg.l     D0
00003A46  2400      6289          move.l    D0,D2
00003A48  0C82 0000 6290          cmp.l     #0,D2
00003A4C  0000      
00003A4E  6C12      6291          bge.s     ltoa_7
00003A50  4879 0000 6292          pea       @itoa_1
00003A54  5522      
00003A56  2F03      6293          move.l    D3,-(A7)
00003A58  6100 F5F6 6294          bsr       _strcpy
00003A5C  504F      6295          addq.w    #8,A7
00003A5E  2003      6296          move.l    D3,D0
00003A60  601E      6297          bra.s     ltoa_4
                    6298   ltoa_7:
00003A62  2044      6299          move.l    D4,A0
00003A64  5284      6300          addq.l    #1,D4
00003A66  10BC 002D 6301          move.b    #45,(A0)
                    6302   ltoa_5:
00003A6A  2F05      6303          move.l    D5,-(A7)
00003A6C  2F02      6304          move.l    D2,-(A7)
00003A6E  2F04      6305          move.l    D4,-(A7)
00003A70  6100 FF20 6306          bsr       @itoa_convert
00003A74  DEFC 000C 6307          add.w     #12,A7
00003A78  2800      6308          move.l    D0,D4
00003A7A  2044      6309          move.l    D4,A0
00003A7C  4210      6310          clr.b     (A0)
00003A7E  2003      6311          move.l    D3,D0
                    6312   ltoa_4:
00003A80  4CDF 003C 6313          movem.l   (A7)+,D2/D3/D4/D5
00003A84  4E5E      6314          unlk      A6
00003A86  4E75      6315          rts
                    6316   _ultoa:
00003A88  4E56 0000 6317          link      A6,#0
00003A8C  48E7 3800 6318          movem.l   D2/D3/D4,-(A7)
00003A90  262E 0010 6319          move.l    16(A6),D3
00003A94  282E 000C 6320          move.l    12(A6),D4
00003A98  2404      6321          move.l    D4,D2
00003A9A  0C83 0000 6322          cmp.l     #2,D3
00003A9E  0002      
00003AA0  6D08      6323          blt.s     ultoa_3
00003AA2  0C83 0000 6324          cmp.l     #36,D3
00003AA6  0024      
00003AA8  6F04      6325          ble.s     ultoa_1
                    6326   ultoa_3:
00003AAA  2004      6327          move.l    D4,D0
00003AAC  6018      6328          bra.s     ultoa_4
                    6329   ultoa_1:
00003AAE  2F03      6330          move.l    D3,-(A7)
00003AB0  2F2E 0008 6331          move.l    8(A6),-(A7)
00003AB4  2F02      6332          move.l    D2,-(A7)
00003AB6  6100 FEDA 6333          bsr       @itoa_convert
00003ABA  DEFC 000C 6334          add.w     #12,A7
00003ABE  2400      6335          move.l    D0,D2
00003AC0  2042      6336          move.l    D2,A0
00003AC2  4210      6337          clr.b     (A0)
00003AC4  2004      6338          move.l    D4,D0
                    6339   ultoa_4:
00003AC6  4CDF 001C 6340          movem.l   (A7)+,D2/D3/D4
00003ACA  4E5E      6341          unlk      A6
00003ACC  4E75      6342          rts
                    6343   _itoa:
00003ACE  4E56 0000 6344          link      A6,#0
00003AD2  2F2E 0010 6345          move.l    16(A6),-(A7)
00003AD6  2F2E 000C 6346          move.l    12(A6),-(A7)
00003ADA  2F2E 0008 6347          move.l    8(A6),-(A7)
00003ADE  6100 FF24 6348          bsr       _ltoa
00003AE2  DEFC 000C 6349          add.w     #12,A7
00003AE6  4E5E      6350          unlk      A6
00003AE8  4E75      6351          rts
                    6352   ULMUL:
00003AEA  4E56 0000 6353          link    A6,#0
00003AEE  48E7 C000 6354          movem.l D0/D1,-(A7)
00003AF2  222E 0008 6355          move.l  8(A6),D1
00003AF6  202E 000C 6356          move.l  12(A6),D0
00003AFA  602C      6357          bra.s   lmul_3
                    6358   LMUL:
00003AFC  4E56 0000 6359          link    A6,#0
00003B00  48E7 C000 6360          movem.l D0/D1,-(A7)
00003B04  222E 0008 6361          move.l  8(A6),D1
00003B08  202E 000C 6362          move.l  12(A6),D0
00003B0C  4A80      6363          tst.l   D0
00003B0E  6A0A      6364          bpl.s   lmul_1
00003B10  4480      6365          neg.l   D0
00003B12  4A81      6366          tst.l   D1
00003B14  6A0A      6367          bpl.s   lmul_2
00003B16  4481      6368          neg.l   D1
00003B18  600E      6369          bra.s   lmul_3
                    6370   lmul_1:
00003B1A  4A81      6371          tst.l   D1
00003B1C  6A0A      6372          bpl.s   lmul_3
00003B1E  4481      6373          neg.l   D1
                    6374   lmul_2:
00003B20  6114      6375          bsr.s   domul
00003B22  4481      6376          neg.l   D1
00003B24  4080      6377          negx.l  D0
00003B26  6002      6378          bra.s   lmul_4
                    6379   lmul_3:
00003B28  610C      6380          bsr.s   domul
                    6381   lmul_4:
00003B2A  2D41 0008 6382          move.l  D1,8(A6)
00003B2E  4CDF 0003 6383          movem.l (A7)+,D0/D1
00003B32  4E5E      6384          unlk    A6
00003B34  4E75      6385          rts
                    6386   domul:
00003B36  0C81 0000 6387          cmpi.l  #$FFFF,D1
00003B3A  FFFF      
00003B3C  620C      6388          bhi.s   domul_1
00003B3E  0C80 0000 6389          cmpi.l  #$FFFF,D0
00003B42  FFFF      
00003B44  620E      6390          bhi.s   domul_2
00003B46  C2C0      6391          mulu    D0,D1
00003B48  4E75      6392          rts
                    6393   domul_1:
00003B4A  0C80 0000 6394          cmpi.l  #$FFFF,D0
00003B4E  FFFF      
00003B50  6218      6395          bhi.s   domul_4
00003B52  6002      6396          bra.s   domul_3
                    6397   domul_2
00003B54  C141      6398          exg     D0,D1
                    6399   domul_3:
00003B56  2F02      6400          move.l  D2,-(A7)
00003B58  2401      6401          move.l  D1,D2
00003B5A  4842      6402          swap    D2
00003B5C  C2C0      6403          mulu    D0,D1
00003B5E  C4C0      6404          mulu    D0,D2
00003B60  4842      6405          swap    D2
00003B62  4242      6406          clr.w   D2
00003B64  D282      6407          add.l   D2,D1
00003B66  241F      6408          move.l  (A7)+,D2
00003B68  4E75      6409          rts
                    6410   domul_4:
00003B6A  48E7 3000 6411          movem.l D2/D3,-(A7)
00003B6E  2401      6412          move.l  D1,D2
00003B70  2601      6413          move.l  D1,D3
00003B72  C2C0      6414          mulu    D0,D1
00003B74  4842      6415          swap    D2
00003B76  C4C0      6416          mulu    D0,D2
00003B78  4840      6417          swap    D0
00003B7A  C6C0      6418          mulu    D0,D3
00003B7C  D483      6419          add.l   D3,D2
00003B7E  4842      6420          swap    D2
00003B80  4242      6421          clr.w   D2
00003B82  D282      6422          add.l   D2,D1
00003B84  4CDF 000C 6423          movem.l (A7)+,D2/D3
00003B88  4E75      6424          rts
                    6425   _strlen:
00003B8A  206F 0004 6426          move.l    (4,A7),A0
00003B8E  2248      6427          move.l    A0,A1
                    6428   strlen_1:
00003B90  4A19      6429          tst.b     (A1)+
00003B92  66FC      6430          bne       strlen_1
00003B94  2009      6431          move.l    A1,D0
00003B96  9088      6432          sub.l     A0,D0
00003B98  5380      6433          subq.l    #1,D0
00003B9A  4E75      6434          rts
                    6435          section   const
                    6436   
                    6437   @lab3_1:
00003B9C  0D0A 00   6438          dc.b      13,10,0
                    6439   @lab3_2:
00003BA0  0D53 7769 6440          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003BA4  7463 6865 
00003BA8  7320 5357 
00003BAC  5B        
00003BAD  372D 305D 6441          dc.b      55,45,48,93,32,61,32,0
00003BB1  203D 2000 
                    6442   @lab3_3:
00003BB6  3000      6443          dc.b      48,0
                    6444   @lab3_4:
00003BB8  3100      6445          dc.b      49,0
                    6446   @lab3_5:
00003BBA  0D0A 4475 6447          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003BBE  6D70 204D 
00003BC2  656D 6F72 
00003BC6  79        
00003BC7  2042 6C6F 6448          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003BCB  636B 3A20 
00003BCF  3C45 5343 
00003BD3  3E20      
00003BD5  746F 2041 6449          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003BD9  626F 7274 
00003BDD  2C20 3C53 
00003BE1  50        
00003BE2  4143 453E 6450          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003BE6  2074 6F20 
00003BEA  436F 6E74 
00003BEE  69        
00003BEF  6E75 6500 6451          dc.b      110,117,101,0
                    6452   @lab3_6:
00003BF4  0D0A 456E 6453          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003BF8  7465 7220 
00003BFC  5374 6172 
00003C00  74        
00003C01  2041 6464 6454          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003C05  7265 7373 
00003C09  3A20 00   
                    6455   @lab3_7:
00003C0C  0D0A 2530 6456          dc.b      13,10,37,48,56,120,32,0
00003C10  3878 2000 
                    6457   @lab3_8:
00003C14  2530 3258 6458          dc.b      37,48,50,88,0
00003C18  00        
                    6459   @lab3_9:
00003C1A  2020 00   6460          dc.b      32,32,0
                    6461   @lab3_10:
00003C1E  0D0A 4669 6462          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003C22  6C6C 204D 
00003C26  656D 6F72 
00003C2A  79        
00003C2B  2042 6C6F 6463          dc.b      32,66,108,111,99,107,0
00003C2F  636B 00   
                    6464   @lab3_11:
00003C32  0D0A 456E 6465          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003C36  7465 7220 
00003C3A  456E 6420 
00003C3E  41        
00003C3F  6464 7265 6466          dc.b      100,100,114,101,115,115,58,32,0
00003C43  7373 3A20 
00003C47  00        
                    6467   @lab3_12:
00003C48  0D0A 456E 6468          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003C4C  7465 7220 
00003C50  4669 6C6C 
00003C54  20        
00003C55  4461 7461 6469          dc.b      68,97,116,97,58,32,0
00003C59  3A20 00   
                    6470   @lab3_13:
00003C5C  0D0A 4669 6471          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003C60  6C6C 696E 
00003C64  6720 4164 
00003C68  64        
00003C69  7265 7373 6472          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003C6D  6573 205B 
00003C71  2425 3038 
00003C75  58        
00003C76  202D 2024 6473          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003C7A  2530 3858 
00003C7E  5D20 7769 
00003C82  7468      
00003C84  2024 2530 6474          dc.b      32,36,37,48,50,88,0
00003C88  3258 00   
                    6475   @lab3_14:
00003C8C  0D0A 5573 6476          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003C90  6520 4879 
00003C94  7065 7254 
00003C98  65        
00003C99  726D 696E 6477          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003C9D  616C 2074 
00003CA1  6F20 5365 
00003CA5  6E64 2054 6478          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003CA9  6578 7420 
00003CAD  4669 6C65 
00003CB1  2028 2E68 6479          dc.b      32,40,46,104,101,120,41,13,10,0
00003CB5  6578 290D 
00003CB9  0A00      
                    6480   @lab3_15:
00003CBC  0D0A 4C6F 6481          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003CC0  6164 2046 
00003CC4  6169 6C65 
00003CC8  64        
00003CC9  2061 7420 6482          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003CCD  4164 6472 
00003CD1  6573 7320 
00003CD5  3D        
00003CD6  205B 2425 6483          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003CDA  3038 585D 
00003CDE  0D0A 00   
                    6484   @lab3_16:
00003CE2  0D0A 5375 6485          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003CE6  6363 6573 
00003CEA  733A 2044 
00003CEE  6F        
00003CEF  776E 6C6F 6486          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003CF3  6164 6564 
00003CF7  2025 6420 
00003CFB  6279 7465 6487          dc.b      98,121,116,101,115,13,10,0
00003CFF  730D 0A00 
                    6488   @lab3_17:
00003D04  0D0A 4578 6489          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003D08  616D 696E 
00003D0C  6520 616E 
00003D10  64        
00003D11  2043 6861 6490          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003D15  6E67 6520 
00003D19  4D65 6D6F 
00003D1D  72        
00003D1E  7900      6491          dc.b      121,0
                    6492   @lab3_18:
00003D20  0D0A 3C45 6493          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003D24  5343 3E20 
00003D28  746F 2053 
00003D2C  746F      
00003D2E  702C 203C 6494          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003D32  5350 4143 
00003D36  453E 2074 
00003D3A  6F20      
00003D3C  4164 7661 6495          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003D40  6E63 652C 
00003D44  2027 2D27 
00003D48  2074      
00003D4A  6F20 476F 6496          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003D4E  2042 6163 
00003D52  6B2C 203C 
00003D56  4441      
00003D58  5441 3E20 6497          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003D5C  746F 2063 
00003D60  6861 6E67 
00003D64  65        
00003D65  00        6498          dc.b      0
                    6499   @lab3_19:
00003D66  0D0A 456E 6500          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003D6A  7465 7220 
00003D6E  4164 6472 
00003D72  65        
00003D73  7373 3A20 6501          dc.b      115,115,58,32,0
00003D77  00        
                    6502   @lab3_20:
00003D78  0D0A 5B25 6503          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003D7C  3038 785D 
00003D80  203A 2025 
00003D84  3032 78   
00003D87  2020 00   6504          dc.b      32,32,0
                    6505   @lab3_21:
00003D8A  0D0A 5761 6506          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003D8E  726E 696E 
00003D92  6720 4368 
00003D96  61        
00003D97  6E67 6520 6507          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003D9B  4661 696C 
00003D9F  6564 3A20 
00003DA3  57        
00003DA4  726F 7465 6508          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003DA8  205B 2530 
00003DAC  3278 5D2C 
00003DB0  20        
00003DB1  5265 6164 6509          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003DB5  205B 2530 
00003DB9  3278 5D00 
                    6510   @lab3_22:
00003DBE  0D0A 4C6F 6511          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00003DC2  6164 696E 
00003DC6  6720 5072 
00003DCA  6F        
00003DCB  6772 616D 6512          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00003DCF  2046 726F 
00003DD3  6D20 5350 
00003DD7  49        
00003DD8  2046 6C61 6513          dc.b      32,70,108,97,115,104,46,46,46,46,0
00003DDC  7368 2E2E 
00003DE0  2E2E 00   
                    6514   @lab3_23:
00003DE4  2425 3038 6515          dc.b      36,37,48,56,88,32,32,0
00003DE8  5820 2000 
                    6516   @lab3_24:
00003DEC  2000      6517          dc.b      32,0
                    6518   @lab3_25:
00003DEE  2E00      6519          dc.b      46,0
                    6520   @lab3_26:
00003DF0  2563 00   6521          dc.b      37,99,0
                    6522   @lab3_27:
00003DF4  00        6523          dc.b      0
                    6524   @lab3_28:
00003DF6  0D0A 0D0A 6525          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003DFA  2044 3020 
00003DFE  3D20 2425 
00003E02  3038 58   
00003E05  2020 4130 6526          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003E09  203D 2024 
00003E0D  2530 3858 
00003E11  00        
                    6527   @lab3_29:
00003E12  0D0A 2044 6528          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003E16  3120 3D20 
00003E1A  2425 3038 
00003E1E  5820 20   
00003E21  4131 203D 6529          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003E25  2024 2530 
00003E29  3858 00   
                    6530   @lab3_30:
00003E2C  0D0A 2044 6531          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003E30  3220 3D20 
00003E34  2425 3038 
00003E38  5820 20   
00003E3B  4132 203D 6532          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003E3F  2024 2530 
00003E43  3858 00   
                    6533   @lab3_31:
00003E46  0D0A 2044 6534          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003E4A  3320 3D20 
00003E4E  2425 3038 
00003E52  5820 20   
00003E55  4133 203D 6535          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003E59  2024 2530 
00003E5D  3858 00   
                    6536   @lab3_32:
00003E60  0D0A 2044 6537          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003E64  3420 3D20 
00003E68  2425 3038 
00003E6C  5820 20   
00003E6F  4134 203D 6538          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003E73  2024 2530 
00003E77  3858 00   
                    6539   @lab3_33:
00003E7A  0D0A 2044 6540          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003E7E  3520 3D20 
00003E82  2425 3038 
00003E86  5820 20   
00003E89  4135 203D 6541          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003E8D  2024 2530 
00003E91  3858 00   
                    6542   @lab3_34:
00003E94  0D0A 2044 6543          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003E98  3620 3D20 
00003E9C  2425 3038 
00003EA0  5820 20   
00003EA3  4136 203D 6544          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003EA7  2024 2530 
00003EAB  3858 00   
                    6545   @lab3_35:
00003EAE  0D0A 2044 6546          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003EB2  3720 3D20 
00003EB6  2425 3038 
00003EBA  5820 20   
00003EBD  4137 203D 6547          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003EC1  2024 2530 
00003EC5  3858 00   
                    6548   @lab3_36:
00003EC8  0D0A 0D0A 6549          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003ECC  5553 5020 
00003ED0  3D20 2425 
00003ED4  3038 58   
00003ED7  2020 2841 6550          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003EDB  3729 2055 
00003EDF  7365 7220 
00003EE3  5350      
00003EE5  00        6551          dc.b      0
                    6552   @lab3_37:
00003EE6  0D0A 5353 6553          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003EEA  5020 3D20 
00003EEE  2425 3038 
00003EF2  5820 20   
00003EF5  2841 3729 6554          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003EF9  2053 7570 
00003EFD  6572 7669 
00003F01  73        
00003F02  6F72 2053 6555          dc.b      111,114,32,83,80,0
00003F06  5000      
                    6556   @lab3_38:
00003F08  0D0A 2053 6557          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003F0C  5220 3D20 
00003F10  2425 3034 
00003F14  5820 20   
00003F17  2000      6558          dc.b      32,0
                    6559   @lab3_39:
00003F1A  2020 205B 6560          dc.b      32,32,32,91,0
00003F1E  00        
                    6561   @lab3_40:
00003F20  0D0A 2050 6562          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003F24  4320 3D20 
00003F28  2425 3038 
00003F2C  5820 20   
00003F2F  00        6563          dc.b      0
                    6564   @lab3_41:
00003F30  5B40 2042 6565          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003F34  5245 414B 
00003F38  504F 494E 
00003F3C  545D 00   
                    6566   @lab3_42:
00003F40  0D0A 5750 6567          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003F44  2564 203D 
00003F48  2025 7300 
                    6568   @lab3_43:
00003F4C  0D0A 0D0A 6569          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003F50  0D0A 0D0A 
00003F54  0D0A 0D0A 
00003F58  5369 6E   
00003F5B  676C 6520 6570          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003F5F  5374 6570 
00003F63  2020 3A5B 
00003F67  4F        
00003F68  4E5D 00   6571          dc.b      78,93,0
                    6572   @lab3_44:
00003F6C  0D0A 4272 6573          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003F70  6561 6B20 
00003F74  506F 696E 
00003F78  74        
00003F79  7320 3A5B 6574          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003F7D  4469 7361 
00003F81  626C 6564 
00003F85  5D        
00003F86  00        6575          dc.b      0
                    6576   @lab3_45:
00003F88  0D0A 5072 6577          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00003F8C  6573 7320 
00003F90  3C53 5041 
00003F94  4345      
00003F96  3E20 746F 6578          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00003F9A  2045 7865 
00003F9E  6375 7465 
00003FA2  20        
00003FA3  4E65 7874 6579          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00003FA7  2049 6E73 
00003FAB  7472 7563 
00003FAF  7469 6F6E 6580          dc.b      116,105,111,110,0
00003FB3  00        
                    6581   @lab3_46:
00003FB4  0D0A 5072 6582          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003FB8  6573 7320 
00003FBC  3C45 5343 
00003FC0  3E20      
00003FC2  746F 2052 6583          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00003FC6  6573 756D 
00003FCA  6520 5072 
00003FCE  6F67 7261 6584          dc.b      111,103,114,97,109,0
00003FD2  6D00      
                    6585   @lab3_47:
00003FD4  0D0A 496C 6586          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00003FD8  6C65 6761 
00003FDC  6C20 4461 
00003FE0  74        
00003FE1  6120 5265 6587          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00003FE5  6769 7374 
00003FE9  6572 203A 
00003FED  20        
00003FEE  5573 6520 6588          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00003FF2  4430 2D44 
00003FF6  372E 2E2E 
00003FFA  2E2E      
00003FFC  0D0A 00   6589          dc.b      13,10,0
                    6590   @lab3_48:
00004000  0D0A 4425 6591          dc.b      13,10,68,37,99,32,61,32,0
00004004  6320 3D20 
00004008  00        
                    6592   @lab3_49:
0000400A  0D0A 496C 6593          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000400E  6C65 6761 
00004012  6C20 4164 
00004016  64        
00004017  7265 7373 6594          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000401B  2052 6567 
0000401F  6973 7465 
00004023  7220 3A20 6595          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004027  5573 6520 
0000402B  4130 2D41 
0000402F  372E      
00004031  2E2E 2E2E 6596          dc.b      46,46,46,46,13,10,0
00004035  0D0A 00   
                    6597   @lab3_50:
00004038  0D0A 4125 6598          dc.b      13,10,65,37,99,32,61,32,0
0000403C  6320 3D20 
00004040  00        
                    6599   @lab3_51:
00004042  0D0A 5573 6600          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004046  6572 2053 
0000404A  5020 3D20 
0000404E  00        
                    6601   @lab3_52:
00004050  0D0A 496C 6602          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004054  6C65 6761 
00004058  6C20 5265 
0000405C  67        
0000405D  6973 7465 6603          dc.b      105,115,116,101,114,46,46,46,46,0
00004061  722E 2E2E 
00004065  2E00      
                    6604   @lab3_53:
00004068  0D0A 5379 6605          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
0000406C  7374 656D 
00004070  2053 5020 
00004074  3D        
00004075  2000      6606          dc.b      32,0
                    6607   @lab3_54:
00004078  0D0A 5043 6608          dc.b      13,10,80,67,32,61,32,0
0000407C  203D 2000 
                    6609   @lab3_55:
00004080  0D0A 5352 6610          dc.b      13,10,83,82,32,61,32,0
00004084  203D 2000 
                    6611   @lab3_56:
00004088  0D0A 496C 6612          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000408C  6C65 6761 
00004090  6C20 5265 
00004094  67        
00004095  6973 7465 6613          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004099  723A 2055 
0000409D  7365 2041 
000040A1  30        
000040A2  2D41 372C 6614          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000040A6  2044 302D 
000040AA  4437 2C20 
000040AE  5353 50   
000040B1  2C20 5553 6615          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000040B5  502C 2050 
000040B9  4320 6F72 
000040BD  2053      
000040BF  520D 0A00 6616          dc.b      82,13,10,0
                    6617   @lab3_57:
000040C4  0D0A 0D0A 6618          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000040C8  4E75 6D20 
000040CC  2020 2020 
000040D0  4164      
000040D2  6472 6573 6619          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000040D6  7320 2020 
000040DA  2020 2049 
000040DE  6E        
000040DF  7374 7275 6620          dc.b      115,116,114,117,99,116,105,111,110,0
000040E3  6374 696F 
000040E7  6E00      
                    6621   @lab3_58:
000040EA  0D0A 2D2D 6622          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000040EE  2D20 2020 
000040F2  2020 2D2D 
000040F6  2D2D 2D   
000040F9  2D2D 2D2D 6623          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000040FD  2020 2020 
00004101  2D2D 2D2D 
00004105  2D2D 2D   
00004108  2D2D 2D2D 6624          dc.b      45,45,45,45,0
0000410C  00        
                    6625   @lab3_59:
0000410E  0D0A 4E6F 6626          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004112  2042 7265 
00004116  616B 506F 
0000411A  69        
0000411B  6E74 7320 6627          dc.b      110,116,115,32,83,101,116,0
0000411F  5365 7400 
                    6628   @lab3_60:
00004124  0D0A 2533 6629          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004128  6420 2020 
0000412C  2020 2425 
00004130  3038 78   
00004133  00        6630          dc.b      0
                    6631   @lab3_61:
00004134  0D0A 4E75 6632          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004138  6D20 2020 
0000413C  2020 4164 
00004140  6472      
00004142  6573 7300 6633          dc.b      101,115,115,0
                    6634   @lab3_62:
00004146  0D0A 2D2D 6635          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000414A  2D20 2020 
0000414E  2020 2D2D 
00004152  2D2D 2D   
00004155  2D2D 2D2D 6636          dc.b      45,45,45,45,0
00004159  00        
                    6637   @lab3_63:
0000415A  0D0A 4E6F 6638          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000415E  2057 6174 
00004162  6368 506F 
00004166  69        
00004167  6E74 7320 6639          dc.b      110,116,115,32,83,101,116,0
0000416B  5365 7400 
                    6640   @lab3_64:
00004170  0D0A 456E 6641          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004174  7465 7220 
00004178  4272 6561 
0000417C  6B        
0000417D  2050 6F69 6642          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004181  6E74 204E 
00004185  756D 6265 
00004189  72        
0000418A  3A20 00   6643          dc.b      58,32,0
                    6644   @lab3_65:
0000418E  0D0A 496C 6645          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004192  6C65 6761 
00004196  6C20 5261 
0000419A  6E        
0000419B  6765 203A 6646          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000419F  2055 7365 
000041A3  2030 202D 
000041A7  2037      
000041A9  00        6647          dc.b      0
                    6648   @lab3_66:
000041AA  0D0A 4272 6649          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000041AE  6561 6B20 
000041B2  506F 696E 
000041B6  74        
000041B7  2043 6C65 6650          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000041BB  6172 6564 
000041BF  2E2E 2E2E 
000041C3  2E        
000041C4  0D0A 00   6651          dc.b      13,10,0
                    6652   @lab3_67:
000041C8  0D0A 4272 6653          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000041CC  6561 6B20 
000041D0  506F 696E 
000041D4  74        
000041D5  2077 6173 6654          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000041D9  6E27 7420 
000041DD  5365 742E 
000041E1  2E        
000041E2  2E2E 2E00 6655          dc.b      46,46,46,0
                    6656   @lab3_68:
000041E6  0D0A 456E 6657          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000041EA  7465 7220 
000041EE  5761 7463 
000041F2  68        
000041F3  2050 6F69 6658          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000041F7  6E74 204E 
000041FB  756D 6265 
000041FF  72        
00004200  3A20 00   6659          dc.b      58,32,0
                    6660   @lab3_69:
00004204  0D0A 5761 6661          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004208  7463 6820 
0000420C  506F 696E 
00004210  74        
00004211  2043 6C65 6662          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004215  6172 6564 
00004219  2E2E 2E2E 
0000421D  2E        
0000421E  0D0A 00   6663          dc.b      13,10,0
                    6664   @lab3_70:
00004222  0D0A 5761 6665          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004226  7463 6820 
0000422A  506F 696E 
0000422E  74        
0000422F  2057 6173 6666          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004233  206E 6F74 
00004237  2053 6574 
0000423B  2E        
0000423C  2E2E 2E2E 6667          dc.b      46,46,46,46,0
00004240  00        
                    6668   @lab3_71:
00004242  0D0A 4E6F 6669          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004246  2046 5245 
0000424A  4520 4272 
0000424E  6561      
00004250  6B20 506F 6670          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004254  696E 7473 
00004258  2E2E 2E2E 
0000425C  2E        
0000425D  00        6671          dc.b      0
                    6672   @lab3_72:
0000425E  0D0A 4272 6673          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004262  6561 6B20 
00004266  506F 696E 
0000426A  74        
0000426B  2041 6464 6674          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000426F  7265 7373 
00004273  3A20 00   
                    6675   @lab3_73:
00004276  0D0A 4572 6676          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000427A  726F 7220 
0000427E  3A20 4272 
00004282  65        
00004283  616B 2050 6677          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004287  6F69 6E74 
0000428B  7320 4341 
0000428F  4E        
00004290  4E4F 5420 6678          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004294  6265 2073 
00004298  6574 2061 
0000429C  74        
0000429D  204F 4444 6679          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000042A1  2061 6464 
000042A5  7265 7373 
000042A9  65        
000042AA  7300      6680          dc.b      115,0
                    6681   @lab3_74:
000042AC  0D0A 4572 6682          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000042B0  726F 7220 
000042B4  3A20 4272 
000042B8  65        
000042B9  616B 2050 6683          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000042BD  6F69 6E74 
000042C1  7320 4341 
000042C5  4E        
000042C6  4E4F 5420 6684          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000042CA  6265 2073 
000042CE  6574 2066 
000042D2  6F        
000042D3  7220 524F 6685          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000042D7  4D20 696E 
000042DB  2052 616E 
000042DF  67        
000042E0  6520 3A20 6686          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000042E4  5B24 302D 
000042E8  2430 3030 
000042EC  3037 46   
000042EF  4646 5D00 6687          dc.b      70,70,93,0
                    6688   @lab3_75:
000042F4  0D0A 4572 6689          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000042F8  726F 723A 
000042FC  2042 7265 
00004300  61        
00004301  6B20 506F 6690          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004305  696E 7420 
00004309  416C 7265 
0000430D  6164 7920 6691          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004311  4578 6973 
00004315  7473 2061 
00004319  74        
0000431A  2041 6464 6692          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000431E  7265 7373 
00004322  203A 2025 
00004326  30        
00004327  3878 0D0A 6693          dc.b      56,120,13,10,0
0000432B  00        
                    6694   @lab3_76:
0000432C  0D0A 4272 6695          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004330  6561 6B20 
00004334  506F 696E 
00004338  74        
00004339  2053 6574 6696          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000433D  2061 7420 
00004341  4164 6472 
00004345  65        
00004346  7373 3A20 6697          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
0000434A  5B24 2530 
0000434E  3878 5D00 
                    6698   @lab3_77:
00004352  0D0A 4E6F 6699          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004356  2046 5245 
0000435A  4520 5761 
0000435E  7463      
00004360  6820 506F 6700          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004364  696E 7473 
00004368  2E2E 2E2E 
0000436C  2E        
0000436D  00        6701          dc.b      0
                    6702   @lab3_78:
0000436E  0D0A 5761 6703          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004372  7463 6820 
00004376  506F 696E 
0000437A  74        
0000437B  2041 6464 6704          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000437F  7265 7373 
00004383  3A20 00   
                    6705   @lab3_79:
00004386  0D0A 4572 6706          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
0000438A  726F 723A 
0000438E  2057 6174 
00004392  63        
00004393  6820 506F 6707          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004397  696E 7420 
0000439B  416C 7265 
0000439F  6164 7920 6708          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000043A3  5365 7420 
000043A7  6174 2041 
000043AB  64        
000043AC  6472 6573 6709          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000043B0  7320 3A20 
000043B4  2530 3878 
000043B8  0D        
000043B9  0A00      6710          dc.b      10,0
                    6711   @lab3_80:
000043BC  0D0A 5761 6712          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000043C0  7463 6820 
000043C4  506F 696E 
000043C8  74        
000043C9  2053 6574 6713          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000043CD  2061 7420 
000043D1  4164 6472 
000043D5  65        
000043D6  7373 3A20 6714          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000043DA  5B24 2530 
000043DE  3878 5D00 
                    6715   @lab3_81:
000043E2  0D0A 0D0A 6716          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000043E6  0D0A 0D0A 
000043EA  4042 5245 
000043EE  414B 50   
000043F1  4F49 4E54 6717          dc.b      79,73,78,84,0
000043F5  00        
                    6718   @lab3_82:
000043F6  0D0A 5369 6719          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000043FA  6E67 6C65 
000043FE  2053 7465 
00004402  70        
00004403  203A 205B 6720          dc.b      32,58,32,91,79,78,93,0
00004407  4F4E 5D00 
                    6721   @lab3_83:
0000440C  0D0A 4272 6722          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004410  6561 6B50 
00004414  6F69 6E74 
00004418  73        
00004419  203A 205B 6723          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
0000441D  456E 6162 
00004421  6C65 645D 
00004425  00        
                    6724   @lab3_84:
00004426  0D0A 5072 6725          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000442A  6573 7320 
0000442E  3C45 5343 
00004432  3E20      
00004434  746F 2052 6726          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004438  6573 756D 
0000443C  6520 5573 
00004440  6572 2050 6727          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004444  726F 6772 
00004448  616D 0D0A 
0000444C  00        
                    6728   @lab3_85:
0000444E  0D0A 556E 6729          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004452  6B6E 6F77 
00004456  6E20 436F 
0000445A  6D        
0000445B  6D61 6E64 6730          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000445F  2E2E 2E2E 
00004463  2E0D 0A00 
                    6731   @lab3_86:
00004468  0D0A 5072 6732          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
0000446C  6F67 7261 
00004470  6D20 456E 
00004474  64        
00004475  6564 2028 6733          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004479  5452 4150 
0000447D  2023 3135 
00004481  292E      
00004483  2E2E 2E00 6734          dc.b      46,46,46,0
                    6735   @lab3_87:
00004488  0D0A 4B69 6736          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
0000448C  6C6C 2041 
00004490  6C6C 2042 
00004494  72        
00004495  6561 6B20 6737          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004499  506F 696E 
0000449D  7473 2E2E 
000044A1  2E        
000044A2  2879 2F6E 6738          dc.b      40,121,47,110,41,63,0
000044A6  293F 00   
                    6739   @lab3_88:
000044AA  0D0A 4B69 6740          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000044AE  6C6C 2041 
000044B2  6C6C 2057 
000044B6  61        
000044B7  7463 6820 6741          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000044BB  506F 696E 
000044BF  7473 2E2E 
000044C3  2E        
000044C4  2879 2F6E 6742          dc.b      40,121,47,110,41,63,0
000044C8  293F 00   
                    6743   @lab3_89:
000044CC  0D0A 2D2D 6744          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000044D0  2D2D 2D2D 
000044D4  2D2D 2D2D 
000044D8  2D2D 2D   
000044DB  2D2D 2D2D 6745          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000044DF  2D2D 2D2D 
000044E3  2D2D 2D2D 
000044E7  2D2D 2D   
000044EA  2D2D 2D2D 6746          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000044EE  2D2D 2D2D 
000044F2  2D2D 2D2D 
000044F6  2D2D 2D   
000044F9  2D2D 2D2D 6747          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000044FD  2D2D 2D2D 
00004501  2D2D 2D2D 
00004505  2D2D 2D   
00004508  2D2D 2D2D 6748          dc.b      45,45,45,45,45,45,0
0000450C  2D2D 00   
                    6749   @lab3_90:
00004510  0D0A 2020 6750          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004514  4465 6275 
00004518  6767 6572 
0000451C  20        
0000451D  436F 6D6D 6751          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004521  616E 6420 
00004525  5375 6D6D 
00004529  6172 7900 6752          dc.b      97,114,121,0
                    6753   @lab3_91:
0000452E  0D0A 2020 6754          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004532  2E28 7265 
00004536  6729 2020 
0000453A  2020      
0000453C  2020 202D 6755          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004540  2043 6861 
00004544  6E67 6520 
00004548  5265      
0000454A  6769 7374 6756          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0000454E  6572 733A 
00004552  2065 2E67 
00004556  2041 302D 6757          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000455A  4137 2C44 
0000455E  302D 4437 
00004562  2C50 43   
00004565  2C53 5350 6758          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004569  2C55 5350 
0000456D  2C53 5200 
                    6759   @lab3_92:
00004572  0D0A 2020 6760          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004576  4244 2F42 
0000457A  532F 4243 
0000457E  2F42 4B   
00004581  2020 2D20 6761          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004585  4272 6561 
00004589  6B20 506F 
0000458D  69        
0000458E  6E74 3A20 6762          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004592  4469 7370 
00004596  6C61 792F 
0000459A  53        
0000459B  6574 2F43 6763          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
0000459F  6C65 6172 
000045A3  2F4B 696C 
000045A7  6C        
000045A8  00        6764          dc.b      0
                    6765   @lab3_93:
000045AA  0D0A 2020 6766          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000045AE  4320 2020 
000045B2  2020 2020 
000045B6  2020 20   
000045B9  2020 2D20 6767          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000045BD  436F 7079 
000045C1  2050 726F 
000045C5  67        
000045C6  7261 6D20 6768          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000045CA  6672 6F6D 
000045CE  2046 6C61 
000045D2  73        
000045D3  6820 746F 6769          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000045D7  204D 6169 
000045DB  6E20 4D65 
000045DF  6D        
000045E0  6F72 7900 6770          dc.b      111,114,121,0
                    6771   @lab3_94:
000045E4  0D0A 2020 6772          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
000045E8  4420 2020 
000045EC  2020 2020 
000045F0  2020 20   
000045F3  2020 2D20 6773          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000045F7  4475 6D70 
000045FB  204D 656D 
000045FF  6F        
00004600  7279 2043 6774          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004604  6F6E 7465 
00004608  6E74 7320 
0000460C  746F 2053 6775          dc.b      116,111,32,83,99,114,101,101,110,0
00004610  6372 6565 
00004614  6E00      
                    6776   @lab3_95:
00004616  0D0A 2020 6777          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
0000461A  4520 2020 
0000461E  2020 2020 
00004622  2020 20   
00004625  2020 2D20 6778          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004629  456E 7465 
0000462D  7220 5374 
00004631  72        
00004632  696E 6720 6779          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004636  696E 746F 
0000463A  204D 656D 
0000463E  6F72 7900 6780          dc.b      111,114,121,0
                    6781   @lab3_96:
00004642  0D0A 2020 6782          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004646  4620 2020 
0000464A  2020 2020 
0000464E  2020 20   
00004651  2020 2D20 6783          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004655  4669 6C6C 
00004659  204D 656D 
0000465D  6F        
0000465E  7279 2077 6784          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004662  6974 6820 
00004666  4461 7461 
0000466A  00        
                    6785   @lab3_97:
0000466C  0D0A 2020 6786          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004670  4720 2020 
00004674  2020 2020 
00004678  2020 20   
0000467B  2020 2D20 6787          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
0000467F  476F 2050 
00004683  726F 6772 
00004687  61        
00004688  6D20 5374 6788          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
0000468C  6172 7469 
00004690  6E67 2061 
00004694  74        
00004695  2041 6464 6789          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004699  7265 7373 
0000469D  3A20 2425 
000046A1  30        
000046A2  3858 00   6790          dc.b      56,88,0
                    6791   @lab3_98:
000046A6  0D0A 2020 6792          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000046AA  4C20 2020 
000046AE  2020 2020 
000046B2  2020 20   
000046B5  2020 2D20 6793          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000046B9  4C6F 6164 
000046BD  2050 726F 
000046C1  67        
000046C2  7261 6D20 6794          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000046C6  282E 4845 
000046CA  5820 6669 
000046CE  6C        
000046CF  6529 2066 6795          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000046D3  726F 6D20 
000046D7  4C61 7074 
000046DB  6F        
000046DC  7000      6796          dc.b      112,0
                    6797   @lab3_99:
000046DE  0D0A 2020 6798          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000046E2  4D20 2020 
000046E6  2020 2020 
000046EA  2020 20   
000046ED  2020 2D20 6799          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
000046F1  4D65 6D6F 
000046F5  7279 2045 
000046F9  78        
000046FA  616D 696E 6800          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000046FE  6520 616E 
00004702  6420 4368 
00004706  61        
00004707  6E67 6500 6801          dc.b      110,103,101,0
                    6802   @lab3_100:
0000470C  0D0A 2020 6803          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004710  5020 2020 
00004714  2020 2020 
00004718  2020 20   
0000471B  2020 2D20 6804          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000471F  5072 6F67 
00004723  7261 6D20 
00004727  46        
00004728  6C61 7368 6805          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
0000472C  204D 656D 
00004730  6F72 7920 
00004734  7769 7468 6806          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004738  2055 7365 
0000473C  7220 5072 
00004740  6F67 7261 6807          dc.b      111,103,114,97,109,0
00004744  6D00      
                    6808   @lab3_101:
00004746  0D0A 2020 6809          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
0000474A  5220 2020 
0000474E  2020 2020 
00004752  2020 20   
00004755  2020 2D20 6810          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00004759  4469 7370 
0000475D  6C61 7920 
00004761  36        
00004762  3830 3030 6811          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00004766  2052 6567 
0000476A  6973 7465 
0000476E  72        
0000476F  7300      6812          dc.b      115,0
                    6813   @lab3_102:
00004772  0D0A 2020 6814          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00004776  5320 2020 
0000477A  2020 2020 
0000477E  2020 20   
00004781  2020 2D20 6815          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004785  546F 6767 
00004789  6C65 204F 
0000478D  4E        
0000478E  2F4F 4646 6816          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004792  2053 696E 
00004796  676C 6520 
0000479A  53        
0000479B  7465 7020 6817          dc.b      116,101,112,32,77,111,100,101,0
0000479F  4D6F 6465 
000047A3  00        
                    6818   @lab3_103:
000047A4  0D0A 2020 6819          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000047A8  544D 2020 
000047AC  2020 2020 
000047B0  2020 20   
000047B3  2020 2D20 6820          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000047B7  5465 7374 
000047BB  204D 656D 
000047BF  6F        
000047C0  7279 00   6821          dc.b      114,121,0
                    6822   @lab3_104:
000047C4  0D0A 2020 6823          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000047C8  5453 2020 
000047CC  2020 2020 
000047D0  2020 20   
000047D3  2020 2D20 6824          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
000047D7  5465 7374 
000047DB  2053 7769 
000047DF  74        
000047E0  6368 6573 6825          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
000047E4  3A20 5357 
000047E8  372D 3000 
                    6826   @lab3_105:
000047EC  0D0A 2020 6827          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
000047F0  5444 2020 
000047F4  2020 2020 
000047F8  2020 20   
000047FB  2020 2D20 6828          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000047FF  5465 7374 
00004803  2044 6973 
00004807  70        
00004808  6C61 7973 6829          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
0000480C  3A20 4C45 
00004810  4473 2061 
00004814  6E        
00004815  6420 372D 6830          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004819  5365 676D 
0000481D  656E 7400 
                    6831   @lab3_106:
00004822  0D0A 2020 6832          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004826  5744 2F57 
0000482A  532F 5743 
0000482E  2F57 4B   
00004831  2020 2D20 6833          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004835  5761 7463 
00004839  6820 506F 
0000483D  696E      
0000483F  743A 2044 6834          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004843  6973 706C 
00004847  6179 2F53 
0000484B  65        
0000484C  742F 436C 6835          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004850  6561 722F 
00004854  4B69 6C6C 
00004858  00        
                    6836   @lab3_107:
0000485A  0D0A 2300 6837          dc.b      13,10,35,0
                    6838   @lab3_108:
0000485E  0D0A 5072 6839          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004862  6F67 7261 
00004866  6D20 5275 
0000486A  6E        
0000486B  6E69 6E67 6840          dc.b      110,105,110,103,46,46,46,46,46,0
0000486F  2E2E 2E2E 
00004873  2E00      
                    6841   @lab3_109:
00004876  0D0A 5072 6842          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
0000487A  6573 7320 
0000487E  3C52 4553 
00004882  4554      
00004884  3E20 6275 6843          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004888  7474 6F6E 
0000488C  203C 4B65 
00004890  79        
00004891  303E 206F 6844          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004895  6E20 4445 
00004899  3120 746F 
0000489D  2073      
0000489F  746F 7000 6845          dc.b      116,111,112,0
                    6846   @lab3_110:
000048A4  0D0A 4572 6847          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000048A8  726F 723A 
000048AC  2050 7265 
000048B0  73        
000048B1  7320 2747 6848          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000048B5  2720 6669 
000048B9  7273 7420 
000048BD  74        
000048BE  6F20 7374 6849          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000048C2  6172 7420 
000048C6  7072 6F67 
000048CA  7261 6D00 6850          dc.b      114,97,109,0
                    6851   @lab3_111:
000048CE  0D0A 5369 6852          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000048D2  6E67 6C65 
000048D6  2053 7465 
000048DA  70        
000048DB  2020 3A5B 6853          dc.b      32,32,58,91,79,78,93,0
000048DF  4F4E 5D00 
                    6854   @lab3_112:
000048E4  0D0A 5072 6855          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000048E8  6573 7320 
000048EC  2747 2720 
000048F0  74        
000048F1  6F20 5472 6856          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000048F5  6163 6520 
000048F9  5072 6F67 
000048FD  72        
000048FE  616D 2066 6857          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004902  726F 6D20 
00004906  6164 6472 
0000490A  6573 7320 6858          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
0000490E  2425 582E 
00004912  2E2E 2E2E 
00004916  00        
                    6859   @lab3_113:
00004918  0D0A 5075 6860          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
0000491C  7368 203C 
00004920  5245 5345 
00004924  5420      
00004926  4275 7474 6861          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
0000492A  6F6E 3E20 
0000492E  746F 2053 
00004932  74        
00004933  6F70 2E2E 6862          dc.b      111,112,46,46,46,46,46,0
00004937  2E2E 2E00 
                    6863   @lab3_114:
0000493C  0D0A 5369 6864          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004940  6E67 6C65 
00004944  2053 7465 
00004948  70        
00004949  203A 205B 6865          dc.b      32,58,32,91,79,70,70,93,0
0000494D  4F46 465D 
00004951  00        
                    6866   @lab3_115:
00004952  0D0A 4272 6867          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004956  6561 6B20 
0000495A  506F 696E 
0000495E  74        
0000495F  7320 3A5B 6868          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004963  456E 6162 
00004967  6C65 645D 
0000496B  00        
                    6869   @lab3_116:
0000496C  0D0A 5072 6870          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004970  6573 7320 
00004974  3C45 5343 
00004978  3E20      
0000497A  746F 2052 6871          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000497E  6573 756D 
00004982  6520 5573 
00004986  6572 2050 6872          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
0000498A  726F 6772 
0000498E  616D 2E2E 
00004992  2E        
00004993  2E2E 00   6873          dc.b      46,46,0
                    6874   @lab3_117:
00004996  0D0A 5369 6875          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000499A  6E67 6C65 
0000499E  2053 7465 
000049A2  70        
000049A3  2020 3A5B 6876          dc.b      32,32,58,91,79,70,70,93,0
000049A7  4F46 465D 
000049AB  00        
                    6877   @lab3_118:
000049AC  0D0A 0D0A 6878          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000049B0  5072 6F67 
000049B4  7261 6D20 
000049B8  41        
000049B9  424F 5254 6879          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000049BD  2021 2121 
000049C1  2121 210D 
000049C5  0A00      
                    6880   @lab3_119:
000049C8  2573 0D0A 6881          dc.b      37,115,13,10,0
000049CC  00        
                    6882   @lab3_120:
000049CE  0D0A 0D0A 6883          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000049D2  5072 6F67 
000049D6  7261 6D20 
000049DA  41        
000049DB  424F 5254 6884          dc.b      66,79,82,84,32,33,33,33,33,33,0
000049DF  2021 2121 
000049E3  2121 00   
                    6885   @lab3_121:
000049E6  0D0A 556E 6886          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000049EA  6861 6E64 
000049EE  6C65 6420 
000049F2  49        
000049F3  6E74 6572 6887          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000049F7  7275 7074 
000049FB  3A20 4952 
000049FF  5125 6420 6888          dc.b      81,37,100,32,33,33,33,33,33,0
00004A03  2121 2121 
00004A07  2100      
                    6889   @lab3_122:
00004A0A  4144 4452 6890          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004A0E  4553 5320 
00004A12  4552 524F 
00004A16  523A 20   
00004A19  3136 206F 6891          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004A1D  7220 3332 
00004A21  2042 6974 
00004A25  2054      
00004A27  7261 6E73 6892          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004A2B  6665 7220 
00004A2F  746F 2F66 
00004A33  726F 6D20 6893          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004A37  616E 204F 
00004A3B  4444 2041 
00004A3F  64        
00004A40  6472 6573 6894          dc.b      100,114,101,115,115,46,46,46,46,0
00004A44  732E 2E2E 
00004A48  2E00      
                    6895   @lab3_123:
00004A4A  556E 6861 6896          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004A4E  6E64 6C65 
00004A52  6420 5472 
00004A56  6170 2021 6897          dc.b      97,112,32,33,33,33,33,33,0
00004A5A  2121 2121 
00004A5E  00        
                    6898   @lab3_124:
00004A60  4255 5320 6899          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004A64  4572 726F 
00004A68  7221 00   
                    6900   @lab3_125:
00004A6C  4144 4452 6901          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004A70  4553 5320 
00004A74  4572 726F 
00004A78  7221      
00004A7A  00        6902          dc.b      0
                    6903   @lab3_126:
00004A7C  494C 4C45 6904          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004A80  4741 4C20 
00004A84  494E 5354 
00004A88  5255 43   
00004A8B  5449 4F4E 6905          dc.b      84,73,79,78,0
00004A8F  00        
                    6906   @lab3_127:
00004A90  4449 5649 6907          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004A94  4445 2042 
00004A98  5920 5A45 
00004A9C  524F 00   
                    6908   @lab3_128:
00004AA0  2743 484B 6909          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004AA4  2720 494E 
00004AA8  5354 5255 
00004AAC  4354 49   
00004AAF  4F4E 00   6910          dc.b      79,78,0
                    6911   @lab3_129:
00004AB2  5452 4150 6912          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004AB6  5620 494E 
00004ABA  5354 5255 
00004ABE  4354 49   
00004AC1  4F4E 00   6913          dc.b      79,78,0
                    6914   @lab3_130:
00004AC4  5052 4956 6915          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004AC8  494C 4547 
00004ACC  4520 5649 
00004AD0  4F4C 41   
00004AD3  5449 4F4E 6916          dc.b      84,73,79,78,0
00004AD7  00        
                    6917   @lab3_131:
00004AD8  554E 494E 6918          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004ADC  4954 4941 
00004AE0  4C49 5345 
00004AE4  4420 49   
00004AE7  5251 00   6919          dc.b      82,81,0
                    6920   @lab3_132:
00004AEA  5350 5552 6921          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004AEE  494F 5553 
00004AF2  2049 5251 
00004AF6  00        
                    6922   @lab3_133:
00004AF8  0D0A 5374 6923          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004AFC  6172 7420 
00004B00  4164 6472 
00004B04  65        
00004B05  7373 2069 6924          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004B09  6E20 4D65 
00004B0D  6D6F 7279 
00004B11  3A20 00   6925          dc.b      58,32,0
                    6926   @lab3_134:
00004B14  0D0A 456E 6927          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004B18  7465 7220 
00004B1C  5374 7269 
00004B20  6E        
00004B21  6720 2845 6928          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004B25  5343 2074 
00004B29  6F20 656E 
00004B2D  64        
00004B2E  2920 3A00 6929          dc.b      41,32,58,0
                    6930   @lab3_135:
00004B32  0D0A 5365 6931          dc.b      13,10,83,101,108,101,99,116,32,100,97,116,97
00004B36  6C65 6374 
00004B3A  2064 6174 
00004B3E  61        
00004B3F  2074 7970 6932          dc.b      32,116,121,112,101,58,10,49,32,61,32,98,121
00004B43  653A 0A31 
00004B47  203D 2062 
00004B4B  79        
00004B4C  7465 7320 6933          dc.b      116,101,115,32,40,56,32,98,105,116,115,41,10
00004B50  2838 2062 
00004B54  6974 7329 
00004B58  0A        
00004B59  3220 3D20 6934          dc.b      50,32,61,32,119,111,114,100,115,32,40,49,54
00004B5D  776F 7264 
00004B61  7320 2831 
00004B65  36        
00004B66  2062 6974 6935          dc.b      32,98,105,116,115,41,10,51,32,61,32,108,111
00004B6A  7329 0A33 
00004B6E  203D 206C 
00004B72  6F        
00004B73  6E67 2077 6936          dc.b      110,103,32,119,111,114,100,115,32,40,51,50,32
00004B77  6F72 6473 
00004B7B  2028 3332 
00004B7F  20        
00004B80  6269 7473 6937          dc.b      98,105,116,115,41,10,0
00004B84  290A 00   
                    6938   @lab3_136:
00004B88  0A53 656C 6939          dc.b      10,83,101,108,101,99,116,105,110,103,32,98,121
00004B8C  6563 7469 
00004B90  6E67 2062 
00004B94  79        
00004B95  7465 2073 6940          dc.b      116,101,32,115,105,122,101,10,0
00004B99  697A 650A 
00004B9D  00        
                    6941   @lab3_137:
00004B9E  5365 6C65 6942          dc.b      83,101,108,101,99,116,32,100,97,116,97,32,118
00004BA2  6374 2064 
00004BA6  6174 6120 
00004BAA  76        
00004BAB  616C 7565 6943          dc.b      97,108,117,101,58,10,0
00004BAF  3A0A 00   
                    6944   @lab3_138:
00004BB2  3120 3D20 6945          dc.b      49,32,61,32,34,65,65,34,10,50,32,61,32,34,65
00004BB6  2241 4122 
00004BBA  0A32 203D 
00004BBE  2022 41   
00004BC1  4222 0A33 6946          dc.b      66,34,10,51,32,61,32,34,67,67,34,10,52,32,61
00004BC5  203D 2022 
00004BC9  4343 220A 
00004BCD  3420 3D   
00004BD0  2022 4344 6947          dc.b      32,34,67,68,34,10,0
00004BD4  220A 00   
                    6948   @lab3_139:
00004BD8  0D0A 4552 6949          dc.b      13,10,69,82,82,79,82,58,32,83,101,108,101,99
00004BDC  524F 523A 
00004BE0  2053 656C 
00004BE4  6563      
00004BE6  7420 6569 6950          dc.b      116,32,101,105,116,104,101,114,32,49,44,32,50
00004BEA  7468 6572 
00004BEE  2031 2C20 
00004BF2  32        
00004BF3  2C20 332C 6951          dc.b      44,32,51,44,32,111,114,32,52,13,10,0
00004BF7  206F 7220 
00004BFB  340D 0A00 
                    6952   @lab3_140:
00004C00  0D0A 4552 6953          dc.b      13,10,69,82,82,79,82,58,32,69,120,105,116,105
00004C04  524F 523A 
00004C08  2045 7869 
00004C0C  7469      
00004C0E  6E67 206D 6954          dc.b      110,103,32,109,101,109,111,114,121,32,116,101
00004C12  656D 6F72 
00004C16  7920 7465 
00004C1A  7374 2064 6955          dc.b      115,116,32,100,117,101,32,116,111,32,111,112
00004C1E  7565 2074 
00004C22  6F20 6F70 
00004C26  7469 6F6E 6956          dc.b      116,105,111,110,32,109,101,109,111,114,121,32
00004C2A  206D 656D 
00004C2E  6F72 7920 
00004C32  636F 6D70 6957          dc.b      99,111,109,112,108,105,99,97,116,105,111,110
00004C36  6C69 6361 
00004C3A  7469 6F6E 
00004C3E  2E0D 0A00 6958          dc.b      46,13,10,0
                    6959   @lab3_141:
00004C42  0D0A 456E 6960          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00004C46  7465 7220 
00004C4A  7374 6172 
00004C4E  74        
00004C4F  2061 6464 6961          dc.b      32,97,100,100,114,101,115,115,32,119,105,116
00004C53  7265 7373 
00004C57  2077 6974 
00004C5B  6869 6E20 6962          dc.b      104,105,110,32,48,120,48,57,48,48,48,48,48,48
00004C5F  3078 3039 
00004C63  3030 3030 
00004C67  3030      
00004C69  202D 2030 6963          dc.b      32,45,32,48,120,48,57,55,70,70,70,70,70,58,13
00004C6D  7830 3937 
00004C71  4646 4646 
00004C75  463A 0D   
00004C78  0A00      6964          dc.b      10,0
                    6965   @lab3_142:
00004C7A  0D0A 4552 6966          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
00004C7E  524F 523A 
00004C82  2053 7461 
00004C86  7274      
00004C88  696E 6720 6967          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
00004C8C  4164 6472 
00004C90  6573 7320 
00004C94  6973 206F 6968          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
00004C98  7574 7369 
00004C9C  6465 206F 
00004CA0  6620 3638 6969          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
00004CA4  4B20 6D65 
00004CA8  6D6F 7279 
00004CAC  20        
00004CAD  7261 6E67 6970          dc.b      114,97,110,103,101,46,32,69,110,115,117,114
00004CB1  652E 2045 
00004CB5  6E73 7572 
00004CB9  6520 7468 6971          dc.b      101,32,116,104,101,32,97,100,100,114,101,115
00004CBD  6520 6164 
00004CC1  6472 6573 
00004CC5  7320 6973 6972          dc.b      115,32,105,115,32,119,105,116,104,110,32,48
00004CC9  2077 6974 
00004CCD  686E 2030 
00004CD1  7830 3930 6973          dc.b      120,48,57,48,48,48,48,48,48,32,45,32,48,120
00004CD5  3030 3030 
00004CD9  3020 2D20 
00004CDD  3078      
00004CDF  3039 3746 6974          dc.b      48,57,55,70,70,70,70,70,13,10,0
00004CE3  4646 4646 
00004CE7  0D0A 00   
                    6975   @lab3_143:
00004CEA  0D0A 456E 6976          dc.b      13,10,69,110,116,101,114,32,101,110,100,32,97
00004CEE  7465 7220 
00004CF2  656E 6420 
00004CF6  61        
00004CF7  6464 7265 6977          dc.b      100,100,114,101,115,115,32,119,105,116,104,105
00004CFB  7373 2077 
00004CFF  6974 6869 
00004D03  6E20 3078 6978          dc.b      110,32,48,120,48,57,48,48,48,48,48,48,32,45
00004D07  3039 3030 
00004D0B  3030 3030 
00004D0F  202D      
00004D11  2030 7830 6979          dc.b      32,48,120,48,57,55,70,70,70,70,70,58,13,10,0
00004D15  3937 4646 
00004D19  4646 463A 
00004D1D  0D0A 00   
                    6980   @lab3_144:
00004D20  0D0A 4552 6981          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
00004D24  524F 523A 
00004D28  2045 6E64 
00004D2C  2041      
00004D2E  6464 7265 6982          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
00004D32  7373 2069 
00004D36  7320 6F75 
00004D3A  7473 6964 6983          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
00004D3E  6520 6F66 
00004D42  2036 384B 
00004D46  20        
00004D47  6D65 6D6F 6984          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
00004D4B  7279 2072 
00004D4F  616E 6765 
00004D53  2E20 456E 6985          dc.b      46,32,69,110,115,117,114,101,32,116,104,101
00004D57  7375 7265 
00004D5B  2074 6865 
00004D5F  2061 6464 6986          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
00004D63  7265 7373 
00004D67  2069 7320 
00004D6B  7769 7468 6987          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
00004D6F  6E20 3078 
00004D73  3039 3030 
00004D77  30        
00004D78  3030 3020 6988          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
00004D7C  2D20 3078 
00004D80  3039 3746 
00004D84  4646 46   
00004D87  460D 0A00 6989          dc.b      70,13,10,0
                    6990   @lab3_145:
00004D8C  0D0A 0D0A 6991          dc.b      13,10,13,10,87,114,105,116,105,110,103,32,116
00004D90  5772 6974 
00004D94  696E 6720 
00004D98  74        
00004D99  6F20 6D65 6992          dc.b      111,32,109,101,109,111,114,121,0
00004D9D  6D6F 7279 
00004DA1  00        
                    6993   @lab3_146:
00004DA2  0D0A 5772 6994          dc.b      13,10,87,114,105,116,101,58,32,91,37,48,50,88
00004DA6  6974 653A 
00004DAA  205B 2530 
00004DAE  3258      
00004DB0  2074 6F20 6995          dc.b      32,116,111,32,37,48,56,120,93,0
00004DB4  2530 3878 
00004DB8  5D00      
                    6996   @lab3_147:
00004DBA  0D0A 0D0A 6997          dc.b      13,10,13,10,83,116,97,114,116,105,110,103,32
00004DBE  5374 6172 
00004DC2  7469 6E67 
00004DC6  20        
00004DC7  6D65 6D6F 6998          dc.b      109,101,109,111,114,121,32,118,97,108,105,100
00004DCB  7279 2076 
00004DCF  616C 6964 
00004DD3  6174 696F 6999          dc.b      97,116,105,111,110,32,116,101,115,116,0
00004DD7  6E20 7465 
00004DDB  7374 00   
                    7000   @lab3_148:
00004DDE  0D0A 5665 7001          dc.b      13,10,86,101,114,105,102,121,105,110,103,32
00004DE2  7269 6679 
00004DE6  696E 6720 
00004DEA  7468 6520 7002          dc.b      116,104,101,32,97,100,100,114,101,115,115,101
00004DEE  6164 6472 
00004DF2  6573 7365 
00004DF6  7320 5B25 7003          dc.b      115,32,91,37,48,56,120,32,116,111,32,37,48,56
00004DFA  3038 7820 
00004DFE  746F 2025 
00004E02  3038      
00004E04  785D 2063 7004          dc.b      120,93,32,99,111,110,116,97,105,110,115,32,116
00004E08  6F6E 7461 
00004E0C  696E 7320 
00004E10  74        
00004E11  6573 7420 7005          dc.b      101,115,116,32,100,97,116,97,32,91,37,48,50
00004E15  6461 7461 
00004E19  205B 2530 
00004E1D  32        
00004E1E  585D 2E2E 7006          dc.b      88,93,46,46,46,46,46,0
00004E22  2E2E 2E00 
                    7007   @lab3_149:
00004E26  0D0A 4552 7008          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00004E2A  524F 523A 
00004E2E  2044 6174 
00004E32  6120 77   
00004E35  6974 6869 7009          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00004E39  6E20 6D65 
00004E3D  6D6F 7279 
00004E41  2064 6F65 7010          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00004E45  7320 6E6F 
00004E49  7420 6D61 
00004E4D  7463 6820 7011          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
00004E51  7365 6C65 
00004E55  6374 6564 
00004E59  2074 6573 7012          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
00004E5D  7420 6461 
00004E61  7461 2120 
00004E65  5B        
00004E66  4164 6472 7013          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00004E6A  6573 733A 
00004E6E  2025 3038 
00004E72  78        
00004E73  2045 7861 7014          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00004E77  6374 2044 
00004E7B  6174 613A 
00004E7F  2025      
00004E81  3032 5820 7015          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
00004E85  4578 7065 
00004E89  6374 6564 
00004E8D  20        
00004E8E  4461 7461 7016          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
00004E92  3A20 2530 
00004E96  3258 5D20 
00004E9A  4578      
00004E9C  6974 696E 7017          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
00004EA0  6720 6D65 
00004EA4  6D6F 7279 
00004EA8  2074 6573 7018          dc.b      32,116,101,115,116,46,46,46,13,10,0
00004EAC  742E 2E2E 
00004EB0  0D0A 00   
                    7019   @lab3_150:
00004EB4  0D0A 5041 7020          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
00004EB8  5353 3A20 
00004EBC  4D65 6D6F 
00004EC0  7279      
00004EC2  2056 616C 7021          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
00004EC6  6964 6174 
00004ECA  696F 6E20 
00004ECE  74        
00004ECF  6573 7420 7022          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
00004ED3  6861 7320 
00004ED7  7061 7373 
00004EDB  6564 0D0A 7023          dc.b      101,100,13,10,0
00004EDF  00        
                    7024   @lab3_151:
00004EE0  0D0A 5365 7025          dc.b      13,10,83,101,108,101,99,116,105,110,103,32,119
00004EE4  6C65 6374 
00004EE8  696E 6720 
00004EEC  77        
00004EED  6F72 6420 7026          dc.b      111,114,100,32,115,105,122,101,0
00004EF1  7369 7A65 
00004EF5  00        
                    7027   @lab3_152:
00004EF6  0D0A 3120 7028          dc.b      13,10,49,32,61,32,34,65,65,65,65,34,10,50,32
00004EFA  3D20 2241 
00004EFE  4141 4122 
00004F02  0A32 20   
00004F05  3D20 2242 7029          dc.b      61,32,34,66,65,66,65,34,10,51,32,61,32,34,67
00004F09  4142 4122 
00004F0D  0A33 203D 
00004F11  2022 43   
00004F14  4344 4422 7030          dc.b      67,68,68,34,10,52,32,61,32,34,68,68,68,68,34
00004F18  0A34 203D 
00004F1C  2022 4444 
00004F20  4444 22   
00004F23  0D0A 00   7031          dc.b      13,10,0
                    7032   @lab3_153:
00004F26  0D0A 456E 7033          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00004F2A  7465 7220 
00004F2E  7374 6172 
00004F32  74        
00004F33  2061 6464 7034          dc.b      32,97,100,100,114,101,115,115,32,119,105,116
00004F37  7265 7373 
00004F3B  2077 6974 
00004F3F  6869 6E20 7035          dc.b      104,105,110,32,48,120,48,57,48,48,48,48,48,48
00004F43  3078 3039 
00004F47  3030 3030 
00004F4B  3030      
00004F4D  202D 2030 7036          dc.b      32,45,32,48,120,48,57,55,70,70,70,70,70,58,32
00004F51  7830 3937 
00004F55  4646 4646 
00004F59  463A 20   
00004F5C  2845 6E73 7037          dc.b      40,69,110,115,117,114,101,32,116,111,32,101
00004F60  7572 6520 
00004F64  746F 2065 
00004F68  6E74 6572 7038          dc.b      110,116,101,114,32,97,110,32,101,118,101,110
00004F6C  2061 6E20 
00004F70  6576 656E 
00004F74  206E 756D 7039          dc.b      32,110,117,109,98,101,114,41,13,10,0
00004F78  6265 7229 
00004F7C  0D0A 00   
                    7040   @lab3_154:
00004F80  0D0A 4552 7041          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
00004F84  524F 523A 
00004F88  2054 6865 
00004F8C  2061      
00004F8E  6464 7265 7042          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
00004F92  7373 2079 
00004F96  6F75 2068 
00004F9A  6176 6520 7043          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
00004F9E  656E 7465 
00004FA2  7265 6420 
00004FA6  6973 206E 7044          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
00004FAA  6F74 2065 
00004FAE  7665 6E2E 
00004FB2  2054 7279 7045          dc.b      32,84,114,121,32,97,103,97,105,110,13,10,0
00004FB6  2061 6761 
00004FBA  696E 0D0A 
00004FBE  00        
                    7046   @lab3_155:
00004FC0  0D0A 456E 7047          dc.b      13,10,69,110,116,101,114,32,101,110,100,32,97
00004FC4  7465 7220 
00004FC8  656E 6420 
00004FCC  61        
00004FCD  6464 7265 7048          dc.b      100,100,114,101,115,115,32,119,105,116,104,105
00004FD1  7373 2077 
00004FD5  6974 6869 
00004FD9  6E20 3078 7049          dc.b      110,32,48,120,48,57,48,48,48,48,48,48,32,45
00004FDD  3039 3030 
00004FE1  3030 3030 
00004FE5  202D      
00004FE7  2030 7830 7050          dc.b      32,48,120,48,57,55,70,70,70,70,70,58,32,40,69
00004FEB  3937 4646 
00004FEF  4646 463A 
00004FF3  2028 45   
00004FF6  6E73 7572 7051          dc.b      110,115,117,114,101,32,116,111,32,101,110,116
00004FFA  6520 746F 
00004FFE  2065 6E74 
00005002  6572 2061 7052          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
00005006  6E20 6576 
0000500A  656E 206E 
0000500E  756D 6265 7053          dc.b      117,109,98,101,114,41,13,10,0
00005012  7229 0D0A 
00005016  00        
                    7054   @lab3_156:
00005018  0D0A 5752 7055          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,52,88,32
0000501C  4954 453A 
00005020  205B 2530 
00005024  3458 20   
00005027  746F 2025 7056          dc.b      116,111,32,37,48,56,120,93,0
0000502B  3038 785D 
0000502F  00        
                    7057   @lab3_157:
00005030  0D0A 4552 7058          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005034  524F 523A 
00005038  2044 6174 
0000503C  6120 77   
0000503F  6974 6869 7059          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005043  6E20 6D65 
00005047  6D6F 7279 
0000504B  2064 6F65 7060          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
0000504F  7320 6E6F 
00005053  7420 6D61 
00005057  7463 6820 7061          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
0000505B  7365 6C65 
0000505F  6374 6564 
00005063  2074 6573 7062          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
00005067  7420 6461 
0000506B  7461 2120 
0000506F  5B        
00005070  4164 6472 7063          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00005074  6573 733A 
00005078  2025 3038 
0000507C  78        
0000507D  2045 7861 7064          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00005081  6374 2044 
00005085  6174 613A 
00005089  2025      
0000508B  3032 5820 7065          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
0000508F  4578 7065 
00005093  6374 6564 
00005097  20        
00005098  4461 7461 7066          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
0000509C  3A20 2530 
000050A0  3258 5D20 
000050A4  4578      
000050A6  6974 696E 7067          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000050AA  6720 6D65 
000050AE  6D6F 7279 
000050B2  2074 6573 7068          dc.b      32,116,101,115,116,46,46,46,0
000050B6  742E 2E2E 
000050BA  00        
                    7069   @lab3_158:
000050BC  0D0A 5041 7070          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
000050C0  5353 3A20 
000050C4  4D65 6D6F 
000050C8  7279      
000050CA  2056 616C 7071          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000050CE  6964 6174 
000050D2  696F 6E20 
000050D6  74        
000050D7  6573 7420 7072          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
000050DB  6861 7320 
000050DF  7061 7373 
000050E3  6564 2E0D 7073          dc.b      101,100,46,13,10,0
000050E7  0A00      
                    7074   @lab3_159:
000050EA  0D0A 5365 7075          dc.b      13,10,83,101,108,101,99,116,105,110,103,32,108
000050EE  6C65 6374 
000050F2  696E 6720 
000050F6  6C        
000050F7  6F6E 6720 7076          dc.b      111,110,103,32,119,111,114,100,32,115,105,122
000050FB  776F 7264 
000050FF  2073 697A 
00005103  6500      7077          dc.b      101,0
                    7078   @lab3_160:
00005106  0D0A 5365 7079          dc.b      13,10,83,101,108,101,99,116,32,100,97,116,97
0000510A  6C65 6374 
0000510E  2064 6174 
00005112  61        
00005113  2076 616C 7080          dc.b      32,118,97,108,117,101,58,0
00005117  7565 3A00 
                    7081   @lab3_161:
0000511C  0D0A 3120 7082          dc.b      13,10,49,32,61,32,34,65,65,65,65,65,65,65,65
00005120  3D20 2241 
00005124  4141 4141 
00005128  4141 41   
0000512B  220A 3220 7083          dc.b      34,10,50,32,61,32,34,65,66,65,66,65,66,65,66
0000512F  3D20 2241 
00005133  4241 4241 
00005137  4241 42   
0000513A  220A 3320 7084          dc.b      34,10,51,32,61,32,34,67,67,67,67,68,68,68,68
0000513E  3D20 2243 
00005142  4343 4344 
00005146  4444 44   
00005149  220A 3420 7085          dc.b      34,10,52,32,61,32,34,65,65,66,66,67,67,68,68
0000514D  3D20 2241 
00005151  4142 4243 
00005155  4344 44   
00005158  220D 0A00 7086          dc.b      34,13,10,0
                    7087   @lab3_162:
0000515C  0D0A 5365 7088          dc.b      13,10,83,101,108,101,99,116,32,101,105,116,104
00005160  6C65 6374 
00005164  2065 6974 
00005168  68        
00005169  6572 2031 7089          dc.b      101,114,32,49,44,32,50,44,32,51,44,32,111,114
0000516D  2C20 322C 
00005171  2033 2C20 
00005175  6F72      
00005177  2034 2E0D 7090          dc.b      32,52,46,13,10,0
0000517B  0A00      
                    7091   @lab3_163:
0000517E  0D0A 4552 7092          dc.b      13,10,69,82,82,79,82,58,32,69,120,105,116,105
00005182  524F 523A 
00005186  2045 7869 
0000518A  7469      
0000518C  6E67 206D 7093          dc.b      110,103,32,109,101,109,111,114,121,32,116,101
00005190  656D 6F72 
00005194  7920 7465 
00005198  7374 2064 7094          dc.b      115,116,32,100,117,101,32,116,111,32,111,112
0000519C  7565 2074 
000051A0  6F20 6F70 
000051A4  7469 6F6E 7095          dc.b      116,105,111,110,32,109,101,109,111,114,121,32
000051A8  206D 656D 
000051AC  6F72 7920 
000051B0  636F 6D70 7096          dc.b      99,111,109,112,108,105,99,97,116,105,111,110
000051B4  6C69 6361 
000051B8  7469 6F6E 
000051BC  2E20 0D0A 7097          dc.b      46,32,13,10,0
000051C0  00        
                    7098   @lab3_164:
000051C2  0D0A 4552 7099          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
000051C6  524F 523A 
000051CA  2053 7461 
000051CE  7274      
000051D0  696E 6720 7100          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
000051D4  4164 6472 
000051D8  6573 7320 
000051DC  6973 206F 7101          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
000051E0  7574 7369 
000051E4  6465 206F 
000051E8  6620 3638 7102          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
000051EC  4B20 6D65 
000051F0  6D6F 7279 
000051F4  20        
000051F5  7261 6E67 7103          dc.b      114,97,110,103,101,46,32,80,108,101,97,115,101
000051F9  652E 2050 
000051FD  6C65 6173 
00005201  65        
00005202  2074 7279 7104          dc.b      32,116,114,121,32,97,103,97,105,110,32,97,110
00005206  2061 6761 
0000520A  696E 2061 
0000520E  6E        
0000520F  6420 656E 7105          dc.b      100,32,101,110,115,117,114,101,32,116,104,101
00005213  7375 7265 
00005217  2074 6865 
0000521B  2061 6464 7106          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
0000521F  7265 7373 
00005223  2069 7320 
00005227  7769 7468 7107          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
0000522B  6E20 3078 
0000522F  3039 3030 
00005233  30        
00005234  3030 3020 7108          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
00005238  2D20 3078 
0000523C  3039 3746 
00005240  4646 46   
00005243  460D 0A00 7109          dc.b      70,13,10,0
                    7110   @lab3_165:
00005248  0D0A 4552 7111          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
0000524C  524F 523A 
00005250  2045 6E64 
00005254  2041      
00005256  6464 7265 7112          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
0000525A  7373 2069 
0000525E  7320 6F75 
00005262  7473 6964 7113          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
00005266  6520 6F66 
0000526A  2036 384B 
0000526E  20        
0000526F  6D65 6D6F 7114          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
00005273  7279 2072 
00005277  616E 6765 
0000527B  2E20 506C 7115          dc.b      46,32,80,108,101,97,115,101,32,116,114,121,32
0000527F  6561 7365 
00005283  2074 7279 
00005287  20        
00005288  6167 6169 7116          dc.b      97,103,97,105,110,32,97,110,100,32,101,110,115
0000528C  6E20 616E 
00005290  6420 656E 
00005294  73        
00005295  7572 6520 7117          dc.b      117,114,101,32,116,104,101,32,97,100,100,114
00005299  7468 6520 
0000529D  6164 6472 
000052A1  6573 7320 7118          dc.b      101,115,115,32,105,115,32,119,105,116,104,110
000052A5  6973 2077 
000052A9  6974 686E 
000052AD  2030 7830 7119          dc.b      32,48,120,48,57,48,48,48,48,48,48,32,45,32,48
000052B1  3930 3030 
000052B5  3030 3020 
000052B9  2D20 30   
000052BC  7830 3937 7120          dc.b      120,48,57,55,70,70,70,70,70,13,10,0
000052C0  4646 4646 
000052C4  460D 0A00 
                    7121   @lab3_166:
000052C8  0D0A 4552 7122          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
000052CC  524F 523A 
000052D0  2054 6865 
000052D4  2061      
000052D6  6464 7265 7123          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
000052DA  7373 2079 
000052DE  6F75 2068 
000052E2  6176 6520 7124          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
000052E6  656E 7465 
000052EA  7265 6420 
000052EE  6973 206E 7125          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
000052F2  6F74 2065 
000052F6  7665 6E2E 
000052FA  2050 6C65 7126          dc.b      32,80,108,101,97,115,101,32,116,114,121,32,97
000052FE  6173 6520 
00005302  7472 7920 
00005306  61        
00005307  6761 696E 7127          dc.b      103,97,105,110,13,10,0
0000530B  0D0A 00   
                    7128   @lab3_167:
0000530E  0D0A 5741 7129          dc.b      13,10,87,65,82,78,73,78,71,58,32,77,101,109
00005312  524E 494E 
00005316  473A 204D 
0000531A  656D      
0000531C  6F72 7920 7130          dc.b      111,114,121,32,119,105,108,108,32,99,111,110
00005320  7769 6C6C 
00005324  2063 6F6E 
00005328  7461 696E 7131          dc.b      116,97,105,110,32,116,114,117,110,99,97,116
0000532C  2074 7275 
00005330  6E63 6174 
00005334  6564 2064 7132          dc.b      101,100,32,100,97,116,97,0
00005338  6174 6100 
                    7133   @lab3_168:
0000533C  0D0A 5752 7134          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,56,88,32
00005340  4954 453A 
00005344  205B 2530 
00005348  3858 20   
0000534B  746F 2025 7135          dc.b      116,111,32,37,48,56,120,93,0
0000534F  3038 785D 
00005353  00        
                    7136   @lab3_169:
00005354  0D0A 4552 7137          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005358  524F 523A 
0000535C  2044 6174 
00005360  6120 77   
00005363  6974 6869 7138          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
00005367  6E20 6D65 
0000536B  6D6F 7279 
0000536F  2064 6F65 7139          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00005373  7320 6E6F 
00005377  7420 6D61 
0000537B  7463 6820 7140          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
0000537F  7365 6C65 
00005383  6374 6564 
00005387  2074 6573 7141          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
0000538B  7420 6461 
0000538F  7461 2120 
00005393  5B        
00005394  4164 6472 7142          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00005398  6573 733A 
0000539C  2025 3038 
000053A0  78        
000053A1  2045 7861 7143          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
000053A5  6374 2044 
000053A9  6174 613A 
000053AD  2025      
000053AF  3038 5820 7144          dc.b      48,56,88,32,69,120,112,101,99,116,101,100,32
000053B3  4578 7065 
000053B7  6374 6564 
000053BB  20        
000053BC  4461 7461 7145          dc.b      68,97,116,97,58,32,37,48,56,88,93,32,69,120
000053C0  3A20 2530 
000053C4  3858 5D20 
000053C8  4578      
000053CA  6974 696E 7146          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000053CE  6720 6D65 
000053D2  6D6F 7279 
000053D6  2074 6573 7147          dc.b      32,116,101,115,116,46,46,46,13,10,0
000053DA  742E 2E2E 
000053DE  0D0A 00   
                    7148   @lab3_170:
000053E2  0D0A 5041 7149          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
000053E6  5353 3A20 
000053EA  4D65 6D6F 
000053EE  7279      
000053F0  2056 616C 7150          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000053F4  6964 6174 
000053F8  696F 6E20 
000053FC  74        
000053FD  6573 7420 7151          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
00005401  6861 7320 
00005405  7061 7373 
00005409  6564 210D 7152          dc.b      101,100,33,13,10,0
0000540D  0A00      
                    7153   @lab3_171:
00005410  0D0A 596F 7154          dc.b      13,10,89,111,117,32,102,97,105,108,101,100,32
00005414  7520 6661 
00005418  696C 6564 
0000541C  20        
0000541D  746F 2073 7155          dc.b      116,111,32,115,101,108,101,99,116,32,97,32,100
00005421  656C 6563 
00005425  7420 6120 
00005429  64        
0000542A  6174 6120 7156          dc.b      97,116,97,32,116,121,112,101,32,116,111,32,117
0000542E  7479 7065 
00005432  2074 6F20 
00005436  75        
00005437  7365 2120 7157          dc.b      115,101,33,32,67,108,105,99,107,32,111,112,101
0000543B  436C 6963 
0000543F  6B20 6F70 
00005443  65        
00005444  6E20 6D65 7158          dc.b      110,32,109,101,109,111,114,121,32,116,101,115
00005448  6D6F 7279 
0000544C  2074 6573 
00005450  7420 6167 7159          dc.b      116,32,97,103,97,105,110,32,116,111,32,116,114
00005454  6169 6E20 
00005458  746F 2074 
0000545C  72        
0000545D  7920 6167 7160          dc.b      121,32,97,103,97,105,110,46,13,10,0
00005461  6169 6E2E 
00005465  0D0A 00   
                    7161   @lab3_172:
00005468  4445 312D 7162          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000546C  3638 6B20 
00005470  4275 6720 
00005474  5631      
00005476  2E37 3700 7163          dc.b      46,55,55,0
                    7164   @lab3_173:
0000547A  436F 7079 7165          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000547E  7269 6768 
00005482  7420 2843 
00005486  2920 504A 7166          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000548A  2044 6176 
0000548E  6965 7320 
00005492  3230      
00005494  3136 00   7167          dc.b      49,54,0
                    7168   @lab3_174:
00005498  0D0A 0D0A 7169          dc.b      13,10,13,10,75,101,110,110,121,32,87,97,107
0000549C  4B65 6E6E 
000054A0  7920 5761 
000054A4  6B        
000054A5  6162 6120 7170          dc.b      97,98,97,32,45,32,57,49,51,55,56,51,49,53,13
000054A9  2D20 3931 
000054AD  3337 3833 
000054B1  3135 0D   
000054B4  0A4A 6163 7171          dc.b      10,74,97,99,111,98,32,89,97,110,103,32,45,32
000054B8  6F62 2059 
000054BC  616E 6720 
000054C0  2D20      
000054C2  3234 3934 7172          dc.b      50,52,57,52,48,56,51,53,0
000054C6  3038 3335 
000054CA  00        
                    7173   @lab3_175:
000054CC  0D0A 5275 7174          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000054D0  6E6E 696E 
000054D4  672E 2E2E 
000054D8  2E        
000054D9  2E00      7175          dc.b      46,0
                    7176   @lab3_176:
000054DC  5275 6E6E 7177          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000054E0  696E 672E 
000054E4  2E2E 2E2E 
000054E8  00        
                    7178   @lab3_177:
000054EA  4279 3A20 7179          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000054EE  504A 2044 
000054F2  6176 6965 
000054F6  73        
000054F7  00        7180          dc.b      0
                    7181   @lab3_178:
000054F8  0D0A 2573 7182          dc.b      13,10,37,115,0
000054FC  00        
                    7183          section   data
000054FE            7184                   align
          0000 54FE 7185   DataStart       equ       *
                    7186   
                    7187   *********************************************************************************************************
                    7188   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7189   * to ram as part of the CStart routine in this file
                    7190   *********************************************************************************************************
                    7191   
                    7192   MemoryTest_test_data_byte_list:
000054FE  AAAB CCCD 7193          dc.b      170,171,204,205
                    7194   MemoryTest_test_data_word_list:
00005502  0000 AAAA 7195          dc.l      43690,47802,52445,56797
00005506  0000 BABA 
0000550A  0000 CCDD 
0000550E  0000 DDDD 
                    7196   MemoryTest_test_data_long_word_list:
00005512  AAAA AAAA 7197          dc.l      -1431655766,-1414812757,-858989091,-1430532899
00005516  ABAB ABAB 
0000551A  CCCC DDDD 
0000551E  AABB CCDD 
                    7198   @itoa_1:
00005522  2D32 3134 7199          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005526  3734 3833 
0000552A  3634 3800 
                    7200          section   bss
0000552E            7201                   align
          0000 552E 7202   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7203   
                    7204   *********************************************************************************************************
                    7205   * Section for Uninitialised Data held in ROM as constants
                    7206   *********************************************************************************************************
                    7207   
0B000000            7208                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0030 7209   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7210   
                    7211   
0B000000            7212   bss             org       bss
                    7213   
                    7214   *********************************************************************************************************
                    7215   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7216   * install the exception handler using the C function InstallExceptionHandler()
                    7217   *********************************************************************************************************
                    7218   
                    7219   
                    7220   
0B000000            7221   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7222   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7223   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7224   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7225   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7226   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7227   VCheck           ds.l    1      ditto
0B00001C            7228   VTrapV           ds.l    1      ditto
0B000020            7229   VPrivilege       ds.l    1      ditto
0B000024            7230   VTrace           ds.l    1
0B000028            7231   VLine1010emul    ds.l    1
0B00002C            7232   VLine1111emul    ds.l    1
0B000030            7233   VUnassigned1     ds.l    1
0B000034            7234   VUnassigned2     ds.l    1
0B000038            7235   VUnassigned3     ds.l    1
0B00003C            7236   VUninit_IRQ      ds.l    1
0B000040            7237   VUnassigned4     ds.l    1
0B000044            7238   VUnassigned5     ds.l    1
0B000048            7239   VUnassigned6     ds.l    1
0B00004C            7240   VUnassigned7     ds.l    1
0B000050            7241   VUnassigned8     ds.l    1
0B000054            7242   VUnassigned9     ds.l    1
0B000058            7243   VUnassigned10    ds.l    1
0B00005C            7244   VUnassigned11    ds.l    1
0B000060            7245   VSpuriousIRQ     ds.l    1
                    7246   
                    7247   * Interrupt handlers Vector 25-31
0B000064            7248   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7249   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7250   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7251   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7252   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7253   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7254   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7255   
                    7256   * Trap Handler vectors 32-47
0B000080            7257   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7258   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7259   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7260   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7261   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7262   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7263   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7264   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7265   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7266   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7267   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7268   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7269   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7270   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7271   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7272   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7273   
                    7274   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7275   
                    7276   ***********************************************************************************************************
                    7277   * Other Variables
                    7278   ***********************************************************************************************************
                    7279   *__DebugA5       ds.l    1
                    7280   *__UserA5        ds.l    1
                    7281   
                    7282   ***********************************************************************************************************
0B0000C0            7283   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7284   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7285   __heap:         ds.l    0       ; pointers for malloc functions
                    7286   
                    7287   *__himem:       ds.l    himem            ; highest memory location + 1
                    7288   *__stklen:      ds.l    stklen           ; default stack size
                    7289   
                    7290   *********************************************************************************************************
                    7291   * Section for Heap
                    7292   *********************************************************************************************************
                    7293   
                    7294   _i:
0B0000C4            7295          ds.b      4
                    7296   _x:
0B0000C8            7297          ds.b      4
                    7298   _y:
0B0000CC            7299          ds.b      4
                    7300   _z:
0B0000D0            7301          ds.b      4
                    7302   _PortA_Count:
0B0000D4            7303          ds.b      4
                    7304   _Trace:
0B0000D8            7305          ds.b      4
                    7306   _GoFlag:
0B0000DC            7307          ds.b      4
                    7308   _Echo:
0B0000E0            7309          ds.b      4
                    7310   _d0:
0B0000E4            7311          ds.b      4
                    7312   _d1:
0B0000E8            7313          ds.b      4
                    7314   _d2:
0B0000EC            7315          ds.b      4
                    7316   _d3:
0B0000F0            7317          ds.b      4
                    7318   _d4:
0B0000F4            7319          ds.b      4
                    7320   _d5:
0B0000F8            7321          ds.b      4
                    7322   _d6:
0B0000FC            7323          ds.b      4
                    7324   _d7:
0B000100            7325          ds.b      4
                    7326   _a0:
0B000104            7327          ds.b      4
                    7328   _a1:
0B000108            7329          ds.b      4
                    7330   _a2:
0B00010C            7331          ds.b      4
                    7332   _a3:
0B000110            7333          ds.b      4
                    7334   _a4:
0B000114            7335          ds.b      4
                    7336   _a5:
0B000118            7337          ds.b      4
                    7338   _a6:
0B00011C            7339          ds.b      4
                    7340   _PC:
0B000120            7341          ds.b      4
                    7342   _SSP:
0B000124            7343          ds.b      4
                    7344   _USP:
0B000128            7345          ds.b      4
                    7346   _SR:
0B00012C            7347          ds.b      2
                    7348   _BreakPointAddress:
0B00012E            7349          ds.b      32
                    7350   _BreakPointInstruction:
0B00014E            7351          ds.b      16
                    7352   _BreakPointSetOrCleared:
0B00015E            7353          ds.b      32
                    7354   _InstructionSize:
0B00017E            7355          ds.b      4
                    7356   _WatchPointAddress:
0B000182            7357          ds.b      32
                    7358   _WatchPointSetOrCleared:
0B0001A2            7359          ds.b      32
                    7360   _WatchPointString:
0B0001C2            7361          ds.b      800
                    7362   _TempString:
0B0004E2            7363          ds.b      100
                    7364          section   heap
0B000546            7365                   align
          0B00 0546 7366   bssEnd          equ *                   end of storage space for unitialised variables
                    7367   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7368   heap   equ       *
0B000546            7369                    align
          0000 0000

Assembly errors: 0
